.\" Copyright (C) 1994, 1995 by Daniel Quinlan (quinlan@yggdrasil.com)
.\" and Copyright (C) 2002-2008 Michael Kerrisk <mtk.manpages@gmail.com>
.\" with networking additions from Alan Cox (A.Cox@swansea.ac.uk)
.\" and scsi additions from Michael Neuffer (neuffer@mail.uni-mainz.de)
.\" and sysctl additions from Andries Brouwer (aeb@cwi.nl)
.\" and System V IPC (as well as various other) additions from
.\" Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" Modified 1995-05-17 by faith@cs.unc.edu
.\" Minor changes by aeb and Marty Leisner (leisner@sdsp.mc.xerox.com).
.\" Modified 1996-04-13, 1996-07-22 by aeb@cwi.nl
.\" Modified 2001-12-16 by rwhron@earthlink.net
.\" Modified 2002-07-13 by jbelton@shaw.ca
.\" Modified 2002-07-22, 2003-05-27, 2004-04-06, 2004-05-25
.\"    by Michael Kerrisk <mtk.manpages@gmail.com>
.\" 2004-11-17, mtk -- updated notes on /proc/loadavg
.\" 2004-12-01, mtk, rtsig-max and rtsig-nr went away in 2.6.8
.\" 2004-12-14, mtk, updated 'statm', and fixed error in order of list
.\" 2005-05-12, mtk, updated 'stat'
.\" 2005-07-13, mtk, added /proc/sys/fs/mqueue/*
.\" 2005-09-16, mtk, Added /proc/sys/fs/suid_dumpable
.\" 2005-09-19, mtk, added /proc/zoneinfo
.\" 2005-03-01, mtk, moved /proc/sys/fs/mqueue/* material to mq_overview.7.
.\" 2008-06-05, mtk, Added /proc/[pid]/oom_score, /proc/[pid]/oom_adj,
.\"     /proc/[pid]/limits, /proc/[pid]/mountinfo, /proc/[pid]/mountstats,
.\"     and /proc/[pid]/fdinfo/*.
.\" 2008-06-19, mtk, Documented /proc/[pid]/status.
.\" 2008-07-15, mtk, added /proc/config.gz
.\"
.\" FIXME 2.6.13 seems to have /proc/vmcore implemented
.\" in the source code, but there is no option available under
.\" 'make xconfig'; eventually this should be fixed, and then info
.\" from the patch-2.6.13 and change log could be used to write an
.\" entry in this man page.
.\" Needs CONFIG_VMCORE
.\"
.\" FIXME cross check against Documentation/filesystems/proc.txt
.\" to see what information could be imported from that file
.\" into this file.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\" This file is distributed under the same license as original manpage
.\" Copyright of the original manpage:
.\" Copyright © 1994, 1995 Daniel Quinlan, 2002-2008 Michael Kerrisk /et al/ (GPL-2+)
.\" Copyright © of Polish translation:
.\" Przemek Borys (PTM) <pborys@p-soft.silesia.linux.org.pl>, 1998.
.\" Robert Luberda <robert@debian.org>, 2006, 2012.
.\" Michał Kułach <michal.kulach@gmail.com>, 2012.
.TH PROC 5 08\-02\-2012 Linux "Podręcznik programisty Linuksa"
.SH NAZWA
proc \- pseudosystem plików z informacjami o procesach
.SH OPIS
\fIproc\fP jest pseudosystemem plików, który służy jako lepszy interfejs do
struktur jądra. Zazwyczaj jest montowany w katalogu \fI/proc\fP. Jest on w
większości przeznaczony tylko do odczytu, lecz niektóre pliki umożliwiają
modyfikacje zmiennych jądra.
.LP
Następujący szkic ukazuje w szybki sposób hierarchię \fI/proc\fP.
.PD 1
.TP 
\fI/proc/[pid]\fP
.\" FIXME Describe /proc/[pid]/attr and
.\"       /proc/[pid]/task/[tid]/attr
.\"	  This is a directory
.\"       Added in ???
.\"	  CONFIG_SECURITY
.\"
Każdemu działającemu procesowi odpowiada katalog o numerycznej nazwie; nazwą
tą jest identyfikator procesu. Każdy z tych katalogów zawiera następujące
pseudopliki i podkatalogi:
.TP 
\fI/proc/[pid]/auxv\fP (od wersji jądra 2.6.0\-test7)
.\" FIXME Describe /proc/[pid]/cgroup and
.\"       /proc/[pid]/task/[tid]/cgroup
.\" 	  Info in Documentation/cgroups.txt
.\"       Added in 2.6.24
.\"	  CONFIG_CGROUPS
.\"
.\" FIXME Describe /proc/[pid]/clear_refs
.\"       Added in 2.6.22
.\"       "Clears page referenced bits shown in smaps output"
.\"       write-only
.\"       CONFIG_PROC_PAGE_MONITOR
Zawartość informacji ELF przekazanej do procesu podczas
uruchomienia. Formatem jest jeden identyfikator w postaci \fIunsigned long\fP
plus jedna wartość \fIunsigned long\fP dla każdego wpisu. Ostatni wpis zawiera
dwa zera.
.TP 
\fI/proc/[pid]/cmdline\fP
.\" In 2.3.26, this also used to be true if the process was swapped out.
Zawiera pełną linię polecenia wydanego przy uruchamianiu procesu, chyba że
jest to proces\-duch (zombie). Wówczas plik będzie pusty, tzn. odczyt tego
pliku zwróci zawsze 0 znaków. Argumenty linii poleceń występują w tym pliku
rozdzielone znakami NUL (\(aq\e0\(aq), z dodatkowym znakiem NUL po ostatnim
łańcuchu.
.TP 
\fI/proc/[pid]/coredump_filter\fP (od wersji jądra 2.6.23)
Patrz \fBcore\fP(5).
.TP 
\fI/proc/[pid]/cpuset\fP (od wersji jądra 2.6.12)
.\" and/proc/[pid]/task/[tid]/cpuset
Patrz \fBcpuset\fP(7).
.TP 
\fI/proc/[pid]/cwd\fP
Jest dowiązaniem do bieżącego katalogu roboczego procesu. Aby dowiedzieć
się, jaki jest katalog roboczy procesu, na przykład o identyfikatorze 20,
można wydać następujące polecenie:

.in +4n
.nf
$\fB cd /proc/20/cwd; /bin/pwd\fP
.fi
.in

Należy zauważyć, że polecenie \fIpwd\fP jest często wbudowanym poleceniem
powłoki i może nie działać w tym kontekście w sposób właściwy. W powłoce
\fBbash\fP(1) można użyć \fIpwd\ \-P\fP.

.\" The following was still true as at kernel 2.6.13
W procesie wielowątkowym zawartość tego linku symbolicznego nie jest
dostępna, jeżeli wątek główny już się zakończył (zazwyczaj przez wywołanie
\fBpthread_exit\fP(3)).
.TP 
\fI/proc/[pid]/environ\fP
Plik ten zawiera środowisko procesu. Wpisy są oddzielone znakami NULL
("\e0"), mogą także wystąpić znaki NULL na końcu. Dlatego, aby wypisać
zmienne środowiskowe procesu 1, należy wykonać:
.in +4n
.nf

$\fB (cat /proc/1/environ; echo) | tr \(aq\e000\(aq \(aq\en\(aq\fP
.fi
.in
.TP 
\fI/proc/[pid]/exe\fP
.\" The following was still true as at kernel 2.6.13
W Linuksie 2.2 i wersjach późniejszych plik ten jest dowiązaniem
symbolicznym zawierającym rzeczywistą nazwę ścieżki działającego
polecenia. Dowiązaniem symbolicznym można się normalnie posługiwać \- próba
jego otwarcia otworzy plik programu. Można nawet wydać polecenie
\fI/proc/[pid]/exe\fP, aby uruchomić kolejną kopię tego samego procesu co
[pid].W procesie wielowątkowym zawartość tego linku symbolicznego nie jest
dostępna, jeżeli główny wątek już się zakończył (wywołując zapewne
\fBpthread_exit\fP(3)).

W Linuksie 2.0 i wcześniejszych wersjach, \fI/proc/[pid]/exe\fP jest
wskaźnikiem do uruchomionego pliku binarnego i ma postać dowiązania
symbolicznego. Wywołanie \fBreadlink\fP(2) na tym pliku zwróci w Linuksie 2.0
łańcuch znakowy postaci:

    [urządzenie]:i\-węzeł

Na przykład, [0301]:1502 będzie 1502 i\-węzłem na urządzeniu o numerze
głównym 03 (IDE, MFM itp.) i pobocznym 01 (pierwsza partycja pierwszego
dysku).

Do zlokalizowania pliku, można posłużyć się poleceniem \fBfind\fP(1) z opcją
\fI\-inum\fP.
.TP 
\fI/proc/[pid]/fd\fP
Jest to podkatalog zawierający po jednym wpisie dla każdego otwartego przez
proces pliku; nazwą tego wpisu jest deskryptor pliku i jest on dowiązaniem
symbolicznym do rzeczywistego pliku. Dlatego 0 jest standardowym wejściem, 1
jest standardowym wyjściem, 2 jest standardową diagnostyką, itd.

.\" The following was still true as at kernel 2.6.13
W procesie wielowątkowym zawartość tego katalogu nie jest dostępna, jeżeli
wątek główny już się zakończył (zazwyczaj przez wywołanie
\fBpthread_exit\fP(3)).

Programy, które przyjmują nazwę pliku jako argument wiersza polecenia, lecz
nie czytają standardowego wejścia, jeśli nie podano argumentu albo które
zapisują do pliku nazwanego argumentem wiersza polecenia, lecz nie wysyłają
danych wyjściowych na standardowe wyjście, można zmusić do używania
standardowego wejścia lub wyjścia wykorzystując \fI/proc/[pid]/fd\fP. Na
przykład, zakładając, że opcja \fI\-i\fP określa plik wejściowy, a opcja \fI\-o\fP
określa plik wyjściowy:
.in +4n
.nf

$\fB foobar \-i /proc/self/fd/0 \-o /proc/self/fd/1 ...\fP
.fi
.in

.\" The following is not true in my tests (MTK):
.\" Note that this will not work for
.\" programs that seek on their files, as the files in the fd directory
.\" are not seekable.
co daje działający filtr.

\fI/proc/self/fd/N\fP jest w przybliżeniu tym samym co \fI/dev/fd/N\fP na
niektórych systemach uniksowych i uniksopodobnych. Większość linuksowych
skryptów MAKEDEV tworzy dowiązania symboliczne \fI/dev/fd\fP do
\fI/proc/self/fd\fP.

Większość systemów udostępnia dowiązania symboliczne \fI/dev/stdin\fP,
\fI/dev/stdout\fP i \fIdev/stderr\fP, które linkują odpowiednio do plików \fI0\fP,
\fI1\fP i \fI2\fP w \fI/proc/self/fd\fP. Powyższe, przykładowe polecenie może być
więc zapisane również tak:
.in +4n
.nf

$\fB foobar \-i /dev/stdin \-o /dev/stdout ...\fP
.fi
.in
.\" FIXME Describe /proc/[pid]/loginuid
.\"       Added in 2.6.11; updating requires CAP_AUDIT_CONTROL
.\"       CONFIG_AUDITSYSCALL
.TP 
\fI/proc/[pid]/fdinfo/\fP (od wersji jądra 2.6.22)
Jest to podkatalog zawierający po jednym wpisie dla każdego pliku otwartego
przez proces; nazwą tego wpisu jest deskryptor pliku. Zawartość pliku można
odczytać, aby uzyskać informacje o odpowiadającym mu deskryptorze pliku, na
przykład:
.in +4n
.nf

$\fB cat /proc/12015/fdinfo/4\fP
pos:    1000
flags:  01002002
.fi
.in

Pole \fIpos\fP jest liczbą dziesiętną oznaczającą bieżące przesunięcie w
pliku. Pole \fIflags\fP jest liczbą ósemkową zawierającą prawa dostępu do pliku
i znaczniki stanu (patrz \fBopen\fP(2)).

.\" FIXME document /proc/[pid]/io
.\" .TP
.\" .IR /proc/[pid]/io " (since kernel 2.6.20)"
Tylko właściciel procesu może odczytywać pliki z tego katalogu.
.TP 
\fI/proc/[pid]/limits\fP (od wersji jądra 2.6.24)
Plik zawiera informacje o miękkim limicie, twardym limicie i jednostkach, w
których mierzone są limity zasobów procesów (patrz \fBgetrlimit\fP(2)). Plik
jest zabezpieczony, aby pozwolić na odczyt jedynie przez realny
identyfikator UID procesu.
.TP 
\fI/proc/[pid]/maps\fP
Plik zawierający aktualnie zmapowane obszary pamięci wraz z prawami dostępu
do nich.

Format pliku jest następujący:

.nf
\f(CWaddress           perms offset  dev   inode   pathname
08048000\-08056000 r\-xp 00000000 03:0c 64593   /usr/sbin/gpm
08056000\-08058000 rw\-p 0000d000 03:0c 64593   /usr/sbin/gpm
08058000\-0805b000 rwxp 00000000 00:00 0
40000000\-40013000 r\-xp 00000000 03:0c 4165    /lib/ld\-2.2.4.so
40013000\-40015000 rw\-p 00012000 03:0c 4165    /lib/ld\-2.2.4.so
4001f000\-40135000 r\-xp 00000000 03:0c 45494   /lib/libc\-2.2.4.so
40135000\-4013e000 rw\-p 00115000 03:0c 45494   /lib/libc\-2.2.4.so
4013e000\-40142000 rw\-p 00000000 00:00 0
bffff000\-c0000000 rwxp 00000000 00:00 0\fP
.fi

gdzie "address" jest przestrzenią adresową procesu, który ją zajmuje, a
"perms" jest zbiorem uprawnień:

.nf
.in +5
r = odczyt
w = zapis
x = wykonywanie
s = wspólne
p = prywatne (kopiowane przy zapisie)
.fi
.in

"offset" jest przesunięciem w pliku lub czymkolwiek innym, "dev" zawiera
numery (główny:poboczny) urządzenia, a "inode" jest i\-węzłem na tym
urządzeniu. 0 wskazuje, że nie istnieje i\-węzeł związany z tym obszarem
pamięci, jak to na przykład ma miejsce w przypadku segmentu BSS
(niezainicjowanych danych).

W Linuksie 2.0 nie ma pola pathname podającego nazwę ścieżki.
.TP 
\fI/proc/[pid]/mem\fP
Za pośrednictwem tego pliku można, korzystając z \fBopen\fP(2), \fBread\fP(2) i
\fBlseek\fP(2), uzyskać dostęp do stron pamięci procesu.
.TP 
\fI/proc/[pid]/mountinfo\fP (od wersji jądra 2.6.26)
.\" This info adapted from Documentation/filesystems/proc.txt
Plik zawiera informacje o punktach montowania. Składa się z linii w postaci:
.nf

\f(CW36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 \- ext3 /dev/root rw,errors=continue
(1)(2)(3)   (4)   (5)      (6)      (7)   (8) (9)   (10)         (11)\fP
.fi
.IP
Liczby w nawiasach są etykietami poniższych opisów:
.RS 7
.TP  5
(1)
ID montowania: unikatowy identyfikator montowania (może zostać użyty
ponownie po wykonaniu \fBumount\fP(2)).
.TP 
(2)
ID rodzica: identyfikator rodzica (lub siebie samego, jeśli montowanie
znajduje się na szczycie drzewa montowań).
.TP 
(3)
główny:poboczny: wartość pola \fIst_dev\fP (patrz \fBstat\fP(2)) dla plików w
systemie plików.
.TP 
(4)
korzeń: korzeń (root) montowania w systemie plików.
.TP 
(5)
punkt montowania: punkt montowania w odniesieniu do korzenia procesów.
.TP 
(6)
opcje montowania: opcje montowania dla każdego montowania.
.TP 
(7)
pola opcjonalne: zero lub więcej pól w postaci "znacznik[:wartość]"
.TP 
(8)
separator: oznacza koniec pól opcjonalnych.
.TP 
(9)
typ systemu plików: nazwa systemu plików w postaci "typ[.podtyp]".
.TP 
(10)
źródło montowania: informacja zależna od systemu plików lub "none".
.TP 
(11)
super opcje: opcje dla superbloku.
.RE
.IP
Parsery powinny ignorować wszystkie nierozpoznane pola opcjonalne. Obecnie
są to:
.RS 12
.TP  18
shared:X
montowanie jest współdzielone w grupie węzłów X
.TP 
master:X
montowanie jest podrzędne w stosunku do grupy węzłów X
.TP 
propagate_from:X
montowanie jest podrzędne i podlega propagacji z grupy węzłów X (*)
.TP 
unbindable
montowanie jest niepodpinalne
.RE
.IP
(*) X jest najbliższą dominującą grupą węzłów pod korzeniem procesów. Jeśli
X jest bezpośrednio nadrzędne w stosunku do montowania, lub jeśli nie
istnieje dominująca grupa węzłów pod tym samym korzeniem, to obecne jest
wyłącznie pole "master:X", bez pola "propagate_from:X".

Aby dowiedzieć się więcej o propagacji montowań, proszę zapoznać się z
\fIDocumentation/filesystems/sharedsubtree.txt\fP w drzewie źródeł jądra.
.TP 
\fI/proc/[pid]/mounts\fP (od wersji Linuksa 2.4.19)
Jest to lista wszystkich systemów plików obecnie zamontowanych w przestrzeni
montowań procesów. Format tego pliku jest udokumentowany w \fBfstab\fP(5). Od
wersji 2.6.15 jądra Linuksa, ten plik może być użyty w wywołaniu funkcji
poll(): po otwarciu tego pliku do odczytu, zmiana w nim (np. montowanie lub
odmontowanie systemu plików) powoduje, że \fBselect\fP(2) oznaczy deskryptor
jako możliwy do odczytu, a \fBpoll\fP(2) i \fBepoll_wait\fP(2) zaznaczą, że w
pliku wystąpił błąd.
.TP 
\fI/proc/[pid]/mountstats\fP (Od wersji Linuksa 2.6.17)
Plik eksportuje informacje (statystyki, informacje konfiguracyjne) o
punktach montowań w przestrzeni nazwy procesów. Wiersze pliku mają
następującą postać:
.nf

device /dev/sda7 mounted on /home with fstype ext3 [statistics]
(       1      )            ( 2 )             (3 ) (4)
.fi
.IP
Pola w każdym wierszu są następujące:
.RS 7
.TP  5
(1)
Nazwa zamontowanego urządzenia (lub "nodevice", jeśli nie ma odpowiadającego
urządzenia).
.TP 
(2)
Punkt montowania w drzewie systemu plików.
.TP 
(3)
Typ systemu plików.
.TP 
(4)
Opcjonalne statystyki i informacje konfiguracyjne. Obecnie (Linux 2.6.26)
tylko system plików NFS eksportuje opcje za pomocą tego pola.
.RE
.IP
Plik jest odczytywalny wyłącznie dla właściciela procesu.
.TP 
\fI/proc/[pid]/ns/\fP (od Linuksa 3.0)
.\" See commit 6b4e306aa3dc94a0545eb9279475b1ab6209a31f
Jest to podkatalog zawierający po jednym wpisie dla każdej przestrzeni nazw,
która obsługuje manipulację za pomocą \fBsetns\fP(2). Aby dowiedzieć się więcej
o przestrzeniach nazw, proszę zapoznać się z \fBclone\fP(2).
.TP 
\fI/proc/[pid]/ns/ipc\fP (od Linuksa 3.0)
Montowanie używając podpięcia wykonane na tym pliku (patrz \fBmount\fP(2)) do
jakiegoś innego miejsca w systemie plików utrzymuje przestrzeń nazwy IPC
procesu określoną przez \fIpid\fP nawet, gdy zakończą się wszystkie procesy
znajdujące się obecnie w przestrzeni nazwy.

Otwarcie tego pliku przywróci obsługę pliku dotyczącą przestrzeni nazwy IPC
procesu, określonego przez \fIpid\fP. Tak długo jak jego deskryptor pliku
pozostanie otwarty, przestrzeń nazwy IPC pozostanie aktywna, nawet jeśli
wszystkie procesy w przestrzeni nazwy zakończą się. Deskryptor pliku może
być podany do \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/ns/net\fP (od Linuksa 3.0)
Montowanie używając podpięcia wykonane na tym pliku (patrz \fBmount\fP(2)) do
jakiegoś innego miejsca w systemie plików utrzymuje sieciową przestrzeń
nazwy procesu określoną przez \fIpid\fP nawet, gdy zakończą się wszystkie
procesy znajdujące się w przestrzeni nazwy.

Otwarcie tego pliku przywróci obsługę pliku dotyczącą sieciowej przestrzeni
nazwy procesu, określonego przez \fIpid\fP. Tak długo jak jego deskryptor pliku
pozostanie otwarty, sieciowa przestrzeń nazwy pozostanie aktywna, nawet
jeśli wszystkie procesy w przestrzeni nazwy zakończą się. Deskryptor pliku
może być podany do \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/ns/uts\fP (od Linuksa 3.0)
Montowanie używając podpięcia wykonane na tym pliku (patrz \fBmount\fP(2)) do
jakiegoś innego miejsca w systemie plików utrzymuje przestrzeń nazwy UTS
procesu określoną przez \fIpid\fP nawet, gdy zakończą się wszystkie procesy
znajdujące się obecnie w przestrzeni nazwy.

Otwarcie tego pliku przywróci obsługę pliku dotyczącą przestrzeni nazwy UTS
procesu, określonego przez \fIpid\fP. Tak długo jak jego deskryptor pliku
pozostanie otwarty, przestrzeń nazwy UTS pozostanie aktywna, nawet jeśli
wszystkie procesy w przestrzeni nazwy zakończą się. Deskryptor pliku może
być podany do \fBsetns\fP(2).
.TP 
\fI/proc/[pid]/numa_maps\fP (od Linuksa 2.6.14)
Patrz \fBnuma\fP(7).
.TP 
\fI/proc/[pid]/oom_adj\fP (od Linuksa 2.6.11)
Plik może być użyty do dostosowania wyniku, używanego do wybrania procesów
do zabicia, w przypadku sytuacji braku pamięci (out\-of\-memory \- OOM). Jądro
używa tej wartości do operacji przesunięcia bitowego wartości \fIoom_score\fP
procesu: poprawne wartości mieszczą się w zakresie od \-16 do +15, wraz ze
specjalną wartością \-17, która całkowicie wyłącza zabijanie przy OOM danego
procesu. Dodatni wynik zwiększa prawdopodobieństwo, że proces zostanie
zabity przez OOM\-killer, ujemny zmniejsza je. Domyślną wartością tego pliku
jest 0, nowy proces dziedziczy ustawienie \fIoom_adj\fP swojego rodzica. Proces
musi być uprzywilejowany (\fBCAP_SYS_RESOURCE\fP) aby móc zaktualizować ten
plik.
.TP 
\fI/proc/[pid]/oom_score\fP (od Linuksa 2.6.11)
.\" See mm/oom_kill.c::badness() in the 2.6.25 sources
.\" See mm/oom_kill.c::badness() in the 2.6.25 sources
Plik wyświetla bieżący wynik, jaki jądro przydziela temu procesowi w celu
wybrania procesu do zabicia przez OOM\-killer. Wyższy wynik oznacza, że
proces ma większe prawdopodobieństwo zostania wybranym przez
OOM\-killer. Podstawą wyniku jest liczba pamięci użytej przez proces, a jest
on zwiększany (+) lub zmniejszany (\-) przez następujące czynniki:
.RS
.IP * 2
czy proces tworzy wiele potomków przy użyciu \fBfork\fP(2) (+),
.IP *
czy proces jest używany przez długi czas lub używa dużo czasu procesora (\-),
.IP *
czy proces ma niską wartość nice (np. > 0) (+),
.IP *
.\" More precisely, if it has CAP_SYS_ADMIN or CAP_SYS_RESOURCE
czy proces jest uprzywilejowany (\-) oraz
.IP *
.\" More precisely, if it has CAP_SYS_RAWIO
czy proces wykonuje bezpośredni dostęp do sprzętu (\-).
.RE
.IP
.\" FIXME Describe /proc/[pid]/pagemap
.\"       Added in 2.6.25
.\"       CONFIG_PROC_PAGE_MONITOR
Wartość \fIoom_score\fP uwzględnia również przesunięcie bitowe określone przez
ustawienie procesu \fIoom_adj\fP.
.TP 
\fI/proc/[pid]/root\fP
UNIX i Linux wspierają pomysł określonego dla każdego procesu osobno
katalogu głównego systemu plików, ustawianego przez wywołanie systemowe
\fBchroot\fP(2). Plik ten wskazuje na katalog główny systemu plików i zachowuje
się jak exe, fd/*, itp.

.\" The following was still true as at kernel 2.6.13
.\" FIXME Describe /proc/[pid]/seccomp
.\"       Added in 2.6.12
.\" FIXME Describe /proc/[pid]/sessionid
.\"       Added in 2.6.25; read-only; only readable by real UID
.\"       CONFIG_AUDITSYSCALL
.\" FIXME Describe /proc/[pid]/sched
.\"       Added in 2.6.23
.\"       CONFIG_SCHED_DEBUG, and additional fields if CONFIG_SCHEDSTATS
.\"       Displays various scheduling parameters
.\"       This file can be written, to reset stats
.\" FIXME Describe /proc/[pid]/schedstats and
.\"       /proc/[pid]/task/[tid]/schedstats
.\"       Added in 2.6.9
.\"       CONFIG_SCHEDSTATS
W procesie wielowątkowym zawartość tego linku symbolicznego nie jest
dostępna, jeżeli wątek główny już się zakończył (zazwyczaj przez wywołanie
\fBpthread_exit\fP(3)).
.TP 
\fI/proc/[pid]/smaps\fP (od Linuksa 2.6.14)
.\"       CONFIG_PROC_PAGE_MONITOR
Plik ten pokazuje zużycie pamięci dla każdego mapowania procesu. Dla każdego
takiego mapowania pokazana jest lista następujących linii:
.in +4n
.nf

08048000\-080bc000 r\-xp 00000000 03:02 13130      /bin/bash
Size:               464 kB
Rss:                424 kB
Shared_Clean:       424 kB
Shared_Dirty:         0 kB
Private_Clean:        0 kB
Private_Dirty:        0 kB

.fi
.in
Pierwsza z tych linii pokazuje te same informacje o mapowaniach, co w
\fI/proc/[pid]/maps\fP. Pozostałe linie zawierają rozmiar mapowania, ilość
mapowań obecnych w RAM, liczbę czystych i brudnych stron współdzielonych w
mapowaniu oraz liczbę czystych i brudnych prywatnych stron w mapowaniu.

Ten plik istnieje tylko jeśli podczas kompilacji jądra włączono opcję
\fBCONFIG_MMU\fP.
.TP 
\fI/proc/[pid]/stat\fP
Informacje o stanie procesu. Korzysta z tego \fBps\fP(1). Są one zdefiniowane w
\fI/usr/src/linux/fs/proc/array.c\fP.

Kolejne pola i ich właściwe specyfikatory formatu \fBscanf\fP(3) to:
.RS
.TP  12
\fIpid\fP %d
Identyfikator procesu (PID).
.TP 
\fIcomm\fP %s
Nazwa pliku wykonywalnego w nawiasach. Widać, czy plik uległ wymianie.
.TP 
\fIstate\fP %c
Jeden znak spośród "RSDZTW", gdzie R (running) oznacza proces działający, S
\- (sleeping) proces uśpiony w oczekiwaniu przerywalnym, D \- (disk) proces
uśpiony w oczekiwaniu nieprzerywalnym, Z \- (zombie) proces duch, T \-
(traced) śledzony lub zatrzymany (przez sygnał), a W \- którego strony
zastąpiono.
.TP 
\fIppid\fP %d
PID procesu macierzystego.
.TP 
\fIpgrp\fP %d
Identyfikator grupy procesów danego procesu.
.TP 
\fIsession\fP %d
Identyfikator sesji procesu.
.TP 
\fItty_nr\fP %d
Kontroluje terminal procesu (poboczny numer urządzenia jest przechowywany w
kombinacji bitów 31 do 20 i 7 do 0, natomiast główny numer urządzenia jest w
bitach 15 do 8).
.TP 
\fItpgid\fP %d
.\" This field and following, up to and including wchan added 0.99.1
Identyfikator grupy procesów pierwszoplanowych kontrolującego terminala
procesu.
.TP 
\fIflags\fP %u (%lu przed wersją 2.6.22 Linuksa)
Słowo flag jądra dla danego procesu. Znaczenie poszczególnych bitów
określają definicje PF_* w pliku \fI<linux/sched.h>\fP. Szczegóły
zależą od wersji jądra.
.TP 
\fIminflt\fP %lu
Liczba drobnych błędów, które popełnił proces, a które nie wymagały
załadowania strony pamięci z dysku.
.TP 
.\" field 11
\fIcminflt\fP %lu
Liczba drobnych błędów procesów potomnych.
.TP 
\fImajflt\fP %lu
Liczba głównych błędów, które popełnił proces, a które wymagały załadowania
strony pamięci z dysku.
.TP 
\fIcmajflt\fP %lu
Liczba głównych błędów procesów potomnych.
.TP 
\fIutime\fP %lu
Czas jaki został przydzielony procesowi w trybie użytkownika, mierzony w
taktach zegara (podzielonych przez \fIsysconf(_SC_CLK_TCK)\fP). Obejmuje to
czas gościa, \fIguest_time\fP (czas spędzony w czasie działania wirtualnego
CPU, patrz niżej), tak więc aplikacje, które nie wiedzą o polu czasu gościa
nie tracą tego czasu ze swych obliczeń.
.TP 
\fIstime\fP %lu
Czas, jaki został przydzielony procesowi w trybie jądra, mierzony w taktach
zegara (podzielonych przez \fIsysconf(_SC_CLK_TCK)\fP.
.TP 
\fIcutime\fP %ld
Czas, jaki został przydzielony procesom potomnym tego procesu w stanie
waited\-for w trybie użytkownika, mierzony w taktach zegara (podzielonych
przez \fIsysconf(_SC_CLK_TCK)\fP, patrz także \fBtimes\fP(2)). Obejmuje to czas
gościa, \fIcguest_time\fP (czas spędzony działając na procesorze wirtualnym,
patrz niżej).
.TP 
\fIcstime\fP %ld
Czas, jaki został przydzielony procesom potomnym tego procesu w stanie
waited\-for w trybie jądra, mierzony w taktach zegara (podzielonych przez
\fIsysconf(_SC_CLK_TCK)\fP.
.TP 
\fIpriority\fP %ld
(Wyjaśnienie dla Linuksa 2.6) W przypadku procesów działających z zasadami
planisty czasu rzeczywistego (\fIpolicy\fP poniżej; patrz
\fBsched_setscheduler\fP(2)), jest to liczba przeciwna w stosunku do priorytetu
planisty minus jeden, tzn. jest to zakres \-2 do \-100 odpowiadający
priorytetom czasu rzeczywistego od 1 do 99. W przypadku procesów nie
działających według tych zasad, jest to surowa wartość nice
(\fBsetpriority\fP(2) zgodna z podaną przez jądro. Jądro przechowuje wartości
nice jako liczby w zakresie od 0 (wysoki) do 39 (niski), co odpowiada
widocznemu dla użytkownika zakresowi nice od \-20 do 19.

.\" And back in kernel 1.2 days things were different again.
Przed Linuksem 2.6 była to wartość skalowana w oparciu o wagę jaką planista
przypisał do danego procesu.
.TP 
\fInice\fP %ld
.\" Back in kernel 1.2 days things were different.
Wartość "nice" (patrz \fBsetpriority\fP(2)) zawierająca się w zakresie od 19
(niski priorytet) do \-20 (wysoki priorytet).
.TP 
.\" .TP
.\" \fIcounter\fP %ld
.\" The current maximum size in jiffies of the process's next timeslice,
.\" or what is currently left of its current timeslice, if it is the
.\" currently running process.
.\" .TP
.\" \fItimeout\fP %u
.\" The time in jiffies of the process's next timeout.
.\" timeout was removed sometime around 2.1/2.2
\fInum_threads\fP %ld
Liczba wątków procesu (od Linuksa 2.6). Przed jądrem 2.6 to pole miało
przydzieloną na sztywno wartość 0, jako wypełniacz do usuniętego wcześniej
pola.
.TP 
.\" field 21
\fIitrealvalue\fP %ld
Czas w jiffies poprzedzający wysłanie przez czasomierz do procesu następnego
sygnału \fBSIGALRM\fP. Od jądra 2.6.17, to pole nie jest dłużej utrzymywane i
ma ustawioną na sztywno wartość 0.
.TP 
\fIstarttime\fP %llu (było %lu przed Linuksem 2.6)
Czas uruchomienia procesu wyrażony w jiffies od uruchomienia systemu.
.TP 
\fIvsize\fP %lu
Rozmiar pamięci wirtualnej w bajtach.
.TP 
\fIrss\fP %ld
Resident Set Size: liczba stron, które proces ma w rzeczywistej pamięci. Są
to po prostu strony, które obejmują segment text, segment data i przestrzeń
stosu. Nie obejmuje to stron, które nie były ładowane na żądanie lub które
uległy wymianie.
.TP 
\fIrsslim\fP %lu
Aktualne miękkie ograniczenie rss procesu w bajtach; patrz opis
\fBRLIMIT_RSS\fP w \fBgetpriority\fP(2).
.TP 
\fIstartcode\fP %lu
Adres, pod którym zaczyna się kod programu.
.TP 
\fIendcode\fP %lu
Adres, pod którym kończy się kod programu.
.TP 
\fIstartstack\fP %lu
Adres początku (np. spód) stosu.
.TP 
\fIkstkesp\fP %lu
Bieżąca wartość ESP (wskaźnika stosu), określona na podstawie strony stosu
jądra dla danego procesu.
.TP 
\fIkstkeip\fP %lu
Aktualny EIP (wskaźnik instrukcji).
.TP 
.\" field 31
\fIsignal\fP %lu
Maska bitowa oczekujących sygnałów, wyświetlana jako liczba
dziesiętna. Przestarzałe, ponieważ nie dostarcza informacji o sygnałach
czasu rzeczywistego; prosimy używać \fI/proc/[pid]/status\fP zamiast tego
pliku.
.TP 
\fIblocked\fP %lu
Maska bitowa zablokowanych sygnałów, wyświetlana jako liczba
dziesiętna. Przestarzałe, ponieważ nie dostarcza informacji o sygnałach
czasu rzeczywistego; prosimy używać \fI/proc/[pid]/status\fP zamiast tego
pliku.
.TP 
\fIsigignore\fP %lu
Maska bitowa ignorowanych sygnałów, wyświetlana jako liczba
dziesiętna. Przestarzałe, ponieważ nie dostarcza informacji o sygnałach
czasu rzeczywistego; prosimy używać \fI/proc/[pid]/status\fP zamiast tego
pliku.
.TP 
\fIsigcatch\fP %lu
Maska bitowa schwytanych sygnałów, wyświetlana jako liczba
dziesiętna. Przestarzałe, ponieważ nie dostarcza informacji o sygnałach
czasu rzeczywistego; prosimy używać \fI/proc/[pid]/status\fP zamiast tego
pliku.
.TP 
\fIwchan\fP %lu
Jest to "kanał", na którym oczekuje proces. Jest to adres funkcji systemowej
i można go znaleźć na liście nazw, jeśli potrzebna jest nazwa tekstowa. (Gdy
\fI/etc/psdatabase\fP jest aktualne, można zobaczyć działanie pola WCHAN,
próbując \fIps \-l\fP.)
.TP 
\fInswap\fP %lu
.\" nswap was added in 2.0
Liczba stron, które uległy wymianie (nieutrzymywane).
.TP 
\fIcnswap\fP %lu
.\" cnswap was added in 2.0
Łączna wartość \fInswap\fP dla procesów potomnych (nieutrzymywane).
.TP 
\fIexit_signal\fP %d (od Linuksa 2.1.22)
Sygnał wysyłany przez ginący proces do jego procesu macierzystego.
.TP 
\fIprocessor\fP %d (od Linuksa 2.2.8)
Numer CPU, na którym proces ostatnio działał.
.TP 
\fIrt_priority\fP %u (od Linuksa 2.5.19; było %lu przed Linuksem 2.6.22)
Priorytet planisty czasu rzeczywistego, liczba w zakresie od 1 do 99 do
procesów przydzielanych według zasad czasu rzeczywistego lub 0 do procesów
nie czasu rzeczywistego (patrz \fBsched_setscheduler\fP(2)).
.TP 
.\" field 41
\fIpolicy\fP %u (od Linuksa 2.5.19; było %lu przed Linuksem 2.6.22)
Polityka przydzielania zadaniom czasu procesora (patrz
\fBsched_setscheduler\fP(2)). Dekodowana używając stałych SCHED_* w
\fIlinux/sched.h\fP.
.TP 
\fIdelayacct_blkio_ticks\fP %llu (od Linuksa 2.6.18)
Sumaryczna zwłoka bloków wejścia/wyjścia, mierzona w taktach zegara
(centysekundy).
.TP 
\fIguest_time\fP %lu (od Linuksa 2.6.24)
Czas gościa procesu (czas, jaki upłynął podczas działania na wirtualnym
procesorze systemu operacyjnego gościa), mierzony w taktach zegara
(podzielony przez \fIsysconf(_SC_CLK_TCK)\fP
.TP 
\fIcguest_time\fP %ld (od Linuksa 2.6.24)
Czas gościa potomków procesu, mierzony w taktach zegara (podzielony przez
\fIsysconf(_SC_CLK_TCK)\fP.
.RE
.TP 
\fI/proc/[pid]/statm\fP
Udostępnia informacje o użyciu pamięci, mierzone w stronach. Występują
następujące kolumny:
.in +4n
.nf

.\" (not including libs; broken, includes data segment)
.\" (including libs; broken, includes library text)
size       łączny rozmiar programu
           (taki sam jak VmSize w \fI/proc/[pid]/status\fP)
resident   rozmiar części rezydentnej
           (taki sam jak VmRSS w \fI/proc/[pid]/status\fP)
share      strony wspólne (z wspólnych mapowań)
text       tekst (kod)
lib        biblioteki (nieużywane w Linuksie 2.6)
data       dane i stos
dt         strony nieaktualne (dirty; nieużywane w Linuksie 2.6)
.fi
.in
.TP 
\fI/proc/[pid]/status\fP
Udostępnia sporo informacji ze \fI/proc/[pid]/stat\fP i \fI/proc/[pid]/statm\fP w
postaci łatwiejszej do przeanalizowania przez człowieka. Oto przykład:
.in +4n
.nf

$\fB cat /proc/$$/status\fP
Name:   bash
State:  S (sleeping)
Tgid:   3515
Pid:    3515
PPid:   3452
TracerPid:      0
Uid:    1000    1000    1000    1000
Gid:    100     100     100     100
FDSize: 256
Groups: 16 33 100
VmPeak:     9136 kB
VmSize:     7896 kB
VmLck:         0 kB
VmHWM:      7572 kB
VmRSS:      6316 kB
VmData:     5224 kB
VmStk:        88 kB
VmExe:       572 kB
VmLib:      1708 kB
VmPTE:        20 kB
Threads:        1
SigQ:   0/3067
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000010000
SigIgn: 0000000000384004
SigCgt: 000000004b813efb
CapInh: 0000000000000000
CapPrm: 0000000000000000
CapEff: 0000000000000000
CapBnd: ffffffffffffffff
Cpus_allowed:   00000001
Cpus_allowed_list:      0
Mems_allowed:   1
Mems_allowed_list:      0
voluntary_ctxt_switches:        150
nonvoluntary_ctxt_switches:     545
.fi
.in
.IP
Występują następujące pola:
.RS
.IP * 2
\fIName\fP: Polecenie uruchomione przez ten proces.
.IP *
\fIState\fP: Bieżący stan procesu. Jeden z: "R (running)", "S (sleeping)", "D
(disk sleep)", "T (stopped)", "T (tracing stop)", "Z (zombie)", or "X
(dead)".
.IP *
\fITgid\fP: identyfikator grupy wątku (np. identyfikator procesu).
.IP *
\fIPid\fP: identyfikator wątku (patrz \fBgettid\fP(2)).
.IP *
\fIPPid\fP: PID procesu macierzystego.
.IP *
\fITracerPid\fP: PID procesu śledzącego ten proces (0 gdy nie jest śledzony).
.IP *
\fIUid\fP, \fIGid\fP: UID (GID): realny, efektywny, zapisany oraz systemu plików.
.IP *
\fIFDSize\fP: Liczba slotów aktualnie przydzielonych deskryptorów plików.
.IP *
\fIGroups\fP: Uzupełniająca lista grup.
.IP *
\fIVmPeak\fP: Szczytowy rozmiar pamięci wirtualnej.
.IP *
\fIVmSize\fP: Rozmiar pamięci wirtualnej.
.IP *
\fIVmLck\fP: Rozmiar pamięci zablokowanej (patrz \fBmlock\fP(3)).
.IP *
\fIVmHWM\fP: Szczytowy ustawiony rozmiar rezydentny ("high water mark").
.IP *
\fIVmRSS\fP: Ustawiony rozmiar rezydentny.
.IP *
\fIVmData\fP, \fIVmStk\fP, \fIVmExe\fP: Rozmiar segmentów danych, stosu i tekstu.
.IP *
\fIVmLib\fP: Rozmiar kodu biblioteki współdzielonej.
.IP *
\fIVmPTE\fP: Rozmiar wpisów tablicy strony (od Linuksa 2.6.10).
.IP *
\fIThreads\fP: Liczba wątków w procesie zawierających ten wątek.
.IP *
\fISigQ\fP: Pole zawiera dwie liczby oddzielone ukośnikiem, które odnoszą się
do skolejkowanych sygnałów do realnego identyfikatora użytkownika tego
procesu. Pierwsza jest liczbą aktualnie skolejkowanych sygnałów do tego
realnego identyfikatora użytkownika, a druga jest limitem zasobów liczby
skolejkowanych sygnałów do tego procesu (patrz opis \fBRLIMIT_SIGPENDING\fP w
\fBgetrlimit\fP(2)).
.IP *
\fISigPnd\fP, \fIShdPnd\fP: Liczba sygnałów oczekujących na wątek i na proces jako
całość (patrz \fBpthreads\fP(7) i \fBsignal\fP(7)).
.IP *
\fISigBlk\fP, \fISigIgn\fP, \fISigCgt\fP: Maski oznaczające zablokowane, zignorowane
i przechwycone sygnały (patrz \fBsignal\fP(7)).
.IP *
\fICapInh\fP, \fICapPrm\fP, \fICapEff\fP: Maski możliwości, włączonych w zestawach
dziedziczonych (inheritable), dozwolonych (permitted) i efektywnych
(effective) (patrz \fBcapabilities\fP(7)).
.IP *
\fICapBnd\fP: Zestaw możliwości ograniczających (capability bounding set) (od
jądra 2.6.26, patrz \fBcapabilities\fP(7)).
.IP *
\fICpus_allowed\fP: Maska procesorów, na których proces może być uruchomiony
(od Linuksa 2.6.24, patrz \fBcpuset\fP(7)).
.IP *
\fICpus_allowed_list\fP: Jak wyżej, ale w "formacie listy" (od Linuksa 2.6.26,
patrz \fBcpuset\fP(7)).
.IP *
\fIMems_allowed\fP: Maska węzłów pamięci, dozwolonych dla tego procesu (od
Linuksa 2.6.24, patrz \fBcpuset\fP(7)).
.IP *
\fIMems_allowed_list\fP: Jak wyżej, ale w "formacie listy" (od Linuksa 2.6.26,
patrz \fBcpuset\fP(7)).
.IP *
\fIvoluntary_context_switches\fP, \fInonvoluntary_context_switches\fP: Liczba
dobrowolnych i przymusowych przełączeń kontekstu (od Linuksa 2.6.23).
.RE
.TP 
\fI/proc/[pid]/task\fP (od Linuksa 2.6.0\-test6)
Jest to katalog zawierający po jednym podkatalogu dla każdego wątku
procesu. Nazwą każdego podkatalogu jest numeryczne ID (\fI[tid]\fP) wątku
(patrz \fBgettid\fP(2)). Każdy z podkatalogów zawiera zbiór plików o tej samej
nazwie i zawartości, co katalogi \fI/proc/[pid]\fP. Dla atrybutów, które są
współdzielone przez wszystkie wątki zawartość każdego z plików w
podkatalogach \fItask/[tid]\fP będzie taka sama jak zawartość odpowiednich
plików w nadrzędnym katalogu \fI/proc/[pid]\fP (np. w procesie wielowątkowym
wszystkie pliki \fItask/[tid]/cwd\fP będą miały taką samą zawartość, jak plik
\fI/proc/[pid]/cwd\fP w katalogu nadrzędnym, ponieważ wszystkie wątki procesu
dzielą katalog bieżący). Dla atrybutów, które dla każdego wątku są różne,
odpowiednie pliki w\fItask/[tid]\fP mogą mieć różne wartości (np. różne pola w
każdym z plików \fItask/[tid]/status\fP mogą być inne dla każdego wątku).

.\" The following was still true as at kernel 2.6.13
W procesie wielowątkowym zawartość katalogu \fI/proc/[pid]/task\fP  nie jest
dostępna, jeżeli wątek główny już się zakończył (najprawdopodobniej
wywołując \fBpthread_exit\fP(3)).
.TP 
\fI/proc/apm\fP
Wersja APM (Zaawansowane zarządzanie energią) oraz informacja o
akumulatorach, gdy \fBCONFIG_APM\fP było zdefiniowane podczas kompilacji jądra.
.TP 
\fI/proc/bus\fP
Zawiera podkatalogi odpowiadające zainstalowanym magistralom.
.TP 
\fI/proc/bus/pccard\fP
Podkatalog dla urządzeń PCMCIA, gdy \fBCONFIG_PCMCIA\fP było zdefiniowane
podczas kompilacji jądra.
.TP 
\fI/proc/bus/pccard/drivers\fP
.TP 
\fI/proc/bus/pci\fP
Zawiera różne podkatalogi magistral oraz pseudopliki zawierające informacje
o magistralach PCI, zainstalowanych urządzeniach oraz sterownikach
urządzeń. Niektóre z tych plików nie są w postaci ASCII.
.TP 
\fI/proc/bus/pci/devices\fP
Informacje o urządzeniach PCI. Dostęp do nich może się odbywać poprzez
\fBlspci\fP(8) i \fBsetpci\fP(8).
.TP 
\fI/proc/cmdline\fP
Argumenty przekazane jądru Linux podczas startu systemu. Zazwyczaj odbywa
się to poprzez zarządcę startu systemu, takiego jak \fBlilo\fP(8) lub
\fBgrub\fP(8).
.TP 
\fI/proc/config.gz\fP (od Linuksa 2.6)
Plik pokazuje opcje konfiguracyjne, które były użyte do zbudowania aktualnie
działającego jądra, w tym samym formacie, jaki jest używany przez plik
\&\fI.config\fP, który jest wynikiem konfiguracji jądra (używając \fImake
xconfig\fP, \fImake config\fP i podobnych poleceń). Zawartość pliku jest
skompresowana; można ją odczytać lub wyszukać za pomocą \fBzcat\fP(1),
\fBzgrep\fP(1) itd. Tak długo jak nie zostały dokonane zmiany w poniższym
pliku, zawartość \fI/proc/config.gz\fP jest taka sama jak ta udostępniona
przez:
.in +4n
.nf

cat /lib/modules/$(uname \-r)/build/.config
.fi
.in
.IP
\fI/proc/config.gz\fP jest udostępniany wyłącznie wtedy, gdy jądro jest
skonfigurowane z \fBCONFIG_IKCONFIG_PROC\fP.
.TP 
\fI/proc/cpuinfo\fP
Jest to zbiór elementów zależnych od CPU i architektury systemu; dla każdej
wspieranej architektury jest inna lista. Dwa popularne wpisy to:
\fIprocessor\fP, który udostępnia numer CPU oraz \fIbogomips\fP; jest to stała
systemowa, wyliczona podczas inicjalizacji jądra. Maszyny SMP zawierają
informacje o każdym z procesorów.
.TP 
\fI/proc/devices\fP
Listing tekstowy numerów głównych oraz grup urządzeń. Może to służyć
skryptom MAKEDEV do zachowania spójności z jądrem.
.TP 
\fI/proc/diskstats\fP (od wersji Linuksa 2.5.69)
Plik zawiera statystyki operacji wejścia/wyjścia dla każdego urządzenia
dyskowego. Dalsze informacje można znaleźć w pliku
\fIDocumentation/iostats.txt\fP w źródłach jądra.
.TP 
\fI/proc/dma\fP
Jest listą zarejestrowanych i używanych kanałów DMA (direct memory access)
szyny \fIISA\fP.
.TP 
\fI/proc/driver\fP
Pusty podkatalog.
.TP 
\fI/proc/execdomains\fP
Lista domen uruchamiania (wcieleń ABI [Application Binary Interface \-
przyp. tłum.]).
.TP 
\fI/proc/fb\fP
Informacje o buforze ramki, o ile podczas kompilacji jądra zdefiniowano
\fBCONFIG_FB\fP.
.TP 
\fI/proc/filesystems\fP
Tekstowa lista systemów plików obsługiwanych przez jądro, a konkretnie
systemów plików, które zostały wkompilowane w jądro lub których moduły jądra
są obecnie załadowane (patrz również \fBfilesystems\fP(5)). Jeśli system plików
jest oznaczony jako "nodev" oznacza to, że nie wymaga on zamontowania
urządzenia blokowego (np. jest to wirtualny lub sieciowy system plików).

Plik ten może być niekiedy użyty przez \fBmount\fP(8), gdy nie podano systemów
plików i nie potrafi on określić typu systemu plików. Próbowane są wówczas
systemy plików wypisane w tym pliku (poza systemami z oznaczeniem "nodev").
.TP 
\fI/proc/fs\fP
Pusty podkatalog.
.TP 
\fI/proc/ide\fP
Katalog ten istnieje w systemach zawierających magistralę IDE. Zawiera po
jednym katalogu dla każdego kanału IDE oraz dla przyłączonych
urządzeń. Wśród plików są:

.in +4n
.nf
cache              rozmiar bufora w KB
capacity           liczba sektorów
driver             wersja sterownika
geometry           geometria fizyczna i logiczna
identify           szesnastkowo
media              rodzaj nośnika
model              numer modelu producenta
settings           ustawienia napędu
smart_thresholds   szesnastkowo
smart_values       szesnastkowo
.fi
.in

Dostęp do tych informacji w przyjaznym formacie umożliwia program
narzędziowy \fBhdparm\fP(8).
.TP 
\fI/proc/interrupts\fP
Plik jest używany do zapisania liczby przerwań na procesor na urządzenie
wejścia/wyjścia. Od Linuksa 2.6.24, przynajmniej do architektur i386 i
x86_64 zawiera on również przerwania wewnętrznosystemowe (to znaczy nie
związane z urządzeniem jako takim), takie jak NMI (nonmaskable interrupt),
LOC (local timer interrupt) i do systemów SMP: TLB (TLB flush interrupt),
RES (rescheduling interrupt), CAL (remote function call interrupt), mogą
również występować inne. Formatowanie jest bardzo czytelne do odczytu,
wykonane w ASCII.
.TP 
\fI/proc/iomem\fP
Odwzorowanie portów we/wy w pamięci w Linuksie 2.4.
.TP 
\fI/proc/ioports\fP
Jest to lista obecnie zarejestrowanych i używanych obszarów portów we/wy.
.TP 
\fI/proc/kallsyms\fP (od wersji Linuksa 2.5.71)
Zawiera wyeksportowane przez jądro definicje symboli, które są używane przez
narzędzia \fBmodules\fP(X) do dynamicznego podłączania ładowanych modułów. W
wersji jądra Linux 2.5.47 i wcześniejszych podobny plik z troszkę odmienną
zawartością był nazwany \fIksyms\fP.
.TP 
\fI/proc/kcore\fP
Plik ten reprezentuje pamięć fizyczną systemu i jest zachowany w formacie
pliku core dla ELF. Korzystając z tego pseudopliku oraz z niezestripowanego
binarnego pliku jądra (\fI/usr/src/linux/vmlinux\fP), można za pomocą GDB
testować aktualny stan dowolnej struktury danych jądra.

Całkowity rozmiar tego pliku to rozmiar fizycznej pamięci (RAM) plus 4 KB.
.TP 
\fI/proc/kmsg\fP
Plik ten może służyć do odczytu komunikatów jądra, zamiast funkcji
systemowej \fBsyslog\fP(2). Aby odczytać ten plik, proces musi mieć uprawnienia
superużytkownika i tylko jeden proces powinien dokonywać jego odczytu. Pliku
tego nie należy czytać, gdy działa proces syslog, korzystający z funkcji
systemowej \fBsyslog\fP(2) do rejestrowania komunikatów jądra.

Z tego pliku pobiera komunikaty program \fBdmesg\fP(1).
.TP 
\fI/proc/ksyms\fP (Linux 1.1.23\-2.5.47)
Patrz \fI/proc/kallsyms\fP.
.TP 
\fI/proc/loadavg\fP
Pierwsze trzy pola w tym pliku zawierają średnie obciążenie (loadavg)
podając informację o średniej liczbie zadań uruchomionych (stan R) oraz
czekających na dyskowe operacje wejścia/wyjścia (stan D)  w ciągu ostatnich
1, 5  i 15 minut. Są to te same wartości średniego obciążenia, które podaje
\fBuptime\fP(1) i inne programy. Czwarte pole zawiera dwie liczby oddzielone od
siebie znakiem ukośnika (/). Pierwsza z nich jest liczbą obecnie
wykonywanych zadań (procesów, wątków). Wartość za ukośnikiem jest liczbą
zadań, obecnych w systemie. Piąte pole zawiera PID najnowszego ostatnio
utworzonego procesu w systemie.
.TP 
\fI/proc/locks\fP
Plik ten pokazuje aktualne blokady plików (\fBflock\fP(2) i \fBfcntl\fP(2)) oraz
dzierżawy (\fBfcntl\fP(2)).
.TP 
\fI/proc/malloc\fP (tylko do wersji 2.2 Linuksa włącznie)
.\" It looks like this only ever did something back in 1.0 days
Ten plik istnieje tylko jeśli podczas kompilacji zdefiniowano
\fBCONFIG_DEBUG_MALLOC\fP.
.TP 
\fI/proc/meminfo\fP
Plik zawiera statystyki o użyciu pamięci w systemie. Jest używany przez
\fBfree\fP(1) do informowania o rozmiarze wolnej i zajętej pamięci (zarówno
fizycznej, jak i wymiany) w systemie, a także o pamięci wspólnej i buforach
używanych przez jądro.
.TP 
\fI/proc/modules\fP
Tekstowa lista modułów, które załadowano w systemie. Zobacz także
\fBlsmod\fP(8).
.TP 
\fI/proc/mounts\fP
Przed jądrem 2.4.19 plik ten był listą wszystkich systemów plików
zamontowanych aktualnie w systemie. Wraz z wprowadzeniem przestrzeni nazw
montowań przydzielanych dla procesu w Linuksie 2.4.19, plik ten stał się
dowiązaniem do \fI/proc/self/mounts\fP, który zawiera listę punktów montowań we
własnej przestrzeni nazw montowań procesu. Format tego pliku jest opisany w
\fBfstab\fP(5).
.TP 
\fI/proc/mtrr\fP
Memory Type Range Registers. Szczegóły można znaleźć w pliku źródeł jądra
\fIDocumentation/mtrr.txt\fP.
.TP 
\fI/proc/net\fP
Różne sieciowe pseudopliki, z których wszystkie podają stan pewnej części
warstwy sieciowej. Plik ten zawiera struktury ASCII i dlatego nadaje się do
odczytu za pomocą \fBcat\fP(1). Jednak standardowy pakiet \fBnetstat\fP(8) daje
dużo czystszy dostęp do tych plików.
.TP 
\fI/proc/net/arp\fP
Zawiera zrzut tabeli ARP jądra używanej do rozwiązywania adresów, w
czytelnej postaci ASCII. Pokazane zostaną zarówno wyuczone dynamicznie, jak
i wstępnie zaprogramowane wpisy w tabeli ARP. Format jest następujący:

.nf
.in 8n
\f(CWIP address     HW type   Flags     HW address          Mask   Device
192.168.0.50   0x1       0x2       00:50:BF:25:68:F3   *      eth0
192.168.0.250  0x1       0xc       00:00:00:00:00:00   *      eth0\fP
.fi
.in

Gdzie "IP address" jest adresem IPv4 maszyny, a "HW type" jest rodzajem
sprzętu wg RFC\ 826. "Flags" są to wewnętrzne znaczniki struktury ARP
(zdefiniowane w \fI/usr/include/linux/if_arp.h\fP), a "HW address" jest
odwzorowaniem adresu IP w warstwie fizycznej, jeśli jest ono określone.
.TP 
\fI/proc/net/dev\fP
Pseudoplik dev zawiera informacje o stanie urządzenia sieciowego. Zawierają
one liczbę otrzymanych i wysłanych pakietów, liczbę błędów i kolizji oraz
inne podstawowe statystyki. Informacje te są wykorzystywane przez program
\fBifconfig\fP(8) do informowania o stanie urządzenia. Format jest następujący:

.nf
.in 1n
\f(CWInter\-|   Receive                                                |  Transmit
 face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed
    lo: 2776770   11307    0    0    0     0          0         0  2776770   11307    0    0    0     0       0          0
  eth0: 1215645    2751    0    0    0     0          0         0  1782404    4324    0    0    0   427       0          0
  ppp0: 1622270    5552    1    0    0     0          0         0   354130    5669    0    0    0     0       0          0
  tap0:    7714      81    0    0    0     0          0         0     7714      81    0    0    0     0       0          0\fP
.in
.fi
.\" .TP
.\" .I /proc/net/ipx
.\" No information.
.\" .TP
.\" .I /proc/net/ipx_route
.\" No information.
.TP 
\fI/proc/net/dev_mcast\fP
Zdefiniowany w \fI/usr/src/linux/net/core/dev_mcast.c\fP:
.nf
.in +5
indx interface_name  dmi_u dmi_g dmi_address
2    eth0            1     0     01005e000001
3    eth1            1     0     01005e000001
4    eth2            1     0     01005e000001
.in
.fi
.TP 
\fI/proc/net/igmp\fP
Internetowy Protokół Zarządzania Grupami. Zdefiniowany w
\fI/usr/src/linux/net/core/igmp.c\fP.
.TP 
\fI/proc/net/rarp\fP
Plik ten ma ten sam format, co plik \fIarp\fP i zawiera aktualną bazę
odwrotnych odwzorowań, używaną do udostępniania usług odwrotnego
poszukiwania adresów \fBrarp\fP(8). Jeśli RARP nie jest skonfigurowane w
jądrze, to plik ten nie będzie istniał.
.TP 
\fI/proc/net/raw\fP
.\" .TP
.\" .I /proc/net/route
.\" No information, but looks similar to
.\" .BR route (8).
Zawiera zrzut tabeli gniazd surowych (RAW). Większość informacji nie jest
przeznaczona do użytku innego niż odpluskwiania. Wartość "sl" jest slotem
mieszania jądra dla gniazda, "local_address" jest parą składającą się z
lokalnego adresu i numeru protokołu. "st" jest stanem wewnętrznym
gniazda. "tx_queue" i "rx_queue" są kolejkami danych przychodzących i
wychodzących, w sensie zużycia pamięci jądra. Pola "tr", "tm\->when" i
"rexmits" nie są używane przez gniazda surowe. Pole "uid" zawiera efektywny
UID twórcy gniazda.
.TP 
\fI/proc/net/snmp\fP
Ten plik zawiera dane ASCII potrzebne bazom agenta SNMP zarządzającym
informacjami o IP, ICMP, TCP i UDP.
.TP 
\fI/proc/net/tcp\fP
Zawiera zrzut tabeli gniazd TCP. Wiele informacji nie przydaje się do użytku
poza odpluskwianiem. Wartość "sl" jest slotem mieszania jądra dla gniazda,
"local_address" jest parą składającą się z lokalnego adresu i numeru
portu. "rem_address" jest parą składającą się ze zdalnego adresu i numeru
portu (jeśli gniazdo jest podłączone). \&"St" jest stanem wewnętrznym
gniazda. "tx_queue" i "rx_queue" są kolejkami danych przychodzących i
wychodzących w sensie zużycia pamięci jądra. Pola "tr", "tm\-when" i
"rexmits" zawierają wewnętrzne informacje o stanie gniazda w jądrze i są
przydatne tylko do odpluskwiania. Pole "uid" zawiera efektywny UID twórcy
gniazda.
.TP 
\fI/proc/net/udp\fP
Zawiera zrzut tabeli gniazd UDP. Wiele informacji nie przydaje się do użytku
poza odpluskwianiem. Wartość "sl" jest slotem mieszania jądra dla gniazda,
"local_address" jest parą składającą się z lokalnego adresu i numeru
portu. "rem_address" jest parą składającą się ze zdalnego adresu i numeru
portu (jeśli gniazdo jest podłączone). "st" jest stanem wewnętrznym
gniazda. "tx_queue" i "rx_queue" są kolejkami danych przychodzących i
wychodzących w sensie zużycia pamięci jądra. Pola "tr", "tm\-when" i
"rexmits" nie są używane w gniazdach UDP. Pole "uid" zawiera efektywny UID
twórcy gniazda. Format jest następujący:

.nf
.in 1n
\f(CWsl  local_address rem_address   st tx_queue rx_queue tr rexmits  tm\->when uid
 1: 01642C89:0201 0C642C89:03FF 01 00000000:00000001 01:000071BA 00000000 0
 1: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 6F000100 0
 1: 00000000:0201 00000000:0000 0A 00000000:00000000 00:00000000 00000000 0\fP
.in
.fi
.TP 
\fI/proc/net/unix\fP
Wymienia gniazda domeny UNIX, obecne w systemie oraz ich stan. Format jest
następujący:
.nf
.sp .5
\f(CWNum RefCount Protocol Flags    Type St Path
 0: 00000002 00000000 00000000 0001 03
 1: 00000001 00000000 00010000 0001 01 /dev/printer\fP
.sp .5
.fi

Gdzie "Num" jest numerem wpisu w tablicy jądra, "RefCount" jest liczbą
użytkowników gniazda, "Protocol" obecnie jest zawsze zerem, "Flags"
reprezentuje wewnętrzne znaczniki jądra, określające stan gniazda. "Type"
jest zawsze równe "1" (Nie ma na razie w jądrze wsparcia dla gniazd
datagramowych domeny UNIX). \&"St" jest wewnętrznym stanem gniazda, a
ścieżka jest ścieżką (jeśli istnieje) związaną z gniazdem.
.TP 
\fI/proc/partitions\fP
Zawiera liczby główne i poboczne każdej z partycji oraz liczby bloków i
nazwy partycji.
.TP 
\fI/proc/pci\fP
Listing wszystkich urządzeń PCI znalezionych podczas inicjalizacji jądra i
ich konfiguracja.

.\" FIXME /proc/sched_debug
.\" .TP
.\" .IR /proc/sched_debug " (since Linux 2.6.23)"
.\" See also /proc/[pid]/sched
Plik został zastąpiony nowym interfejsem \fI/proc\fP do PCI
(\fI/proc/bus/pci\fP). Stał się opcjonalny w Linuksie 2.2 (dostępny przy
ustawieniu opcji \fBCONFIG_PCI_OLD_PROC\fP przy kompilacji jądra). Ponownie
stał się nieopcjonalny w Linuksie 2.4. Następnie, został uznany za
przestarzały w Linuksie 2.6 (był wciąż dostępny przy ustawieniu
\fBCONFIG_PCI_LEGACY_PROC\fP), aż w końcu usunięto go w Linuksie 2.6.17.
.TP 
\fI/proc/scsi\fP
Katalog z pseudoplikiem \fIscsi\fP na pośrednim poziomie i różnymi
podkatalogami niskopoziomowych sterowników SCSI, zawierającymi po jednym
pliku dla każdego kontrolera SCSI w danym systemie; każdy z nich podaje stan
jakiejś części podsystemu we/wy SCSI. Pliki te zawierają struktury ASCII i
dlatego nadają się do odczytu za pomocą \fBcat\fP(1).

Możliwy jest też zapis do niektórych z tych plików, w celu rekonfiguracji
podsystemu, lub przełączania różnych parametrów.
.TP 
\fI/proc/scsi/scsi\fP
Jest wypisaniem wszystkich znanych jądru urządzeń SCSI. Listing jest podobny
do widzianego podczas ładowania systemu. scsi wspiera obecnie tylko
polecenie \fIadd\-single\-device\fP umożliwiające rootowi dodanie do listy
znanych urządzeń urządzenia włączonego na gorąco.

Polecenie
.in +4n
.nf

echo \(aqscsi add\-single\-device 1 0 5 0\(aq > /proc/scsi/scsi

.fi
.in
spowoduje, że kontroler scsi1 przeprowadzi skanowanie kanału SCSI 0 w
poszukiwaniu urządzenia o ID 5 i LUN 0. Jeśli już istnieje urządzenie o
takim adresie, lub adres jest nieprawidłowy, zostanie zwrócony błąd.
.TP 
\fI/proc/scsi/[nazwa\-sterownika]\fP
\fI[nazwa\-sterownika]\fP może obecnie być jedną z: NCR53c7xx, aha152x, aha1542,
aha1740, aic7xxx, buslogic, eata_dma, eata_pio, fdomain, in2000, pas16,
qlogic, scsi_debug, seagate, t128, u15\-24f, ultrastore, or wd7000. Ukazują
się te z katalogów, dla których odpowiednie sterowniki zarejestrowały
przynajmniej jeden kontroler SCSI. Każdy katalog zawiera jeden plik dla
każdego zarejestrowanego kontrolera. Każdy z plików kontrolera ma nazwę
odpowiadającą numerowi kontrolera, przyznanemu podczas jego inicjacji.

Czytanie tych plików zwykle pokaże konfigurację sterownika i kontrolera,
statystyki itp.

Pisanie do tych plików umożliwia różne operacje na różnych kontrolerach. Na
przykład za pomocą poleceń \fIlatency\fP i \fInolatency\fP root może uaktywniać
lub deaktywować kod pomiaru czasu oczekiwania dla poleceń (command latency)
w sterowniku eata_dma. Za pomocą poleceń \fIlockup\fP i \fIunlock\fP root może
sterować symulowanym przez sterownik scsi_debug blokowaniem magistrali.
.TP 
\fI/proc/self\fP
Ten katalog odnosi się do procesu korzystającego z systemu plików \fI/proc\fP i
jest identyczny z katalogiem w \fI/proc\fP o nazwie będącej jego PID\-em.
.TP 
\fI/proc/slabinfo\fP
Informacje o buforach jądra. Od Linuksa 2.6.16 plik ten istnieje tylko jeśli
podczas kompilacji jądra włączono opcję \fICONFIG_SLAB\fP. Występują
następujące kolumny w pliku \fI/proc/slabinfo\fP:
.in +4n
.nf

cache\-name
num\-active\-objs
total\-objs
object\-size
num\-active\-slabs
total\-slabs
num\-pages\-per\-slab
.fi
.in

Szczegóły można znaleźć w \fBslabinfo\fP(5).
.TP 
\fI/proc/stat\fP
statystyki jądra/systemu. Różnią się pomiędzy architekturami. Wśród
wspólnych wpisów są:
.RS
.TP 
\fIcpu  3357 0 4313 1362393\fP
.\" 1024 on Alpha and ia64
.\" FIXME Actually, the following info about the /proc/stat 'cpu' field
.\"       does not seem to be quite right (at least in 2.6.12)
Czas, wyrażony w USER_HZ (jedna setna sekundy na większości architektur,
proszę użyć \fIsysconf(_SC_CLK_TCK)\fP aby uzyskać prawidłową wartość), które
system spędził w trybie użytkownika, trybie użytkownika o obniżonym
priorytecie (nice), trybie systemowym i w zadaniu idle. Ostatnia wartość
powinna być równa iloczynowi wartości USER_HZ z drugim wpisem w pseudopliku
uptime.

W Linuksie 2.6 linia ta zawiera trzy dodatkowe kolumny: \fIiowait\fP \- czas
oczekiwania na zakończenie operacji I/O (od wersji 2.5.41); \fIirq\fP \- czas
obsługiwania przerwań (od 2.6.0\-test4); \fIsoftirq\fP \- czas obsługiwania
miękkich przerwań (softirqs) (od 2.6.0\-test4).

Od Linuksa 2.6.11 istnieje również ósma kolumna, \fIsteal\fP \- czas
"skradziony", który jest czasem spędzonym w innym systemie operacyjnym
podczas pracy w środowisku zwirtualizowanym.

.\" See Changelog entry for 5e84cfde51cf303d368fcb48f22059f37b3872de
Od Linuksa 2.6.24 pojawiła się dziewiąta kolumna, \fIguest\fP, która jest
czasem spędzonym podczas działania na wirtualnym procesorze systemu
operacyjnego gościa, pod kontrolą jądra Linux.
.TP 
\fIpage 5741 1808\fP
Liczba stron, które system wstronicował i liczba tych, które wystronicował
(z dysku).
.TP 
\fIswap 1 0\fP
Liczba stron wymiany, które wniesiono i wyniesiono.
.TP 
.\" FIXME The following is not the full picture for the 'intr' of
.\"       /proc/stat on 2.6:
\fIintr 1462898\fP
Linia ta pokazuje licznik przerwań obsłużonych od czasu uruchomienia dla
każdego możliwego przerwania systemowego. Pierwsza kolumna określa całkowitą
liczbę wszystkich obsłużonych przerwań, każda następna określa całkowitą
wartość dla danego przerwania.
.TP 
\fIdisk_io: (2,0):(31,30,5764,1,2) (3,0):\fP...
(major,disk_idx):(noinfo, read_io_ops, blks_read, write_io_ops,
blks_written)
.br
(tylko Linux 2.4)
.TP 
\fIctxt 115315\fP
Liczba przełączeń kontekstu, które przeszedł system.
.TP 
\fIbtime 769041601\fP
Czas uruchomienia systemu, w sekundach od epoki: 1970\-01\-01 00:00:00 +0000
(UTC).
.TP 
\fIprocesses 86031\fP
Liczba rozwidleń procesów od uruchomienia systemu.
.TP 
\fIprocs_running 6\fP
Liczba procesów w stanie runnable (Linux 2.5.45 i późniejsze).
.TP 
\fIprocs_blocked 2\fP
Liczba procesów oczekujących na zakończenie operacji wejścia/wyjścia (Linux
2.5.45 i późniejsze).
.RE
.TP 
\fI/proc/swaps\fP
Używane obszary wymiany. Zobacz także \fBswapon\fP(8).
.TP 
\fI/proc/sys\fP
Katalog ten (obecny od 1.3.57) zawiera wiele plików i podkatalogów
odpowiadających zmiennym jądra. Zmienne te mogą być odczytywane i czasem
modyfikowane za pośrednictwem systemu plików \fIproc\fP, jak też przy
wykorzystaniu (przestarzałej) funkcji systemowej \fBsysctl\fP(2)
.TP 
\fI/proc/sys/abi\fP (od Linuksa 2.4.10)
.\" On some systems, it is not present.
Plik może zawierać pliki z binarnymi informacjami aplikacji. Dalsze
informacje można znaleźć w pliku \fIDocumentation/sysctl/abi.txt\fP w źródłach
jądra.
.TP 
\fI/proc/sys/debug\fP
Ten katalog może być pusty.
.TP 
\fI/proc/sys/dev\fP
Ten katalog zawiera informacje specyficzne dla poszczególnych
urządzeń. (np. \fIdev/cdrom/info\fP). W niektórych systemach może być pusty.
.TP 
\fI/proc/sys/fs\fP
Katalog zawierający pliki i podkatalogi do zmiennych jądra związanych z
systemami plików.
.TP 
\fI/proc/sys/fs/binfmt_misc\fP
Dokumentacja plików z tego katalogu znajduje się w źródłach jądra w
\fIDocumentation/binfmt_misc.txt\fP.
.TP 
\fI/proc/sys/fs/dentry\-state\fP (od Linuksa 2.2)
Plik zawiera informacje o statusie bufora katalogu (dcache). Zawiera sześć
liczb: \fInr_dentry\fP, \fInr_unused\fP, \fIage_limit\fP (wiek w sekundach),
\fIwant_pages\fP (strony żądane przez system) i dwie nieużywane wartości.
.RS
.IP * 2
\fInr_dentry\fP jest liczbą zaalokowanych dentries (wpisów dcache). To pole
jest nieużywane w Linuksie 2.2.
.IP *
\fInr_unused\fP jest liczbą nieużywanych dentries.
.IP *
.\" looks like this is unused in kernels 2.2 to 2.6
\fIage_limit\fP jest wiekiem w sekundach, po którym wpisy dcache mogą być
przydzielone ponownie, gdy jest zbyt mało pamięci.
.IP *
.\" looks like this is unused in kernels 2.2 to 2.6
\fIwant_pages\fP jest niezerowa, gdy jądro wywołało shrink_dcache_pages(), ale
dcache nie zostały jeszcze przycięte.
.RE
.TP 
\fI/proc/sys/fs/dir\-notify\-enable\fP
Plik ten może służyć do wyłączania lub włączania interfejsu \fIdnotify\fP
opisanego w \fBfcntl\fP(2) dla całego systemu. Wartość 0 w tym pliku wyłącza
interfejs, a wartość 1 go włącza.
.TP 
\fI/proc/sys/fs/dquot\-max\fP
Zawiera maksymalną liczbę buforowanych wpisów kwot dyskowych. W niektórych
(2.4) systemach nie występuje. Gdy liczba wolnych zbuforowanych kwot
dyskowych jest bardzo mała, a jest przerażająca liczba jednoczesnych
użytkowników systemu, może istnieć potrzeba zwiększenia tego ograniczenia.
.TP 
\fI/proc/sys/fs/dquot\-nr\fP
Zawiera liczbę przydzielonych wpisów kwot dyskowych oraz liczbę wolnych
wpisów kwot dyskowych.
.TP 
\fI/proc/sys/fs/epoll\fP (od Linuksa 2.6.28)
Katalog zawiera plik \fImax_user_watches\fP, którego można użyć, aby ograniczyć
ilość pamięci jądra używanej przez interfejs \fIepoll\fP. Więcej szczegółów
można znaleźć w \fBepoll\fP(7).
.TP 
\fI/proc/sys/fs/file\-max\fP
Zawiera ogólnosystemowe ograniczenie liczby plików otwartych przez wszystkie
procesy. (Zobacz także \fBsetrlimit\fP(2), które może służyć procesom do
ustawiania ograniczenia dla procesu, \fBRLIMIT_NOFILE\fP, jako liczby plików,
które proces może otworzyć). Gdy otrzymuje się mnóstwo komunikatów o
przekroczeniu liczby uchwytów plików (file handles), to można spróbować
zwiększyć tę wartość:
.br

.br
.nf
\f(CWecho 100000 > /proc/sys/fs/file\-max\fP
.fi

Stała jądra \fBNR_OPEN\fP narzuca górne ograniczenie wartości, która może
zostać umieszczone w \fIfile\-max\fP.

Gdy zwiększa się \fI/proc/sys/fs/file\-max\fP, należy pamiętać o zwiększeniu
\fI/proc/sys/fs/inode\-max\fP do wartości 3\-4 razy większej niż nowa wartość
\fI/proc/sys/fs/file\-max\fP lub należy się liczyć z tym, że zabraknie i\-węzłów.
.TP 
\fI/proc/sys/fs/file\-nr\fP
Ten (tylko do odczytu) plik określa liczbę aktualnie otwartych
plików. Zawiera on trzy liczby: liczbę przydzielonych uchwytów plików,
liczbę wolnych uchwytów plików oraz maksymalną liczbę uchwytów plików. Jądro
przydziela uchwyty plików dynamicznie, ale ich później nie zwalnia. Gdy
liczba przydzielonych uchwytów plików zbliża się do maksimum, należy
rozważyć zwiększenie tego maksimum. Gdy jest duża liczba wolnych uchwytów
plików, oznacza to, że wystąpiło przesilenie w wykorzystaniu uchwytów plików
i, prawdopodobnie, nie ma potrzeby zwiększania maksimum.
.TP 
\fI/proc/sys/fs/inode\-max\fP
Ten plik zawiera maksymalną liczbę i\-węzłów w pamięci. W niektórych (2.4)
systemach może nie występować. Wartość ta powinna być 3\-4 razy większa niż
wartość w \fIfile\-max\fP, gdyż \fIstdin\fP, \fIstdout\fP i gniazda sieciowe również
potrzebują i\-węzłów, aby można było na nich operować. Gdy systematycznie
brakuje i\-węzłów, istnieje potrzeba zwiększenia tej wartości.
.TP 
\fI/proc/sys/fs/inode\-nr\fP
Zawiera dwie pierwsze wartości z \fIinode\-state\fP.
.TP 
\fI/proc/sys/fs/inode\-state\fP
Zawiera siedem liczb: \fInr_inodes\fP, \fInr_free_inodes\fP, \fIpreshrink\fP i cztery
wartości nieużywane. \fInr_inodes\fP jest liczbą przydzielonych w systemie
i\-węzłów. Może ona być nieco większa niż \fIinode\-max\fP, gdyż Linux przydziela
je pełnymi stronami. \fInr_free_inodes\fP przedstawia liczbę wolnych
i\-węzłów. \fIpreshrink\fP jest niezerowe, gdy \fInr_inodes\fP > \fIinode\-max\fP
oraz w systemie występuje potrzeba wyczyszczenia listy i\-węzłów zamiast
przydzielania nowych.
.TP 
\fI/proc/sys/fs/inotify\fP (od wersji Linuksa 2.6.13)
Ten katalog zawiera pliki \fImax_queued_events\fP, \fImax_user_instances\fP i
\fImax_user_watches\fP, których można użyć, aby ograniczyć ilość pamięci jądra
używanej przez interfejs \fIinotify\fP. Więcej szczegółów można znaleźć w
\fBinotify\fP(7).
.TP 
\fI/proc/sys/fs/lease\-break\-time\fP
Określa okres ulgi, przez jaki jądro zapewnia procesowi utrzymanie dzierżawy
pliku (\fBfcntl\fP(2)), a po którym wyśle do tego procesu sygnał zawiadamiający
go, że inny proces oczekuje na otwarcie pliku. Jeśli utrzymujący dzierżawę
nie usunie jej lub nie ograniczy swoich praw do niej w przeciągu tego czasu,
jądro wymusi zerwanie dzierżawy.
.TP 
\fI/proc/sys/fs/leases\-enable\fP
Ten plik może służyć do ogólnosystemowego włączania lub wyłączania dzierżaw
plików (\fBfcntl\fP(2)). Gdy plik ten zawiera wartość 0, dzierżawy są
wyłączone. Wartość niezerowa włącza dzierżawy.
.TP 
\fI/proc/sys/fs/mqueue\fP (od wersji Linuksa 2.6.6)
Ten katalog zawiera pliki \fImsg_max\fP, \fImsgsize_max\fP i \fIqueues_max\fP,
kontrolujące zasoby używane przez kolejki komunikatów POSIX. Szczegółowe
informacje można znaleźć w \fBmq_overview\fP(7).
.TP 
\fI/proc/sys/fs/overflowgid\fP and \fI/proc/sys/fs/overflowuid\fP
Te pliki umożliwiają zmianę wartości ustalonego UID\-u i GID\-u. Wartością
domyślną jest 65534. Niektóre systemy plików wspierają jedynie 16\-bitowe
UID\-y i GID\-y, podczas gdy linuksowe UID\-y i GID\-y są 32\-bitowe. Gdy któryś
z takich systemów plików jest zamontowany z możliwością zapisu, to wszystkie
UID\-y i GID\-y przekraczające 65535 są zastępowane podanymi tu wartościami
przed zapisem na dysk.
.TP 
\fI/proc/sys/fs/pipe\-max\-size\fP (od Linuksa 2.6.35)
Wartość w tym pliku definiuje górny limit do podnoszenia pojemności potoku
przy użyciu operacji \fBF_SETPIPE_SZ\fP \fBfcntl\fP(2). Limit ten odnosi się
wyłącznie do procesów nieuprzywilejowanych. Domyślną wartością dla tego
pliku jest 1\ 048\ 576. Wartość przypisana do pliku może być zaokrąglona w
górę, odnosząc się do faktycznej wartości wykorzystanej z powodu dogodnej
implementacji. Aby poznać zaokrągloną wartość, należy wyświetlić zawartość
tego pliku po przypisaniu do niego wartości. Minimalną wartością, jaka może
zostać przypisana do tego pliku jest systemowy rozmiar strony.
.TP 
\fI/proc/sys/fs/suid_dumpable\fP (od wersji Linuksa 2.6.13)
.\" The following is based on text from Documentation/sysctl/kernel.txt
Wartość w tym pliku określa, czy pliki zrzutów pamięci są tworzone dla
programów mających ustawiony bit set\-user\-ID albo chronionych w jakiś inny
sposób. Można podać trzy różne wartości liczbowe:
.sp
\fI0\ (domyślny)\fP. Jest to tradycyjne zachowanie (sprzed Linuksa
2.6.13). Zrzut pamięci nie będzie tworzony dla procesu, który zmienił swoje
uprawnienia (wywołując \fBseteuid\fP(2), \fBsetgid\fP(2) lub podobną funkcję albo
gdy program miał ustawiony bit set\-user\-ID lub set\-group\-ID) albo gdy
uprawnienia nadane plikowi binarnemu programu zabraniają jego odczytywania.
.sp
\fI1\ ("debug")\fP. Jeżeli jest to możliwe, to wszystkie procesy wykonują zrzut
pamięci. Właścicielem pliku zrzutu jest użytkownik, którego uprawnienia do
systemu plików ma proces wykonujący zrzut. Nie są stosowane żadne mechanizmy
bezpieczeństwa. Jest to przeznaczone tylko do celów debugowania. Ptrace nie
jest sprawdzane.
.sp
\fI2\ ("suidsafe")\fP. Zrzut pamięci programu, dla którego w normalnej sytuacji
taki zrzut nie zostałby wykonany (patrz wyżej "0"), może być odczytany tylko
przez administratora (root). Pozwala to użytkownikowi usunąć plik ze
zrzutem, ale nie pozwala na jego odczytanie. Z powodów bezpieczeństwa w tym
trybie pliki zrzutu nie nadpisują istniejących plików. Ten tryb jest
odpowiedni, gdy administrator będzie chciał debugować problemy w naturalnym
środowisku.
.TP 
\fI/proc/sys/fs/super\-max\fP
Plik steruje maksymalną liczbą superbloków, a więc i maksymalną liczbą
systemów plików, które jądro może zamontować. Potrzeba zwiększenia wartości
\fIsuper\-max\fP występuje tylko wtedy, gdy chce się zamontować więcej systemów
plików, niż na to pozwala aktualna wartość \fIsuper\-max\fP.
.TP 
\fI/proc/sys/fs/super\-nr\fP
Plik zawiera liczbę obecnie zamontowanych systemów plików.
.TP 
\fI/proc/sys/kernel\fP
Katalog zawiera pliki kontrolujące wiele parametrów jądra, jak opisano
poniżej.
.TP 
\fI/proc/sys/kernel/acct\fP
Plik zawiera trzy liczby: \fIhighwater\fP, \fIlowwater\fP i \fIfrequency\fP. Gdy
włączone jest rejestrowanie procesów w stylu BSD, wartości te sterują jego
zachowaniem. Gdy ilość wolnego miejsca w systemie plików, na którym znajdują
się logi, spada poniżej wyrażonej w procentach wartości \fIlowwater\fP,
rejestrowanie jest wstrzymywane. Gdy ilość wolnego miejsca stanie się
większa niż wyrażona w procentach wartość \fIhighwater\fP, rejestrowanie jest
wznawiane. \fIfrequency\fP określa, jak często jądro będzie sprawdzać ilość
wolnego miejsca (wartość w sekundach). Wartościami domyślnymi są 4, 2 i
30. Oznacza to, że rejestrowanie procesów jest wstrzymywane, gdy ilość
wolnego miejsca będzie wynosiła 2% lub mniej; wznowione zostanie, gdy wolne
będzie 4% lub więcej; zakłada się, że informacja o ilości wolnego miejsca
jest ważna przez 30 sekund.
.TP 
\fI/proc/sys/kernel/cap\-bound\fP (od Linuksa 2.2 do 2.6.24)
Plik przechowuje wartość \fIcapability bounding set\fP dla jądra (wyrażone jako
liczba dziesiętna ze znakiem). Wartość ta jest mnożona (AND) bitowo z
capabilities dozwolonymi dla procesu podczas \fBexecve\fP(2). Poczynając od
Linuksa 2.6.25 ogólnosystemowe capability bounding set zostało usunięte i
zastąpione bounding set na wątek, patrz \fBcapabilities\fP(7).
.TP 
\fI/proc/sys/kernel/core_pattern\fP
Patrz \fBcore\fP(5).
.TP 
\fI/proc/sys/kernel/core_uses_pid\fP
Patrz \fBcore\fP(5).
.TP 
\fI/proc/sys/kernel/ctrl\-alt\-del\fP
Ten plik steruje obsługą kombinacji klawiszy Ctrl\-Alt\-Del. Gdy w pliku tym
znajduje się wartość 0, Ctrl\-Alt\-Del jest przechwytywane i przesyłane do
programu \fBinit\fP(8) w celu wykonania wdzięcznego restartu. Gdy wartość jest
większa od 0, reakcją Linuksa na Wulkanicznie Nerwowe Nękanie (Vulcan Nerve
Pinch (tm)) będzie natychmiastowy restart, nawet bez zrzucenia
zmodyfikowanych buforów. Uwaga: gdy program (jak np. dosemu) korzysta z
"surowego" trybu klawiatury, Ctrl\-Alt\-Del jest przechwytywane przez program,
zanim dotrze do warstwy terminalowej jądra i decyzja, co z tym zrobić,
zależy od programu.
.TP 
\fI/proc/sys/kernel/hotplug\fP
Plik ten zawiera ścieżkę do programu hotplug. Domyślną wartością w tym pliku
jest \fI/sbin/hotplug\fP.
.TP 
\fI/proc/sys/kernel/domainname\fP i \fI/proc/sys/kernel/hostname\fP
Te pliki mogą służyć do ustawiania nazwy domeny i hosta NIS/YP maszyny
dokładnie w ten sam sposób, jak za pomocą poleceń \fBdomainname\fP(1) i
\fBhostname\fP(1), np.:

.in +4n
.nf
#\fB echo \(aqdarkstar\(aq > /proc/sys/kernel/hostname\fP
#\fB echo \(aqmydomain\(aq > /proc/sys/kernel/domainname\fP
.fi
.in

daje taki sam efekt, jak

.in +4n
.nf
#\fB hostname \(aqdarkstar\(aq\fP
#\fB domainname \(aqmydomain\(aq\fP
.fi
.in

Należy tu zauważyć, że klasyczny darkstar.frop.org posiada nazwę hosta
"darkstar" i domenę "frop.org" w DNS (Internetowej Usłudze Nazw Domen \-
Internet Domain Name Service), których nie należy mylić z domeną NIS
(Sieciowej Usługi Informacyjnej \- Network Information Service) lub YP
(Yellow Pages). Te dwa systemy nazw domenowych zasadniczo się
różnią. Szczegółowe informacje można znaleźć na stronie podręcznika
\fBhostname\fP(1).
.TP 
\fI/proc/sys/kernel/htab\-reclaim\fP
(Tylko PowerPC) Jeśli do tego pliku zostanie wpisana wartość niezerowa, htab
PowerPC (zobacz: plik \fIDocumentation/powerpc/ppc_htab.txt\fP w źródłach
jądra) jest czyszczony za każdym razem, gdy system natrafi na pętlę
oczekiwania ("idle").
.TP 
\fI/proc/sys/kernel/l2cr\fP
(Tylko PowerPC) Plik zawiera znacznik sterujący cache'em L2 płyt procesora
G3. Jeśli zawiera 0, cache jest wyłączony. Cache jest włączony, gdy plik
zawiera wartość różną od zera.
.TP 
\fI/proc/sys/kernel/modprobe\fP
Plik zawiera ścieżkę do programu ładującego moduły jądra. Domyślną wartością
jest \fI/sbin/modprobe\fP. Plik jest obecny tylko, jeśli jądro zostało
zbudowane z włączoną opcją \fBCONFIG_KMOD\fP. Jest on opisany w pliku źródeł
jądra \fIDocumentation/kmod.txt\fP (obecnym tylko w jądrach 2.4 i
wcześniejszych).
.TP 
\fI/proc/sys/kernel/msgmax\fP
Zawiera ogólnosystemowe ograniczenie maksymalnej liczby bajtów w pojedynczym
komunikacie zapisywanym do kolejki komunikatów Systemu V.
.TP 
\fI/proc/sys/kernel/msgmni\fP
Określa ogólnosystemowe ograniczenie liczby identyfikatorów kolejek
komunikatów. (Plik ten występuje począwszy od Linuksa 2.4).
.TP 
\fI/proc/sys/kernel/msgmnb\fP
Zawiera ogólnosystemowy parametr służący do inicjacji ustawienia
\fImsg_qbytes\fP tworzonych później kolejek komunikatów. Ustawienie
\fImsg_qbytes\fP określa maksymalną liczbę bajtów, które mogą zostać zapisane
do kolejki komunikatów.
.TP 
\fI/proc/sys/kernel/ostype\fP i \fI/proc/sys/kernel/osrelease\fP
Pliki te zawierają poszczególne części z \fI/proc/version\fP.
.TP 
\fI/proc/sys/kernel/overflowgid\fP i \fI/proc/sys/kernel/overflowuid\fP
Pliki te są kopiami plików \fI/proc/sys/fs/overflowgid\fP i
\fI/proc/sys/fs/overflowuid\fP.
.TP 
\fI/proc/sys/kernel/panic\fP
Plik umożliwia dostęp (odczyt i zapis) do zmiennej jądra
\fIpanic_timeout\fP. Jeśli jest to zero, jądro będzie się zapętlać podczas
paniki; jeśli wartość niezerowa, to określa liczbę sekund, po której jądro
powinno się automatycznie przeładować. Jeśli używany jest software watchdog
to zalecaną wartością jest 60.
.TP 
\fI/proc/sys/kernel/panic_on_oops\fP (od Linuksa 2.5.68)
Plik ten kontroluje zachowanie jądra, kiedy wystąpi oops lub BŁĄD. Jeśli ten
plik zawiera 0, to system próbuje kontynuować operację. Jeśli zawiera 1, to
system czeka parę sekund (aby dać procesowi klogd czas na zapisanie wyjścia
z oops), a następnie panikuje. Jeżeli wartość w pliku
\fI/proc/sys/kernel/panic\fP również jest niezerowa, to nastąpi restart
komputera.
.TP 
\fI/proc/sys/kernel/pid_max\fP (od Linuksa 2.5.34)
.\" Prior to 2.6.10, pid_max could also be raised above 32768 on 32-bit
.\" platforms, but this broke /proc/[pid]
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=109513010926152&w=2
Ten plik określa wartość po której nastąpi przewinięcie licznika PID
(tj. wartość w tym pliku jest o 1 większa niż maksymalny PID). Domyślna
wartość tego pliku, czyli 32768, określa taki sam zakres wartości PID, jak
wcześniejsze wersje jądra. Dla platform 32\-bitowych 32768 jest maksymalną
wartością, jaką może przyjmować \fIpid_max\fP. W systemach 64\-bitowych
\fIpid_max\fP może zostać ustawiony na dowolną wartość, aż do 2^22
(\fBPID_MAX_LIMIT\fP, około 4 milionów).
.TP 
\fI/proc/sys/kernel/powersave\-nap\fP (tylko PowerPC)
Plik zawiera znacznik. Gdy jest on ustawiony, Linux\-PPC używa trybu
oszczędzania energii "nap", a w przeciwnym przypadku trybu "doze".
.TP 
\fI/proc/sys/kernel/printk\fP
Cztery wartości w pliku \fIprintk\fP to: \fIconsole_loglevel\fP,
\fIdefault_message_loglevel\fP, \fIminimum_console_level\fP i
\fIdefault_console_loglevel\fP. Wartości te wpływają na zachowanie \fIprintk()\fP
podczas wypisywania lub logowania komunikatów błędów. Informacja o różnych
poziomach logowania można znaleźć w \fBsyslog\fP(2). Komunikaty o priorytecie
wyższym niż \fIconsole_loglevel\fP będą wypisywane na konsoli. Komunikaty bez
jawnego priorytetu będą wypisywane z priorytetem
\fIdefault_message_level\fP. \fIminimum_console_loglevel\fP jest najmniejszą
(najwyższą) wartością, którą można ustawić jako
\fIconsole_loglevel\fP. \fIdefault_console_loglevel\fP jest domyślną wartością dla
\fIconsole_loglevel\fP.
.TP 
\fI/proc/sys/kernel/pty\fP (od wersji Linuksa 2.6.4)
Ten katalog zawiera dwa pliki związane z liczbą pseudoterminali UNIX 98
(patrz \fBpts\fP(4)) w systemie.
.TP 
\fI/proc/sys/kernel/pty/max\fP
Plik określa maksymalną liczbę pseudoterminali.
.TP 
\fI/proc/sys/kernel/pty/nr\fP
Ten plik tylko do odczytu zawiera informację o liczbie obecnie używanych
pseudoterminali.
.TP 
\fI/proc/sys/kernel/random\fP
Katalog ten zawiera różne parametry sterujące działaniem pliku
\fI/dev/random\fP. Dalsze informacje można znaleźć w \fBrandom\fP(4).
.TP 
\fI/proc/sys/kernel/real\-root\-dev\fP
Plik ten jest udokumentowany w pliku \fIDocumentation/initrd.txt\fP w źródłach
jądra.
.TP 
\fI/proc/sys/kernel/reboot\-cmd\fP (tylko Sparc) 
Ten plik wydaje się stanowić mechanizm podawania argumentów SPARC\-owej
ładowarce systemu w ROM/Flash. Może przekazuje jej, co zrobić po restarcie?
.TP 
\fI/proc/sys/kernel/rtsig\-max\fP
(Tylko w wersjach jądra nie późniejszych niż 2.6.7; patrz
\fBsetrlimit\fP(2)). Plik ten może służyć do sterowania maksymalną liczbą
zgodnych z POSIX nieobsłużonych (w kolejkach) sygnałów czasu rzeczywistego w
systemie.
.TP 
\fI/proc/sys/kernel/rtsig\-nr\fP
(Tylko w wersjach jądra nie późniejszych niż 2.6.7). Plik ten podaje liczbę
zgodnych z POSIX sygnałów czasu rzeczywistego oczekujących obecnie w
kolejce.
.TP 
\fI/proc/sys/kernel/sem\fP (od wersji Linuksa 2.4)
Plik ten zawiera 4 liczby definiujące ograniczenia semaforów Systemu V. Są
to w kolejności:
.RS
.IP SEMMSL 8
Maksymalna liczba semaforów w zestawie semaforów.
.IP SEMMNS 8
Ogólnosystemowe ograniczenie liczby semaforów we wszystkich zestawiach
semaforów.
.IP SEMOPM 8
Maksymalna liczba operacji, które mogą zostać podane w wywołaniu
\fBsemop\fP(2).
.IP SEMMNI 8
Ogólnosystemowe ograniczenie maksymalnej liczby identyfikatorów semaforów.
.RE
.TP 
\fI/proc/sys/kernel/sg\-big\-buff\fP
Plik ten zawiera rozmiar bufora niskopoziomowego urządzenia SCSI (sg). Nie
można nim na razie sterować, ale można go zmienić podczas kompilacji poprzez
edycję \fIinclude/scsi/sg.h\fP i zmianę wartości \fBSG_BIG_BUFF\fP. Jednakże nie
ma żadnego powodu, aby to robić.
.TP 
\fI/proc/sys/kernel/shmall\fP
Ten plik zawiera ogólnosystemowe ograniczenie całkowitej liczby stron
pamięci wspólnej Systemu V.
.TP 
\fI/proc/sys/kernel/shmmax\fP
Ten plik może służyć do odpytywania o aktualne ograniczenie maksymalnego
rozmiaru tworzonego segmentu pamięci wspólnej (System V IPC) oraz do zmiany
tego ograniczenia. Jądro wspiera obecnie segmenty pamięci wspólnej do 1
GB. Wartością domyślną jest \fBSHMMAX\fP.
.TP 
\fI/proc/sys/kernel/shmmni\fP
(dostępny począwszy od Linuksa 2.4) Ten plik określa ogólnosystemową
maksymalną liczbę segmentów pamięci wspólnej Systemu V, które można
utworzyć.
.TP 
\fI/proc/sys/kernel/sysrq\fP
Plik kontroluje dozwolone funkcje, które są wywoływane przy użyciu klawisza
SysRq. Domyślnie, plik zawiera 1, oznaczające że dozwolona jest każde
możliwe żądanie SysRq (w starszych wersjach jądra, SysRq było domyślnie
wyłączone i konieczne było włączenie go w czasie uruchomienia, jednak ta
sytuacja już nie występuje). Dozwolone wartości w pliku:

   0 \- całkowicie wyłącza sysrq
   1 \- włącza wszystkie funkcje sysrq
  >1 \- maska bitowa dozwolonych funkcji sysrq, jak poniżej:
          2 \- włącza kontrolę poziomu logów konsoli
          4 \- włącza kontrolę klawiatury (SAK, unraw)
          8 \- włącza zrzuty procesów w celu debugowania itd.
         16 \- włącza polecenie sync
         32 \- włącza ponowne montowanie tylko do odczytu
         64 \- włącza sygnały procesów (term, kill, oom\-kill)
        128 \- pozwala na restartowanie/wyłączanie
        256 \- pozwala ustawiać nice wszystkich zadań czasu rzeczywistego

Ten plik istnieje tylko jeśli podczas kompilacji jądra włączono opcję
\fBCONFIG_MAGIC_SYSRQ\fP. Aby dowiedzieć się więcej, proszę zapoznać się z
plikiem \fIDocumentation/sysrq.txt\fP w źródłach jądra.
.TP 
\fI/proc/sys/kernel/version\fP
Plik zawiera tekst jak np.:

    #5 Wed Feb 25 21:49:24 MET 1998

Gdzie'#5' oznacza, że jest to piąte z kolei jądro zbudowane z tych samych
źródeł, a następująca dalej data określa, kiedy jądro zostało zbudowane.
.TP 
\fI/proc/sys/kernel/threads\-max\fP (od Linuksa 2.3.11)
Ten plik określa ogólnosystemowe ograniczenie całkowitej liczby wątków
(zadań), jakie mogą zostać utworzone w systemie.
.TP 
\fI/proc/sys/kernel/zero\-paged\fP (tylko PowerPC) 
Plik zawiera znacznik. Gdy jest on ustawiony (niezerowy), Linux\-PPC wstępnie
zeruje strony w pętli bezczynności. Prawdopodobnie przyspiesza to
get_free_pages.
.TP 
\fI/proc/sys/net\fP
Ten katalog zawiera rzeczy związane z siecią. Wyjaśnienia dotyczące
niektórych plików zawartych w tym katalogu można znaleźć w \fBtcp\fP(7) i
\fBip\fP(7).
.TP 
\fI/proc/sys/net/core/somaxconn\fP
Plik definiuje wartość cechy górnej (sufitu) do argumentu \fIbacklog\fP funkcji
\fBlisten\fP; patrz strona podręcznika \fBlisten\fP(2), aby dowiedzieć się więcej.
.TP 
\fI/proc/sys/proc\fP
Ten katalog może być pusty.
.TP 
\fI/proc/sys/sunrpc\fP
Ten katalog obsługuje Sunowskie zdalne wywoływanie procedur dla sieciowego
systemu plikowego (NFS). W niektórych systemach może nie istnieć.
.TP 
\fI/proc/sys/vm\fP
Ten katalog zawiera pliki sterujące zarządzaniem pamięcią, buforami i
zarządzaniem cachem.
.TP 
\fI/proc/sys/vm/drop_caches\fP (od wersji Linuksa 2.6.16)
Zapis do tego pliku powoduje zwolnienie przez jądro czystych buforów,
dentries i i\-węzłów z pamięci, zwalniając tę pamięć.

Aby zwolnić bufor stronicowania, należy użyć \fIecho 1 >
/proc/sys/vm/drop_caches\fP; aby zwolnić dentries i i\-węzły, należy użyć
\fIecho 2 > /proc/sys/vm/drop_caches\fP; aby zwolnić bufor stronicowania,
dentries i i\-węzły, należy użyć \fIecho 3 > /proc/sys/vm/drop_caches\fP.

Ponieważ operacja ta nie jest destrukcyjna i brudne obiekty nie są
zwalniane, użytkownik powinien wcześniej uruchomić \fBsync\fP(8).
.TP 
\fI/proc/sys/vm/legacy_va_layout\fP (od wersji Linuksa 2.6.9)
.\" The following is from Documentation/filesystems/proc.txt
Wartość niezerowa oznacza wyłączenie nowego, 32\-bitowego rozmieszczenia
mapowania pamięci; jądro będzie używać starego (2.4) rozmieszczenia dla
wszystkich procesów.
.TP 
\fI/proc/sys/vm/memory_failure_early_kill\fP (od Linuksa 2.6.32)
.\" The following is based on the text in Documentation/sysctl/vm.txt
Kontroluje jak zabijać procesy z nienaprawialnym błędem pamięci (z reguły
2\-bitowy błąd w module pamięci), które nie mogą być obsłużone przez jądro,
wykryte w tle przez sprzęt. W niektórych przypadkach (np. jeśli strona ma
wciąż poprawną kopię na dysku), jądro obsłuży taki błąd w sposób
przezroczysty, bez wpływu na pracę aplikacji. Jednak jeśli nie istnieje
inna, zaktualizowana kopia danych, jądro zabija procesy, aby zapobiec
uszkodzeniu danych wynikłego z propagacji błędu.

Plik posiada jedną z następujących wartości:
.RS
.IP 1: 4
Wszystkie procesy, które posiadają zmapowaną uszkodzoną i nieprzeładowaną
stronę, są zabijane zaraz po wykryciu uszkodzenia. Proszę zauważyć, że nie
jest to obsługiwane dla nielicznych typów stron, takich jak wewnętrzne
przypisanie danych przez jądro lub pamięć podręczna na dysku (swap), ale
działa w przypadku większości stron użytkownika.
.IP 0: 4
Usuwana (unmap) jest jedynie uszkodzona strona, a zabijane są wyłącznie
procesy, które chcą uzyskać do niej dostęp.
.RE
.IP
Zabicie jest wykonywane za pomocą sygnału \fBSIGBUS\fP z \fIsi_code\fP ustawionym
na \fBBUS_MCEERR_AO\fP. Procesy mogą obsłużyć tę sytuację, jeśli chcą; proszę
zapoznać się z \fBsigaction\fP(2), aby dowiedzieć się więcej.

Funkcja jest aktywna wyłącznie na architekturach/platformach z zaawansowaną,
maszynową obsługą sprawdzania i zależy od możliwości sprzętowych.

Aplikacje mogą indywidualnie przesłonić ustawienie
\fImemory_failure_early_kill\fP za pomocą operacji \fBPR_MCE_KILL\fP \fBprctl\fP(2).
.IP
Obecne tylko, jeśli jądro zostało skonfigurowane z \fBCONFIG_MEMORY_FAILURE\fP.
.TP 
\fI/proc/sys/vm/memory_failure_recovery\fP (od Linuksa 2.6.32)
.\" The following is based on the text in Documentation/sysctl/vm.txt
Włącza odzyskiwanie po błędzie pamięci (jeśli jest obsługiwane przez daną
platformę)
.RS
.IP 1: 4
Próbuje odzyskiwać.
.IP 0: 4
Zawsze panikuje przy błędzie pamięci.
.RE
.IP
Obecne tylko, jeśli jądro zostało skonfigurowane z \fBCONFIG_MEMORY_FAILURE\fP.
.TP 
\fI/proc/sys/vm/oom_dump_tasks\fP (od Linuksa 2.6.25)
.\" The following is from Documentation/sysctl/vm.txt
Włącza tworzenie ogólnosystemowego zrzutu zadania (bez wątków jądra), gdy
jądro wykonuje OOM\-killing. Zrzut zawiera następujące informacje o każdym
zadaniu (wątku, procesie): identyfikator wątku, realny identyfikator
użytkownika, identyfikator grupy wątku (identyfikator procesu), rozmiar
pamięci wirtualnej, rozmiar zestawu rezydentnego, procesor któremu
przydzielono zadanie, wynik oom_adj (patrz opis \fI/proc/[pid]/oom_adj\fP) i
nazwę polecenia. Jest to przydatne do określenia dlaczego OOM\-killer został
przywołany i zidentyfikowania zadania, które to spowodowało.

Jeśli zawiera wartość zero, ta informacja nie jest zrzucana. Zrobienie
zrzutu stanu pamięci każdego zadania może nie być wykonalne w bardzo dużych
systemach, z tysiącami zadań. Takie systemy nie powinny być zmuszane do
narażania się na dodatkowy spadek wydajności w sytuacjach braku pamięci, gdy
taka informacja nie może być przydatna.

Jeśli wartość jest niezerowa, ta informacja jest pokazywana kiedy tylko
OOM\-killer rzeczywiście zabija zadanie zajmujące dużo pamięci.

Domyślną wartością jest 0.
.TP 
\fI/proc/sys/vm/oom_kill_allocating_task\fP (od Linuksa 2.6.24)
.\" The following is from Documentation/sysctl/vm.txt
Włącza lub wyłącza zabijanie zadania kolejkującego OOM w sytuacjach braku
pamięci (Out\-Of\-Memory).

Jeśli jest ustawione na zero OOM\-killer przeskanuje całą listę zadań i do
zabicia wybierze zadania na podstawie heurystyki. Z reguły wybierane są
zadania zajmujące wiele pamięci, które zwalniają dużą ilość pamięci po
zabiciu.

Jeśli jest ustawione na wartość niezerową, OOM\-killer po prostu zabija
zadanie, które wyzwoliło stan braku pamięci. W ten sposób unika się
potencjalnie kosztownego skanowania listy zadań.

Jeśli \fI/proc/sys/vm/panic_on_oom\fP jest niezerowe, to ma ono pierwszeństwo,
niezależnie od wartości użytej w \fI/proc/sys/vm/oom_kill_allocating_task\fP.

Domyślną wartością jest 0.
.TP 
\fI/proc/sys/vm/overcommit_memory\fP
Plik zawiera tryb rozliczeń pamięci wirtualnej jądra. Dopuszczalne wartości:
.RS
.IP
0: heurystyczny overcommit (domyślnie)
.br
1: zawsze robi overcommit, nigdy nie sprawdza
.br
2: zawsze sprawdza, nigdy nie robi overcommitu
.RE
.IP
W trybie 0 nie są sprawdzane wywołania \fBmmap\fP(2) z \fBMAP_NORESERVE\fP, a
domyślne sprawdzenia są bardzo słabe, prowadząc do ryzyka zabicia procesu
przez "OOM\-killera". Pod Linuksem 2.4 jakakolwiek wartość niezerowa oznacza
tryb 1. W trybie 2 (dostępnym od Linuksa 2.6), całkowity adres przestrzeni
wirtualnej w systemie jest ograniczony do (SS + RAM*(r/100)), gdzie SS jest
rozmiarem przestrzeni wymiany, RAM jest rozmiarem fizycznej pamięci, a r \-
zawartością pliku \fI/proc/sys/vm/overcommit_ratio\fP.
.TP 
\fI/proc/sys/vm/overcommit_ratio\fP
Zobacz opis \fI/proc/sys/vm/overcommit_memory\fP.
.TP 
\fI/proc/sys/vm/panic_on_oom\fP (od wersji Linuksa 2.6.18)
.\" The following is adapted from Documentation/sysctl/vm.txt
Włącza lub wyłącza panikę jądra w sytuacjach braku pamięci.

Jeśli plik ma ustawioną wartość 0, OOM\-killer jądra zabija któryś z
nieposłusznych procesów. Z reguły OOM\-killer jest w stanie to wykonać i
system może pracować dalej.

Jeśli plik ma ustawioną wartość 1, to jądro zwykle panikuje przy sytuacji
braku pamięci. Jednak jeśli proces limituje przydzielanie do konkretnych
węzłów używając zasad pamięci (\fBmbind\fP(2)  \fBMPOL_BIND\fP) lub cpuset
(\fBcpuset\fP(7)) i te węzły dotknie problem braku pamięci, to taki proces może
być zabity przez OOM\-killer. Nie występuje wówczas panika, ponieważ pamięć
innych węzłów może być wolna, co oznacza że system jako całość mógł nie
osiągnąć jeszcze sytuacji braku pamięci.

Jeśli ustawiono wartość 2, to jądro zawsze panikuje w sytuacji braku
pamięci.

Domyślną wartość jest 0. 1 i 2 są przeznaczone do poprawnej pracy klastrów
mimo wystąpienia problemów. Proszę wybrać właściwą z nich, zgodnie z
używanymi zasadami w takich sytuacjach.
.TP 
\fI/proc/sys/vm/swappiness\fP
.\" The following is from Documentation/sysctl/vm.txt
Wartość w tym pliku kontroluje jak agresywnie jądro przenosi strony pamięci
do pamięci wymiany (swapu). Wyższe wartości zwiększają agresywność, mniejsze
zmniejszają ją. Domyślną wartością jest 60.
.TP 
\fI/proc/sysrq\-trigger\fP (od Linuksa 2.4.21)
Zapisanie znaków do tego pliku wyzwala tę samą funkcję SysRq, jaka zostałaby
wykonana przy użyciu kombinacji ALT\-SysRq\-<znak> (patrz opis
\fI/proc/sys/kernel/sysrq\fP). Plik jest normalnie zapisywalny tylko dla
roota. Aby dowiedzieć się więcej, proszę zapoznać się z plikiem
\fIDocumentation/sysrq.txt\fP w źródłach jądra.
.TP 
\fI/proc/sysvipc\fP
Podkatalog zawierający pseudopliki \fImsg\fP, \fIsem\fP i \fIshm\fP. Pliki te
zawierają obiekty komunikacji międzyprocesowej (Interprocess Communication \-
IPC) Systemu V (odpowiednio: kolejki komunikatów, semafory i pamięć wspólną)
obecnie istniejące w systemie, udostępniając informacje podobne do tych,
które są dostępne poprzez \fBipcs\fP(1). Pliki te zawierają nagłówki i są
sformatowane (jeden obiekt IPC w wierszu) w celu łatwiejszego
zrozumienia. \fBsvipc\fP(7) podaje dodatkowe informacje o zawartości tych
plików.
.TP 
\fI/proc/tty\fP
Podkatalog zawierający psuedopliki i podkatalogi sterowników terminali (tty)
oraz protokołów sterowania linią (line discipline).
.TP 
\fI/proc/uptime\fP
Ten plik zawiera dwie liczby: czas pracy systemu (w sekundach) i ilość czasu
spędzonego na wykonywaniu procesu idle (w sekundach).
.TP 
\fI/proc/version\fP
Ten napis określa wersję obecnie działającego jądra. Zawiera on w sobie
zawartość \fI/proc/sys/ostype\fP, \fI/proc/sys/osrelease\fP i
\fI/proc/sys/version\fP. Na przykład:
.nf
.in -2
\f(CWLinux version 1.0.9 (quinlan@phaze) #1 Sat May 14 01:51:54 EDT 1994\fP
.in +2
.fi
.\" FIXME Document /proc/timer_list
.\" .TP
.\" .IR /proc/timer_list " (since Linux 2.6.21)"
.\" See the 2.6.21 Change log
.\" FIXME Document /proc/timer_stats
.\" .TP
.\" .IR /proc/timer_stats " (since Linux 2.6.21)"
.\" See the 2.6.21 Change log
.TP 
\fI/proc/vmstat\fP (od wersji Linuksa 2.6)
Plik ten wyświetla różne statystyki pamięci wirtualnej.
.TP 
\fI/proc/zoneinfo\fP (od wersji Linuksa 2.6.13)
.\" FIXME more should be said about /proc/zoneinfo
Plik zawiera informacje o strefach pamięci. Może być przydatny podczas
analizowania zachowania pamięci wirtualnej.
.SH UWAGI
Wiele łańcuchów znakowych (np. środowisko czy linia poleceń) występuje w
postaci wewnętrznej, z polami zakończonymi bajtami NUL (\(aq\e0\(aq), więc
jeśli do ich czytania użyje się \fIod \-c\fP lub \fItr "\e000" "\en"\fP, to mogą
być bardziej czytelne. Alternatywnie, \fIecho \`cat <plik>\`\fP działa
równie dobrze.

.\" .SH ACKNOWLEDGEMENTS
.\" The material on /proc/sys/fs and /proc/sys/kernel is closely based on
.\" kernel source documentation files written by Rik van Riel.
Ta strona podręcznika jest niekompletna, prawdopodobnie niedokładna i należy
do tych, które powinny być bardzo często poprawiane.
.SH "ZOBACZ TAKŻE"
\fBcat\fP(1), \fBdmesg\fP(1), \fBfind\fP(1), \fBfree\fP(1), \fBps\fP(1), \fBtr\fP(1),
\fBuptime\fP(1), \fBchroot\fP(2), \fBmmap\fP(2), \fBreadlink\fP(2), \fBsyslog\fP(2),
\fBslabinfo\fP(5), \fBhier\fP(7), \fBtime\fP(7), \fBarp\fP(8), \fBhdparm\fP(8),
\fBifconfig\fP(8), \fBinit\fP(8), \fBlsmod\fP(8), \fBlspci\fP(8), \fBmount\fP(8),
\fBnetstat\fP(8), \fBprocinfo\fP(8), \fBroute\fP(8)
.br
Pliki w źródłach jądra: \fIDocumentation/filesystems/proc.txt\fP,
\fIDocumentation/sysctl/vm.txt\fP
.SH "O STRONIE"
Ta strona jest częścią wydania 3.40 projektu \fIman\-pages\fP Linuksa. Opis
projektu, informacje o zgłaszaniu błędów dostępne na stronie
http://www.kernel.org/doc/man\-pages/.
.SH TŁUMACZENIE
\fIJiffy\fP to wartość wynosząca, w zależności od architektury, od 1 do 10 ms (4 ms w przypadku i386).
.PP
Autorami polskiego tłumaczenia niniejszej strony podręcznika man są:
Przemek Borys (PTM) <pborys@p-soft.silesia.linux.org.pl>,
Robert Luberda <robert@debian.org>
i
Michał Kułach <michal.kulach@gmail.com>.
.PP
Polskie tłumaczenie jest częścią projektu manpages-pl; uwagi, pomoc, zgłaszanie błędów na stronie http://sourceforge.net/projects/manpages-pl/. Jest zgodne z wersją \fB 3.40 \fPoryginału.
