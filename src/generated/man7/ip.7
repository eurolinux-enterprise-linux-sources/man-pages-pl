.\" t
.\" Don't change the line above. it tells man that tbl is needed.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: ip.7,v 1.19 2000/12/20 18:10:31 ak Exp $
.\"
.\" FIXME: Document IP_MINTTL, added in Linux 2.6.34
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.\" This file is distributed under the same license as original manpage
.\" Copyright of the original manpage:
.\" Copyright © 1999 Andi Kleen 
.\" Copyright © of Polish translation:
.\" Paweł Wilk (PTM) <siewca@pld.org.pl>, 1999.
.\" Robert Luberda <robert@debian.org>, 2006, 2012.
.TH IP 7 2011\-09\-22 Linux "Podręcznik programisty Linuksa"
.SH NAZWA
ip \- Implementacja protokołu IPv4 dla systemu Linux
.SH SKŁADNIA
\fB#include <sys/socket.h>\fP
.br
.\" .B #include <net/netinet.h> -- does not exist anymore
.\" .B #include <linux/errqueue.h> -- never include <linux/foo.h>
\fB#include <netinet/in.h>\fP
.br
\fB#include <netinet/ip.h> \fP/* nadzbiór poprzedniego */
.sp
\fItcp_socket\fP\fB = socket(AF_INET, SOCK_STREAM, 0);\fP
.br
\fIudp_socket\fP\fB = socket(AF_INET, SOCK_DGRAM, 0);\fP
.br
\fIraw_socket\fP\fB = socket(AF_INET, SOCK_RAW, \fP\fIprotokół\fP\fB);\fP
.SH OPIS
.\" FIXME has someone verified that 2.1 is really 1812 compliant?
Linux implementuje protokół IPv4 opisany w RFC\ 791 i RFC\ 1122. \fBip\fP
zawiera drugi poziom implementacji adresowania grupowego (multicasting)
zgodny z RFC\ 1112. Zawiera też router IP, włączając w to filtr pakietów.
.PP
Interfejs programistyczny jest zgodny gniazdami BSD. Więcej informacji na
temat gniazd można znaleźć, przeglądając \fBsocket\fP(7).
.PP
Gniazdo IP jest tworzone przez wywołanie funkcji \fBsocket\fP(2) jako
\fBsocket(AF_INET, \fP\fItyp_gniazda\fP\fB, \fP\fIprotokół\fP\fB)\fP. Poprawne typy gniazd
to: \fBSOCK_STREAM\fP służące do tworzenia gniazd pośredniczących w obsłudze
protokołu \fBtcp\fP(7), \fBSOCK_DGRAM\fP obsługujące protokół \fBudp\fP(7) oraz
\fBSOCK_RAW\fP pozwalające tworzyć gniazda \fBraw\fP(7) (surowe) umożliwiające
bezpośredni dostęp do protokołu IP. \fIprotokół\fP jest protokołem bazującym na
IP. Informacja o nim jest umieszczana w nagłówku wysyłanego bądź odbieranego
pakietu IP. Dla gniazd TCP poprawnymi wartościami są tylko 0 i
\fBIPPROTO_TCP\fP, a dla gniazd UDP \(em 0 i \fBIPPROTO_UDP\fP. Dla \fBSOCK_RAW\fP
można podać dowolny poprawny numer protokołu IP określony przez IANA w RFC\ 1700.
.PP
.\" FIXME ip current does an autobind in listen, but I'm not sure
.\" if that should be documented.
Kiedy proces chce odbierać nowe, nadchodzące pakiety lub połączenia,
powinien podłączyć gniazdo do adresu lokalnego interfejsu za pomocą funkcji
\fBbind\fP(2). Do dowolnej lokalnej pary (adres, port) można podłączyć tylko
jedno gniazdo IP. Gdy w wywołaniu \fBbind\fP(2) podana jest wartość
\fBINADDR_ANY\fP, to gniazdo zostanie dowiązane do \fIwszystkich\fP lokalnych
interfejsów sieciowych. Gdy dla niedowiązanego gniazda zostanie wywołane
\fBlisten\fP(2) lub \fBconnect\fP(2), gniazdo to zostanie automatycznie dowiązane
do losowo wybranego wolnego portu, przy czym adres lokalny zostanie
ustawiony na \fBINADDR_ANY\fP.

Przypisywanie (często w literaturze: "nazywanie") lokalnego gniazda TCP jest
niemożliwe przez pewien okres czasu po jego zamknięciu, chyba że zostanie
dla tego gniazda ustawiony atrybut \fBSO_REUSEADDR\fP. Należy używać tego
atrybutu z rozwagą, gdyż czyni on TCP mniej niezawodnym.
.SS "Format adresu"
Adres gniazda IP jest przedstawiony za pomocą kombinacji adresu interfejsu
IP i 16\-bitowego numeru portu. Podstawowy protokół IP nie zawiera numerów
portów, są one zaimplementowane w protokołach wyższej warstwy, takich jak
\fBudp\fP(7) i \fBtcp\fP(7). Dla gniazd surowych \fIsin_port\fP jest ustawione na
protokół IP.
.PP
.in +4n
.nf
struct sockaddr_in {
    sa_family_t    sin_family; /* rodzina adresów: AF_INET  */
    in_port_t      sin_port;   /* port \- sieciowa kolejność bajtów */
    struct in_addr sin_addr;   /* adres internetowy */
};

/* Adres internetowy */
struct in_addr {
    uint32_t     s_addr;     /* adres \- sieciowa kolejność bajtów */
};
.fi
.in
.PP
\fIsin_family\fP ma zawsze wartość \fBAF_INET\fP. Jest to wymagane; w Linuksie 2.2
większość funkcji sieciowych zwraca \fBEINVAL\fP, jeśli brakuje tego
ustawienia. \fIsin_port\fP zawiera numer portu podany w sieciowej kolejności
bajtów. Numery portów niższe niż 1024 są nazywane \fIportami
uprzywilejowanymi\fP (lub czasem \fIportami zarezerwowanymi\fP). Tylko procesy
uprzywilejowane (tj. z ustawionym atrybutem \fBCAP_NET_BIND_SERVICE\fP) mogą
wywołać \fBbind\fP(2) dla tego rodzaju gniazd. Należy zauważyć, że surowy
protokół IPv4 jako taki nie zawiera pojęcia portu (takie rozróżnienie jest
dopiero w warstwie transportowej, a to jest warstwa sieciowa). Numery portów
występują dopiero w protokołach wyższej warstwy, takich jak \fBtcp\fP(7) i
\fBudp\fP(7).
.PP
\fIsin_addr\fP to adres IP komputera (maszyny). Pole \fIs_addr\fP struktury
\fIstruct in_addr\fP zawiera adres interfejsu maszyny w sieciowej kolejności
bajtów. Polu \fIin_addr\fP należy albo przypisać jedną z wartości \fBINADDR_*\fP
(np. \fBINADDR_ANY\fP), albo użyć funkcji bibliotecznych \fBinet_aton\fP(3),
\fBinet_addr\fP(3), \fBinet_makeaddr\fP(3) do ustawienia wartości, albo ustawić
bezpośrednio przez resolvera (patrz też \fBgethostbyname\fP(3)).

.\" Leave a loophole for XTP @)
Adresy IPv4 dzielimy na pojedyncze (unicast), rozgłoszeniowe (broadcast) i
grupowe (multicast). Adresy pojedyncze określają pojedynczy interfejs
maszyny, adresy rozgłoszeniowe określają wszystkie maszyny w obrębie jakiejś
sieci (podsieci), a adresy grupowe wszystkie maszyny w obrębie jakiejś grupy
odbiorców. Datagramy kierowane do adresów rozgłoszeniowych trafiają do
odbiorcy tylko wtedy, gdy jego gniazdo ma ustawiony atrybut rozgłoszenia
\fBSO_BROADCAST\fP. Ten sam atrybut musi być też ustawiony, gdy zachodzi
potrzeba wysłania datagramów rozgłoszenia. W obecnej implementacji gniazda
połączeniowe mogą używać wyłącznie adresów pojedynczych.

Należy zauważyć, że dla adresu i portu zawsze jest używana sieciowa
kolejność bajtów. W szczególności oznacza to, że trzeba używać funkcji
\fBhtons\fP(3) dla numeru przypisanego do portu. Wszystkie funkcje standardowej
biblioteki manipulujące adresem/portem automatycznie przekształcają podaną
wartość na jej sieciową reprezentację.

Istnieje kilka adresów specjalnych: \fBINADDR_LOOPBACK\fP (127.0.0.1) zawsze
odnosi się do lokalnego hosta poprzez urządzenie loopback; \fBINADDR_ANY\fP
(0.0.0.0) oznacza przy dowiązywaniu dowolny adres; \fBINADDR_BROADCAST\fP
(255.255.255.255) oznacza dowolny komputer i ze względów historycznych
zachowuje się przy dowiązywaniu tak samo, jak \fBINADDR_ANY\fP.
.SS "Opcje gniazda"
.\" or SOL_IP on Linux
IP wspiera niektóre opcje specyficzne dla protokołu, które mogą być
ustawione przy użyciu \fBsetsockopt\fP(2) i odczytane z pomocą
\fBgetsockopt\fP(2). Poziom opcji gniazda dla IP to \fBIPPROTO_IP\fP. Dla każdego
ze znaczników logicznych wartość całkowita zero oznacza fałsz, a każda inna
\- prawdę.
.TP 
\fBIP_ADD_MEMBERSHIP\fP (od Linuksa 1.2)
Przyłącza grupę adresów. Argumentem jest struktura \fIip_mreqn \fP.
.sp
.in +4n
.nf
struct ip_mreqn {
    struct in_addr imr_multiaddr; /* grupowy adres IP */
    struct in_addr imr_address;   /* adres IP interfejsu
                                     lokalnego */
    int            imr_ifindex;   /* indeks interfejsu */
};
.fi
.in
.sp
.\" (i.e., within the 224.0.0.0-239.255.255.255 range)
\fIimr_multiaddr\fP zawiera adres grupy, którą aplikacja chce podłączyć lub
rozłączyć. Musi być to poprawny adres grupowy (multicast; w przeciwnym
wypadku \fBsetsockopt\fP(2) zwróci błąd \fBEINVAL\fP). \fIimr_address\fP jest to
adres lokalnego interfejsu, przez który system powinien połączyć grupę;
jeśli jest równy \fBINADDR_ANY\fP, to odpowiedni interfejs jest wybierany przez
system. \fIimr_ifindex\fP jest indeksem interfejsu, który powinien być
podłączony/odłączony do obsługi grupy \fIimr_multiaddr\fP lub 0, by wskazać na
dowolny interfejs.
.IP
.\"
Struktura \fIip_mreqn\fP jest dostępna tylko od wersji 2.2 Linuksa. Dla
kompatybilności, stara struktura \fIip_mreq\fP wciąż jest obsługiwana. Różni
się wprawdzie od \fIip_mreqn\fP, lecz tylko tym, że nie zawiera pola
\fIimr_ifindex\fP. Działa tylko z \fBsetsockopt\fP(2).
.TP 
\fBIP_DROP_MEMBERSHIP\fP (od Linuksa 1.2)
Odłącza się od grupy adresów. Argumentem jest struktura \fIip_mreqn\fP lub
\fIip_mreq\fP podobna do \fBIP_ADD_MEMBERSHIP\fP.
.TP 
\fBIP_FREEBIND\fP (od Linuksa 2.4)
.\" Precisely: 2.4.0-test10
Jeśli jest włączona, to ta opcja logiczna pozwala na przypisanie do adresu
nielokalnego lub (jeszcze) nieistniejącego. Pozwala to na nasłuchiwanie na
gnieździe bez wymagania, żeby  interfejs sieciowy niższej warstwy lub podany
dynamiczny adres IP były ustawione podczas próby przypisania gniazda przez
aplikację. Ta opcja jest odpowiednikiem \- dla pojedynczego gniazda \-
opisanego poniżej interfejsu \fI/proc\fP \fIip_nonlocal_bind\fP.
.TP 
\fBIP_HDRINCL\fP (od Linuksa 2.0)
.\"
.\" FIXME Document IP_IPSEC_POLICY
.\" Since Linux 2.5.47
.\" Needs CAP_NET_ADMIN
Jeśli włączone, to dopuszczalne jest tworzenie przez użytkownika własnego
nagłówka IP przed danymi użytkownika. Działa to jedynie dla gniazd
\fBSOCK_RAW\fP. Patrz \fBraw\fP(7), by uzyskać więcej informacji. Gdy ten znacznik
jest włączony, to wartości ustawiane przez \fBIP_OPTIONS\fP, \fBIP_TTL\fP i
\fBIP_TOS\fP są ignorowane.
.TP 
\fBIP_MTU\fP (od Linuksa 2.2)
.\" Precisely: 2.1.124
Pobiera bieżącą wartość MTU ścieżki obecnego gniazda. Jest to poprawne
tylko, gdy gniazdo zostało połączone. Zwraca liczbę całkowitą. Działa tylko
z \fBgetsockopt\fP(2).
.TP 
\fBIP_MTU_DISCOVER\fP (od Linuksa 2.2)
.\" Precisely: 2.1.124
Ustawia lub pobiera opcję badania MTU ścieżki (ang. Path MTU Discovery) dla
gniazda. Gdy opcja ta jest włączona, to Linux będzie przeprowadzał badanie
MTU ścieżki dla gniazd \fBSOCK_STREAM\fP zgodnie z definicją zawartą w RFC\ 1191. W przypadku gniazd nie będących gniazdami \fBSOCK_STREAM\fP,
\fBIP_PMTUDISC_DO\fP wymusza ustawienie we wszystkich pakietach wychodzących
znacznika zakazu fragmentacji. Za poprawne zgodne z wartością MTU,
podzielenie na pakiety i za wykonanie ewentualnych retransmisji jest
odpowiedzialny program użytkownika.  Jądro odrzuci (z błędem \fBEMSGSIZE\fP)
pakiety większe niż znane MTU ścieżki. Ustawienie znacznika
\fBIP_PMTUDISC_WANT\fP spowoduje sfragmentowanie datagramu, jeśli MTU ścieżki
tego wymaga, albo \- w przeciwnym wypadku \- ustawienie znacznika zakazującego
fragmentacji.

Domyślną dla systemu wartość można ustawić na  \fBIP_PMTUDISC_WANT\fP lub na
\fBIP_PMTUDISC_DONT\fP, wpisując odpowiednio \- zero lub wartość niezerową \- do
pliku \fI/proc/sys/net/ipv4/ip_no_pmtu_disc\fP.

.TS
tab(:);
c l
l l.
Wart. badan. MTU ścieżki:Znaczenie
IP_PMTUDISC_WANT:Używaj ustawień zależnych od trasy.
IP_PMTUDISC_DONT:Nie badaj MTU ścieżki.
IP_PMTUDISC_DO:Zawsze badaj MTU ścieżki
IP_PMTUDISC_PROBE:Ustawia bit DF, ale ign. MTU ścieżki.
.TE

Gdy włączone jest badanie MTU ścieżki, jądro automatycznie namierza wartości
MTU ścieżki dla każdego komputera docelowego. Gdy aktywne jest połączenie z
danym komputerem, można wygodnie odczytać aktualnie rozpoznaną wartość MTU
ścieżki za pomocą \fBconnect\fP(2) używając opcji gniazda \fBIP_MTU\fP (np. po
wystąpieniu błędu \fBEMSGSIZE\fP). Wartość MTU ścieżki może się zmieniać z
czasem. Dla gniazd bezpołączeniowych z wieloma komputerami docelowymi MTU
dla danego, również nowego, komputera docelowego można uzyskać za pomocą
kolejki błędów (zobacz \fBIP_RECVERR\fP). Po nadejściu każdej aktualizacji MTU
zostanie skolejkowany nowy błąd.

W trakcie rozpoznawania MTU, pakiety inicjujące z gniazd datagramowych mogą
zostać porzucone. Programy korzystające z UDP powinny być tego świadome i
nie brać tego pod uwagę w swojej strategii retransmisji pakietów.

.\" FIXME this is an ugly hack
Aby zainicjować proces badania MTU ścieżki dla gniazd niepołączonych, można
rozpocząć z dużym rozmiarem datagramu (o długości do 64K bajtów nagłówka) i
pozwolić na jego zmniejszenie w wyniku aktualizacji MTU ścieżki.

Aby oszacować inicjalne MTU ścieżki, należy podłączyć gniazdo datagramowe do
adresu docelowego za pomocą \fBconnect\fP(2) i pobrać MTU, wołając
\fBgetsockopt\fP(2) z opcją \fBIP_MTU\fP.

Poprzez ustawienie wartości w \fBIP_PMTUDISC_PROBE\fP (dostępnej od Linuksa
2.6.22) możliwe jest zaimplementowanie opisanego w RFC\ 4821 próbkowania MTU
dla gniazd  \fBSOCK_DGRAM\fP lub \fBSOCK_RAW\fP. Jest to szczególnie użyteczne w
narzędziach diagnostycznych typu \fBtracepath\fP(8), które w sposób zamierzony
chcą wysyłać pakiety testowe większe niż zaobserwowane MTU ścieżki.
.TP 
\fBIP_MULTICAST_IF\fP (od Linuksa 1.2)
Ustawia lokalne urządzenie dla gniazda grupowego. Argumentem jest struktura
\fIip_mreqn\fP lub \fIip_mreq\fP podobna do \fBIP_ADD_MEMBERSHIP\fP.
.IP
Gdy podana jest niepoprawna opcja gniazda, to zwracaną wartością jest
\fBENOPROTOOPT\fP.
.TP 
\fBIP_MULTICAST_LOOP\fP (od Linuksa 1.2)
Ustawia lub pobiera logiczny argument typu całkowitego, określający, czy
przesyłane pakiety grupowe powinny wracać do lokalnego gniazda.
.TP 
\fBIP_MULTICAST_TTL\fP (od Linuksa 1.2)
Ustawia lub pobiera wartość czasu życia pakietu dla wychodzących z tego
gniazda pakietów grupowych. Jest bardzo istotne w przypadku adresowania
grupowego, by ustawić najmniejszą możliwą wartość TTL. Domyślnie jest to 1,
co oznacza, że pakiety grupowe nie opuszczają sieci lokalnej, chyba że
program użytkownika wyraźnie tego żąda. Argument jest liczbą całkowitą.
.TP 
\fBIP_NODEFRAG\fP (od Linuksa 2.6.36)
Jeśli włączone (argument jest niezerowy), łączenie pakietów wychodzących
przez warstwę netfilter jest wyłączone. Opcje jest poprawna tylko dla gniazd
\fBSOCK_RAW\fP. Argumentem jest liczba całkowita.
.TP 
\fBIP_OPTIONS\fP (od Linuksa 2.0)
.\" Precisely: 1.3.30
.\" FIXME Document IP_PASSSEC
.\" Boolean
.\" Since Linux 2.6.17
.\" commit 2c7946a7bf45ae86736ab3b43d0085e43947945c
.\" Author: Catherine Zhang <cxzhang@watson.ibm.com>
Ustawia lub pobiera opcje IP, które będą wysyłane z każdym pakietem z danego
gniazda. Argumenty są wskaźnikiem do bufora pamięci zawierającego opcje i
ich długości. \fBsetsockopt\fP(2) ustawia opcje IP skojarzone z
gniazdem. Maksymalny rozmiar opcji dla IPv4 to 40 bajtów. Zobacz RFC\ 791,
by poznać możliwe opcje. Gdy pakiet wstępnego potwierdzenia połączenia (ACK)
dla gniazda typu \fBSOCK_STREAM\fP zawiera opcje IP, to opcje wychodzącego
pakietu IP będą automatycznie pobrane z opcji IP pobranego pakietu z
odwróconymi nagłówkami mówiącymi o trasie. Po ustanowieniu połączenia
przychodzące pakiety nie są uprawnione do zmiany swoich opcji. Przetwarzanie
wszystkich przychodzących opcji źródła jest domyślnie wyłączone, ale można
je włączyć ustawiając \fIaccept_source_route\fP w interfejsie \fI/proc\fP. W
przypadku gniazd datagramowych opcje IP mogą być ustawione jedynie przez
użytkownika lokalnego. Funkcja \fBgetsockopt\fP(2) z argumentem \fBIP_OPTIONS\fP
zwróci obecnie wysłane opcje przez umieszczenie ich w dostarczonym buforze.
.TP 
\fBIP_PKTINFO\fP (od Linuksa 2.2)
.\" Precisely: 2.1.68
Przekazuje pomocniczy komunikat \fBIP_PKTINFO\fP zawierający strukturę
\fIpktinfo\fP dostarczającą trochę informacji o przychodzącym pakiecie. Działa
to jedynie dla gniazd datagramowych. Argument jest znacznikiem mówiącym
gniazdu, czy należy przekazać komunikat \fBIP_PKTINFO\fP, czy też nie. Sam
komunikat może zostać przesłany/otrzymany wraz z pakietem jedynie jako
komunikat sterujący za pomocą \fBrecvmsg\fP(2) lub \fBsendmsg\fP(2).
.IP
.in +4n
.nf
struct in_pktinfo {
    unsigned int   ipi_ifindex;  /* Indeks interfejsu */
    struct in_addr ipi_spec_dst; /* Adres lokalny */
    struct in_addr ipi_addr;     /* Nagłówek adresu
                                    docelowego */
};
.fi
.in
.IP
.\" FIXME elaborate on that.
.\" This field is grossly misnamed
\fIipi_ifindex\fP jest unikatowym indeksem interfejsu, przez który pakiet
został odebrany. Adres \fIipi_spec_dst\fP jest lokalnym adresem pakietu, a
\fIipi_addr\fP jest adresem docelowym wynikającym z nagłówka pakietu. Jeśli
\fBIP_PKTINFO\fP jest przekazane do \fBsendmsg\fP(2), a \fIipi_spec_dst\fP ma wartość
niezerową, to zostanie użyte jako źródłowy adres lokalny podczas
przeszukiwania tablicy routingu i dla ustawienia opcji routingu według
adresu źródłowego. Gdy \fIipi_ifindex\fP ma wartość niezerową, to podstawowy
adres lokalny interfejsu wskazywanego przez ten indeks nadpisuje
\fIipi_spec_dst\fP podczas przeszukiwania tablicy routingu.
.TP 
\fBIP_RECVERR\fP (od Linuksa 2.2)
.\" Precisely: 2.1.15
.\" or SOL_IP on Linux
Włącza przekazywanie dodatkowych komunikatów o błędach, zwiększając
niezawodność połączenia. Gdy jest to ustawione w gnieździe datagramowym, to
wszystkie generowane błędy będą zapamiętane w specjalnej kolejce błędów
przypisanej do gniazda. Gdy użytkownik (proces użytkownika) otrzyma błąd
(przez zwrócony kod błędu operacji na gnieździe), to może go odebrać,
używając funkcji \fBrecvmsg\fP(2) z ustawionym znacznikiem
\fBMSG_ERRQUEUE\fP. Struktura opisująca błąd \fIsock_extended_err\fP zostanie
przekazana w pomocniczym komunikacie o typie \fBIP_RECVERR\fP i poziomie
\fBIPPROTO_IP\fP. Jest to niezwykle pomocne przy niezawodnym przechwytywaniu
błędów niepołączonych gniazd. Odbierana z kolejki błędów porcja danych
zawiera pakiet z informacją o błędzie.
.IP
Komunikat sterujący \fBIP_RECVERR\fP zawiera strukturę \fIsock_extended_err\fP
zdefiniowaną następująco:
.IP
.in +4n
.ne 18
.nf
#define SO_EE_ORIGIN_NONE    0
#define SO_EE_ORIGIN_LOCAL   1
#define SO_EE_ORIGIN_ICMP    2
#define SO_EE_ORIGIN_ICMP6   3

struct sock_extended_err {
    uint32_t ee_errno;   /* numer błędu */
    uint8_t  ee_origin;  /* źródło błędu */
    uint8_t  ee_type;    /* typ */
    uint8_t  ee_code;    /* kod */
    uint8_t  ee_pad;
    uint32_t ee_info;    /* informacje dodatkowe */
    uint32_t ee_data;    /* inne dane */ 
    /* Dalej mogą wystąpić dodatkowe dane */
};

struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);
.fi
.in
.IP
\fIee_errno\fP zawiera numer \fIerrno\fP błędu kolejki. \fIee_origin\fP jest kodem
miejsca pochodzenia błędu. Pozostałe pola są zależne od protokołu. Makro
\fBSO_EE_OFFENDER\fP zwraca wskaźnik do adresu obiektu sieciowego, z którego
pochodził błąd o zadanym wskaźniku do komunikatu pomocniczego. Gdy ten adres
nie jest znany, pole \fIsa_family\fP struktury \fIsockaddr\fP zawiera wartość
\fBAF_UNSPEC\fP a pozostałe pola tej struktury \fIsockaddr\fP są niezdefiniowane.
.IP
.\" FIXME . Is it a good idea to document that? It is a dubious feature.
.\" On
.\" .B SOCK_STREAM
.\" sockets,
.\" .B IP_RECVERR
.\" has slightly different semantics. Instead of
.\" saving the errors for the next timeout, it passes all incoming
.\" errors immediately to the user.
.\" This might be useful for very short-lived TCP connections which
.\" need fast error handling. Use this option with care:
.\" it makes TCP unreliable
.\" by not allowing it to recover properly from routing
.\" shifts and other normal
.\" conditions and breaks the protocol specification.
IP używa struktury \fIsock_extended_err\fP w następujący sposób: \fIee_origin\fP
ustawione na \fBSO_EE_ORIGIN_ICMP\fP dla błędów odbieranych jako pakiet ICMP
albo też \fBSO_EE_ORIGIN_LOCAL\fP dla błędów generowanych lokalnie. Nieznane
wartości należy ignorować. \fIee_type\fP i \fIee_code\fP są ustawiane zgodnie z
typem i kodem pól w nagłówku ICMP. \fIee_info\fP zawiera rozpoznaną wartość MTU
dla błędów \fBEMSGSIZE\fP. Komunikat zawiera również \fIsockaddr_in węzła\fP,
który spowodował błąd, a do którego można uzyskać dostęp za pomocą makra
\fBSO_EE_OFFENDER\fP. Pole \fIsin_family\fP adresu \fBSO_EE_OFFENDER\fP ma wartość
\fIAF_UNSPEC\fP, gdy źródło błędu nie jest znane. Gdy błąd pochodzi z sieci,
wszystkie opcje IP (\fBIP_OPTIONS\fP, \fBIP_TTL\fP itd.) włączone w gnieździe i
zawarte w pakiecie błędu są przekazywane jako komunikaty kontrolne. Właściwe
dane pakietu, który spowodował błąd są zwracane jako normalne dane. Należy
zauważyć, że TCP nie ma kolejki błędów; \fBMSG_ERRQUEUE\fP jest nielegalne w
przypadku gniazd \fBSOCK_STREAM\fP. \fBIP_RECVERR\fP jest poprawne dla TCP, ale
wszystkie błędy są przekazywane przez zwracaną wartość funkcji albo przez
\fBSO_ERROR\fP.
.IP
Dla gniazd surowych, \fBIP_RECVERR\fP włącza przepuszczanie do aplikacji
wszystkich odebranych komunikatów ICMP o błędach. W przeciwnym przypadku
błędy są zgłaszane tylko dla gniazd połączonych.
.IP
Ustawia lub pobiera znacznik logiczny zapisany za pomocą liczby
całkowitej. \fBIP_RECVERR\fP jest domyślnie wyłączone.
.TP 
\fBIP_RECVOPTS\fP (od Linuksa 2.2)
.\" Precisely: 2.1.15
Przekazuje użytkownikowi wszystkie nadchodzące opcje IP z komunikatu
sterującego \fBIP_OPTIONS\fP. Nagłówek wyboru trasy i inne opcje są już
wstępnie wypełnione informacjami o lokalnej maszynie. Nieobsługiwane w
przypadku gniazd typu \fBSOCK_STREAM\fP.
.TP 
\fBIP_RECVORIGDSTADDR\fP (od Linuksa 2.6.29)
.\" commit e8b2dfe9b4501ed0047459b2756ba26e5a940a69
Ta opcja logiczna włącza komunikat pomocniczy \fBIP_ORIGDSTADDR\fP w
\fBrecvmsg\fP(2), w którym jądro zwraca oryginalny adres docelowy otrzymywanego
właśnie datagramu. Ten komunikat pomocniczy  zawiera strukturę \fIstruct
sockaddr_in\fP.
.TP 
\fBIP_RECVTOS\fP (od Linuksa 2.2)
.\" Precisely: 2.1.68
Jeśli jest ustawione, to pomocniczy komunikat \fBIP_TOS\fP jest przepuszczany
razem z nadchodzącymi pakietami. Zawiera on bajt, który określa pole
zdefiniowane także jako bajt znajdujące się w nagłówku pakietu, a zwane Typ
Usługi/Pierwszeństwa. Wymaga logicznego znacznika w postaci liczby
całkowitej.
.TP 
\fBIP_RECVTTL\fP (od Linuksa 2.2)
.\" Precisely: 2.1.68
Gdy ten znacznik jest ustawiony, przepuszczany jest komunikat pomocniczy
\fBIP_TTL\fP, zawierający pole określane mianem "czas życia" odbieranego
pakietu w postaci bajtu. Nie jest to wspierane w przypadku strumieniowych
gniazd typu \fBSOCK_STREAM\fP.
.TP 
\fBIP_RETOPTS\fP (od Linuksa 2.2)
.\" Precisely: 2.1.15
Działanie identyczne do \fBIP_RECVOPTS\fP, ale zwraca surowe, nieprzetworzone
opcje, włącznie z rekordem opcji, mówiącym o znaczniku czasowym i trasie,
niewypełnionym wartościami w tym przejściu pakietu.
.TP 
\fBIP_ROUTER_ALERT\fP (od Linuksa 2.2)
.\" Precisely: 2.1.68
Przekazuje wszystkie pakiety z opcją alarmu rutera IP, które miałyby być
przekazywane (ang. forwarded) do tego gniazda. Działa tylko dla gniazd
surowych. Jest to przydatne na przykład dla demonów RSVP działających w
przestrzeni użytkownika. Wykorzystane pakiety nie są przekazywane
(ang. forwarded) przez jądro. Ponowne ich wysłanie należy do obowiązków
programu użytkownika. Dowiązywanie gniazda jest w tym przypadku ignorowane,
pakiety te są filtrowane jedynie na podstawie protokołu. Wymaga liczby
całkowitej jako argumentu.
.TP 
\fBIP_TOS\fP (od Linuksa 1.0)
.\" FIXME elaborate on this
.\" Needs CAP_NET_ADMIN
.\" Boolean
.\" Since Linux 2.6.27
.\" Author: KOVACS Krisztian <hidden@sch.bme.hu>
.\" http://lwn.net/Articles/252545/
Ustawia lub pobiera pole znacznika Typ\-Usługi (ang. Type\-Of\-Service, w
skrócie TOS), które jest przesyłane z każdym pakietem IP pochodzącym z
danego gniazda. Służy do ustalenia priorytetów pakietów w sieci. TOS jest
bajtem. Oto definicje niektórych standardowych znaczników TOS:
\fBIPTOS_LOWDELAY\fP \- minimalizacja opóźnienia we wzajemnym ruchu,
\fBIPTOS_THROUGHPUT\fP \- optymalizacja wyjścia, \fBIPTOS_RELIABILITY\fP \-
optymalizacja pod kątem niezawodności, a \fBIPTOS_MINCOST\fP powinna być
używana jako "dane wypełniające" tam, gdzie szybkość transmisji nie ma
większego znaczenia. Można podać najwyżej jedną z powyższych wartości
TOS. Inne bity są niepoprawne i powinny być wyzerowane. Linux domyślnie
wysyła najpierw datagram \fBIPTOS_LOWDELAY\fP, ale dokładne zachowanie zależy
od konfiguracji właściwości szeregowania. Niektóre poziomy o wysokim
priorytecie mogą wymagać uprawnień administratora (ustawionego atrybutu
\fICAP_NET_ADMIN\fP). Priorytet można też ustawić w sposób niezależny od
protokołu poprzez opcję gniazda (\fBSOL_SOCKET\fP, \fBSO_PRIORITY\fP) (patrz też
\fBsocket\fP(7)).
.TP 
\fBIP_TRANSPARENT\fP (od Linuksa 2.6.24)
.\" commit f5715aea4564f233767ea1d944b2637a5fd7cd2e
.\"     This patch introduces the IP_TRANSPARENT socket option: enabling that
.\"     will make the IPv4 routing omit the non-local source address check on
.\"     output. Setting IP_TRANSPARENT requires NET_ADMIN capability.
.\" http://lwn.net/Articles/252545/
Ustawienie tej opcji logicznej włącza przezroczyste (ang. "transparent")
proxy dla tego gniazda. Ta opcja gniazda pozwala wywołującej aplikacji
przypisanie gniazda do nielokalnego adresu IP i operowanie jako zarówno
klient, jak i serwer z zewnętrznym adresem IP dla lokalnego punktu
docelowego. \fBUWAGA:\fP wymaga to takiego ustawienia reguł routingu, żeby
pakiety wysyłane na ten adres zewnętrzny były przekazywane przez
TProxy. Włączenie tej opcji wymaga uprawnień administratora (właściwość
\fBCAP_NET_ADMIN\fP).
.IP
Przekierowanie TProxy używające celu TPROXY z \fBiptables\fP(8) także wymagają
włączenia tej opcji w przekierowywanym gnieździe.
.TP 
\fBIP_TTL\fP (od Linuksa 1.0)
.\" FIXME Document IP_XFRM_POLICY
.\" Since Linux 2.5.48
.\" Needs CAP_NET_ADMIN
Ustawia lub pobiera pole "czas życia" (ang. Time\-To\-Live, w skrócie TTL) dla
każdego wychodzącego z danego gniazda pakietu IP.
.SS "Interfejsy /proc"
.\" FIXME As at 2.6.12, 14 Jun 2005, the following are undocumented:
.\"	ip_queue_maxlen
.\"	ip_conntrack_max
.\"
Protokół IP obsługuje zbiór interfejsów \fI/proc\fP i korzysta z niech do
ustawiania niektórych parametrów globalnych. Parametry są dostępne  przez
zapis lub odczyt plików z katalogu \fI/proc/sys/net/ipv4/\fP. Interfejsy
opisane jako \fIlogiczne\fP pobierają liczbę całkowitą, której wartość
niezerowa ("prawda") oznacza, że dana opcja jest włączona, a zero ("fałsz"),
oznacza, że opcja jest wyłączona.
.TP 
\fIip_always_defrag\fP (logiczna; od Linuksa 2.2.13)
[Nowa w jądrze 2.2.13; we wcześniejszych wersjach jądra funkcją tą sterowało
się w czasie kompilacji za pomocą opcji \fBCONFIG_IP_ALWAYS_DEFRAG\fP, która
nie jest już obecna w 2.4.x i kolejnych]

Gdy ten znacznik logiczny jest włączony (różny od 0), przychodzące fragmenty
(części pakietów IP, które się pojawiają, gdy pewien komputer pomiędzy
komputerem źródłowym a docelowym zdecyduje, że pakiety były za duże i
podzieli je na kawałki) będą ponownie złożone (zdefragmentowane) przed ich
przetworzeniem, nawet jeśli mają być przekazane dalej (and. forwarded).

Należy włączać jedynie przy działającym firewallu, stanowiącym główne
wejście do danej sieci lub działającym przezroczystym proxy; nigdy nie
należy tego włączać na zwykłym routerze lub komputerze. W przeciwnym
przypadku łączność może zostać zakłócona, gdy fragmenty będą podróżować
innymi łączami. Defragmentacja powoduje również znaczne wykorzystanie
pamięci i czasu procesora.

.\"
Jest to włączane automagicznie, gdy skonfigurowane jest maskowanie lub
przezroczyste proxy.
.TP 
\fIip_autoconfig\fP (od Linuksa 2.2 do 2.6.17)
.\" Precisely: since 2.1.68
.\" FIXME document ip_autoconfig
.\"
Nie udokumentowane.
.TP 
\fIip_default_ttl\fP (liczba, domyślnie: 64; od Linuksa 2.2)
.\" Precisely: 2.1.15
.\"
Ustawia domyślną wartość "czasu życia" (ang. time\-to\-live) wychodzących
pakietów. Może być ona zmieniona dla gniazda za pomocą opcji \fBIP_TTL\fP.
.TP 
\fIip_dynaddr\fP (logiczna; domyślnie: wyłączona; od Linuksa 2.0.31)
.\"
Włącza dynamiczne adresowanie gniazda oraz przepisywanie adresu dla
maskowania przy zmianie adresu interfejsu. Jest to bardzo przydatne w
przypadku korzystania z interfejsu sprzęgniętego z linią telefoniczną,
którego adres IP może się zmieniać. 0 oznacza brak przepisywania, 1 włącza
przepisywanie, a 2 włącza tryb rozwlekły (ang. verbose).
.TP 
\fIip_forward\fP(logiczna; domyślnie: wyłączona; od Linuksa 1.2)
.\"
Włącza przekazywanie (ang. forwarding) pakietów przy użyciu logicznego
znacznika. Może być ustawione także na podstawie interfejsu.
.TP 
\fIip_local_port_range\fP (od Linuksa 2.2)
.\" Precisely: since 2.1.68
.\"
Zawiera dwie liczby całkowite, które definiują lokalny zakres portów
przydzielanych gniazdom. Przydzielanie zaczyna się od pierwszej podanej
wartości i kończy na drugiej. Należy zauważyć, że zakres ten nie powinien
pokrywać się z zakresem portów wykorzystywanym do maskowania (chociaż taka
sytuacja jest obsługiwana). Dowolny wybór może również powodować problemy z
niektórymi zaporami sieciowymi, które robią pewne założenia odnośnie do
portów używanych lokalnie. Pierwsza liczba powinna być większa niż 1024,
albo \- co byłoby lepsze \- większa niż 4096, aby uniknąć konfliktów z dobrze
znanymi portami i zminimalizować problemy z zaporami sieciowymi.
.TP 
\fIip_no_pmtu_disc\fP (logiczna; domyślnie: wyłączona; od Linuksa 2.2)
.\" Precisely: 2.1.15
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
Jeśli jest to włączone, to domyślnie nie będzie wykonywane badanie MTU
ścieżki dla gniazd TCP. Badanie MTU może się nie sprawdzać w przypadku źle
skonfigurowanych firewalli (odrzucających wszelkie pakiety ICMP) lub źle
skonfigurowanych interfejsów (np. połączenie typu point\-to\-point, gdzie oba
końce nie zgadzają się na MTU). Lepiej poprawić wszelkie wadliwie
skonfigurowane rutery po drodze niż całkowicie wyłączyć badanie MTU ścieżki,
ponieważ niewykonywanie tej operacji pociąga za sobą duże straty w obrębie
sieci.
.TP 
\fIip_nonlocal_bind\fP (logiczna; domyślnie: wyłączona; od Linuksa 2.4)
.\" Precisely: patch-2.4.0-test10
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
Jeżeli ustawione, pozwala procesowi na wywołanie funkcji \fBbind\fP() z
nielokalnym adresem IP, co może być całkiem przydatne, ale może popsuć
niektóre aplikacje.
.TP 
\fIip6frag_time\fP (liczba; domyślnie: 30)
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
Czas w sekundach przetrzymywania w pamięci fragmentu IPv6.
.TP 
\fIip6frag_secret_interval\fP (liczba; domyślnie: 600)
Interwał (w sekundach) odświeżania sekretnego klucza funkcji mieszkającej
(lub czasu życia tego klucza) dla fragmentów IPv6.
.TP 
\fIipfrag_high_thresh\fP (liczba), \fIipfrag_low_thresh\fP (liczba)
Jeśli liczba zebranych w kolejce fragmentów IP osiągnie wartość określoną
przez \fIipfrag_high_thresh\fP, wtedy kolejka jest opróżniana do ilości
określonej w \fIipfrag_low_thresh\fP. Zawiera ona liczbę całkowitą z podaną
liczbą bajtów.
.TP 
\fIneigh/*\fP
.\" FIXME Document the conf/*/* interfaces
.\" FIXME Document the route/* interfaces
.\" FIXME document them all
Patrz \fBarp\fP(7).
.SS "Kontrolki systemowe (ioctl)"
.\" 2006-04-02, mtk
.\" commented out the following because ipchains is obsolete
.\" .PP
.\" The ioctls to configure firewalling are documented in
.\" .BR ipfw (4)
.\" from the
.\" .B ipchains
.\" package.
Do protokołu \fBip\fP mają zastosowanie wszystkie kontrolki wejścia/wyjścia
opisane w \fBsocket\fP(7).
.PP
.\" FIXME Add a discussion of multicasting
Kontrolki konfigurowania ogólnych parametrów urządzenia są opisane w
\fBnetdevice\fP(7).
.SH BŁĘDY
.\" FIXME document all errors.
.\"     We should really fix the kernels to give more uniform
.\"     error returns (ENOMEM vs ENOBUFS, EPERM vs EACCES etc.)
.TP 
\fBEACCES\fP
Użytkownik próbował wykonać operację, nie mając potrzebnych praw. Obejmuje
to: wysyłanie pakietu na adres rozgłoszeniowy bez ustawionego znacznika
\fBSO_BROADCAST\fP, wysyłanie pakietu \fIzakazaną\fP drogą, próbę modyfikacji
ustawień firewalla, nie mając uprawnień administratora (ustawionego
znacznika \fBCAP_NET_ADMIN\fP), próbę przypisania uprzywilejowanego portu, nie
mając uprawnień administratora (ustawionego znacznika
\fBCAP_NET_BIND_SERVICE\fP).
.TP 
\fBEADDRINUSE\fP
Próbowano przypisać port do adresu będącego już w użyciu.
.TP 
\fBEADDRNOTAVAIL\fP
Zażądano nieistniejącego interfejsu lub żądany adres źródłowy nie jest
adresem lokalnym.
.TP 
\fBEAGAIN\fP
Operacja na gnieździe z wyłączonym blokowaniem spowodowałaby zablokowanie.
.TP 
\fBEALREADY\fP
Operacja łączenia na gnieździe nieblokującym już trwa.
.TP 
\fBECONNABORTED\fP
Połączenie zostało zamknięte podczas \fBaccept\fP(2).
.TP 
\fBEHOSTUNREACH\fP
Brak wpisu określającego adres docelowy w tabeli routingu. Błąd ten może być
wywołany przez komunikat ICMP od zdalnego routera lub dla lokalnej tabeli
routingu.
.TP 
\fBEINVAL\fP
Przypisano niewłaściwy argument. W przypadku operacji wysyłania może to być
spowodowane przez wysyłanie drogą przypisaną do \fIczarnej dziury\fP.
.TP 
\fBEISCONN\fP
\fBconnect\fP(2) była wywołana na już połączonym gnieździe.
.TP 
\fBEMSGSIZE\fP
Datagram jest większy niż wartość MTU po drodze do celu i nie może być
podzielony.
.TP 
\fBENOBUFS\fP, \fBENOMEM\fP
Niewystarczająca ilość dostępnej pamięci. Często oznacza to, że
przydzielanie pamięci jest ograniczone przez ograniczenia bufora gniazda, a
nie przez ograniczenia pamięci systemowej. Jednak nie jest to pewne na 100%.
.TP 
\fBENOENT\fP
\fBSIOCGSTAMP\fP było wywołane na gnieździe, do którego nie dotarł żaden
pakiet.
.TP 
\fBENOPKG\fP
Podsystem jądra nie był konfigurowany.
.TP 
\fBENOPROTOOPT\fP i \fBEOPNOTSUPP\fP
Przypisano niewłaściwą opcję gniazda.
.TP 
\fBENOTCONN\fP
Operacja może być wykonana tylko na połączonym gnieździe, a gniazdo nie
zostało połączone.
.TP 
\fBEPERM\fP
Użytkownik nie ma praw do ustawiania wysokiego priorytetu, zmiany
konfiguracji lub wysyłania sygnałów do żądanych procesów lub grup procesów.
.TP 
\fBEPIPE\fP
Połączenie zostało nieoczekiwanie zamknięte lub wyłączył się drugi koniec.
.TP 
\fBESOCKTNOSUPPORT\fP
Gniazdo nie jest skonfigurowane lub zażądano nieznanego typu gniazda.
.PP
Inne błędy mogą być generowane przez protokoły wyższych warstw; obejrzyj
\fBtcp\fP(7), \fBraw\fP(7), \fBudp\fP(7) i \fBsocket\fP(7).
.SH UWAGI
.\" IP_PASSSEC is Linux-specific
.\" IP_XFRM_POLICY is Linux-specific
.\" IP_IPSEC_POLICY is a nonstandard extension, also present on some BSDs
\fBIP_FREEBIND\fP, \fBIP_MTU\fP, \fBIP_MTU_DISCOVER\fP, \fBIP_RECVORIGDSTADDR\fP,
\fBIP_PKTINFO\fP, \fBIP_RECVERR\fP, \fBIP_ROUTER_ALERT\fP oraz \fBIP_TRANSPARENT\fP są
specyficzne dla Linuksa.

Należy być bardzo ostrożnym przy stosowaniu opcji \fBSO_BROADCAST\fP \- nie jest
ona w systemie Linux uprzywilejowana, jest więc łatwo przeciążyć sieć za
pomocą niedbale użytych rozgłoszeń. W przypadku protokołów nowych aplikacji
lepiej używać grupy adresowej zamiast rozgłoszeń. Stosowanie adresów
rozgłoszeniowych jest niezalecane.
.PP
Niektóre inne implementacje gniazd BSD dopuszczają dla gniazd opcje
\fBIP_RCVDSTADDR\fP i \fBIP_RECVIF\fP używane do pobierania adresu przeznaczenia i
interfejsu odbieranych datagramów. Linux udostępnia bardziej ogólną opcję
\fBIP_PKTINFO\fP, robiącą to samo.
.PP
Niektóre implementacja gniazd BSD także udostępniają opcję \fBIP_RECVTTL\fP,
ale łącznie z przychodzącym pakietem jest przekazywany pomocniczy komunikat
o typie \fBIP_RECVTTL\fP. W tym właśnie różni się to od opcji \fBIP_TTL\fP,
używanej w Linuksie.
.PP
Używanie poziomu opcji gniazd \fBSOL_IP\fP jest nieprzenośne, gniazda oparte na
BSD używają poziomu \fBIPPROTO_IP\fP.
.SS Zgodność
Dla zgodności z Linuksem 2.0, wciąż jest dopuszczalna przestarzała składnia
\fBsocket(AF_INET, SOCK_PACKET, \fP\fIprotokół\fP\fB)\fP, by stworzyć gniazdo typu
\fBpacket\fP(7). Nie jest to zbyt poprawne i powinno być zastępowane przez
\fBsocket(AF_PACKET, SOCK_RAW, \fP\fIprotokół\fP\fB)\fP. Głównym powodem jest różnica
w strukturze adresowej \fIsockaddr_ll\fP przechowującej informacje dla warstwy
łącza (dokładniej: warstwy kanałowej), które kiedyś przechowywane były w
\fBsockaddr_pkt\fP.
.SH BŁĘDY
Jest zbyt wiele nieokreślonych wartości błędów.
.PP
Nie są opisane kontrolki wejścia/wyjścia do konfigurowania specyficznych dla
IP opcji interfejsu i tabele ARP.
.PP
Niektóre wersje glibc zapominają zadeklarować \fIin_pktinfo\fP. Można to
obejść, kopiując ją do programu z niniejszej strony podręcznika.
.PP
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
Pobieranie pierwotnego adresu docelowego za pomocą wywołania \fBrecvmsg\fP(2) z
\fBMSG_ERRQUEUE\fP w \fImsg_name\fP nie działa w niektórych jądrach 2.2.
.SH "ZOBACZ TAKŻE"
\fBrecvmsg\fP(2), \fBsendmsg\fP(2), \fBbyteorder\fP(3), \fBipfw\fP(4),
\fBcapabilities\fP(7), \fBnetlink\fP(7), \fBraw\fP(7), \fBsocket\fP(7), \fBtcp\fP(7),
\fBudp\fP(7)
.PP
RFC\ 791 zawiera pierwotną specyfikację protokołu IP.
.br
RFC\ 1122 zawiera wymagania dla hostów IPv4.
.br
.\" FIXME autobind INADDR REUSEADDR
RFC\ 1812 zawiera wymagania dla routerów IPv4.
.SH "O STRONIE"
Angielska wersja tej strony pochodzi z wydania 3.40 projektu Linux
\fIman\-pages\fP. Opis projektu oraz informacje dotyczące zgłaszania błędów
można znaleźć pod adresem http://www.kernel.org/doc/man\-pages/.
.SH TŁUMACZENIE
Autorami polskiego tłumaczenia niniejszej strony podręcznika man są:
Paweł Wilk (PTM) <siewca@pld.org.pl>
i
Robert Luberda <robert@debian.org>.
.PP
Polskie tłumaczenie jest częścią projektu manpages-pl; uwagi, pomoc, zgłaszanie błędów na stronie http://sourceforge.net/projects/manpages-pl/. Jest zgodne z wersją \fB 3.40 \fPoryginału.
