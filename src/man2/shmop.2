.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\" 
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\" 
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\" 
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" 
.\" Modified Sun Nov 28 17:06:19 1993, Rik Faith (faith@cs.unc.edu)
.\"          with material from Luigi P. Bai (lpb@softint.com)
.\" Portions Copyright 1993 Luigi P. Bai
.\" Modified Tue Oct 22 22:04:23 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified, 5 Jan 2002, Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\" Modified, 19 Sep 2002, Michael Kerrisk <mtk16@ext.canterbury.ac.nz>
.\"    Added SHM_REMAP flag description
.\"
.\" Translated by Rafa³ Lewczuk, 24 Aug 1999
.\" Last update: A. Krzysztofowicz <ankry@mif.pg.gda.pl>, Apr 2003,
.\"              manpages 1.54
.\" 
.TH SHMOP 2 2002-01-05 "Linux 2.5" "Podrêcznik programisty Linuksa" 
.SH NAZWA
shmop \- operacje na segmentach pamiêci wspólnej
.SH SK£ADNIA
.nf
.B
#include <sys/types.h>
.B
#include <sys/shm.h>
.fi
.sp
.BI "void *shmat(int " shmid ,
.BI "const void *" shmaddr ,
.BI "int " shmflg );
.sp
.BI "int shmdt(const void *" shmaddr );
.SH OPIS
Funkcja
.B shmat
do³±cza segment pamiêci wspólnej o deskryptorze 
.B shmid
do przestrzeni adresowej procesu, który j± wywo³a³.
Adres, pod którym segment ma byæ widoczny jest przekazywany parametrem
.IR shmaddr ,
przy czym system mo¿e przetworzyæ ten adres w nastêpuj±cy sposób:
.LP
Je¶li 
.I shmaddr
jest równy
.BR NULL ,
wówczas system sam wybierze odpowiedni (nieu¿ywany) adres, pod którym segment
bêdzie widoczny.
.LP
Je¶li
.I shmaddr
nie jest równy
.B NULL
i w
.I shmflg
przekazany zosta³ znacznik 
.BR SHM_RND , 
wówczas segment zostanie do³±czony pod adresem
.I shmaddr
zaokr±glonym w dó³ do wielokrotno¶ci
.BR SHMLBA .
W innym razie
.I shmaddr
musi byæ wyrównanym do granicy strony adresem, pod którym nast±pi do³±czenie
segmentu.
.PP
Je¶li w
.I shmflg
przekazany zostanie znacznik 
.BR SHM_RDONLY ,
wówczas segment zostanie odwzorowany z zabezpieczeniem przed zapisem. Proces
wywo³uj±cy
.B shmat 
musi mieæ prawa odczytu segmentu.
W przeciwnym razie w do³±czanym segmencie mo¿liwe s± zarówno odczyt, jak
i zapis, przy czym proces musi mieæ prawa do odczytu i zapisu segmentu.
Nie istnieje pojêcie segmentu pamiêci wspólnej tylko do zapisu.
.PP
Znacznik (specyficzny dla Linuksa)
.BR SHM_REMAP ,
który mo¿e zostaæ przekazany w
.I shmflg
oznacza, ¿e odwzorowanie tego segmentu powinno zast±piæ jakiekolwiek
istniej±ce wcze¶niej odwzorowanie w zakresie rozpoczynaj±cym siê od
.I shmaddr
i rozci±gaj±cym na rozmiar segmentu.
(Normalnie, gdy odwzorowanie w tym zakresie adresów ju¿ istnieje, powinien
wyst±piæ b³±d
.BR EINVAL .)
W tym przypadku
.I shmaddr
nie mo¿e byc równe
.BR NULL .
.PP
Warto¶æ
.B brk
procesu wywo³uj±cego funkcjê nie jest zmieniana podczas do³±czania segmentu.
Segment zostanie automatycznie od³±czony, gdy proces zakoñczy siê.
Ten sam segment mo¿e byæ do³±czony do przestrzeni adresowej procesu jako
"tylko do odczytu" lub "do odczytu i zapisu" wiêcej ni¿ raz.
.PP
W wyniku pomy¶lnego wywo³ania
.B shmat
system operacyjny aktualizuje pola struktury
.B shmid_ds
opisuj±cej segment w nastêpuj±cy sposób:
.IP
.B shm_atime
zostaje przypisany aktualny czas.
.IP
.B shm_lpid
zostanie przypisany identyfikator procesu wywo³uj±cego 
.BR shmat .
.IP
.B shm_nattch
zostanie zwiêkszone o jeden.
.PP
Nale¿y zwróciæ uwagê, ¿e operacja powiedzie siê nawet je¶li do³±czany segment
pamiêci wspólnej jest zaznaczony do usuniêcia.
.PP
Funkcja
.B shmdt
wy³±cza segment pamiêci wspólnej odwzorowany pod adresem podanym w
.I shmaddr
z przestrzeni adresowej procesu wywo³uj±cego tê funkcjê.
Przekazany funkcji w parametrze
.I shmaddr
adres musi byæ równy adresowi zwróconemu wcze¶niej przez wywo³anie
.B shmat .
.PP
W wyniku pomy¶lnego wywo³ania
.B shmdt
pola struktury
.B shmid_ds
opisuj±cej segment aktualizowane s± w nastêpuj±cy sposób:
.IP
.B shm_dtime
przypisywany jest aktualny czas.
.IP
.B shm_lpid
przypisywany jest identyfikator procesu wywo³uj±cego
.BR shmdt .
.IP
.B shm_nattch
jest zmniejszane o jeden. Je¶li pole to osi±gnie 0 i segment jest zaznaczony
do usuniêcia, wówczas zostanie on usuniêty.
.PP
Obszar w przestrzeni adresowej procesu wywo³uj±cego funkcjê jest zwalniany.
.PP
.SH "WYWO£ANIA SYSTEMOWE"
.TP
.B fork()
W wyniku wywo³ania
.B fork()
proces potomny dziedziczy do³±czone segmenty pamiêci wspólnej.
.TP
.B exec()
Po wykonaniu 
.B exec()
wszystkie odwzorowane segmenty s± od³±czane (nie s± usuwane).
.TP
.B exit()
Po wykonaniu 
.B exit()
wszystkie do³±czone segmenty pamiêci wspólnej s± od³±czane (nie s± usuwane).
.SH "WARTO¦Æ ZWRACANA"
W przypadku wyst±pienia b³êdu opydwie funkcje zwracaj±
.B \-1
przypisuj±c zmiennej
.B errno
kod b³êdu.
W wyniku poprawnego wykonania funkcja
.B shmat
zwraca adres pocz±tku obszaru odwzorowania segmentu, natomiast funkcja
.B shmdt
zwraca warto¶æ 
.BR 0 .
.SH B£ÊDY
Gdy 
.B shmat
zakoñczy siê niepomy¶lnie, zmiennej
.B errno
przypisywana jest jedna z nastêpuj±cych warto¶ci:
.TP 11
.B EACCES
Proces wywo³uj±cy funkcjê nie ma uprawnieñ do do³±czenia segmentu w zadany
sposób (do odczytu lub odczytu / zapisu).
.TP
.B EINVAL
Niew³a¶ciwa warto¶æ parametru
.IR shmid ,
niewyrównana do granicy strony (i nie podano \fBSHM_RND\fP), niepoprawna
warto¶æ
.IR shmaddr ,
nieudane do³±czenie pod adresem
.B brk
.\" FIXME What does "failing attach at brk" mean?
lub zosta³ podany znacznik
.BR SHM_REMAP ,
podczas gdy
.I shmaddr
jest równe
.BR NULL .
.TP
.B ENOMEM
Brak pamiêci na deskryptor lub tablice stron.
.PP
Funkcja
.B shmdt
mo¿e zakoñczyæ siê niepomy¶lnie tylko w sytuacji, gdy pod adresem
.I shmaddr
nie istnieje segment pamiêci wspólnej. Wowczas zmienna 
.B errno
przyjmie warto¶æ
.BR EINVAL .
.\" W rzeczywisto¶ci, powy¿szy opis dotyczy tego co *powinno* siê dziaæ
.\" zgodnie z POSIX. Jednak¿e zarówno przy j±drze 2.2.19, jak i przy 2.4.15
.\" shmdt() nigdy nie zwraca b³êdu, nawet gdy shmaddr jest niepoprawny.
.\" (MTK, Jan 2002)
.\" Has been fixed in 2.4.19 - shmdt() now returns EINVAL (MTK, Sep 2002)
.SH UWAGI
U¿ywanie
.B shmat
z
.I shmaddr
równym
.B NULL
jest zalecan±, przeno¶n± motod± do³±czania segmentu pamiêci wspólnej.
Trzeba jednak byæ ¶wiadomym, ¿e ta metoda do³±czania segmentu pamiêci wspólnej
mo¿e spowodowaæ jego do³±czenie pod ró¿nymi adresami w ró¿nych procesach.
W zwi±zku z tym wszystkie wska¼niki obs³ugiwane w pamiêci wspólnej musz±
byæ wzglêdne (zazwyczaj wzglêdem adresu pocz±tkowego segmentu), nie za¶
bezwzglêdne.
.LP
Dla wywo³ania
.B shmat
obowi±zuje nastêpuj±ce ograniczenie systemowe:
.TP 11
.B SHMLBA
Warto¶æ, której wielokrotno¶ci± musi byæ adres dolnej granicy segmentu.
Musi byæ wyrównana do granicy strony.
W aktualnej implementacji
.B SHMLBA
jest równe
.BR PAGE_SIZE .
.PP
Aktualna implementacja nie ma wewnêtrznego ograniczenia na ilo¶æ segmentów
pamiêci wspólnej do³±czanych do jednego procesu
.RB ( SHMSEG ).
.SH "ZGODNE Z"
SVr4, SVID. SVr4 dokumentuje dodatkowy kod b³êdu EMFILE.
W SVID-v4 typ parametru \fIshmaddr\fP zosta³ zmieniony z
.B "char *"
na
.BR "const void *" ,
a typ wyniku zwracanego przez \fIshmat\fP() z
.B "char *"
na
.BR "void *" .
(Linuksowe libc4 i libc5 zawieraj± prototypy
.BR "char *" ;
glibc2 zawiera
.BR "void *" .)
.SH "ZOBACZ TAK¯E"
.BR brk (2),
.BR ipc (5),
.BR mmap (2),
.BR shmctl (2),
.BR shmget (2).
