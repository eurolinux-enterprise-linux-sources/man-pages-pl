.\" Hey Emacs! This file is -*- nroff -*- source.
.\" 
.\" 1999 PTM Przemek Borys
.\" Last update: A. Krzysztofowicz <ankry@mif.pg.gda.pl>, Aug 2002,
.\"              manpages 1.52
.\" 
.\" (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\" 
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" Modified Sat Jul 24 13:30:06 1993 by Rik Faith <faith@cs.unc.edu>
.\" Modified Sun Aug 21 17:42:42 1994 by Rik Faith <faith@cs.unc.edu>
.\"          (Thanks to Koen Holtman <koen@win.tue.nl>)
.\" Modified Wed May 17 15:54:12 1995 by Rik Faith <faith@cs.unc.edu>
.\"           To remove *'s from status in macros (Thanks to Michael Shields).
.\" Modified as suggested by Nick Duffek <nsd@bbc.com>, aeb, 960426
.\" Modified Mon Jun 23 14:09:52 1997 by aeb - add EINTR.
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Mon Jul 24 21:37:38 2000 by David A. Wheeler
.\"          <dwheeler@dwheeler.com> - noted thread issues.
.\" Modified 26 Jun 01 by Michael Kerrisk
.\"          Added __WCLONE, __WALL, and __WNOTHREAD descriptions
.\" Modified 2001-09-25, aeb
.\" Modified 26 Jun 01 by Michael Kerrisk, <mtk16@ext.canterbury.ac.nz>
.\"    Updated notes on setting disposition of SIGCHLD to SIG_IGN
.\"
.TH WAIT 2 2000-07-24 "Linux" "Podręcznik programisty Linuksa"
.SH NAZWA
wait, waitpid \- oczekiwanie na zakończenie procesu
.SH SKŁADNIA
.B #include <sys/types.h>
.br
.B #include <sys/wait.h>
.sp
.BI "pid_t wait(int *" "status" );
.br
.BI "pid_t waitpid(pid_t " pid ", int *" status ", int " options );
.SH OPIS
\fI Uwaga! To tłumaczenie może być nieaktualne!\fP
.PP
Funkcja
.B wait
zatrzymuje wykonywanie bieżącego procesu aż do zakończenia procesu potomka
lub aż do dostarczenia sygnału kończącego bieżący proces lub innego, dla
którego wywoływana jest funkcja obsługi sygnału. Jeśli potomek zakończył
działanie przed wywołaniem tej funkcji (tak zwany proces-duch - "zombie"),
to funkcja kończy się natychmiast. Wszelkie zasoby potomka są zwalniane.

Funkcja
.B waitpid
zawiesza wykonywanie bieżącego procesu dopóki potomek określony przez
.I pid
nie zakończy działania lub dopóki nie zostanie dostarczony sygnał, którego
akcją jest zakończenie procesu lub wywołanie funkcji obsługującej sygnały.
Jeśli potomek, podany jako
.IR pid ,
zakończył swoje działanie przed wywołaniem tej funkcji (tak zwany proces
"zombie"), funkcja kończy się natychmiast. Wszelkie zasoby potomka są
zwalnianie.

Wartość
.I pid
może być:
.IP "< \-1"
co oznacza oczekiwanie na dowolny proces potomny, którego ID grupy procesów
jest równy wartości bezwzględnej
.IR pid .
.IP \-1
co oznacza oczekiwanie na dowolny proces potomny; jest to takie samo
zachowanie, jakie wykazuje
.BR wait .
.IP 0
co oznacza oczekiwanie na każdy proces potomny, którego ID grupy procesu
jest równe ID grupy procesu wywołującego funkcję.
.IP "> 0"
oznacza oczekiwanie na potomka, którego ID procesu jest równy wartości
.IR pid .
.PP
Wartość
.I options
jest sumą OR zera lub więcej spośród następujących stałych:
.TP
.B WNOHANG
oznacza natychmiastowy powrót z funkcji, jeśli potomek nie zakończył pracy.
.TP
.B WUNTRACED
oznacza zakończenie także dla zatrzymanych (ale nie śledzonych) procesów
potomnych, których stan jeszcze nie został zgłoszony.
Stan śledzonych procesów potomnych, które zostały zatrzymane, jest
udostępniany również bez tej opcji.
.PP
(Poniższe opcje dotyczą wyłącznie Linuksa.)
.PP
Jeśli
.I status
nie jest równe
.BR NULL ,
.B wait
lub
.B waitpid
zapisuje dane o stanie w buforze wskazywanym przez
.IR status .

Stan ten można zanalizować następującymi makrami (makra te pobierają jako
argument bufor stat (typu \fBint\fR), \(em nie wskaźnik do bufora!):
.TP
.BI WIFEXITED( status )
jest niezerowe, jeśli potomek normalnie zakończył pracę.
.TP
.BI WEXITSTATUS( status )
analizuje osiem najmniej znaczących bitów kodu powrotu zakończonego potomka,
które mogły być ustawione jako argument wywołania
.B exit()
lub jako argument instrukcji
.B return
w programie głównym. Makro to może być przetworzone, tylko jeśli
.B WIFEXITED
zwróciło wartość niezerową.
.TP
.BI WIFSIGNALED( status )
zwraca prawdę, jeśli proces potomny zakończył pracę z powodu nieprzechwyconego
sygnału.
.TP
.BI WTERMSIG( status )
zwraca numer sygnału, który spowodował zakończenie procesu potomnego. Makro
to może być przetworzone, tylko jeśli
.B WIFSIGNALED
zwróciło wartość niezerową.
.TP
.BI WIFSTOPPED( status )
zwraca prawdę, jeśli proces potomny jest obecnie zatrzymany; jest to
możliwe tylko gdy w wywołaniu użyto
.B WUNTRACED
oraz gdy proces potomny jest śledzony (zobacz
.BR ptrace (2)).
.TP
.BI WSTOPSIG( status )
zwraca numer sygnału, który spowodował zatrzymanie potomka. Makro to może
być przetworzone, tylko jeśli
.B WIFSTOPPED
zwróciło wartość niezerową.
.LP
Niektóre wersje Uniksa (np. Linux, Solaris, ale nie AIX, SunOS) definiują
także makro
.BI WCOREDUMP( status )
sprawdzające, czy proces potomny dokonał zrzutu pamięci. Należy go używać
tylko pomiędzy dyrektywami kompilatora #ifdef WCOREDUMP ... #endif.
.SH "WARTOŚĆ ZWRACANA"
PID zakończonego potomka lub zero, jeśli użyto
.BR WNOHANG ,
a nie było dostępnego żadnego potomka, albo \-1 w przypadku błędu (w tym
ostatnim wypadku odpowiednia wartość jest nadawana
.IR errno ).
.SH "BŁĘDY"
.TP 
.B ECHILD
jeśli proces o zadanym
.I pid
nie istnieje lub nie jest potomkiem procesu wywołującego. (Może się to zdarzyć
również w przypadku potomka, który ustawił akcję obsługi sygnału SIGCHLD na
SIG_IGN. Zobacz także: wątki w sekcji UWAGI LINUKSOWE.)
.TP
.B EINVAL
jeśli argument 
.I options
jest niepoprawny.
.TP
.B EINTR
jeśli
.B WNOHANG
nie było ustawione, a został przechwycony niezablokowany sygnał lub
.BR SIGCHLD .
.SH UWAGI
Specyfikacja Single Unix Specification opisuje znacznik SA_NOCLDWAIT
(nieobsługiwany pod Linuksem) taki, że jeżeli jest ustawiony ten znacznik
albo akcja dla SIGCHLD jest ustawiona na SIG_IGN, to procesy potomne po
zakończeniu nie stają się procesami-duchami ("zombies") i wywołanie funkcji
.BR wait()
lub 
.BR waitpid()
zablokuje proces do czasu, gdy wszystkie procesy potomne zakończą działanie,
a następnie zakończy się błędem z 
.I errno 
ustawionym na ECHILD.
.LP
Oryginalny standard POSIX nie określa zachowania w przypadku ustawienia
SIGCHLD na SIG_IGN. Późniejsze standardy, włączając SUSv2 i POSIX
1003.1-2001 określają zachowanie w sposób taki, jaki opisano w opcji
zgodności z XSI. Linux nie spełnia tego drugiego w dwóch opisanych powyżej
punktach: jeśli wywołanie
.BR wait "() lub " waitpid ()
jest wykonywane z ignorowaniem SIGCHLD, zachowuje się ono tak, jakby SIGCHLD
nie były ignorowane, to znaczy, wywołanie zostaje zablokowane do chwili
zakończenia następnego potomka, a następnie zwraca PID i kod powrotu tego
potomka.
.SH "UWAGI LINUKSOWE"
Pod Linuksem, wątek zarządzany przez jądro nie jest uruchamiany inaczej niż
zwykły proces. Zamiast tego wątek jest po prostu procesem stworzonym przez
wywołanie dostępnej tylko pod Linuksem funkcji systemowej 
.BR clone(2) . 
Inne funkcje, jak na przykład przenośne
.BR pthread_create (3)
są zaimplementowane przez wywołania funkcji
.BR clone (2).
W wersjach Linuksa poprzedzających 2.4, wątek był po prostu specyficznym
przypadkiem procesu. W związku z tym nie mógł on czekać na potomków innego
wątku nawet w przypadku, gdy ten drugi wątek należał do tej samej grupy
wątków. Jednakże, POSIX zaleca taką funkcjonalność, więc począwszy od Linuksa
2.4 wątek może (i domyślnie będzie) czekać na potomków innych wątków
należących do tej samej grupy wątków.
.LP
Następujące, specyficzne dla Linuksa opcje w
.I options
są przeznaczone dla potomków utworzonych za pomocą
.BR clone (2).
.TP
.B __WCLONE
.\" od 0.99pl10
Oczekiwanie tylko na potomków typu "clone". Jeśli opcja ta zostanie pominięta
będzie oczekiwanie tylko na potomków typu "nie-clone". (Potomek typu "clone"
to taki, który po zakończeniu nie dostarcza swojemu procesowi macierzystemu
sygnału lub dostarcza sygnał inny niż
.BR SIGCHLD .)
Opcja ta jest ignorowana, jeśli ustawiona jest również opcja
.BR __WALL .
.TP
.B __WALL
.\" od patch-2.3.48
(Począwszy od Linuksa 2.4) Oczekiwanie na procesy potomne niezależnie od ich
typu ("clone" lub "non-clone").
.TP
.B __WNOTHREAD
.\" od patch-2.4.0-test8
(Począwszy od Linuksa 2.4) Nie oczekiwać na procesy potomne innych wątków w
obrębie tej samej grupy wątków. Było to w Linuksie domyślne przed wersją 2.4.
.SH "ZGODNE Z"
SVr4, POSIX.1
.SH "ZOBACZ TAKŻE"
.BR clone (2),
.BR ptrace (2),
.BR signal (2),
.BR wait4 (2),
.BR pthread_create (3),
.BR signal (7)
.SH "INFORMACJE O TŁUMACZENIU"
Powyższe tłumaczenie pochodzi z nieistniejącego już Projektu Tłumaczenia Manuali i 
\fImoże nie być aktualne\fR. W razie zauważenia różnic między powyższym opisem
a rzeczywistym zachowaniem opisywanego programu lub funkcji, prosimy o zapoznanie 
się z oryginalną (angielską) wersją strony podręcznika za pomocą polecenia:
.IP
man \-\-locale=C 2 wait
.PP
Prosimy o pomoc w aktualizacji stron man \- więcej informacji można znaleźć pod
adresem http://sourceforge.net/projects/manpages\-pl/.
