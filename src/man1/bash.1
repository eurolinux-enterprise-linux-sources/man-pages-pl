.\" {PTM/WK/2000-II}
.\" aktualizacja do 2.05a PTM/WK/2002-I
.\"
.\" MAN PAGE COMMENTS to
.\"
.\"	Chet Ramey
.\"	Information Network Services
.\"	Case Western Reserve University
.\"	chet@ins.CWRU.Edu
.\"
.\"	Last Change: Tue Nov 13 12:55:51 EST 2001
.\"
.\" bash_builtins, strip all but Built-Ins section
.if \n(zZ=1 .ig zZ
.if \n(zY=1 .ig zY
.TH BASH 1 "13 listopada 2001" "GNU Bash-2.05a"
.\"
.\" There's some problem with having a `@'
.\" in a tagged paragraph with the BSD man macros.
.\" It has to do with `@' appearing in the }1 macro.
.\" This is a problem on 4.3 BSD and Ultrix, but Sun
.\" appears to have fixed it.
.\" If you're seeing the characters
.\" `@u-3p' appearing before the lines reading
.\" `possible-hostname-completions
.\" and `complete-hostname' down in READLINE,
.\" then uncomment this redefinition.
.\"
.de }1
.ds ]X \&\\*(]B\\
.nr )E 0
.if !"\\$1"" .nr )I \\$1n
.}f
.ll \\n(LLu
.in \\n()Ru+\\n(INu+\\n()Iu
.ti \\n(INu
.ie !\\n()Iu+\\n()Ru-\w\\*(]Xu-3p \{\\*(]X
.br\}
.el \\*(]X\h|\\n()Iu+\\n()Ru\c
.}f
..
.\"
.\" File Name macro.  This used to be `.PN', for Path Name,
.\" but Sun doesn't seem to like that very much.
.\"
.de FN
\fI\|\\$1\|\fP
..
.SH NAZWA
bash \- GNU Bourne-Again SHell
.SH SK£ADNIA
.B bash
.RI [ opcje ]
.RI [ plik ]
.SH COPYRIGHT
.if n Bash is Copyright (C) 1989-2001 by the Free Software Foundation, Inc.
.if t Bash is Copyright \(co 1989-2001 by the Free Software Foundation, Inc.
.SH OPIS
.B Bash
jest zgodnym z \fBsh\fP interpreterem jêzyka poleceñ, wykonuj±cym polecenia
ze standardowego wej¶cia b±d¼ z pliku.
W³±czono doñ równie¿ przydatne cechy zaczerpniête z pow³oki \fIKorna\fP
i pow³oki \fIC\fP (\fBksh\fP i \fBcsh\fP).
.PP
.B Bash
w zamierzeniu jest implementacj± zgodn± z POSIX-ow± specyfikacj± pow³ok
i narzêdzi --
IEEE POSIX Shell and Tools specification (IEEE Working Group 1003\.2).
.SH OPCJE
Oprócz jednoznakowych opcji pow³oki udokumentowanych w opisie wbudowanego
polecenia \fBset\fP, \fBbash\fP przy wywo³aniu interpretuje poni¿sze opcje:
.PP
.PD 0
.TP 10
.BI \-c "\| ³añcuch\^"
Je¶li wystêpuje opcja
.BR \-c ,
to polecenia odczytywane s± z
.IR ³añcucha .
Je¿eli po
.I ³añcuchu
istniej± argumenty, to s± one przypisywane do argumentów pozycyjnych,
poczynaj±c od
.BR $0 .
.TP
.B \-r
Je¿eli wystêpuje opcja
.BR \-r ,
to pow³oka staje siê pow³ok±
.I okrojon±
(restricted). Zobacz poni¿ej
.SM
.BR "POW£OKA OKROJONA" .
.TP
.B \-i
Je¿eli wystêpuje opcja
.BR \-i ,
to pow³oka jest
.IR interaktywna .
.TP
.B \-s
Je¶li wystêpuje opcja
.B \-s
lub po przetworzeniu opcji nie pozostaj± ¿adne argumenty, to polecenia
odczytywane s± ze standardowego wej¶cia. Opcja ta umo¿liwia na ustawienie
parametrów pozycyjnych podczas wywo³ania pow³oki interaktywnej.
.TP
.B \-D
Na standardowym wyj¶ciu wypisywana jest lista wszystkich podwójnie cytowanych
³añcuchów poprzedzonych znakiem \fB$\fP.
S± to ³añcuchy bêd±ce przedmiotem t³umaczenia jêzyka, gdy bie¿±cym ustawieniem
regionalnym (locale) nie jest \fBC\fP ani \fBPOSIX\fP.
Implikuje to opcjê \fB\-n\fP; nie zostan± wykonane ¿adne polecenia.
.TP
.B [\-+]O [\fIopcja_shopt\fP]
\fIopcja_shopt\fP jest jedn± z ocpji pow³oki akceptowanych przez polecenie
wbudowane \fBshopt\fP (zobacz
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej).
Je¶li wystêpuje \fIopcja_shopt\fP, to \fB\-O\fP nadaje warto¶æ tej opcji, za¶
\fB+O\fP uniewa¿nia j±.
Je¿eli nie podano \fIopcji_shopt\fP, to na standardowym wyj¶ciu wypisywane s±
nazwy i warto¶ci opcji pow³oki akceptowanych przez \fBshopt\fP.
Je¶li opcj± wywo³ania jest \fB+O\fP, tworzone wyj¶cie jest formatowane w taki
sposób, by mo¿na by³o wykorzystaæ je jako wej¶cie.
.TP
.B \-\-
Zapis
.B \-\-
sygnalizuje koniec opcji i wy³±cza dalsze ich przetwarzanie.
Argumenty wystêpuj±ce po
.B \-\-
traktowane s± jako nazwy plików i argumenty. Argument
.B \-
jest równowa¿nikiem \fB\-\-\fP.
.PD
.PP
.B Bash
interpretuje tak¿e wiele opcji wieloznakowych.
Je¶li maj± zostaæ rozpoznane, opcje te musz± pojawiæ siê w wierszu poleceñ
przed opcjami jednoznakowymi,
.PP
.PD 0
.TP
.B \-\-dump\-po\-strings
Równowa¿ne \fB\-D\fP, ale wyj¶cie jest w formacie pliku
GNU \fIgettext\fP \fBpo\fP (portable object).
.TP
.B \-\-dump\-strings
Równowa¿nik \fB\-D\fP.
.TP
.B \-\-help
Wy¶wietla na standardowym wyj¶ciu komunikat o u¿ytkowaniu i pomy¶lnie
koñczy pracê.
.TP
.PD 0
\fB\-\-init\-file\fP \fIplik\fP
.TP
\fB\-\-rcfile\fP \fIplik\fP
.PD
Wykonuje polecenia z podanego
.I pliku
zamiast ze standardowego osobistego pliku inicjuj±cego
.IR ~/.bashrc ,
je¶li pow³oka jest interaktywna.
Zobacz
.SM
.B WYWO£ANIE
poni¿ej.
.TP
.B \-\-login
Sprawia, ¿e
.B bash
dzia³a tak, jakby zosta³ wywo³any jako pow³oka zg³oszeniowa (login shell).
Zobacz
.SM
.B WYWO£ANIE
poni¿ej.
.TP
.B \-\-noediting
Nie u¿ywa biblioteki GNU
.B readline
do odczytu wierszy poleceñ w trybie interaktywnym.
.TP
.B \-\-noprofile
Nie odczytuje ani ogólnosystemowego pliku startowego
.FN /etc/profile
ani ¿adnego z osobistych plików inicjuj±cych
.IR ~/.bash_profile ,
.IR ~/.bash_login
czy
.IR ~/.profile .
Domy¶lnie,
.B bash
czyta te pliki gdy jest wywo³any jako pow³oka zg³oszeniowa
(zobacz
.SM
.B WYWO£ANIE
poni¿ej).
.TP
.B \-\-norc
Nie odczytuje i nie wykonuje osobistego pliku inicjuj±cego
.I ~/.bashrc
je¶li pow³oka jest interaktywna. Opcja ta jest domy¶lnie w³±czona, je¿eli
pow³okê wywo³ano jako
.BR sh .
.TP
.B \-\-posix
Zmienia zachowanie \fBbash\fP tam, gdzie operacja domy¶lna ró¿ni siê od
standardu POSIX 1003.2 tak, by dostosowaæ siê do niego (\fItryb posix\fP).
.TP
.B \-\-restricted
Pow³oka staje siê okrojona (zobacz
.SM
.B "POW£OKA OKROJONA"
poni¿ej).
.TP
.ig
.B \-\-rpm-requires
Tworzy listê plików wymaganych do uruchomienia skryptu pow³oki. Implikuje
to '-n' i podlega tym samym ograniczeniom, co sprawdzanie b³êdów podczas
kompilacji;
Nachylone w lewo apostrofy (backticks), testy [] i obliczenia eval nie s±
analizowane, wiêc pewne zale¿no¶ci mog± byæ pominiête.
..
.TP
.B \-\-verbose
Równowa¿nik opcji  \fB\-v\fP.
.TP
.B \-\-version
Pokazuje na standardowym wyj¶ciu informacjê o wersji tego egzemplarza
.B bash
i pomy¶lnie koñczy pracê.
.PD
.SH ARGUMENTY
Je¶li po przetworzeniu opcji pozostaj± jakie¶ argumenty, a nie podano ani opcji
.B \-c
ani
.BR \-s ,
to zak³ada siê, ¿e pierwszy argument jest nazw± pliku zawieraj±cego
polecenia pow³oki.
Je¿eli
.B bash
zosta³ wywo³any w taki sposób, to
.B $0
przypisywana jest nazwa pliku z poleceniami, a parametrom pozycyjnym pozosta³e
argumenty.
.B Bash
odczytuje i wykonuje polecenia z tego pliku, a nastêpnie koñczy pracê.
Kod zakoñczenia \fBbash\fPa jest wówczas kodem zakoñczenia ostatniego
wykonanego polecenia skryptu.
Je¶li nie wykonano ¿adnego polecenia, to kod zakoñczenia wynosi 0.
.SH WYWO£ANIE
\fIPow³oka zg³oszeniowa\fP (login shell) to taka, w której pierwszym znakiem
zerowego argumentu jest
.BR \- ,
lub taka, któr± uruchomiono z opcj±
.BR \-\-login .
.PP
Pow³oka \fIinteraktywna\fP to taka, któr± uruchomiono bez argumentów
innych ni¿ opcje i bez opcji
.BR \-c ;
zarówno jej standardowe wej¶cie jak
i wyj¶cie powi±zane jest z terminalami (tak jak okre¶li³a to funkcja
.IR isatty (3)),
albo taka, któr± uruchomiono z opcj±
.BR \-i .
.SM
Je¶li
.B bash
jest interaktywny, to ustawiane jest
.B PS1
za¶
.B $\-
zawiera
.BR i ;
pozwala to skryptowi pow³oki lub plikowi startowemu na sprawdzanie tego stanu.
.PP
Poni¿sze akapity opisuj±, jak
.B bash
wykonuje swoje pliki startowe.
Je¶li który¶ z tych plików istnieje, ale nie mo¿e byæ odczytany, to
.B bash
zg³asza b³±d.
Tyldy (~) w nazwach plików interpretowane s± wed³ug regu³ opisanych poni¿ej
w czê¶ci
.B "Interpretacja tyld"
sekcji
.SM
.BR INTERPRETACJA .
.PP
Gdy
.B bash
wywo³ywany jest jako pow³oka zg³oszeniowa lub jako pow³oka nie-interaktywna
z opcj± \fB\-\-login\fP, w pierwszej kolejno¶ci czyta i wykonuje polecenia
z pliku \fI/etc/profile\fP, je¶li takowy istnieje.
Po odczytaniu tego pliku, szuka \fI~/.bash_profile\fP,
\fI~/.bash_login\fP i \fI~/.profile\fP, w tej kolejno¶ci, po czym odczytuje
i wykonuje polecenia z pierwszego istniej±cego i daj±cego siê odczytaæ.
Mo¿na pos³u¿yæ siê opcj±
.B \-\-noprofile
podczas uruchamiania pow³oki, by zakazaæ takiego zachowania.
.PP
Podczas koñczenia pracy pow³oki zg³oszeniowej,
.B bash
czyta i wykonuje polecenia z pliku \fI~/.bash_logout\fP, je¶li taki istnieje.
.PP
Je¿eli uruchamiana jest pow³oka interaktywna nie bêd±ca pow³ok± zg³oszeniow±,
.B bash
czyta i wykonuje polecenia z \fI~/.bashrc\fP, je¶li taki plik istnieje.
Mo¿e to byæ zakazane za pomoc± opcji
.BR \-\-norc .
Opcja \fB\-\-rcfile\fP \fIplik\fP wymusi
odczyt i wykonanie poleceñ z \fIpliku\fP zamiast z \fI~/.bashrc\fP.
.PP
Je¶li
.B bash
startuje w trybie nie-interaktywnym, na przyk³ad w celu uruchomienia
skryptu pow³oki, to szuka w ¶rodowisku zmiennej
.SM
.BR BASH_ENV ,
interpretuje jej warto¶æ, je¶li j± znalaz³, i u¿ywa otrzymanej warto¶ci
jako nazwy pliku do odczytania i wykonania.
.B Bash
zachowuje siê tak, jakby by³y wykonane nastêpuj±ce polecenia:
.sp .5
.RS
.if t \f(CWif [ \-n "$BASH_ENV" ]; then . "$BASH_ENV"; fi\fP
.if n if [ \-n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
.RE
.sp .5
ale do szukania nazwy pliku nie jest u¿ywana warto¶æ zmiennej
.SM
.BR PATH .
.PP
Je¿eli
.B bash
wywo³ano pod nazw±
.BR sh ,
to próbuje on na¶ladowaæ zachowanie startowe historycznych wersji
.B sh
tak ¶ci¶le jak to jest mo¿liwe, przy równoczesnym spe³nianiu standardu POSIX.
Wywo³any jako pow³oka interaktywna lub pow³oka nie-interaktywna z opcj±
\fB\-\-login\fP, usi³uje na pocz±tku odczytaæ i wykonaæ polecenia z
.I /etc/profile
i
.IR ~/.profile ,
w tej kolejno¶ci.
W celu zakazania tego zachowania mo¿na u¿yæ opcji
.BR \-\-noprofile .
Wywo³any jako pow³oka interaktywna pod nazw±
.BR sh ,
.B bash
poszukuje zmiennej
.SM
.BR ENV ,
interpretuje jej warto¶æ, je¶li jest zdefiniowana, i pos³uguje siê otrzyman±
warto¶ci± jako nazw± pliku, który ma byæ odczytany i wykonany.
Poniewa¿ pow³oka wywo³ana jako
.B sh
nie usi³uje czytaæ ani wykonywaæ poleceñ z jakichkolwiek innych plików
startowych, opcja
.B \-\-rcfile
nie ma ¿adnych skutków.
Pow³oka nie-interaktywna wywo³ana pod nazw±
.B sh
nie próbuje czytaæ ¿adnych plików startowych.
Wywo³any jako
.BR sh ,
.B bash
wchodzi w tryb
.I posix
po odczycie plików startowych.
.PP
Gdy
.B bash
uruchomiony jest w trybie
.IR posix ,
jak z opcj±
.B \-\-posix
wiersza poleceñ, kieruje siê standardem POSIX dla plików startowych.
W trybie tym, pow³oka interaktywna interpretuje zmienn±
.SM
.B ENV
a polecenia odczytywane i wykonywane s± z pliku, którego nazw± jest
zinterpretowana warto¶æ.
Nie s± czytane inne pliki startowe.
.PP
.B Bash
usi³uje rozstrzygn±æ, czy jest uruchomiony przez demona pow³oki zdalnej,
zwykle \fIrshd\fP.
Je¿eli stwierdzi, ¿e zosta³ uruchomiony przez \fIrshd\fP, to odczytuje
i wykonuje polecenia z \fI~/.bashrc\fP, je¶li plik ten istnieje i daje
siê czytaæ. Nie bêdzie tego robi³ wywo³any jako \fBsh\fP.
Mo¿na pos³u¿yæ siê opcj±
.BR \-\-norc ,
by zakazaæ tego zachowania oraz opcj±
.BR \-\-rcfile ,
by wymusiæ czytanie innego pliku, ale \fIrshd\fP zazwyczaj nie wywo³uje
pow³oki z tymi opcjami ani nie pozwala na ich podanie.
.PP
Je¶li pow³oka zosta³a uruchomiona z efektywnym id u¿ytkownika (grupy) ró¿nym
od id rzeczywistego, a nie podano opcji \fB\-p\fP, to nie s± odczytywane
¿adne pliki startowe, funkcje pow³oki nie s± dziedziczone ze ¶rodowiska,
zmienna
.SM
.BR SHELLOPTSP ,
je¶li jest taka w ¶rodowisku, jest ignorowana
a efektywny identyfikator u¿ytkownika jest ustawiany na jego identyfikator
rzeczywisty.
Je¶li przy wywo³aniu podano opcjê \fB\-p\fP, to zachowanie startowe jest
takie samo, ale nie jest resetowany efektywny id u¿ytkownika.
.SH DEFINICJE
.PP
W pozosta³ej czê¶ci tego dokumentu u¿ywane s± poni¿sze definicje.
.PD 0
.TP
.B odstêp
Spacja lub znak tabulacji.
.TP
.B s³owo
Sekwencja znaków uwa¿ana przez pow³okê za pojedyncz± jednostkê. Znana te¿ jako
.BR token .
.TP
.B nazwa
Jest to
.I s³owo
sk³adaj±ce siê wy³±cznie ze znaków alfanumerycznych i znaków podkre¶lenia,
i rozpoczynaj±ce siê znakiem alfabetycznym lub podkre¶leniem. Wspominane
równie¿ jako
.BR identyfikator .
.TP
.B metaznak
Znak, które, gdy nie jest cytowany, oddziela s³owa. Jeden z poni¿szych:
.br
.RS
.PP
.if t \fB|  &  ;  (  )  <  >  spacja  tab\fP
.if n \fB|  & ; ( ) < > spacja tab\fP
.RE
.PP
.TP
.B operator steruj±cy
\fItoken\fP pe³ni±cy funkcjê steruj±c±. Jest to jeden z poni¿szych symboli:
.RS
.PP
.if t \fB\(bv\(bv  &  &&  ;  ;;  (  )  |  <nowalinia>\fP
.if n \fB|| & && ; ;; ( ) | <nowalinia>\fP
.RE
.PD
.SH "S£OWA ZASTRZE¯ONE"
\fIS³owa zastrze¿one\fP (reserved words) to takie, które maj± dla pow³oki
specjalne znaczenie.
Nastêpuj±ce s³owa s± rozpoznawane jako zastrze¿one, gdy nie s± cytowane i
wystêpuj± albo jako pierwsze s³owo polecenia prostego (zobacz
.SM
.B GRAMATYKA POW£OKI
poni¿ej) albo trzecie s³owo poleceñ
.B case
lub
.BR for ;
.if t .RS
.PP
.B
.if n ! case  do done elif else esac fi for function if in select then until while { } time [[ ]]
.if t !    case    do    done    elif    else    esac    fi    for    function    if    in    select    then    until    while    {    }    time    [[    ]]
.if t .RE
.RE
.SH "GRAMATYKA POW£OKI"
.SS Polecenia proste
.PP
\fIPolecenie proste\fP jest sekwencj± opcjonalnych przypisañ zmiennych,
po której nastêpuj± rozdzielane przez \fBodstêp\fP s³owa i przekierowania,
a zakoñczon± \fIoperatorem steruj±cym\fP. Pierwsze s³owo okre¶la polecenie,
jakie ma zostaæ wykonane i jest przekazywane jako argument numer zero.
Pozosta³e s³owa s± przekazywane jako argumenty wywo³ywanego polecenia.
.PP
Warto¶ci± zwracan± \fIpolecenia prostego\fP jest jego kod zakoñczenia lub
128+\fIn\^\fP je¿eli polecenie przerwane jest sygna³em
.IR n .
.SS Potoki
.PP
\fIPotok\fP jest sekwencj± jednego lub wiêcej poleceñ rozdzielonych znakiem
.BR | .
Formatem potoku jest:
.RS
.PP
[\fBtime\fP [\fB\-p\fP]] [ ! ] \fIpolecenie\fP [ \fB|\fP \fIpolecenie2\fP ... ]
.RE
.PP
Standardowe wyj¶cie z
.I polecenia
po³±czone jest za po¶rednictem potoku ze standardowym wej¶ciem
.IR polecenia2 .
Po³±czenie to wykonywane jest przed mo¿liwymi przekierowaniami podanymi dla
polecenia (zobacz poni¿ej
.SM
.BR PRZEKIEROWANIE .
.PP
Je¿eli potok poprzedza zastrze¿one s³owo
.BR ! ,
to kod zakoñczenia takiego potoku jest negacj± (NOT) kodu
zakoñczenia ostatniego polecenia. W przeciwnym wypadku, kodem potoku jest
kod zakoñczenia ostatniego polecenia.
Pow³oka oczekuje na zakoñczenie (terminate) wszystkich poleceñ w potoku
przed zwróceniem warto¶ci.
.PP
Je¿eli potok jest poprzedzony s³owem zastrze¿onym
.BR time ,
to po jego zakoñczeniu podawany jest czas wykonywania, jak
równie¿ czas u¿ytkownika i czas systemu zu¿yty na wykonanie.
Opcja \fB\-p\fP zmienia format tworzonych wyników na
okre¶lony przez POSIX.
Do sformatowania ³añcucha okre¶laj±cego, jak powinna byæ wy¶wietlana
informacja o czasach, mo¿na ustawiæ zmienn±
.BR TIMEFORMAT ;
zobacz opis
.SM
.B TIMEFORMAT
w
.B "Zmienne pow³oki"
poni¿ej.
.PP
Ka¿de polecenie w potoku uruchamiane jest jako odrêbny proces (tj. w
podpow³oce).
.SS Listy
.PP
\fILista\fP jest potokiem lub sekwencj± kilku potoków rozdzielonych jednym
z operatorów
.BR ; ,
.BR & ,
.BR &&
lub
.BR \(bv\(bv ,
i opcjonalnie zakoñczon± jednym ze znaków
.BR ; ,
.BR &
lub
.BR <nowalinia> .
.PP
Spo¶ród tych operatorów listowych,
.B &&
i
.B \(bv\(bv
maj± ten sam priorytet, nastêpuj±ce po nich
.B ;
i
.BR &,
równie¿ maj± równy miêdzy sob± priorytet.
.PP
Je¶li polecenie zakoñczone jest operatorem steruj±cym
.BR & ,
to pow³oka wykonuje je w \fItle\fP (background) w podpow³oce.
Pow³oka macierzysta nie oczekuje na zakoñczenie polecenia, a zwracany
kod wynosi 0. Polecenia oddzielane znakiem ¶rednika
.B ;
wykonywane s± sekwencyjnie; pow³oka oczekuje na zakoñczenie
pracy przez ka¿de z nich po kolei. Zwracany kod jest kodem zakoñczenia
ostatniego wykonanego polecenia.
.PP
Operatory steruj±ce
.B &&
i
.B \(bv\(bv
oznaczaj± odpowiednio listy AND i OR. Lista AND
ma postaæ
.RS
.PP \fIpolecenie1\fP \fB&&\fP \fIpolecenie2\fP
.RE
.PP
.I polecenie2
wykonywane jest wtedy, i tylko wtedy, gdy
.I polecenie1
zwraca zerowy kod zakoñczenia.
.PP
Lista OR ma postaæ
.RS
.PP
\fIpolecenie1\fP \fB\(bv\(bv\fP \fIpolecenie2\fP
.PP
.RE
.PP
.I polecenie2
jest wykonywane wtedy, i tylko wtedy, gdy
.I polecenie1
zwraca niezerowy kod zakoñczenia.
Kod zwracany przez listy AND i OR jest kodem zakoñczenia ostatniego
wykonanego polecenia listy.
.SS Polecenia z³o¿one
.PP
\fIPolecenie z³o¿one\fP (compound command) jest jednym z poni¿szych:
.TP
(\fIlista\fP)
\fIlista\fP wykonywana jest w podpow³oce. Przypisania zmiennych i polecenia
wbudowane wp³ywaj±ce na ¶rodowisko pow³oki nie zachowuj± swoich skutków po
zakoñczeniu polecenia. Zwracanym kodem jest kod zakoñczenia \fIlisty\fP.
.TP
{ \fIlista\fP; }
\fIlista\fP jest po prostu wykonywana w bie¿±cym ¶rodowisku pow³oki.
\fIlista\fP musi byæ zakoñczona znakiem nowej linii lub ¶rednika. Nazywane
jest to \fIpoleceniem grupowania\fP. Zwracanym kodem jest kod zakoñczenia
\fIlisty\fP.
Nale¿y pamiêtaæ, ¿e w przeciwieñstwie do metaznaków \fB(\fP i \fB\)\fP,
\fB{\fP i \fB}\fP s± \fIs³owami zastrze¿onymi\fP i aby zosta³y rozpoznane
musz± siê pojawiæ tam, gdzie dozwolone jest u¿ycie s³ów zastrze¿onych.
Poniewa¿ nie powoduj± podzia³u na s³owa, musz± byæ oddzielone od \fIlisty\fP
za pomoc± bia³ego znaku.
.TP
((\fIwyra¿enie\fP))
\fIwyra¿enie\fP interpretowane jest zgodnie z zasadami opisanymi poni¿ej
w sekcji
.SM
.BR "OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH" .
Je¶li warto¶æ wyra¿enia jest niezerowa, to kodem zwracanym jest 0;
w przeciwnym razie kodem zwracaym jest 1. Jest to ¶ci¶le równowa¿ne
konstrukcji \fBlet "\fIwyra¿enie\fP"\fR.
.TP
\fB[[\fP \fIwyra¿enie\fP \fB]]\fP
Zwraca kod 0 lub 1 w zale¿no¶ci od interpretacji wyra¿enia warunkowego
\fIwyra¿enie\fP. Wyra¿enia z³o¿one s± ze sk³adowych (primaries)
opisanych poni¿ej w opcji
.SM
.BR "WYRA¯ENIA WARUNKOWE" .
Na s³owach pomiêdzy \fB[[\fP a \fB]]\fP nie s± wykonywane rozwiniêcia
nazw plików ani podzia³ na s³owa;
s± natomiast wykonywane: interpretacja tyld, parametrów i zmiennych,
interpretacja wyra¿eñ arytmetycznych, podstawianie wyników poleceñ,
podstawianie wyników procesów i usuniêcia cytowañ.
.if t .sp 0.5
.if n .sp 1
Gdy u¿ywane s± operatory \fB==\fP i \fB!=\fP, ³añcuch na prawo od operatora
traktowany jest jak wzorzec i dopasowywany zgodnie z zasadami opisanymi
poni¿ej w sekcji \fBDopasowywanie wzorców\fP. Warto¶ci± zwracan± jest 0
je¶li ³añcuch odpowiednio pasuje lub nie pasuje do wzorca,
za¶ 1 w przeciwnym przypadku.
Mo¿na zacytowaæ dowoln± czê¶æ wzorca w celu wymuszenia dopasowywania jej
jako ³añcucha.
.if t .sp 0.5
.if n .sp 1
Wyra¿enia mo¿na ³±czyæ przy pomocy nastêpuj±cych operatorów, wymienionych
w kolejno¶ci malej±cego priorytetu:
.if t .sp 0.5
.if n .sp 1
.RS
.PD 0
.TP
.B ( \fIwyra¿enie\fP )
Zwraca warto¶æ \fIwyra¿enia\fP.
Mo¿e s³u¿yæ do uniewa¿nienia zwyk³ej kolejno¶ci operatorów.
.TP
.B ! \fIwyra¿enie\fP
Prawda je¿eli
.I wyra¿enie
jest fa³szywe.
.TP
\fIwyra¿enie1\fP \fB&&\fP \fIwyra¿enie2\fP
Prawda je¶li zarówno
.I wyra¿enie1
jak i
.I wyra¿enie2
s± prawdziwe.
.TP
.if t \fIwyra¿enie1\fP \fB\(bv\(bv\fP \fIwyra¿enie2\fP
.if n \fIwyra¿enie1\fP \fB||\fP \fIwyra¿enie2\fP
Prawda je¶li choæ jedno spo¶ród
.I wyra¿enie1
lub
.I wyra¿enie2
jest prawdziwe.
.PD
.LP
Operatory \fB&&\fP i
.if t \fB\(bv\(bv\fP
.if n \fB||\fP
nie wykonuj± \fIwyra¿enia2\fP je¿eli warto¶æ \fIwyra¿enia1\fP wystarcza do
okre¶lenia warto¶ci, jaka zostanie zwrócona przez ca³e wyra¿enie warunkowe.
.RE
.TP
\fBfor\fP \fInazwa\fP [ \fBin\fP \fIs³owo\fP ] ; \fBdo\fP \fIlista\fP ; \fBdone\fP
Interpretowane s± s³owa nastêpuj±ce po \fBin\fP, tworz±c listê elementów.
Zmiennej \fInazwa\fP nadawana jest kolejno warto¶æ ka¿dego elementu tej
listy i ka¿dorazowo wykonywana jest \fIlista\fP poleceñ.  Je¿eli pominiêto
\fBin\fP \fIs³owo\fP, to polecenie \fBfor\fP wykonuje \fIlistê\fP po jednym
razie dla ka¿dego ustawionego parametru pozycyjnego
(zobacz
.SM
.B PARAMETRY
poni¿ej).
Zwracanym kodem jest kod zakoñczenia ostatniego wykonanego polecenia.
Je¶li interpretacja elementów nastêpuj±cych po \fBin\fP daje w wyniku pust±
listê, to nie s± wykonywane ¿adne polecenia i zwracany jest kod 0.
.TP
\fBfor\fP (( \fIwyr1\fP ; \fIwyr2\fP ; \fIwyr3\fP )) ; \fBdo\fP \fIlista\fP ; \fBdone\fP
Na pocz±tku obliczane jest wyra¿enie arytmetyczne \fIwyr1\fP, zgodnie
z zasadami opisanymi poni¿ej w
.SM
.BR "OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH" .
Nastêpnie wielokrotnie obliczane jest \fIwyr2\fP, a¿ do osi±gniêcia przez
nie warto¶ci zero.
Ka¿dorazowo gdy obliczone \fIwyr2\fP jest niezerowe, wykonywana jest
\fIlista\fP i obliczane jest wyra¿enie arytmetyczne \fIwyr3\fP.
Je¶li pominiêto które¶ z wyra¿eñ, to zachowuje siê ono tak, jakby przyjmowa³o
warto¶æ 1.
Zwracanym kodem jest kod zakoñczenia ostatniego wykonanego polecenia
\fIlisty\fP, lub fa³sz je¶li które¶ z wyra¿eñ jest niepoprawne.
.TP
\fBselect\fP \fInazwa\fP [ \fBin\fP \fIs³owo\fP ] ; \fBdo\fP \fIlista\fP ; \fBdone\fP
Interpretowana jest lista s³ów nastêpuj±cych po \fBin\fP, tworz±c listê
elementów. Zestaw zinterpretowanych s³ów wypisywany jest na standardowym wyj¶ciu,
ka¿de poprzedzone liczb± kolejn±. Je¶li pominiêto \fBin\fP \fIs³owo\fP, to
wypisywane s± parametry pozycyjne (zobacz
.SM
.B PARAMETRY
poni¿ej).
Nastêpnie wy¶wietlana jest zachêta
.B PS3
i czytany jest wiersz ze standardowego wej¶cia. Je¿eli wiersz sk³ada siê
z liczby odpowiadaj±cej jednemu z wy¶wietlonych s³ów, to zmiennej
.I nazwa
przypisywana jest warto¶æ tego s³owa.
Je¶li wiersz jest pusty, s³owa i zachêta wy¶wietlane s± ponownie. Je¿eli
odczytano EOF, to polecenie koñczy pracê. Ka¿da inna warto¶æ
powoduje, ¿e
.I nazwie
zostanie przypisany ³añcuch pusty. Odczytany wiersz zachowywany jest w
zmiennej
.BR REPLY .
.I lista
wykonywana jest po ka¿dym wyborze, dopóki nie zostanie wykonane polecenie
.BR break .
Kodem zakoñczenia
.B select
jest kod zakoñczenia ostatniego wykonanego polecenia
.IR listy
lub zero je¶li nie wykonano ¿adnych poleceñ.
.TP
\fBcase\fP \fIs³owo\fP \fBin\fP [ [(] \fIwzorzec\fP [ \fB|\fP \fIwzorzec\fP ] \
... ) \fIlista\fP ;; ] ... \fBesac\fP
Polecenie \fBcase\fP najpierw interpretuje \fIs³owo\fP i próbuje dopasowaæ
uzyskany wynik ka¿dego z \fIwzorców\fP po kolei, pos³uguj±c siê tymi samymi
regu³ami dopasowywania, co dla rozwijania nazw ¶cie¿kowych (zobacz
.B Rozwijanie nazw ¶cie¿kowych
poni¿ej). Gdy znalezione zostanie dopasowanie, wykonywana jest odpowiadaj±ca
mu \fIlista\fP. Po pierwszym dopasowaniu nie s± dokonywane próby dopasowania
pozosta³ych wzorców. Je¶li ¿aden ze wzorców nie pasuje do kodem zakoñczenia
jest zero. W przeciwnym razie jest równy kodowi zakoñczenia ostatniego
z wykonanych poleceñ \fIlisty\fP.
.TP
\fBif\fP \fIlista\fP; \fBthen\fP \fIlista;\fP \
[ \fBelif\fP \fIlista\fP; \fBthen\fP \fIlista\fP; ] ... \
[ \fBelse\fP \fIlista\fP; ] \fBfi\fP
Wykonywana jest
.I lista
wystêpuj±ca po
.BR if .
Je¿eli jej kod zakoñczenia jest zerowy, to wykonywana jest \fIlista\fP
klauzuli \fBthen\fP. W przeciwnym wypadku, wykonywana jest \fIlista\fP
ka¿dego \fBelif\fP po kolei; je¶li kod zakoñczenia której¶ wynosi 0, to
wykonywana jest \fIlista\fP \fBthen\fP i polecenie jest koñczone. Je¿eli
nie wyst±pi³ ¿aden z powy¿szych przypadków, to wykonywana jest \fIlista\fP
wystêpuj±ca po klauzuli \fBelse\fP, je¶li takowa istnieje. Kodem
zakoñczenia jest kod ostatniego wykonanego polecenia listy lub zero je¶li
¿aden z warunków nie okaza³ siê prawdziwy.
.TP
.PD 0
\fBwhile\fP \fIlista\fP; \fBdo\fP \fIlista\fP; \fBdone\fP
.TP
\fBuntil\fP \fIlista\fP; \fBdo\fP \fIlista\fP; \fBdone\fP
.PD
Polecenie \fBwhile\fP powtarza wykonywanie \fIlisty\fP podanej po \fBdo\fP
tak d³ugo, jak d³ugo ostatnie polecenie \fIlisty\fP \fBwhile\fP zwraca
zerowy kod zakoñczenia.  Polecenie \fBuntil\fP dzia³a identycznie jak
\fBwhile\fP, poza tym, ¿e warunek jest zanegowany:
\fBdo\fP \fIlista\fP wykonywane jest tak d³ugo, jak d³ugo ostatnie polecenie
\fIlisty\fP \fBuntil\fP zwraca niezerowy kod zakoñczenia.
Kod zakoñczenia poleceñ \fBwhile\fP i \fBuntil\fP jest równy kodowi
zakoñczenia ostatniego z wykonanych poleceñ \fIlisty\fP \fBdo\fP lub zeru
je¶li ¿adne nie zosta³o wykonane.
.TP
[ \fBfunction\fP ] \fInazwa\fP () { \fIlista\fP; }
Definuje to funkcjê nazwan± \fInazwa\fP. \fICia³em\fP funkcji jest
\fIlista\fP poleceñ zawarta pomiêdzy { i }. Lista ta jest wykonywana w za
ka¿dym razem gdy \fInazwa\fP wystêpuje jako polecenie proste. Kodem
zakoñczenia funkcji jest kod zakoñczenia ostatniego z wykonanych poleceñ
jej cia³a. (Zobacz
.SM
.B FUNKCJE
poni¿ej.)
.SH KOMENTARZE
W pow³oce nie-interaktywnej lub w pow³oce interaktywnej, w której w³±czono
opcjê
.B interactive_comments
do opcji wbudowanych
.BR shopt (zobacz
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej) s³owo rozpoczynaj±ce siê od znaku
.B #
powoduje, ¿e s³owo to i wszystkie pozosta³e znaki w tym wierszu bêd±
ignorowane. Pow³oka interaktywna bez w³±czonej opcji
.B interactive_comments
nie pozwala na komentarze. Opcja
.B interactive_comments
jest domy¶lnie w³±czona w pow³okach interaktywnych.
.SH CYTOWANIE
\fICytowanie\fP s³u¿y do usuwania specjalnego znaczenia dla pow³oki pewnych
znaków lub s³ów. Cytowanie mo¿na stosowaæ do wy³±czania specjalnego
traktowania znaków specjalnych, zapobiegania rozpoznawaniu s³ów
zastrze¿onych jako takich oraz do zapobiegania podstawianiu parametrów.
.PP
Ka¿dy z \fImetaznaków\fP podanych powy¿ej w
.SM
.B DEFINICJACH
posiada dla pow³oki specjalne znaczenie i musi byæ cytowany, je¶li ma
oznaczaæ samego siebie.
.PP
Gdy u¿ywane s± funkcje interpretacji historii poleceñ, znak \fIinterpretacji
historii\fP, zwykle \fB!\fP, musi byæ cytowany, je¶li chce siê unikn±æ
interpretacji historii.
.PP
Istniej± trzy mechanizmy cytowania:
.IR "znak specjalny" (escape character) ,
apostrofy (pojedyncze cudzys³owy) i cudzys³owy zwyk³e (podwójne).
.PP
Niecytowany odwrotny uko¶nik (\fB\e\fP) jest
.IR "znakiem specjalnym" .
Chroni on przed interpretacj± dos³own± warto¶æ nastêpuj±cego po nim znaku,
z wyj±tkiem <nowejlinii>. Je¶li pojawi siê para \fB\e\fP<nowalinia> a sam
odwrotny uko¶nik nie jest cytowany, to traktowana jest ona jak kontynuacja
wiersza (to znaczy, usuwana jest ze strumienia wej¶ciowego i w efekcie
ignorowana).
.PP
Ujêcie znaków w apostrofy chroni dos³owne warto¶ci ka¿dego z nich. Apostrof
nie mo¿e pojawiæ siê pomiêdzy innymi apostrofami, nawet je¶li jest
poprzedzony odwrotnym uko¶nikiem.
.PP
Ujêcie znaków w cudzys³owy chroni dos³owne warto¶ci ka¿dego z nich, za
wyj±tkiem
.BR $ ,
.BR `
i
.BR \e .
Znaki
.B $
i
.B `
zachowuj± swe specjalne znaczenie wewn±trz cudzys³owów. Odwrotny uko¶nik
zachowuje specjalne znaczenie tylko, gdy wystêpuje po nim jeden z
poni¿szych znaków:
.BR $ ,
.BR ` ,
\^\fB"\fP\^,
.BR \e
lub
.BR <nowalinia> .
Cudzys³ów mo¿e byæ cytowany wewn±trz cudzys³owów przez poprzedzenie go
odwrotnym uko¶nikiem.
.PP
Parametry specjalne
.B *
i
.B @
posiadaj± specjalne znaczenie wewn±trz cudzys³owów (zobacz
.SM
.B PARAMETRY
poni¿ej).
.PP
S³owa postaci \fB$\fP'\fI³añcuch\fP' traktowane s± specjalnie. S³owo
takie interpretowane jako \fI³añcuch\fP, w którym znaki poprzedzone
odwrotnym uko¶nikiem zastêpowane s± wed³ug standardu ANSI C. Sekwencje
specjalne z odwrotnym uko¶nikiem, je¶li wystêpuj±, dekodowane s±
nastêpuj±co:
.RS
.PD 0
.TP
.B \ea
alarm (dzwonek)
.TP
.B \eb
backspace
.TP
.B \ee
znak escape
.TP
.B \ef
znak wysuwu strony (form feed)
.TP
.B \en
znak nowej linii (new line)
.TP
.B \er
powrót karetki (carriage return)
.TP
.B \et
tabulacja pozioma (horizontal tab)
.TP
.B \ev
tabulacja pionowa (vertical tab)
.TP
.B \e\e
odwrotny uko¶nik (backslash)
.TP
.B \e'
apostrof
.TP
.B \e\fInnn\fP
o¶miobitowy znak, którego warto¶ci± jest ósemkowa liczba \fInnn\fP
(jedna do trzech cyfr)
.TP
.B \ex\fInnn\fP
o¶miobitowy znak, którego warto¶ci± jest szesnastkowa liczba \fInnn\fP
(jedna do trzech cyfr szesnastkowych)
.PD
.RE
.LP
Przet³umaczony wynik jest pojedynczo cytowany, tak jakby nie by³o znaku
dolara.
.PP
Ujêty w cudzys³owy ³añcuch poprzedzony znakiem dolara (\fB$\fP) spowoduje,
¿e ³añcuch zostanie zinterpretowany zgodnie z bie¿±cymi ustawieniami
regionalnymi (locale). Je¶li ustawione s± one na \fBC\fP lub \fBPOSIX\fP,
to znak dolara jest ignorowany. Je¿eli ³añcuch jest t³umaczony i zamieniany,
to zast±pienie jest podwójnie cytowane.
.SH PARAMETRY
.I Parametr
jest elementem przechowuj±cym warto¶ci. Mo¿e on byæ
.IR nazw± ,
liczb± lub jednym ze znaków specjalnych podanych poni¿ej w sekcji
.BR "Parametry specjalne" .
Dla celów pow³oki
.I zmienna
jest parametrem oznaczanym przez
.IR nazwê .
Zmienna posiada \fIwarto¶æ\fP i zero lub wiêcej \fIatrybutów\fP.
Warto¶æ atrybutom przypisuje siê za pomoc± polecenia wbudowanego
.B declare
(zobacz opis tego polecenia poni¿ej, w sekcji
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
.PP
Parametr jest ustawiony je¶li przypisano mu warto¶æ. £añcuch pusty jest
poprawn± warto¶ci±. Po ustawieniu zmiennej, mo¿e byæ ona
uniewa¿niona wy³±cznie przez u¿ycie wbudowanego polecenia
.B unset
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
.PP
Do
.I zmiennej
mo¿na wykonaæ przypisanie przy pomocy instrukcji postaci
.RS
.PP
\fInazwa\fP=[\fIwarto¶æ\fP]
.RE
.PP
Je¿eli nie podano
.IR warto¶ci ,
to zmiennej przypisywany jest ³añcuch pusty. Wszystkie
.I warto¶ci
przechodz± przez interpretacjê tyld, podstawianie parametrów, interpretacjê
zmiennych, podstawianie wyników poleceñ,
interpretacjê wyra¿eñ arytmetycznych i usuwanie cytowañ (zobacz poni¿ej
.SM
.BR INTERPRETACJA ).
Je¿eli zmienna ma ustawiony atrybut
.BR integer " (ca³kowita),"
to
.I warto¶æ
podlega interpretacjom wyra¿eñ arytmetycznych, nawet je¶li nie u¿yto
interpretacji $((...)). Zobacz poni¿ej
.BR "Interpretacja wyra¿eñ arytmetycznych" .
Nie jest wykonywane dzielenie na s³owa, z wyj±tkiem \fB"$@"\fP, jak
wyja¶niono to poni¿ej w sekcji
.BR "Parametry specjalne" .
Nie jest wykonywane rozwijanie nazw plików.
Instrukcje przypisania mog± siê te¿ pojawiaæ jako argumenty poleceñ
wbudowanych
.BR declare ,
.BR typeset ,
.BR export ,
.BR readonly
i
.BR local .
.SS Parametry pozycyjne
.PP
.I Parametr pozycyjny
to parametr okre¶lany cyfr± lub cyframi, innymi ni¿ pojedyncza cyfra 0.
Parametrom pozycyjnym nadawane s± warto¶ci argumentów pow³oki (w czasie jej
wywo³ania). Warto¶ci te mog± byæ ponownie nadawane przy pomocy wbudowanego
polecenia
.BR set .
Do parametrów pozycyjnych nie mo¿na wykonaæ przypisania przy pomocy
instrukcji przypisania.
Parametry pozycyjne s± tymczasowo zastêpowane podczas wykonywania funkcji
pow³oki (zobacz poni¿ej
.SM
.BR FUNKCJE ).
Je¿eli interpretowany jest parametr pozycyjny okre¶lany wiêcej ni¿ jedn±
cyfr±, to musi byæ ujêty w nawiasy (zobacz poni¿ej
.BR INTERPRETACJA ).
.SS Parametry specjalne
Pow³oka kilka parametrów traktuje specjalnie. Do parametrów tych mo¿na siê
wy³±cznie odwo³ywaæ; nie jest dozwolone przypisywanie im warto¶ci.
.PP
.PD 0
.TP
.B *
Interpretowane jest jako parametry pozycyjne, pocz±wszy od pierwszego. Gdy
interpretacja pojawia siê wewn±trz cudzys³owów, to parametr ten
interpretowany jest jako pojedyncze s³owo z warto¶ciami ka¿dego
z parametrów rozdzielonymi pierwszym znakiem zmiennej specjalnej
.SM
.BR IFS .
To znaczy, "\fB$*\fP" jest równowa¿ne
"\fB$1\fP\fIc\fP\fB$2\fP\fIc\fP\fB...\fP", gdzie
.I c
jest pierwszym znakiem warto¶ci zmiennej
.SM
.BR IFS .
Je¿eli
.SM
.B IFS
nie jest ustawione, to parametry oddzielane s± spacjami.
Je¶li
.SM
.B IFS
jest ³añcuchem pustym, to parametry s± ze sob± po³±czone bez
rozdzielaj±cych je separatorów.
.TP
.B @
Interpretowane jako parametry pozycyjne, pocz±wszy od pierwszego. Gdy
interpretacja pojawia siê wewn±trz cudzys³owów, to ka¿dy parametr
interpretowany jest jako odrêbne s³owo. To znaczy, "\fB$@\fP" jest
równowa¿ne "\fB$1\fP" "\fB$2\fP" ...  Je¶li nie ma ¿adnych parametrów
pozycyjnych, "\fB$@\fP" i
.B $@
interpretowane s± jako nic (tj. s± usuwane).
.TP
.B #
Interpretowane jako liczba parametrów pozycyjnych, podana dziesiêtnie.
.TP
.B ?
Interpretowane jako kod zakoñczenia ostatnio wykonanego potoku
pierwszoplanowego.
.TP
.B \-
Interpretowane jako bie¿±ce flagi opcji, takie jakie zosta³y podane podczas
wywo³ania, ustawione przy pomocy wbudowanego polecenia
.B set
lub ustawione przez sam± pow³okê (tak jak opcja
.BR \-i ).
.TP
.B $
Interpretowany jest jako identyfikator procesu pow³oki. W podpow³oce (),
interpretowany jest jako ID procesu bie¿±cej pow³oki, nie za¶ podpow³oki.
.TP
.B !
Interpretowany jako ID procesu ostatnio wykonywanego polecenia t³a
(polecenia asynchronicznego).
.TP
.B 0
Interpretowany jako nazwa pow³oki lub skryptu pow³oki. Ustawiane jest to na
etapie inicjowania pow³oki. Je¿eli
.B bash
wywo³ywany zosta³ z plikiem poleceñ, to
.B $0
ustawiane jest na nazwê tego pliku. Je¶li
.B bash
zosta³ uruchomiony z opcj±
.BR \-c ,
to
.B $0
jest ustawiane na pierwszy argument po ³añcuchu, jaki ma zostaæ wywo³any,
je¶li taki wystêpuje. W przeciwnym wypadku, ustawiany jest na nazwê pliku
u¿yt± do wywo³ania
.BR bash ,
jak± podaje argument zerowy.
.TP
.B _
Podczas uruchamiania pow³oki, ustawiany na bezwzglêdn± nazwê pow³oki lub
wykonywanego skryptu pow³oki przekazanego w li¶cie argumentów.
Nastêpnie, interpretowany jest jako ostatni argument poprzedniego polecenia,
po interpretacji.
Ustawiany równie¿ na pe³n± nazwê pliku ka¿dego polecenia wykonanego
i umieszczonego w ¶rodowisku eksportowanym do tego polecenia.
Podczas sprawdzania poczty parametr ten przechowuje nazwê aktualnie
sprawdzanego pliku poczty.
.PD
.SS Zmienne pow³oki
.PP
Pow³oka ustawia nastêpuj±ce zmienne:
.PP
.PD 0
.TP
.B BASH
Interpretowane jako pe³na nazwa pliku u¿yta do wywo³ania tego przebiegu
.BR
bash .
.TP
.B BASH_VERSINFO
Zmienna tablicowa tylko do odczytu, której elementy zawieraj± informacje
o wersji uruchomionego
.BR bash .
Warto¶ci przypisane elementom tablicy s± nastêpuj±ce:
.sp .5
.RS
.PD 0
.TP 24
.B BASH_VERSINFO[\fR0\fP]
G³ówny numer wersji, wydanie (\fIrelease\fP).
.TP
.B BASH_VERSINFO[\fR1\fP]
Poboczny numer wersji (\fIversion\fP).
.TP
.B BASH_VERSINFO[\fR2\fP]
Poziom ³at (patch level).
.TP
.B BASH_VERSINFO[\fR3\fP]
Wersja kompilatu (build version).
.TP
.B BASH_VERSINFO[\fR4\fP]
Status wydania (np. \fIbeta1\fP).
.TP
.B BASH_VERSINFO[\fR5\fP]
Warto¶æ \fBMACHTYPE\fP.
.PD
.RE
.TP
.B BASH_VERSION
Interpretowane jako ³añcuch opisuj±cy wersjê uruchomionego
.BR bash .
.TP
.B COMP_CWORD
Indeks w \fB${COMP_WORDS}\fP s³owa zawieraj±cego bie¿±c± pozycjê kursora.
Zmienna ta jest dostêpna wy³±cznie w funkcjach pow³oki wywo³anych
przez us³ugi programowalnego uzupe³niania (zobacz poni¿ej \fBProgramowalne
uzupe³nianie\fP).
.TP
.B COMP_LINE
Bie¿±cy wiersz poleceñ.
Ta zmienna jest dostêpna tylko w funkcjach pow³oki i poleceniach zewnêtrznych
wywo³ywanych przez us³ugi programowalnego uzupe³niania (zobacz poni¿ej
\fBProgramowalne uzupe³nianie\fP).
.TP
.B COMP_POINT
Indeks bie¿±cej pozycji kursora wzglêdem pocz±tku bie¿±cego polecenia.
Je¿eli kursor jest na koñcu bie¿±cego polecenia, to warto¶æ tej zmiennej
jest równa \fB${#COMP_LINE}\fP.
Ta zmienna jest dostêpna tylko w funkcjach pow³oki i poleceniach zewnêtrznych
wywo³ywanych przez us³ugi programowalnego uzupe³niania (zobacz poni¿ej
\fBProgramowalne uzupe³nianie\fP).
.TP
.B COMP_WORDS
Zmienna tablicowa (patrz \fBTablice\fP poni¿ej) sk³adaj±ca siê z pojedynczych
s³ów z aktualnego wiersza poleceñ.
Zmienna ta jest dostêpna wy³±cznie w funkcjach pow³oki wywo³anych
przez us³ugi programowalnego uzupe³niania (zobacz poni¿ej \fBProgramowalne
uzupe³nianie\fP).
.TP
.B DIRSTACK
Zmienna tablicowa (zobacz
.B Tablice
poni¿ej) zawieraj±ca bie¿±c± zawarto¶æ stosu katalogów. Katalogi pojawiaj±
siê na stosie w kolejno¶ci, w jakiej s± wy¶wietlane przez wbudowane
.BR dirs .
Przypisanie do elementów tej zmienej tablicowej mo¿e pos³u¿yæ do zmiany
katalogów ju¿ wystêpuj±cych na stosie, ale do dodania i usuniêcia katalogów
musz± byæ u¿yte wbudowane
.B pushd
i
.BR popd .
Przypisanie warto¶ci tej zmiennej nie zmieni bie¿±cego katalogu.
Je¶li
.SM
.B DIRSTACK
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B EUID
Interpretowane jako efektywny identyfikator bie¿±cego u¿ytkownika, inicjowane
przy uruchamianiu pow³oki. Zmienna ta jest tylko do odczytu.
.TP
.B FUNCNAME
Nazwa aktualnie wykonywanej funkcji pow³oki. Zmienna ta istnieje tylko
podczas wykonywania funkcji pow³oki.
Próby przypisywania jej warto¶ci nie odnosz± efektu i zwracaj± kod b³êdu.
Je¿eli
.SM
.B FUNCNAME
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B GROUPS
Zmienna tablicowa zawieraj±ca listê grup, których cz³onkiem jest bie¿±cy
u¿ytkownik. Próby przypisywania jej warto¶ci nie odnosz± efektu i zwracaj±
kod b³êdu.
Je¿eli
.SM
.B GROUPS
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B HISTCMD
Licznik historii (indeks na li¶cie historii poleceñ) bie¿±cego polecenia.
Je¿eli
.SM
.B HISTCMD
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B HOSTNAME
Automatycznie ustawiane na nazwê aktualnego hosta.
.TP
.B HOSTTYPE
Automatycznie ustawiane na ³añcuch unikalnie opisuj±cy typ maszyny,
na której jest wykonywany
.BR bash .
Warto¶æ domy¶lna zale¿y od systemu.
.TP
.B LINENO
Przy ka¿dym odwo³aniu do tego parametru pow³oka zastêpuje jego warto¶æ
liczb± dziesiêtn± reprezentuj±c± aktualny kolejny numer wiersza
(poczynaj±c od 1) skryptu lub funkcji. Nie zapewnia siê, by warto¶æ ta
mia³a znaczenie poza skryptem b±d¼ funkcj±.
Je¶li
.SM
.B LINENO
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B MACHTYPE
Automatycznie ustawiane na ³añcuch w pe³ni opisuj±cy typ systemu,
na którym jest wykonywany
.BR bash ,
w standardowym formacie GNU \fIcpu-firma-system\fP.
Warto¶æ domy¶lna zale¿y od systemu.
.TP
.B OLDPWD
Poprzedni katalog roboczy ustawiony poleceniem
.BR cd .
.TP
.B OPTARG
Warto¶æ ostatniego, bêd±cego opcj±, argumentu przetworzonego przez
wbudowane polecenie
.B getopts
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
.TP
.B OPTIND
Numer (indeks) nastêpnego argumentu, jaki ma zostaæ przetworzony przez
wbudowane polecenie
.B getopts
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
.TP
.B OSTYPE
Automatycznie ustawiane na ³añcuch opisuj±cy system operacyjny, w którym
jest wykonywany
.BR bash .
Warto¶æ domy¶lna zale¿y od systemu.
.TP
.B PIPESTATUS
Zmienna tablicowa (zobacz
.B Tablice
poni¿ej) zwieraj±ca listê kodów zakoñczenia z procesów w ostatnio
wykonywanym potoku pierwszoplanowym (który mo¿e zawieraæ pojedyncze
polecenie).
.TP
.B PPID
Identyfikator procesu macierzystego pow³oki. Zmienna ta jest tylko do
odczytu.
.TP
.B PWD
Bie¿±cy katalog roboczy, ustawiony poleceniem
.BR cd .
.TP
.B RANDOM
Za ka¿dym razem, gdy nastêpuje odwo³anie do tego parametru, generowana jest
ca³kowita liczba losowa z zakresu od 0 do 32767. Sekwencjê liczb losowych
mo¿na zainicjowaæ przypisuj±c warto¶æ do
.SM
.BR RANDOM .
Je¿eli
.SM
.B RANDOM
jest uniewa¿niona, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B REPLY
Ustawiona na wiersz wej¶cia odczytany wbudowanym poleceniem
.B read
je¶li nie podano ¿adnych jego argumentów.
.TP
.B SECONDS
Ka¿dorazowo, gdy wystêpuje odwo³anie do tego parametru, zwracana jest
liczba sekund, jakie up³ynê³y od wywo³ania pow³oki. Je¿eli do
.SM
.B SECONDS
zostanie przypisana warto¶æ, to warto¶æ zwracana przez kolejne odwo³ania
równa liczbie sekund od czasu przypisania plus przypisana warto¶æ.
Je¿eli
.SM
.B SECONDS
jest uniewa¿nione, to traci swe specjalne w³a¶ciwo¶ci, nawet je¿eli jest
nastêpnie ponownie ustawione.
.TP
.B SHELLOPTS
Lista, rozdzielonych dwukropkami, w³±czonych opcji pow³oki. Ka¿de s³owo
listy jest poprawnym argumentem opcji
.B \-o
wbudowanego polecenia
.B set
(zobacz
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej). Opcje pojawiaj±ce siê w
.SM
.B SHELLOPTS
to te, które s± zg³aszane jako w³±czone
.RI ( on )
przez \fBset \-o\fP.
Je¶li zmienna ta istnieje w ¶rodowisku podczas uruchamiania
.BR bash,
to ka¿da z opcji pow³oki wystêpuj±ca na tej li¶cie zostanie w³±czona przed
odczytem jakichkolwiek plików startowych.
Jest to zmienna tylko do odczytu.
.TP
.B SHLVL
Inkrementowana ka¿dorazowo, gdy uruchamiane jest kolejne wyst±pienie
.BR bash.
.TP
.B UID
Interpretowane jako identyfikator bie¿±cego u¿ytkownika, inicjowane przy
uruchamianiu pow³oki. Zmienna ta jest tylko do odczytu.
.PD
.PP
Poni¿sze zmienne s± u¿ywane przez pow³okê. W niektórych przypadkach
.B bash
przypisuje im domy¶lne warto¶ci; przypadki te s± odnotowane ni¿ej.
.PP
.PD 0
.TP
.B BASH_ENV
Je¿eli parametr ten jest ustawiony podczas wykonywania przez \fBbash\fP
skryptu, to jego warto¶æ interpretowana jest jako nazwa pliku zawieraj±cego
polecenia do zainicjowania pow³oki, jak w
.IR ~/.bashrc .
Warto¶æ
.SM
.B BASH_ENV
podlega interpretacji parametrów, podstawianiu wyników poleceñ
i interpretacjom wyra¿eñ arytmetycznych przed interpretacj± jej jako nazwy
pliku.
Zmienna
.SM
.B PATH
nie jest u¿ywana do znalezienia pliku o powsta³ej w ten sposób nazwie.
.TP
.B CDPATH
¦cie¿ka wyszukiwania dla polecenia
.BR cd .
Jest to lista rozdzielonych dwukropkami katalogów, w których pow³oka szuka
katalogów docelowych podanych przez polecenie
.BR cd .
Przyk³adow± warto¶ci± jest ,,.:~:/usr''.
.TP
.B COLUMNS
U¿ywana przez polecenie wbudowane \fBselect\fP do wyznaczenia szeroko¶ci
terminala przy wypisywaniu list wyboru. Ustawiana automatycznie po
otrzymaniu SIGWINCH.
.TP
.B COMPREPLY
Zmienna tablicowa, z której \fBbash\fP czyta mo¿liwe uzupe³nienia tworzone
przez funkcjê pow³oki wywo³an± przez us³ugê programowalnego uzupe³niania
(zobacz poni¿ej \fBProgramowalne uzupe³nianie\fP).
.TP
.B FCEDIT
Domy¶lny edytor dla wbudowanego polecenia
.BR fc .
.TP
.B FIGNORE
Lista rozdzielonych dwukropkami przyrostków, jakie maj± byæ ignorowane
podczas uzupe³niania nazw plików (zobacz
.SM
.B READLINE
poni¿ej).
Nazwa pliku o przyrostku pasuj±cym do jednej z pozycji
.SM
.B FIGNORE
wy³±czana jest z listy dopasowanych nazw plików.
Przyk³adow± warto¶ci± jest ,,.o:~''.
.TP
.B GLOBIGNORE
Lista rozdzielonych dwukropkami wzorców definiuj±cych zestaw nazw plików,
jakie maj± byæ ignorowane podczas rozwijania nazw plików.
Je¿eli plik pasuj±cy do wzorca rozwijaj±cego nazwê ¶cie¿kow± pasuje równie¿
do którego¶ z wzorców w
.SM
.BR GLOBIGNORE ,
to jest on usuwany z listy dopasowanych.
.TP
.B HISTCONTROL
Je¿eli posiada warto¶æ
.IR ignorespace ,
to wiersze rozpoczynaj±ce siê od znaku
.B spacji
nie s± wprowadzane do listy historii. Je¶li posiada warto¶æ
.IR ignoredups ,
to wiersze pasuj±ce do ostatniego wiersza historii nie s± wprowadzane.
Warto¶æ
.I ignoreboth
³±czy obie te mo¿liwo¶ci.
Je¶li zmienna ta nie jest zdefiniowana lub ma warto¶æ inn± od powy¿szych,
to wszystkie wiersze przeczytane przez analizator sk³adni zachowywane s±
w li¶cie historii, stosownie do warto¶ci
.BR HISTIGNORE .
Funkcja tej zmiennej jest zast±piona przez
.BR HISTIGNORE .
Drugi i kolejne wiersze z³o¿onego polecenia wielowierszowego nie s±
sprawdzane i s± dodawane do historii bez wzglêdu na warto¶æ
.TP
.B HISTFILE
Nazwa pliku, w którym zachowywana jest historia poleceñ (zobacz
.SM
.B HISTORIA
poni¿ej).
Warto¶ci± domy¶ln± jest \fI~/.bash_history\fP. Je¶li ustawienie tej
zmiennej zostanie skasowane, to historia poleceñ nie bêdzie
zachowana po zakoñczeniu pracy pow³oki interaktywnej.
.TP
.B HISTFILESIZE
Maksymalna liczba wierszy zawartych w pliku historii. Podczas
przypisywania warto¶ci tej zmiennej, je¿eli jest to niezbêdne, plik
historii jest obcinany tak, by nie zawiera³ wiêcej wierszy.
Domy¶ln± warto¶ci± jest 500.
Plik historii jest tak¿e obcinany do tego rozmiaru po zapisaniu go
w czasie koñczenia pracy przez pow³okê interaktywn±.
.TP
.B HISTIGNORE
Lista rozdzielonych dwukropkami wzorców s³u¿±cych do decydowania, jakie
wiersze poleceñ powinny byæ zachowane w li¶cie historii. Ka¿dy z wzorców
zakotwiczony jest na pocz±tku wiersza i musi pasowaæ do ca³ego wiersza
(nie jest dodawane ¿adne niejawne `\fB*\fP'). Ka¿dy z wzorców sprawdzany
jest z bie¿±cym wierszem po wykonaniu kontroli okre¶lonych przez
.BR HISTCONTROL .
Oprócz zwyk³ych znaków dopasowywania wzorców u¿ywanych przez pow³okê,
`\fB&\fP' dopasowuje poprzedni wiersz historii. Litera³ `\fB&\fP' mo¿na
uzyskaæ poprzedzaj±c go odwrotnym uko¶nikiem;
odwrotny uko¶nik jest usuwany przed prób± dopasowania.
Druga i kolejne wiersze z³o¿onego polecenia wielowierszowego nie s±
sprawdzane i s± dodawane do historii bez wzglêdu na warto¶æ
.BR HISTIGNORE .
.TP
.B HISTSIZE
Liczba poleceñ do zapamiêtania w historii poleceñ (zobacz
.SM
.B HISTORIA
poni¿ej).
Warto¶ci± domy¶ln± jest 500.
.TP
.B HOME
Katalog domowy bie¿±cego u¿ytkownika; domy¶lny argument wbudowanego
polecenia \fBcp\fP.
Warto¶æ tej zmiennej wykorzystywana jest te¿ przy wykonywaniu interpretacji
tyld.
.TP
.B HOSTFILE
Zawiera nazwê pliku o tym samym formacie co
.FN /etc/hosts ,
który pownien byæ czytany, gdy pow³oka potrzebuje uzupe³niæ nazwê hosta.
Listê mo¿liwych uzupe³nieñ mo¿na zmieniaæ podczas pracy pow³oki.
Nastêpnym razem, gdy wykonywana jest próba uzupe³nienia nazwy hosta
.B bash
dodaje zawarto¶æ nowego pliku do ju¿ istniej±cej listy.
Je¿eli
.SM
.B HOSTFILE
jest ustawione, ale nie posiada warto¶ci, \fBbash\fP usi³uje uzyskaæ listê
mo¿liwych uzupe³nieñ nazw hostów czytaj±c
.FN /etc/hosts .
Gdy
.SM
.B HOSTFILE
jest uniewa¿niane, lista hostów jest czyszczona.
.TP
.B IFS
Wewnêtrzny Separator Pól
.RI ( "Internal Field Separator" )
u¿ywany do podzia³u na s³owa po interpretacjach i dzielenia wierszy na s³owa
we wbudowanym poleceniu
.BR read .
Jego domy¶ln± warto¶ci± jest ,,<spacja><tabulacja><nowalinia>''.
.TP
.B IGNOREEOF
Steruje dzia³aniem pow³oki interaktywnej przy otrzymaniu przez ni± znaku
.SM
.B EOF
jako jedynego znaku wej¶cia. Je¿eli jest ustawiona, to jej warto¶æ jest
liczb± kolejnych znaków
.SM
.B EOF
jakie musz± byæ wpisane jako pierwsze znaki wiersza wprowadzania przed
zakoñczeniem pracy przez
.BR bash .
Je¶li zmienna ta istnieje, ale nie zawiera warto¶ci numerycznej lub nie ma
warto¶ci, to warto¶ci± domy¶ln± jest 10. Je¿eli nie istnieje, to
.SM
.B EOF
wskazuje pow³oce koniec wprowadzanych danych.
.TP
.B INPUTRC
nazwa pliku startowego dla
.BR readline ,
uniewa¿niaj±ca domy¶ln±
.FN ~/.inputrc
(zobacz
.SM
.B READLINE
poni¿ej).
.TP
.B LANG
S³u¿y do wyznaczania kategorii locale dla wszystkich kategorii
nie wyszczególnionych przez zmienne rozpoczynaj±ce siê od znaków \fBLC_\fP.
.TP
.B LC_ALL
Zmienna ta uniewa¿nia warto¶æ \fBLANG\fP i wszelkich innych zmiennych
\fBLC_\fP okre¶laj±cych kategorie locale.
.TP
.B LC_COLLATE
Ta zmienna wyznacza kolejno¶æ (collation order) u¿ywan± przy sortowaniu
wyników rozwijania nazw plików, decyduje te¿ o zachowaniu wielu wyra¿eñ,
klas równowa¿nych i sekwencje sortowania (collating sequences) w rozwijaniu
nazw plików i dopasowywaniu wzorców.
.TP
.B LC_CTYPE
Ta zmienna decyduje o interpretacji znaków i zachowaniu siê klas znaków
wewn±trz rozwijania nazw plików i dopasowywania wzorców.
.TP
.B LC_MESSAGES
Ta zmienna decyduje o ustawieniu locale u¿ywanym do t³umaczenia
ujêtych w cudzys³owy ³añcuchów poprzedzonych znakiem \fB$\fP.
.TP
.B LC_NUMERIC
Ta zmienna okre¶la kategoriê locale u¿ywan± do formatowania liczb.
.TP
.B LINES
U¿ywana przez polecenie wbudowane \fBselect\fP do wyznaczenia d³ugo¶ci kolumn
przy wypisywaniu list wyboru.
Ustawiana automatycznie po otrzymaniu SIGWINCH.
.TP
.B MAIL
Je¿eli parametrowi temu jest przypisana nazwa pliku, a nie jest
ustawiona zmienna
.SM
.BR MAILPATH ,
to
.B bash
informuje u¿ytkownika o nadej¶ciu poczty do podanego pliku.
.TP
.B MAILCHECK
Okre¶la jak czêsto (w sekundach)
.B bash
sprawdza pocztê. Domy¶lnie jest to 60 sekund. Gdy nadchodzi pora
sprawdzenia poczty, pow³oka wykonuje to przed wy¶wietleniem g³ównej
zachêty.
Je¶li zmienna ta nie jest ustawiona, to pow³oka wy³±cza sprawdzanie
poczty.
.TP
.B MAILPATH
Lista rozdzielonych dwukropkami nazw plików, w jakich ma byæ sprawdzana
poczta. Mo¿na podaæ komunikat, jaki ma zostaæ wy¶wietlony, gdy do danego
pliku przybêdzie wiadomo¶æ pocztowa, przez oddzielenie nazwy pliku od
komunikatu znakiem '?'.
U¿yte w tek¶cie komunikatu, \fB$_\fP interpretowane jest jako nazwa bie¿±cego
pliku pocztowego.
Przyk³ad:
.RS
.PP
\fBMAILPATH\fP='/var/mail/bfox?"You have mail":~/shell\-mail?"$_ has mail!"'
.PP
.B Bash
zapewnia tej zmiennej warto¶æ domy¶ln±, ale po³o¿enie plików
pocztowych u¿ytkownika, jakim siê pos³uguje zale¿y od systemu
(np. /var/mail/\fB$USER\fP).
.RE
.TP
.B OPTERR
Je¿eli ustawiono na warto¶æ 1,
.B bash
wy¶wietla komunikaty o b³êdach generowanych przez wbudowane polecenie
.B getopts
(zobacz
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
.SM
.B OPTERR
inicjowane jest na 1 ka¿dorazowo, gdy wywo³ywana jest pow³oka lub
wykonywany jest skrypt pow³oki.
.TP
.B PATH
¦cie¿ka wyszukiwania poleceñ. Jest to lista rozdzielanych dwukropkami
katalogów, w których pow³oka szuka poleceñ (zobacz
.SM
.B WYKONYWANIE POLECEÑ
poni¿ej). Domy¶lna ¶cie¿ka zale¿y od systemu i ustawiana jest przez
administratora instaluj±cego
.BR bash .
Powszechn± warto¶ci± jest
.if t \f(CW/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.\fP.
.if n ,,/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin:.''.
.TP
.B POSIXLY_CORRECT
Je¶li podczas uruchamiania \fBbash\fP w ¶rodowisku istnieje ta zmienna,
to pow³oka przed odczytem plików startowych wchodzi w \fItryb posix\fP,
tak jakby przy jej wywo³aniu podano opcjê
.BR \-\-posix .
Je¶li zmienna ta zostanie ustawiona podczas pracy pow³oki, to \fBbash\fP
w³±cza \fItryb posix\fP, tak jakby zosta³o wykonane polecenie
.if t \f(CWset -o posix\fP.
.if n \fIset -o posix\fP.
.TP
.B PROMPT_COMMAND
Je¿eli jest ustawiona, to jej warto¶æ jest wykonywana jwko polecenie przed
ka¿dym wys³aniem zachêty g³ównej.
.TP
.B PS1
Warto¶æ tego parametru jest interpretowana (zobacz poni¿ej
.SM
.BR ZACHÊTA )
i u¿ywana jako g³ówny ³añcuch zachêty. Jego warto¶ci± domy¶ln± jest
,,\fB\es\-\ev\e$ \fP''.
.TP
.B PS2
Warto¶æ tego parametru jest interpretowana jak
.B PS1
i u¿ywana jako wtórny (secondary) ³añcuch zachêty. Domy¶lnie jest to
,,\fB> \fP''.
.TP
.B PS3
Warto¶æ tego parametru s³u¿y jako zachêta w poleceniu
.B select
(zobacz powy¿ej
.SM
.BR "GRAMATYKA POW£OKI" ).
.TP
.B PS4
Warto¶æ tego parametru interpretowana jest jak
.B PS1
i wypisywana przed ka¿dym poleceniem wy¶wietlanym przez
.B bash
podczas ¶ledzenia wykonywania.
.\" during an execution trace.
Pierwszy znak
.SM
.BR PS4 ,
w razie potrzeby, powtarzany jest wielokrotnie, by wskazaæ wiele pozionów
zagnie¿d¿enia.
Domy¶lnie jest to ,,\fB+ \fP''.
.TP
.B TIMEFORMAT
Warto¶æ tego parametru s³u¿y jako ³añcuch formatu okre¶laj±cego, jak
powinna byæ wy¶wietlana informacja o czasach dla potoków poprzedzonych
s³owem zastrze¿onym
.BR time .
Znak \fB%\fP rozpoczyna sekwencjê specjaln±, która jest interpretowana jako
warto¶æ czasu lub inna informacja. Sekwencje specjalne i ich znaczenie s±
nastêpuj±ce; nawiasy kwadratowe opisuj± czê¶ci opcjonalne.
.sp .5
.RS
.PD 0
.TP 10
.B %%
Litera³ \fB%\fP.
.TP
.B %[\fIp\fP][l]R
Czas, jaki up³yn±³, w sekundach.
.TP
.B %[\fIp\fP][l]U
Liczba sekund, jakie CPU zu¿y³ w trybie u¿ytkownika.
.TP
.B %[\fIp\fP][l]S
Liczba sekund, jakie CPU zu¿y³ w trybie systemowym.
.TP
.B %P
Procent wykorzystania CPU, liczony jako (%U + %S) / %R.
.PD
.RE
.IP
Opcjonalne \fIp\fP jest cyfr± okre¶laj±c± \fIdok³adno¶æ\fP (precision),
liczbê cyfr u³amkowych po kropce dziesiêtnej.
Warto¶æ zero powoduje, ¿e nie bêdzie wy¶wietlana ani kropka dziesiêtna ani
czê¶æ u³amkowa.
Mog± byæ podane co najwy¿ej trzy miejsca po kropce dziesiêtnej;
warto¶ci \fIp\fP wiêksze od 3 zmieniane s± na 3.
Je¿eli nie podano \fIp\fP, to u¿ywana jest warto¶æ 3.
.IP
Opcjonalne \fIBl\fP okre¶la d³u¿szy (longer) format wyników, zawieraj±cy
minuty, w postaci \fIMM\fPm\fISS\fP.\fIFF\fPs.
O tym, czy wystêpuje u³amkowa czê¶æ sekund decyduje warto¶æ \fIp\fP.
.IP
Je¿eli zmienna ta nie jest ustawiona, to \fBbash\fP dzia³a tak,
jakby mia³a ona warto¶æ \fB$'\enreal\et%3lR\enuser\et%3lU\ensys\t%3lS'\fP.
Je¿eli jej warto¶ci± jest pusty ³añcuch, to nie jest wy¶wietlana ¿adna
informacja o czasach (timing).
Podczas wy¶wietlania ³añcucha formatu dodawany jest koñcz±cy znak
nowej linii.
.TP
.B TMOUT
Je¶li ustawione na warto¶æ wiêksz± od zera, to warto¶æ ta jest
interpretowana jako liczba sekund okre¶laj±c± czas, przez jaki pow³oka
ma czekaæ na wprowadzenie danych po wy¶wietleniu zachêty.
.B Bash
koñczy pracê po odczekaniu tego czasu je¶li dane nie pojawi³y siê.
.TP
.B auto_resume
Zmienna ta steruje sposobem interakcji pow³oki z u¿ytkownikiem
i sposobem kontroli zadañ. Je¿eli jest ustawiona, to
jednowyrazowe polecenia proste bez przekierowañ traktowane s± jako
aspiruj±ce do wznowienia istniej±cego zatrzymanego zadania. Nie pozwala siê
na ¿adn± dwuznaczno¶æ; je¶li jest wiêcej ni¿ jedno zadanie rozpoczynaj±ce
siê od wpisanego ³añcucha, wybierane jest zadanie, do którego ostatnio
siêgano.
.I Nazwa
zatrzymanego zadania, w tym kontek¶cie, jest wierszem poleceñ u¿ytym do
jego uruchomienia.
Je¶li posiada warto¶æ
.IR exact ,
to podany ³añcuch musi pasowaæ dok³adnie do nazwy zatrzymanego zadania;
Je¶li jest ustawione na
.IR substring ,
to podany ³añcuch powinien pasowaæ do pod³añcucha nazwy zatrzymanego
zadania.
Warto¶æ
.I substring
zapewnia funkcjonalno¶æ analogiczn± do identyfikatora zadania
.B %?
(zobacz
.SM
.B STEROWANIE ZADANIAMI
poni¿ej).
Je¶li ustawiono inn± warto¶æ, to podany ³añcuch musi byæ przedrostkiem nazwy
zatrzymanego zadania; zapewnia to funkcjonalno¶æ analogiczn± do
identyfikatora zadania
.BR % .
.TP
.B histchars
Dwa lub trzy znaki steruj±ce interpretacj± historii i podzia³em na leksemy
(zobacz poni¿ej
.SM
.BR "INTERPRETACJA HISTORII" ).
Pierwszy znak jest znakiem
.IR interpretacji historii ,
sygnalizuj±cym pocz±tek interpretacji historii, zwykle `\fB!\fP'.
Drugi znak jest znakiem
.I szybkiego podstawiania ,
("quick substitution"), s³u¿±cym jako skrót do powtórnego uruchamiania
poprzednio wprowadzonego polecenia, podstawiaj±cym w poleceniu jeden ³añcuch
za inny.
Domy¶lnym znakiem szybkiego podstawiania jest `\fB^\fP'.
Opcjonalny, trzeci znak jest znakiem wskazuj±cym, ¿e pozosta³a czê¶æ
wiersza, w którym wystêpuje on jako pierwszy znak s³owa, jest komentarzem.
Zwykle znakiem tym jest `\fB#\fP'. Znak komentarza historii powoduje, ¿e
dla pozosta³ych s³ów wiersza podstawianie historii jest pomijane.
Niekoniecznie powoduje to traktowanie reszty wiersza jako komentarza
przez analizator sk³adni pow³oki.
.PD
.SS Tablice
.B Bash
udostêpnia zmienne tablicowe jednowymiarowe. Jako tablica mo¿e zostaæ u¿yta
dowolna zmienna; wbudowane
.B declare
jawnie explicitly zadeklaruje tablicê. Nie ma maksymalnego rozmiaru tablic,
ani wymagania, by wszystkie jej elementy by³y indeksowane czy przypisywane
w sposób ci±g³y. Tablice indeksowane s± przy pomocy liczb ca³kowitych,
pocz±wszy od zera.
.PP
tablica tworzona jest automatycznie je¶li wykonywane jest przypisanie
do jakiej¶ zmiennej przy pomocy sk³adni
\fInazwa\fP[\fIwska¼nik\fP]=\fIwarto¶æ\fP.
.I Wska¼nik
tablicy traktowany jest jako wyra¿enie arytmetyczne, które musi po
interpretacji daæ liczbê wiêksz± b±d¼ równ± zero. Chc±c jawnie zadeklarowaæ
tablicê, u¿yj
.B declare \-a \fInazwa\fP
(zobacz
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
.B declare \-a \fInazwa\fP[\fIwska¼nik\fP]
jest równie¿ akceptowane; \fIwska¼nik\fP jest wówczas ignorowany.
Dla zmiennej tablicowej mo¿na podaæ atrybuty przy pomocy wbudowanych
.B declare
i
.BR readonly .
Ka¿dy z atrybutów stosowany jest do wszystkich elementów tablicy.
.PP
Przypisania do tablic wykonywane s± przy pomocy przypisañ z³o¿onych postaci
\fInazwa\fP=\fB(\fPwarto¶æ\fI1\fP ... warto¶æ\fIn\fP\fB)\fP, gdzie
ka¿da \fIwarto¶æ\fP ma postaæ [\fIwska¼nik\fP]=\fI³añcuch\fP. Wymagany jest
wy³±cznie \fI³añcuch\fP. Je¿eli podano opcjonalne nawiasy i wska¼nik, to
warto¶æ jest przypisywana wskazanemu elementowi tablicy; w przeciwnym
wypadku warto¶æ przypisywana jest elementowi o indeksie o jeden wiêkszym od
ostatniego elementu z przypisan± warto¶ci±. Indeksy ropoczynaj± siê od
zera.
Sk³adnia ta jest akceptowana tak¿e przez wbudowane
.BR declare .
Przypisania do pojedynczych elementów tablicy mo¿na wykonywaæ przy pomocy
sk³adni
\fInazwa\fP[\fIwska¼nik\fP]=\fIwarto¶æ\fP wprowadzonej powy¿ej.
.PP
Do elementu tablicy mo¿na odwo³ywac siê u¿ywaj±c
${\fInazwa\fP[\fIwska¼nik\fP]}. Nawiasy s± wymagane, by unikn±æ konfliktów
z rozwijaniem nazw plików. Je¶li \fIwska¼nikiem\fP jest \fB@\fP lub \fB*\fP,
to powy¿sze s³owo interpretowane jest jako wszystkie elementy \fInazwy\fP.
Wska¼niki te ró¿ni± siê tylko wtedy, gdy s³owo pojawia siê w cudzys³owach.
Je¶li s³owo ujêto w cudzys³owy, to ${\fInazwa\fP[*]} interpretowane jest
jako pojedyncze s³owo o warto¶ci wszystkich elementów tablicy rozdzielonych
pierwszym znakiem zmiennej specjalnej
.SM
.BR IFS ,
za¶ ${\fInazwa\fP[@]} interpretuje ka¿dy z elementów \fInazwa\fP jako
odrêbne s³owo. Je¶li brak jest elementów tablicy, to ${\fInazwa\fP[@]}
interpretowane jest jako nic. Jest to zachowanie analogiczne do
interpretacji parametrów specjalnych \fB*\fP i \fB@\fP (zobacz powy¿ej
.BR "Parametry specjalne" ).
${#\fInazwa\fP[\fIwska¼nik\fP]} interpretowane jest jako d³ugo¶æ
${\fInazwa\fP[\fIwska¼nik\fP]}. Je¶li \fIwska¼nikiem\fP jest \fB*\fP lub
\fB@\fP, to interpretacj± jest liczba elementów w tablicy.
Odwo³ywania siê do zmiennej tablicowej bez podania wska¼nika jest
równowa¿ne odwo³aniu do elementu numer zero.
.PP
Do niszczenia tablic s³u¿y wbudowane polecenie
.BR unset .
\fBunset\fP \fInazwa\fP[\fIwska¼nik\fP] niszczy element tablicy o indeksie
\fIwska¼nik\fP.
\fBunset\fP \fInazwa\fP, gdzie \fInazwa\fP jest tablic±, lub
\fBunset\fP \fInazwa\fP[\fIwska¼nik\fP], gdzie \fIwska¼nikiem\fP jest
\fB*\fP lub \fB@\fP, usuwa ca³± tablicê.
.PP
Ka¿de z wbudowanych
.BR declare ,
.B local
i
.B readonly
akceptuje opcjê
.B \-a
do okre¶lania tablic. Wbudowane
.B read
akceptuje opcjê
.B \-a
do przypisywania tablicy listy s³ów przeczytanych ze standardowego wej¶cia.
.B set
i
.B declare
wy¶wietlaj± warto¶ci tablicowe w sposób umo¿liwiaj±cy ponowne ich u¿ycie
w przypisaniach.
.SH INTERPRETACJA
Interpretacja wykonywana jest na wierszu poleceñ po jego podziale na s³owa.
Istnieje siedem rodzajów wykonywanych interpretacji:
.I interpretacja nawiasów
(brace expansion),
.I interpretacja tyld
(tilde expansion),
.I podstawianie parametrów i interpretacja zmiennych
(parameter and variable expansion),
.I podstawienie wyników poleceñ
(command substitution),
.I interpretacja wyra¿eñ arytmetycznych
(arithmetic expansion),
.I podzia³ na s³owa
(word splitting)
i
.I rozwiniêcie nazw plików
(pathname expansion).
.PP
Kolejno¶æ interpretacji: interpretacja nawiasów, interpretacja tyld,
podstawianie parametrów, interpretacja zmiennych i wyra¿eñ arytmetycznych
i podstawianie wyników poleceñ (wykonywane od lewej do prawej),
podzia³ na s³owa i rozwijanie nazw ¶cie¿kowych.
.PP
Na systemach potrafi±cych to obs³u¿yæ, istnieje dodatkowa dostêpna
interpretacja: \fIpodstawienie wyników procesów\fP (process substitution).
.PP
Tylko interpretacja nawiasów, dzielenie na s³owa i rozwiniêcie nazw plików
mog± zmieniæ liczbê s³ów interpretowanego wyra¿enia; pozosta³e interpretacje
rozwijaj± pojedyncze s³owo w pojedyncze s³owo.
Jedynymi wyj±tkami s± interpretacje
"\fB$@\fP" i "\fB${\fP\fInazwa\fP\fB[@]}\fP"
wyja¶nione powy¿ej (zobacz
.SM
.BR PARAMETRY ).
.SS Interpretacja nawiasów
.PP
.I "Interpretacja nawiasów"
jest mechanizmem, przez który mog± byæ generowane dowolne ³añcuchy.
Mechanizm ten przypomina \fIrozwiniêcia nazw plików\fP, ale generowane
nazwy plików nie musz± okre¶laæ plików istniej±cych. Wzorce, maj±ce
podlegaæ interpretacji nawiasów maj± postaæ opcjonalnej
.IR preambu³y ,
po której wystêpuj± serie separowanych przecinkami ³añcuchów pomiêdzy par±
nawiasów klamrowych, po których nastêpuje opcjonalny
.IR dopisek (postscript).
Preambu³a stanowi przedrostek dla ka¿dego z ³añcuchów zawartych
w nawiasach, a dopisek dodawany jest do ka¿dego ³añcucha wynikowego,
przy interpretacji od lewej do prawej.
.PP
Interpretacja nawiasów mo¿e byæ zagnie¿d¿ana. Wyniki ka¿dego
zinterpretowanego ³añcucha nie s± sortowane; zachowywana jest kolejno¶æ od
lewej do prawej. Na przyk³ad, a\fB{\fPd,c,b\fB}\fPe interpretowane
jest jako `ade ace abe'.
.PP
Interpretacja nawiasów wykonywana jest przed innymi rodzajami
interpretacji, a znaki o specjalnym znaczeniu dla innych interpretacji
s± zachowywane w wyniku. Jest ¶ci¶le tekstowa.
.\"  It is strictly textual.
.B Bash
nie stosuje ¿adnej interpretacji sk³adniowej do kontekstu interpretacji
czy tekstu pomiêdzy nawiasami.
.PP
Poprawnie zbudowana interpretacja nawiasów musi zawieraæ niecytowany nawias
otwieraj±cy i zamykaj±cy i co najmniej jeden niecytowany przecinek.
Wszelkie niepoprawnie skonstruowane interpretacje nawiasów s± pozostawiane
bez zmian.
\fB{\fP lub \fB,\fP mo¿na cytowaæ przy pomocy odwrotnego uko¶nika, co
chroni je przed przyjmowaniem za czê¶æ wyra¿enia nawiasowego.
Dla unikniêcia konfliktu z interpretacj± parametrów, ³añcuch \fB${\fP
nie jest traktowany jako spe³niaj±cy warunki interpretacji nawiasów.
.PP
Typowym zastosowaniem tej konstrukcji jest skrót, wtedy gdy wspólny
przedrostek ³añcuchów do utworzenia jest d³u¿szy ni¿ w powy¿ej podanym
przyk³adzie, np.:
.RS
.PP
mkdir /usr/local/src/bash/{old,new,dist,bugs}
.RE
lub
.RS
chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}
.RE
.PP
Interpretacja nawiasów wprowadza niewielk± niezgodno¶æ z historycznymi
wersjami
.BR sh .
.B sh
nie traktuje nawiasów otwieraj±cych i zamykaj±cych w specjalny sposób gdy
pojawiaj± siê one jako czê¶æ s³owa, i zachowuje je w wyniku.
W
.B bash
konsekwencj± interpretacji nawiasów jest usuwanie nawiasów ze s³ów.
Na przyk³ad, s³owo wprowadzone do
.B sh
jako
.I plik{1,2}
pojawi siê w identycznej postaci na wyj¶ciu. To samo s³owo po interpretacji
przez
.B bash
daje
.IR "plik1 plik2" .
Je¿eli po¿±dana jest ¶cis³a zgodno¶æ z
.BR sh ,
uruchom
.B bash
z opcj±
.B +B
lub wy³±cz interpretacjê nawiasów przy pomocy opcji
.B +B
polecenia
.B set
(zobacz
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
.SS Interpretacja tyldy
.PP
Je¿eli s³owo rozpoczyna siê niecytowanym znakiem tyldy (`\fB~\fP'), to
wszystkie znaki poprzedzaj±ce pierwszy niecytowany uko¶nik (lub wszystkie
znaki, gdy nie ma uko¶nika) uwa¿ane s± za \fIprzedrostek tyldy\fP
(tilde-prefix).
Je¿eli ¿aden ze znaków w przedrostku tyldy nie jest cytowany, to jego znaki
nastêpuj±ce po znaku tyldy traktowane s± jako mo¿liwa \fInazwa logowania\fP
(login name).
Je¶li ta nazwa logowania jest ³añcuchem pustym, to tylda zastêpowana jest
warto¶ci± parametru pow³oki
.SM
.BR HOME .
Je¿eli
.SM
.B HOME
nie jest ustawione, to podstawiany jest za nie katalog domowy u¿ytkownika
uruchamiaj±cego pow³okê.
W przeciwnym wypadku, przedrostek tyldy zastêpowany jest katalogiem
domowym skojarzonym z okre¶lon± nazw± logowania.
.PP
Je¶li przedrostkiem tyldy jest `~+', to jest on zastêpowany warto¶ci±
zmiennej
.SM
.BR PWD pow³oki.
Je¶li przedrostkiem tyldy jest `~\-', to jest on zastêpowany warto¶ci±
zmiennej pow³oki
.SM
.BR OLDPWD ,
je¶li jest ona ustawiona.
Je¿eli wystêpuj±ce w przedrostku po tyldzie znaki sk³adaj± siê
z liczby \fIN\fP, opcjonalnie poprzedzonej przez `+' lub `\-', to
przedrostek tyldy zastêpowany jest odpowiednim elementem stosu katalogów,
jaki zosta³by wy¶wietlony przez wbudowane
.BR dirs ,
wywo³ane z przedrostkiem tyldy jako argumentem.
Je¿eli w przedrostku tyldy znaki wystêpuj±ce po tyldzie sk³adaj± siê z
liczby bez pocz±tkowego `+' lub `\-', to przyjmowane jest `+'.
.PP
Je¶li nazwa logowania jest nieprawid³owa lub interpretacja tyldy nie
powiod³a siê, to s³owo z tyld± pozostaje niezmienione.
.PP
Ka¿de z przypisañ do zmiennej sprawdzane jest na obecno¶æ niecytowanych
przedrostków tyldy wystêpuj±cych bezpo¶rednio po
.B :
lub
.BR = .
W tych przypadkach równie¿ jest wykonywana jest interpretacja tyldy.
Na skutek tego, mo¿na pos³ugiwaæ siê nazwami plików z tyldami w przypisaniach
do
.SM
.BR PATH ,
.SM
.BR MAILPATH
i
.SM
.BR CDPATH ,
a pow³oka przypisze zinterpretowan± warto¶æ.
.SS Podstawianie parametrów
.PP
Znak `\fB$\fP' wprowadza podstawianie parametrów, podstawianie
wyników poleceñ i interpretacjê wyra¿eñ arytmetycznych. Podlegaj±ca
interpretacji nazwa parametru lub symbol mog± byæ ujête w nawiasy klamrowe,
które s± opcjonalne, ale s³u¿± do ochrony interpretowanej zmiennej przed
znakami, jakie wystêpuj± bezpo¶rednio po niej, a które mog³yby zostaæ
zinterpretowane jako czê¶æ nazwy.
.PP
Gdy u¿ywane s± nawiasy, pasuj±cym nawiasem koñcz±cym jest pierwszy
`\fB}\fP', nie chroniony przez odwrotny uko¶nik, nie znajduj±cy siê
wewn±trz cytowanego ³añcucha ani osadzony w wyra¿eniu arytmetycznym,
podstawieniu wyniku polecenia czy podstawieniu parametru.
.PP
.PD 0
.TP
${\fIparametr\fP}
Podstawiana jest warto¶æ \fIparametru\fP. Nawiasy wymagane s± gdy
.I parametr
jest parametrem pozycyjnym o wiêcej ni¿ jednej cyfrze,
lub gdy po
.I parametrze
wystêpuje znak, który nie powinien byæ interpretowany jako czê¶æ jego
nazwy.
.PD
.PP
Je¿eli pierwszym znakiem \fIparametru\fP jest wykrzyknik, to
rozpoczyna on poziom zagnie¿d¿enia zmiennej po¶redniej.
.\" a level of variable indirection is introduced.
\fBBash\fP pos³uguje siê warto¶ci± zmiennej utworzonej z reszty
\fIparametru\fP jako nazw± zmiennej; zmienna ta jest nastêpnie
interpretowana a w dalszym podstawianiu u¿ywana jest otrzymana warto¶æ
zamiast warto¶ci samego \fIparametru\fP.
Znane jest to jako \fIinterpretacja po¶rednia\fP (indirect expansion).
Wyj±tkiem jest tu interpretacja ${!\fIprzedrostka\fP*} opisana poni¿ej.
.PP
W ka¿dym z poni¿szych przypadków, \fIs³owo\fP podlega interpretacji tyldy,
podstawianiu parametrów, podstawianiu wyników poleceñ i interpretacji
wyra¿eñ arytmetycznych. Gdy nie przeprowadza interpretacji pod³añcuchów,
\fBbash\fP sprawdza czy parametr nie jest pusty lub nieustawiony;
.PP
.PD 0
.TP
${\fIparametr\fP\fB:\-\fP\fIs³owo\fP}
\fBU¿ywa warto¶ci domy¶lnych\fP. Je¿eli
.I parametr
jest nieustawiony lub pusty, to podstawiane jest zinterpretowane
.IR s³owo .
W przeciwnym razie, podstawiana jest warto¶æ
.IR parametru .
.TP
${\fIparametr\fP\fB:=\fP\fIs³owo\fP}
\fBPrzypisuje warto¶ci domy¶lne\fP.
Je¿eli
.I parametr
jest nieustawiony lub pusty, to jest mu
przypisywane zinterpretowane
.IR s³owo .
Nastêpnie podstawiana jest warto¶æ
.IR parametru .
Nie mo¿na w ten sposób przypisywaæ warto¶ci parametrom pozycyjnym ani
parametrom specjalnym.
.TP
${\fIparametr\fP\fB:?\fP\fIs³owo\fP}
\fBWy¶wietla b³±d je¶li pusty lub nieustawiony\fP.
Je¿eli
.I parametr
jest nieustawiony lub pusty, to na standardowe wyj¶cie b³êdów zapisywane
jest zinterpretowane
.I s³owo
(lub komunikat o takim wyniku, je¶li brak
.IR s³owa ).
Je¶li pow³oka nie jest interaktywna, to koñczy pracê.
W przeciwnym wypadku, podstawiana jest warto¶æ \fIparametru\fP.
.TP
${\fIparametr\fP\fB:+\fP\fIs³owo\fP}
\fBU¿ywa warto¶ci alternatywnej\fP.
Je¿eli
.I parametr
jest nieustawiony lub pusty, to nic nie jest podstawiane, w przeciwnym
razie podstawiane jest zinterpretowane
.IR s³owo.
.TP
.PD 0
${\fIparametr\fP\fB:\fP\fIoffset\fP}
.TP
${\fIparametr\fP\fB:\fP\fIoffset\fP\fB:\fP\fId³ugo¶æ\fP}
.PD
\fBInterpretacja pod³añcuchów\fP.
Interpretuje co najwy¿ej \fId³ugo¶æ\fP znaków \fIparametru\fP poczynaj±c
od znaków okre¶lonych przez \fIoffset\fP. Je¶li pominiêto \fId³ugo¶æ\fP,
to interpretuje pod³añcuch \fIparametru\fP poczynaj±c od znaku okre¶lonego
przez \fIoffset\fP. \fId³ugo¶æ\fP i \fIoffset\fP s± wyra¿eniami
arytmetycznymi (zobacz
.SM
.B
OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH
poni¿ej).
\fId³ugo¶æ\fP musi dawaæ w wyniku liczbê wiêksz± b±d¼ równ± zero.
Je¿eli \fIoffset\fP daje w wyniku liczbê mniejsz± od zera, to uzyskana
warto¶æ u¿ywana jest jako offset liczony od koñca warto¶ci \fIparametru\fP.
Je¿eli \fIparametrem\fP jest \fB@\fP, to wynikiem jest \fId³ugo¶æ\fP
parametrów pozycyjnych, pocz±wszy od \fIoffset\fP. Je¿eli \fIparametr\fP
jest nazw± tablicy indeksowanej przez @ lub *, to wynikiem jest
\fId³ugo¶æ\fP cz³onków tablicy pocz±wszy od ${\fIparametr\fP[\fIoffset\fP]}.
Indeksowanie pod³añcucha rozpoczyna siê od zera, chyba ¿e u¿ywane s±
parametry pozycyjne, wówczas indeksowanie zaczyna siê od 1.
.TP
${\fB!\fP\fIprzedrostek\fP\fB*\fP}
rozwija siê w listê nazw tych zmiennych, których nazwy rozpoczynaj± siê
od \fIprzedrostka\fP, rozdzielonych od siebie pierwszym znakiem zmiennej
specjalnej
.SM
.BR IFS .
.TP
${\fB#\fP\fIparametr\fP}
Podstawiana jest d³ugo¶æ, w znakach, warto¶ci \fIparametru\fP.
Je¿eli
.I parametrem
jest
.B *
lub
.BR @ ,
warto¶æ podstawiana jest liczb± parametrów pozycyjnych.
Je¿eli
.I parametr
jest nazw± tablicy o indeksowanej przez
.B *
lub
.BR @ ,
warto¶æ podstawiana jest liczb± elementów tablicy.
.TP
.PD 0
${\fIparametr\fP\fB#\fP\fIs³owo\fP}
.TP
${\fIparametr\fP\fB##\fP\fIs³owo\fP}
.PD
.I s³owo
jest interpretowane tworz±c wzorzec, tak samo jak przy rozwijaniu nazw
plików. Je¿eli wzorzec pasuje do pocz±tku warto¶ci
.IR parametru ,
to wynikiem interpretacji jest zinterpretowana warto¶æ
.I parametru
z usuniêtym najkrótszym (przypadek ,,\fB#\fP'') lub najd³u¿szym (przypadek
,,\fB##\fP'') pasuj±cym wzorcem.
Je¿eli
.I parametrem
jest
.B @
lub
.BR * ,
to operacja usuniêcia wzorca stosowana jest do ka¿dego po kolei parametru
pozycyjnego, za¶ wynikiem interpretacji jest powsta³a lista.
Je¶li
.I parametr
jest zmienn± tablicow± indeksowan± przez
.B @
lub
.BR * ,
operacja usuwania wzorca jest przeprowadzana po kolei na ka¿dym elemencie
tablicy, za¶ wynikiem interpretacji jest powsta³a lista.
.TP
.PD 0
${\fIparametr\fP\fB%\fP\fIs³owo\fP}
.TP
${\fIparametr\fP\fB%%\fP\fIs³owo\fP}
.PD
.I s³owo
jest interpretowane tworz±c wzorzec, tak samo jak przy rozwijaniu nazw
plików. Je¿eli wzorzec pasuje do koñcowej czê¶ci zinterpretowanego
.IR parametru ,
wynikiem interpretacji jest zinterpretowana  warto¶æ
.I parametru
z usuniêtym najkrótszym (przypadek ,,\fB%\fP'') lub najd³u¿szym (przypadek
,,\fB%%\fP'') pasuj±cym wzorcem.
Je¿eli
.I parametrem
jest
.B @
lub
.BR * ,
to operacja usuniêcia wzorca stosowana jest do ka¿dego po kolei parametru
pozycyjnego, za¶ wynikiem interpretacji jest powsta³a lista.
Je¶li
.I parametr
jest zmienn± tablicow± indeksowan± przez
.B @
lub
.BR * ,
operacja usuwania wzorca jest przeprowadzana po kolei na ka¿dym elemencie
tablicy, za¶ wynikiem interpretacji jest powsta³a lista.
.TP
.PD 0
${\fIparametr\fP\fB/\fP\fIwzorzec\fP\fB/\fP\fI³añcuch\fP}
.TP
${\fIparametr\fP\fB//\fP\fIwzorzec\fP\fB/\fP\fI³añcuch\fP}
.PD
\fIwzorzec\fP jest interpretowany tworz±c wzorzec, tak samo jak przy
rozwijaniu nazw plików.
Interpretowany jest \fIparametr\fP, a najd³u¿sze dopasowanie \fIwzorca\fP
do jego zinterpretowanej warto¶ci zastêpowane jest
\fI³añcuchem\fP. W pierwszej postaci, zastêpowane jest tylko pierwsze
dopasowanie. Druga postaæ powoduje zast±pienie wszystkich dopasowañ
\fIwzorca\fP \fI³añcuchem\fP.
Je¿eli \fIwzorzec\fP rozpoczyna siê od \fB#\fP, to musi pasowaæ do pocz±tku
zinterpretowanej warto¶ci \fIparametru\fP.
Je¿eli \fIpattern\fP rozpoczyna siê od \fB%\fP, to musi pasowaæ do koñca
zinterpretowanej warto¶ci \fIparametru\fP.
Je¶li \fI³añcuch\fP jest pusty, to dopasowania \fIwzorca\fP s± usuwane
a \fB/\fP wystêpuj±ce po \fIwzorcu\fP mo¿na pomin±æ.
Je¿eli
.I parametrem
jest
.B @
lub
.BR * ,
to operacja podstawiania stosowana jest do ka¿dego po kolei parametru
pozycyjnego, za¶ wynikiem interpretacji jest powsta³a lista.
Je¶li
.I parametr
jest zmienn± tablicow± indeksowan± przez
.B @
lub
.BR * ,
operacja podstawiania jest przeprowadzana po kolei na ka¿dym elemencie
tablicy, za¶ wynikiem interpretacji jest powsta³a lista.
.SS Podstawianie wyników poleceñ
.PP
\fIPodstawianie wyników poleceñ\fP (command substitution) pozwala na
zastêpowanie nazwy polecenia wyj¶ciem (wynikiem) z jego dzia³ania.
Posiada dwie postaci:
.PP
.RS
.PP
\fB$(\fP\fIpolecenie\fP\|\fB)\fP
.RE
lub
.RS
\fB`\fP\fIpolecenie\fP\fB`\fP
.RE
.PP
.B Bash
wykonuje interpretacjê wykonuj±c \fIpolecenie\fP i zastêpuj±c podstawiane
polecenie jego utworzonym standardowym wyj¶ciem, z usuniêtymi koñcowymi
znakami nowej linii.
Zawarte wewn±trz wyniku znaki nowej linii nie s± usuwane, ale nog± byæ
usuniête podczas podzia³u na s³owa.
Podstawienie wyniku polecenia \fB$(cat \fIplik\fP)\fR mo¿na zast±piæ
równowa¿nym, ale szybszym \fB$(< \fIplik\fP)\fR.
.PP
Gdy u¿ywane jest podstawianie w starym stylu, z u¿yciem odwrotnych
apostrofów, odwrotny uko¶nik zachowuje swe znaczenie dos³owne, z wyj±tkiem
przypadków, gdy poprzedza on
.BR $ ,
.BR `
lub
.BR \e .
Pierwszy odwrotny apostrof (`) nie poprzedzony odwrotnym uko¶nikiem koñczy
podstawianie wyniku polecenia.
Podczas pos³ugiwania siê postaci± $(\^\fIpolecenie\fP\|), polecenie tworz±
wszystkie znaki pomiêdzy nawiasami; ¿aden nie jest traktowany specjalnie.
.PP
Podstawianie wyników poleceñ mo¿e byæ zagnie¿d¿ane. W celu zagnie¿d¿enia
postaci z odwrotnymi apostrofami zabezpiecz wewnêtrzne przed interpretacj±
u¿ywaj±c odwrotnych uko¶ników.
.PP
Je¿eli podstawianie pojawia siê wewn±trz cudzys³owów, to na wynikach nie
jest przeprowadzany podzia³ na s³owa ani rozwiniêcie nazw plików.
.SS Interpretacja wyra¿eñ arytmetycznych
.PP
Interpretacja wyra¿eñ arytmetycznych pozwala na obliczanie wyra¿eñ
arytmetycznych i podstawianie wyniku. Format interpretacji arytmetycznej:
.RS
.PP
\fB$((\fP\fIwyra¿enie\fP\fB))\fP
.RE
.PP
.I wyra¿enie
traktowane jest tak, jakby by³o ujête w cudzys³owy, ale cudzys³ów wewn±trz
nawiasów nie jest traktowany specjalnie.
Wszystkie tokeny w wyra¿eniu podlegaj± interpretacji parametrów,
interpretacji ³añcuchów, podstawianiu wyników poleceñ i usuwaniu
cudzys³owów.
.PP
Interpretacja przeprowadzana jest zgodnie z zasadami podanymi poni¿ej w
sekcji
.SM
.BR "OBLICZENIA ARYTMETYCZNE" .
Je¿eli
.I wyra¿enie
jest nieprawid³owe,
.B bash
wypisuje komunikat o niepowodzeniu i nie wystêpuje ¿adne podstawienie.
.SS Podstawianie wyników procesów (Process substitution)
.PP
\fIPodstawianie wyników procesów\fP obs³ugiwane jest na systemach
obs³uguj±cych potoki nazwane (\fIFIFO\fP) lub metodê \fB/dev/fd\fP
nazywania otwartych plików.
Przybiera ono postaæ
\fB<(\fP\fIlista\^\fP\fB)\fP
lub
\fB>(\fP\fIlista\^\fP\fB)\fP.
Proces \fIlista\fP uruchamiany jest z wej¶ciem i wyj¶ciem pod³±czonym do
\fIFIFO\fP lub jakiego¶ pliku w \fB/dev/fd\fP. W wyniku interpretacji
nazwa tego pliku przesy³ana jest jako argument bie¿±cego polecenia.
Je¿eli pos³u¿ono siê postaci± \fB>(\fP\fIlista\^\fP\fB)\fP, zapis do pliku
bêdzie stanowiæ wej¶cie dla \fIlisty\fP. Je¿eli pos³u¿ono siê postaci±
\fB<(\fP\fIlista\^\fP\fB)\fP, plik przekazany jako argument powinien zostaæ
odczytany w celu uzyskania wyj¶cia \fIlisty\fP.
.PP
Gdy jest to mo¿liwe, podstawianie wyników procesu wykonywane jest
równocze¶nie z interpretacj± parametrów i zmiennych, podstawianiem wyników
poleceñ i interpretacj± wyra¿eñ arytmetycznych.
.SS Podzia³ na s³owa
.PP
Pow³oka przeszukuje wyniki interpretacji parametrów, podstawiania poleceñ
i interpretacji wyra¿eñ arytmetycznych, które nie pojawiaj± siê wewn±trz
cudzys³owów, w celu przeprowadzenia
.IR "podzia³u na s³owa" .
.PP
Pow³oka traktuje ka¿dy znak
.SM
.B IFS
jak separator i w miejscu ich wystêpowania dzieli na s³owa wyniki innych
interpretacji.
Je¿eli
.SM
.B IFS
nie jest ustawione lub jego warto¶ci± jest dok³adnie
.BR <spacja><tab><nowalinia> ,
warto¶æ domy¶lna, to do podzia³u na s³owa s³u¿y dowolna sekwencja znaków
.SM
.BR IFS .
Je¿eli
.SM
.B IFS
posiada warto¶æ inn± ni¿ domy¶lna, to sekwencje bia³ych znaków
.B spacji
i
.B tabulacji
s± ignorowane na pocz±tku i koñcu s³owa, dopóki bia³y znak wystêpuje
w warto¶ci
.SM
.BR IFS
(bia³y znak
.SM
.BR IFS ).
Inne znaki w
.SM
.B IFS
nie bêd±ce bia³ymi znakami
.SM
.BR IFS ,
³±cznie z dowolnymi przyleg³ymi bia³ymi znakami
.SM
.BR IFS ,
ograniczaj± pole.
Sekwencja bia³ych znaków
.SM
.B IFS
jest równie¿ traktowana jako ogranicznik.
Je¶li
.SM
.B IFS
jest ³añcuchem pustym, to nie wystêpuje podzia³ na s³owa.
.PP
Jawnie puste argumenty (\^\f3"\^"\fP lub \^\f3'\^'\fP\^) s± pozostawiane.
Niecytowane argumenty puste niejawnie, wynikaj±ce z interpretacji
parametrów nie posiadaj±cych warto¶ci, s± usuwane.
Je¶li parametr bez warto¶ci interpretowany jest wewn±trz cudzys³owów, to
wynikiem jest argument pusty i jest on zachowywany.
.\" retained
.PP
Zauwa¿, ¿e je¶li nie wystêpuje interpretacja, to nie jest równie¿
wykonywany podzia³.
.SS Rozwijanie nazw plików (Pathname Expansion)
.PP
Po podziale na s³owa, je¿eli nie ustawiona zosta³a opcja
.BR \-f ,
przegl±da ka¿de s³owo w poszukiwaniu znaków
.BR * ,
.BR ?
i
.BR [ .
Je¶li pojawia siê jeden z nich, to s³owo uwa¿ane jest za
.I wzorzec
i zastêpowane jest posortowan± alfabetycznie list± nazw plików pasuj±cych
do wzorca.
Je¿eli nie znaleziono pasuj±cych nazw a wy³±czona jest opcja
.B nullglob
pow³oki, s³owo pozostawiane jest bez zmian.
Je¿eli
.B nullglob
jest w³±czone, a nie znaleziono dopasowañ, to s³owo jest usuwane.
Je¿eli w³±czona jest opcja
.B nocaseglob
pow³oki, to dopasowywanie wzorca wykonywane jest bez zwracania uwagi
na wielko¶æ liter.
Gdy do rozwiniêcia nazw plików u¿ywa siê wzorca, to znak
.B ,,.''
na pocz±tku nazwy lub bezpo¶rednio po uko¶niku musi zostaæ dopasowany
dos³ownie, chyba ¿e ustawiono opcjê
.B dotglob
pow³oki.
Podczas dopasowywania nazwy pliku znak uko¶nika musi zawsze zostaæ
dopasowany dos³ownie.
W pozosta³ych przypadkach, kropka
.B ,,.''
nie jest traktowana specjalnie.
Zobacz poni¿ej opis
.B shopt
w sekcji
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ,
gdzie znajdziesz omówienie opcji pow³oki
.BR nocaseglob ,
.BR nullglob
i
.BR dotglob .
.PP
Do ograniczenia zestawu nazw plików pasuj±cych do
.IR wzorca
mo¿na wykorzystaæ zmienn± pow³oki
.SM
.BR GLOBIGNORE .
Je¿eli
.SM
.B GLOBIGNORE
jest ustawione, ka¿da z pasuj±cych nazw plików pasuj±ca równie¿ do jednego
ze wzorców w
.SM
.B GLOBIGNORE
jest usuwana z listy dopasowañ.
Nazwy plików
.B ,,.''
i
.B ,,..''
s± zawsze ignorowane, nawet gdy
.SM
.B GLOBIGNORE
jest ustawione. Jednak¿e, ustawienie
.SM
.B GLOBIGNORE
skutkuje w³±czeniem opcji
.BR dotglob ,
tak ¿e bêd± dopasowywane wszystkie inne nazwy plików rozpoczynaj±ce siê od
kropki.
W celu uzyskania starego zachowania, ignoruj±cego nazwy zaczynaj±ce siê
.BR ,,.'' ,
jednym ze wzorców w
.SM
.BR GLOBIGNORE
nale¿y zrobiæ
.B ,,.*'' .
Opcja
.B dotglob
jest wy³±czana, gdy kasowane jest
.SM
.B GLOBIGNORE .
.PP
\fBDopasowanie wzorca\fP
.PP
Ka¿dy znak pojawiaj±cy siê we wzorcu, ró¿nych od specjalnych znaków wzorca
opisanych poni¿ej, dopasowuje sam siebie. Znak NUL nie mo¿e wyst±piæ we
wzorcu. Specjalne znaki wzorca musz± byæ cytowane, je¿eli maj± byæ
dopasowane dos³ownie.
.PP
Specjalne znaki wzorca maj± nastêpuj±ce znaczenie:
.PP
.PD 0
.TP
.B *
Dopasowuje dowolny ³añcuch, ³±cznie z ³añcuchem pustym.
.TP
.B ?
Dopasowuje dowolny pojedynczy znak.
.TP
.B [...]
Dopasowuje jeden z ujêtych w nawiasy kwadratowe znaków. Para znaków
rozdzielona my¶lnikiem opisuje
\fIwyra¿enie zakresu\fP;
dopasowywany jest nim dowolny znak, który przy sortowaniu leksykalnym,
z zastosowaniem bie¿±cego ustawienia locale i zestawu znaków,
wypada miêdzy tymi dwoma znakami, w³±cznie z nimi.
Je¿eli pierwszym znakiem wystêpuj±cym po
.B [
jest
.B !
lub
.BR ^ ,
to dopasowywany jest dowolny znak nie zawarty w nawiasach.
Kolejno¶æ sortowania znaków w wyra¿eniach zakresu okre¶lona jest przez
bie¿±ce ustawienie locale i warto¶æ zmiennej ¶rodowiskowej \fBLC_COLLATE\fP,
je¶li istnieje.
Znak
.B \-
mo¿na dopasowaæ w³±czaj±c go jako pierwszy lub ostatni ze znaków zestawu.
Znak
.B ]
mo¿na dopasowaæ w³±czaj±c go jako pierwszy znak zestawu.
.br
.if t .sp 0.5
.if n .sp 1
Wewn±trz
.B [
i
.BR ] ,
mo¿na podawaæ \fIklasy znaków\fP (character classes), u¿ywaj±c sk³adni
\fB[:\fP\fIklasa\fP\fB:]\fP, gdzie \fIklasa\fP jest jedn± z poni¿szych klas
zdefiniowanych w standardzie POSIX.2:
.PP
.RS
.B
.if n alnum alpha ascii blank cntrl digit graph lower print punct space upper xdigit
.if t alnum   alpha   ascii   blank   cntrl   digit   graph   lower   print   punct   space   upper   xdigit
.br
Klasa znaków dopasowuje dowolny znak nale¿±cy do tej klasy.
.br
.if t .sp 0.5
.if n .sp 1
Wewn±trz
.B [
i
.BR ] ,
mo¿na podaæ \fIklasê równowa¿no¶ci\fR, u¿ywaj±c sk³adni
\fB[=\fP\fIz\fP\fB=]\fP, która dopasowuje wszystkie znaki o tej samej
wadze sortowania (zdefiniowan± w bie¿±cym ustawieniu locale) co znak
\fIz\fP.
.br
.if t .sp 0.5
.if n .sp 1
Wewn±trz
.B [
i
.BR ] ,
sk³adnia \fB[.\fP\fIsymbol\fP\fB.]\fP dopasowuje symbol sortowania
(collating symbol) \fIsymbol\fP.
.RE
.PD
.PP
Je¿eli przy pomocy wbudowanego \fBshopt\fP w³±czono opcjê \fBextglob\fP,
to rozpoznawane jest kilka rozszerzonych operatorów dopasowania wzorców.
W poni¿szym opisie, \fIlista-wzorców\fP jest list± z³o¿on± z jednego lub
wiêcej wzorców rozdzielonych znakiem \fB|\fP.
Wzorce z³o¿one mo¿na konstruowaæ przy pomocy jednego lub wiêcej poni¿szych
pod-wzorców:
.sp 1
.PD 0
.RS
.TP
\fB?(\fP\^\fIlista-wzorców\^\fP\fB)\fP
Dopasowuje zero lub jedno wyst±pienie zadanych wzorców
.TP
\fB*(\fP\^\fIlista-wzorców\^\fP\fB)\fP
Dopasowuje zero lub wiêcej wyst±pieñ zadanych wzorców
.TP
\fB+(\fP\^\fIlista-wzorców\^\fP\fB)\fP
Dopasowuje jedno lub wiêcej wyst±pieñ zadanych wzorców
.TP
\fB@(\fP\^\fIlista-wzorców\^\fP\fB)\fP
Dopasowuje dok³adnie jeden z zadanych wzorców
.TP
\fB!(\fP\^\fIlista-wzorców\^\fP\fB)\fP
Dopasowuje cokolwiek prócz jednego z zadanych wzorców
.RE
.PD
.SS Usuniêcie cytowañ
.PP
Po poprzednich interpretacjach, wszystkie niecytowane wyst±pienia znaków
.BR \e ,
.BR '
i \^\f3"\fP\^, które nie wynik³y z jednej z powy¿szych interpretacji, s±
usuwane.
.SH PRZEKIEROWANIE
Przed wykonaniem polecenia, jego wej¶cie i wyj¶cie mog± zostaæ
.I przekierowane
przy pomocy specjalnej notacji interpretowanej przez pow³okê.
Przekierowañ mo¿na te¿ u¿ywaæ do otwierania i zamykania plików dla
¶rodowiska wykonywania bie¿±cej pow³oki. Poni¿sze operatory przekierowania
mog± wystêpowaæ przed lub pojawiaæ siê gdziekolwiek wewn±trz
.I polecenia prostego
lub wystêpowaæ po
.IR poleceniu.
Przekierowania przetwarzane s± w kolejno¶ci wystêpowania, od lewej
do prawej.
.PP
W poni¿szych opisach, je¶li pominiêto deskryptor pliku, a pierwszym znakiem
operatora przekierowania  jest
.BR < ,
przekierowanie dotyczy standardowego wej¶cia (deskryptor pliku 0).
Je¿eli pierwszym znakiem operatora przekierowania jest
.BR > ,
przekierowanie dotyczy standardowego wyj¶cia (deskryptor pliku 1).
.PP
S³owo nastêpuj±ce do operatorze przekierowania w poni¿szych opisach
podlega, chyba ¿e podano inaczej, interpretacji nawiasów, interpretacji
tyldy, interpretacji parametrów, podstawianiu wyników poleceñ,
interpretacji wyra¿eñ arytmetycznych, usuwaniu cytowañ, rozwijaniu nazw
plików i podzia³owi na s³owa.
Je¶li zinterpretowane zostanie jako wiêcej ni¿ jedno s³owo, to
.B bash
zg³osi b³±d.
.PP
Zauwa¿, ¿e kolejno¶æ przekierowañ jest znacz±ca. Na przyk³ad, polecenie
.RS
.PP
ls \fB>\fP dirlist 2\fB>&\fP1
.RE
.PP
kieruje zarówno standardowe wyj¶cie jak i wyj¶cie diagnostyczne (stderr)
do pliku
.IR dirlist ,
podczas gdy polecenie
.RS
.PP
ls 2\fB>&\fP1 \fB>\fP dirlist
.RE
.PP
kieruje tylko standardowe wyj¶cie do pliku
.IR dirlist ,
gdy¿ wyj¶cie b³êdów zosta³o zduplikowane jako standardowe wyj¶cie przed
przekierowaniem wyj¶cia do
.IR dirlist .
.PP
\fBBash\fP obs³uguje kilka nazw plików w sposób specjalny gdy s± one
u¿yte w przekierowaniach. Opisano to w poni¿szej tablicy:
.RS
.PP
.PD 0
.TP
.B /dev/fd/\fIfd\fP
Je¿eli \fIfd\fP jest poprawn± liczb± ca³kowit±, to duplikowany jest
deskryptor pliku \fIfd\fP.
.TP
.B /dev/stdin
Duplikowany jest deskryptor pliku 0.
.TP
.B /dev/stdout
Duplikowany jest deskryptor pliku 1.
.TP
.B /dev/stderr
Duplikowany jest deskryptor pliku 2.
.TP
.B /dev/tcp/\fIhost\fP/\fIport\fP
Je¶li \fIhost\fP jest poprawn± nazw± hosta lub adresem internetowym,
a \fIport\fP jest liczb± ca³kowit± okre¶laj±c± numer portu lub nazw± us³ugi,
to \fBbash\fP usi³uje otworzyæ po³±czenie TCP do odpowiedniego gniazda.
.TP
.B /dev/udp/\fIhost\fP/\fIport\fP
Je¶li \fIhost\fP jest poprawn± nazw± hosta lub adresem internetowym,
a \fIport\fP jest liczb± ca³kowit± okre¶laj±c± numer portu lub nazw± us³ugi,
to \fBbash\fP usi³uje otworzyæ po³±czenie UDP do odpowiedniego gniazda.
.PD
.RE
.PP
Nieudane otwarcie lub utworzenie pliku powoduje niepowodzenie
przekierowania.
.SS Przekierowanie wej¶cia
.PP
Przekierowanie wej¶cia powoduje otwarcie do odczytu pliku, którego nazwa
wynika z interpretacji
.IR s³owa .
Odczyt bêdzie wykonywany z deskryptora pliku
.I n
lub standardowego wej¶cia (zerowy deskryptor pliku) je¶li nie podano
.IR n .
.PP
Ogólny format przekierowania wej¶cia:
.RS
.PP
[\fIn\fP]\fB<\fP\fIs³owo\fP
.RE
.SS Przekierowanie wyj¶cia
.PP
Przekierowanie wyj¶cia powoduje otwarcie do zapisu pliku, którego nazwa
wynika z interpretacji
.IR s³owa .
Zapis bêdzie wykonywany z deskryptora pliku
.I n
lub standardowego wyj¶cia (deskryptor pliku 1) je¶li nie podano
.IR n .
Je¿eli plik nie istnieje jest tworzony; je¿eli istnieje obcinany jest
do rozmiaru zerowego.
.PP
Ogólny format przekierowania wyj¶cia:
.RS
.PP
[\fIn\fP]\fB>\fP\fIs³owo\fP
.RE
.PP
Je¿eli operatorem przekierowania jest
.BR > ,
a zosta³a w³±czona opcja
.B noclobber
wbudowanego polecenie
.BR set ,
to przekierowanie nie powiedzie siê je¿eli plik o nazwie wynikaj±cej
z interpretacji \fIs³owa\fP istnieje i jest zwyk³ym plikiem.
Je¿eli operatorem przekierowania jest
.BR >| ,
albo operatorem jest
.B >
przy niew³±czonej opcji
.BR noclobber ,
to wykonywana jest próba przekierowania, nawet je¶li plik \fIs³owo\fP
istnieje.
.SS Do³±czanie przekierowanego wyj¶cia
.PP
Przekierowanie wyj¶cia w ten sposób powoduje, ¿e plik o nazwie wynikaj±cej
z interpretacji
.I s³owa
zostanie otwarty do do³±czania (append).
Do³±czanie bêdzie wykonywane z deskryptora pliku
.I n
lub standardowego wyj¶cia (deskryptor pliku 1) je¶li nie podano
.IR n .
Je¿eli plik nie istnieje jest tworzony.
.PP
Ogólny format do³±czania wyj¶cia:
.RS
.PP
[\fIn\fP]\fB>>\fP\fIs³owo\fP
.RE
.PP
.SS Przekierowanie standardowego wyj¶cia i wyj¶cia b³êdów
.PP
.B Bash
pozwala, przy pomocy tej konstrukcji, przekierowaæ standardowe
wyj¶cie (deskryptor pliku 1) i standardowe wyj¶cie b³êdów (deskryptor
plików 2) do pliku, którego nazw± jest zinterpretowane
.IR s³owo .
.PP
Istniej± dwie postaci takiego przekierowania:
.RS
.PP
\fB&>\fP\fIs³owo\fP
.RE
i
.RS
\fB>&\fP\fIs³owo\fP
.RE
.PP
Spo¶ród nich, zalecan± jest pierwsza forma.
Jest ona semantycznie równowa¿na
.RS
.PP
\fB>\fP\fIs³owo\fP 2\fB>&\fP1
.RE
.SS Dokumenty w³±czone (Here Documents)
.PP
Ten typ przekierowania instruuje pow³okê, by czyta³a wej¶cie z bie¿±cego
¼ród³a a¿ do napotkania wiersza zawieraj±cego tylko
.I s³owo
(bez ¿adnych koñcz±cych odstêpów).
Wszystkie wiersze przeczytane do tego momentu s± nastêpnie u¿ywane jako
standardowe wej¶cie polecenia.
.PP
Format dokumentów w³±czonych jest nastêpuj±cy:
.RS
.PP
.nf
\fB<<\fP[\fB\-\fP]\fIs³owo\fP
        \fIdokument w³±czony\fP
\fIogranicznik\fP
.fi
.RE
.PP
Na
.I s³owie
nie jest wykonywana interpretacja parametrów, podstawiania wyników poleceñ,
rozwijanie nazw plików ani interpretacja wyra¿eñ arytmetycznych.
Je¿eli jakie¶ znaki w
.I s³owie
s± cytowane, to
.I ogranicznik
jest wynikiem usuniêcia cytowañ ze
.IR s³owa ,
a wiersze w dokumencie w³±czonym nie s± interpretowane.
Je¿eli \fIs³owo\fP nie jest cytowane, wszystkie wiersze dokumentu
w³±czonego podlegaj± interpretacji parametrów, podstawianiu poleceñ
i interpretacji wyra¿eñ arytmetycznych. W tym ostatnim przypadku,
sekwencja
.B \e<nowalinia>
jest ignorowana, a do cytowania znaków
.BR \e ,
.BR $
i
.BR `
musi byæ u¿yte
.BR \e .
.PP
Je¿eli operatorem przekierowania jest
.BR <<\- ,
to wszystkie pocz±tkowe znaki tabulacji s± obcinane z wierszy wej¶ciowych
i wiersza zawieraj±cego
.IR ogranicznik .
Pozwala to na ustawienie naturalnych wciêæ dla dokumentów w³±czonych
w skryptach pow³oki.
.SS "Powielanie deskryptorów plików"
.PP
Operator przekierowania
.RS
.PP
[\fIn\fP]\fB<&\fP\fIs³owo\fP
.RE
.PP
s³u¿y do powielania deskryptorów plików wej¶ciowych.
Je¿eli
.I s³owo
zinterpretowane zostanie jako jedna lub wiêcej cyfr, to deskryptor pliku
oznaczony przez
.I n
czyniony jest kopi± tego deskryptora.
Je¿eli cyfry w
.I s³owie
nie okre¶laj± otwartego dla wej¶cia deskryptora, pojawia siê b³±d
przekierowania.
Je¿eli
.I s³owo
zinterpretowane jest jako
.BR \- ,
deskryptor pliku
.I n
jest zamykany. Je¿eli
.I n
nie zosta³o okre¶lone, to stosowane jest standardowe wej¶cie (deskryptor
pliku 0).
.PP
Operator
.RS
.PP
[\fIn\fP]\fB>&\fP\fIs³owo\fP
.RE
.PP
podobnie, s³u¿y do powielania deskryptorów standardowego wyj¶cia.
Je¿eli nie okre¶lono
.IR n ,
stosowane jest standardowe wyj¶cie (deskryptor pliku 1).
Je¿eli cyfry w
.I s³owie
nie okre¶laj± deskryptora pliku otwartego do wyj¶cia, pojawia siê b³±d
przekierowania.
W przypadku specjalnym, je¿eli pominiêto \fIn\fP, a \fIs³owo\fP nie jest
interpretowane jako jedna lub wiêcej cyfr, to przekierowywane s± standardowe
wyj¶cie i standardowe wyj¶cie b³êdów, jak opisano poprzednio.
.SS "Otwieranie deskryptorów plików do odczytu i zapisu"
.PP
Operator przekierowania
.RS
.PP
[\fIn\fP]\fB<>\fP\fIs³owo\fP
.RE
.PP
powoduje, ¿e plik o nazwie wynik³ej z interpretacji
.I s³owa
zostanie otwarty do odczytu i zapisu.
Odczyt i zapis bêd± wykonywane z deskryptora pliku
.I n
lub standardowego wej¶cia (deskryptor pliku 0) je¶li nie podano
.IR n .
Je¿eli plik nie istnieje jest tworzony.
.SH ALIASY
\fBAliasy\fP (czyli synonimy) pozwalaj± na zast±pienie s³owa ³añcuchem, gdy
zostanie ono u¿yte jako pierwsze s³owo w poleceniu prostym.
Pow³oka utrzymuje listê aliasów, które mog± byæ ustawiane i uniewa¿niane przy
pomocy wbudowanych poleceñ
.B alias
i
.B unalias
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
Dla pierwszego s³owa ka¿dego polecenia, je¶li nie jest cytowane, nastêpuje
sprawdzenie, czy posiada ono alias. Je¿eli tak, to s³owo to jest
zastêpowane tekstem aliasu. Nazwa aliasu i zastêpuj±cy ja tekst mog±
zawieraæ dowolne poprawne wej¶cie pow³oki, ³±cznie z
.IR metaznakami
podanymi powy¿ej, z wyj±tkiem tego, ¿e nazwy aliasów nie mog± zawieraæ
znaku równo¶ci \fI=\fP. Pierwsze s³owo tekstu zastêpuj±cego jest z kolei
sprawdzane na aliasy, ale s³owo identyczne z interpretowanym w³a¶nie
aliasem nie jest interpretowane powtórnie. Oznacza to, ¿e mo¿na mieæ alias
.B ls
do
.BR "ls \-F" ,
na przyk³ad, a
.B bash
nie bêdzie usi³owa³ rekurencyjnie interpretowaæ zastêpuj±cego tekstu.
je¿eli ostatnim znakiem warto¶ci aliasu jest
.IR odstêp ,
to nastêpne s³owo polecenia wystêpuj±ce po aliasie ma równie¿ sprawdzan±
interpretacjê aliasów.
.PP
Aliasy s± tworzone i pokazywane poleceniem
.BR alias ,
a usuwane poleceniem
.BR unalias .
.PP
Nie ma ¿adnego mechanizmu pos³ugiwania siê argumentami w tek¶cie
zastêpuj±cym. Je¶li potrzebne s± argumenty, powinna zostaæ u¿yta funkcja
pow³oki (zobacz poni¿ej
.SM
.BR FUNKCJE ).
.PP
Aliasy nie s± interpretowane, gdy pow³oka nie jest interaktywna, chyba ¿e
ustawiono opcjê pow³oki
.B expand_aliases
przy pomocy
.B shopt
(zobacz opis
.B shopt
w sekcji
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
.PP
Regu³y dotycz±ce definiowania i u¿ywania aliasów s± nieco zagmatwane.
.\" somewhat confusing.
.B Bash
zawsze czyta co najmniej jeden pe³ny wiersz z wej¶cia przed wykonaniem
jakichkolwiek poleceñ tego wiersza. Aliasy interpretowane s± w czasie
odczytu polecenia, nie podczas jego wykonywania. Z tego powodu, definicja
aliasu wystêpuj±ca w tym samym wierszu, co inne polecenie nie zadzia³a
a¿ do przeczytania nastêpnego wiersza wej¶cia.
Na polecenia wystêpuj±ce po definicji aliasu, w tym samym wierszu, nowy
alias nie ma wp³ywu.
Zachowanie to ujawnia siê tak¿e podczas wykonywania funkcji.
Aliasy interpretowane s± w czasie odczytu definicji funkcji, nie za¶
podczas jej wykonywania, gdy¿ sama definicja funkcji stanowi polecenie
z³o¿one. W skutek tego aliasy zdefiniowane w funkcji nie s± dostêpne,
a¿ do chwili po wykonaniu funkcji.
Dla bezpieczeñstwa, zawsze umieszczaj definicje aliasów w odrêbnym wierszu
i nie u¿ywaj
.B alias
w poleceniach z³o¿onych.
.PP
Prawie w ka¿dym zastosowaniu aliasy s± wyparte przez funkcje pow³oki.
.SH FUNKCJE
Punkcja pow³oki, zdefiniowana jak opisano powy¿ej, w sekcji
.SM
.BR "GRAMATYKA POW£OKI" ,
przechowuje szereg poleceñ do pó¼niejszego wykonania.
Gdy nazwa funkcji pow³oki u¿ywana jest jako nazwa polecenia prostego,
wykonywana jest lista poleceñ zwi±zanych z t± nazw± funkcji.
Funkcje wykonywane s± w kontek¶cie bie¿±cej pow³oki; do ich interpretacji
nie jest tworzony ¿aden nowy proces (zauwa¿ ró¿nicê w stosunku do wykonania
skryptu pow³oki).
Podczas wykonywania funkcji, przekazane jej argumenty staj± siê parametrami
pozycyjnymi. Aktualizowany jest specjalny parametr
.BR # ,
tak by odzwierciedla³ zmianê. Parametr pozycyjny 0 nie jest zmieniany.
Zmienna
.SM
.B FUNCNAME
podczas wykonywania funkcji ustawiana jest na jej nazwê.
Wszystkie inne aspekty ¶rodowiska wykonywania pow³oki s± identyczne
miêdzy funkcj± i jej wywo³uj±cym, z wyj±tkiem tego, ¿e nie jest
dziedziczona pu³apka (trap)
.SM
.B DEBUG
(zobacz opis wbudowanego
.B trap
poni¿ej, w sekcji
.SM
.B "WBUDOWANE POLECENIA POW£OKI" ).
.PP
Zmienne lokalne dla funkcji mog± byæ deklarowane przy pomocy wbudowanego
polecenia
.BR local .
Zwykle zmienne i ich warto¶ci s± wspólne dla funkcji i jej wo³aj±cego.
.PP
Je¿eli w funkcji wywo³ywane jest wbudowane polecenie
.BR return ,
funkcja koñczy dzia³anie i wykonywanie wznawiane jest od
nastêpnego polecenia po wywo³aniu funkcji. Gdy funkcja koñczy dzia³anie,
parametrom pozycyjnym i parametrowi specjalnemu
.B #
przywracane s± warto¶ci, jakie posiada³y one przed wykonaniem funkcji.
.PP
Listê nazw i definicji funkcji mo¿na uzyskaæ przy pomocy opcji
.B \-f
wbudowanych poleceñ
.B declare
lub
.BR typeset .
Opcja
.B \-F
poleceñ
.B declare
lub
.B typeset
podaje same nazwy funkcji.
Funkcje mo¿na eksportowaæ, tak ¿e bêd± one automatycznie
zdefiniowane w podpow³okach. Wykonuje siê to przy pomocy opcji
.B \-f
wbudowanego polecenia
.BR export .
.PP
Funkcje mog± byæ rekurencyjne. Nie ma narzuconego ograniczenia na
liczbê rekurencyjnych wywo³añ.
.SH "OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH"
Pow³oka pozwala, pod pewnymi warunkami, na obliczanie warto¶ci wyra¿eñ
arytmetycznych (zobacz wbudowane polecenie \fBlet\fP i \fBInterpretacja
wyra¿eñ arytmetycznych\fP).
Obliczenia wykonywane s± na d³ugich liczbach ca³kowitych (long integer), bez
kontroli przepe³nienia (overflow), mimo i¿ dzielenie przez 0 jest
przechwytywane i oznaczane jako b³±d.
Operatory i ich priorytety oraz sposób ich do³±czania
.\" associativity
s± takie same jak w jêzyku C.
Poni¿sza lista operatorów pogrupowana jest w poziomy operatorów o
jednakowym priorytecie.
Poziomy podano w kolejno¶ci malej±cego priorytetu.
.PP
.PD 0
.TP
.B \fIid\fP++ \fIid\fP\-\-
post-inkrementacja i post-dekrementacja zmiennej
.TP
.B ++\fIid\fP \-\-\fIid\fP
pre-inkrementacja i pre-dekrementacja zmiennej
.TP
.B \- +
jednoargumentowy minus i plus
.TP
.B ! ~
negacja logiczna i bitowa
.TP
.B **
potêgowanie
.TP
.B * / %
mno¿enie, dzielenie, reszta z dzielenia
.TP
.B + \-
dodawanie, odejmowanie
.TP
.B << >>
lewo i prawostronne przesuniêcie bitowe
.TP
.B <= >= < >
porównanie
.TP
.B == !=
równo¶ci i nierówno¶æ
.TP
.B &
bitowa koniunkcja (AND)
.TP
.B ^
bitowa alternatywa wy³±czna (XOR)
.TP
.B |
bitowa alternatywa (OR)
.TP
.B &&
logiczna koniunkcja (AND)
.TP
.B ||
logiczna alternatywa (OR)
.TP
.B \fIwyra¿\fP?\fIwyra¿\fP:\fIwyra¿\fP
obliczenie warunkowe (conditional evaluation)
.TP
.B = *= /= %= += \-= <<= >>= &= ^= |=
przypisanie
.TP
.B \fIwyra¿1\fP , \fIwyra¿2\fP
przecinek
.PD
.PP
.PP
Jako operandy dozwolone s± zmienne pow³oki; interpretacja parametrów
przeprowadzana jest przed obliczeniem wyra¿enia.
Wewn±trz wyra¿enia, do zmiennych pow³oki mo¿na siê te¿ odwo³ywaæ przez
nazwê, bez u¿ycia sk³adni interpretacji parametrów.
Gdy wyst±pi odwo³anie siê do zmiennej, jej warto¶æ obliczana jest jako
wyra¿enie arytmetyczne.
Zmienna pow³oki nie musi mieæ w³±czonego atrybutu liczby ca³kowitej by mog³a
byæ u¿yta w wyra¿eniu.
.PP
Sta³e z pocz±tkowym 0 interpretowane s± jako liczby ósemkowe. Pocz±tkowe 0x lub
0X oznacza liczbê szesnastkow±. W pozosta³ych przypadkach liczby maj±
postaæ [\fIpodstawa#\fP]n, gdzie \fIpodstawa\fPjest liczb± dziesiêtn±
pomiêdzy 2 a 64 reprezentuj±c± podstawê uk³adu pozycyjnego, za¶ \fIn\fP
liczb± w uk³adzie o tej podstawie.
Je¶li pominiêto \fIpodstawa#\fP, to u¿ywana jest podstawa 10.
Cyfry wiêksze ni¿ 9 reprezentowane s± przez ma³e litery, wielkie litery,
@ i _, w tej kolejno¶ci.
Je¿eli \fIpodstawa\fP jest mniejsza b±d¼ równa 36, to do zapisu liczb
pomiêdzy 10 a 35 mo¿na u¿ywaæ zamiennie ma³ych i wielkich liter.
.PP
Operatory interpretowane s± w kolejno¶ci priorytetu. Podwyra¿enia
w nawiasach obliczane s± jako pierwsze i mog± uniewa¿niæ podane wy¿ej regu³y
priorytetów.
.SH "WYRA¯ENIA WARUNKOWE"
Wyra¿enia warunkowe u¿ywane s± przez polecenie z³o¿one \fB[[\fP oraz
polecenia wbudowane \fBtest\fP i \fB[\fP do testowania atrybutów pliku
i wykonywania porównañ ³añcuchowych i arytmetycznych.
Wyra¿enia z³o¿one s± z poni¿szych jedno- i dwuargumentowych sk³adowych.
Je¶li który¶ z argumentów \fIplikowych\fP jednej z sk³adowych jest w postaci
\fI/dev/fd/n\fP, to sprawdzany jest deskryptor pliku \fIn\fP.
Je¿eli argument \fIplik\fP której¶ sk³adowej jest jednym z
\fI/dev/stdin\fP, \fI/dev/stdout\fP lub \fI/dev/stderr\fP, to sprawdzany
jest, odpowiednio, deskryptor 0, 1 lub 2.
.sp 1
.PD 0
.TP
.B \-a \fIplik\fP
Prawda je¶li \fIplik\fP istnieje.
.TP
.B \-b \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest blokowym plikiem specjalnym.
.TP
.B \-c \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest znakowym plikiem specjalnym.
.TP
.B \-d \fIplik\fP
Prawda je¶li \fIplik\fP istnieje jest katalogiem.
.TP
.B \-e \fIplik\fP
Prawda je¶li \fIplik\fP istnieje.
.TP
.B \-f \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest plikiem zwyk³ym.
.TP
.B \-g \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i ma ustawiony bit set-group-id.
.TP
.B \-h \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest dowi±zaniem symbolicznym.
.TP
.B \-k \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i ma ustawiony bit ochrony (sticky bit).
.TP
.B \-p \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest potokiem nazwanym (FIFO).
.TP
.B \-r \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i daje siê czytaæ.
.TP
.B \-s \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i ma rozmiar wiêkszy ni¿ zero.
.TP
.B \-t \fIfd\fP
Prawda je¶li deskryptor pliku
.I fd
jest otwarty i odnosi siê do terminala.
.TP
.B \-u \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i ma ustawiony bit set-user-id.
.TP
.B \-w \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i daje siê doñ zapisaæ.
.TP
.B \-x \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest wykonywalny.
.TP
.B \-O \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jego w³a¶cicielem jest efektywny
id u¿ytkownika.
.TP
.B \-G \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jego w³a¶cicielem jest efektywny
id grupy.
.TP
.B \-L \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest dowi±zaniem symbolicznym.
.TP
.B \-S \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i jest gniazdem.
.TP
.B \-N \fIplik\fP
Prawda je¶li \fIplik\fP istnieje i byæ zmieniany od czasu ostatniego jego
odczytu.
.TP
\fIplik1\fP \-\fBnt\fP \fIplik2\fP
Prawda je¶li \fIplik1\fP jest nowszy (wed³ug daty modyfikacji) od
\fIpliku2\fP.
.TP
\fIplik1\fP \-\fBot\fP \fIplik2\fP
Prawda je¶li \fIplik1\fP jest starszy ni¿ \fIplik2\fP.
.TP
\fIplik1\fP \fB\-ef\fP \fIplik2\fP
Prawda je¶li \fIplik1\fP i \fIplik2\fP maj± ten sam numer urz±dzenia
i i-wêz³a.
.TP
.B \-o \fInazwa_opcji\fP
Prawda je¶li opcja pow³oki
.I nazwa_opcji
jest w³±czona.
Zobacz zestawienie opcji w opisie opcji
.B \-o
wbudowanego
.BR set ,
poni¿ej.
.TP
.B \-z \fI³añcuch\fP
Prawda je¶li d³ugo¶æ \fI³añcucha\fP wynosi zero.
.TP
.B \-n \fI³añcuch\fP
.TP
\fI³añcuch\fP
Prawda je¶li
.I ³añcuch
ma d³ugo¶æ niezerow±.
.TP
\fI³añcuch1\fP \fB==\fP \fI³añcuch2\fP
Prawda je¶li ³añcuchy s± równe. Zamiast \fB==\fP mo¿na u¿yæ
\fB=\fP.
.TP
\fI³añcuch1\fP \fB!=\fP \fI³añcuch2\fP
Prawda je¶li ³añcuchy nie s± równe.
.TP
\fI³añcuch1\fP \fB<\fP \fI³añcuch2\fP
Prawda je¶li \fI³añcuch1\fP przy sortowaniu wystêpowa³by przed
\fI³añcuchem2\fP wed³ug bie¿±cego ustawienia locale.
.TP
\fI³añcuch1\fP \fB>\fP \fI³añcuch2\fP
Prawda je¶li \fI³añcuch1\fP przy sortowaniu wystêpowa³by po
\fI³añcuchu2\fP wed³ug bie¿±cego ustawienia locale.
.TP
.I \fIarg1\fP \fBOP\fP \fIarg2\fP
.SM
.B OP
jest jednym z
.BR \-eq ,
.BR \-ne ,
.BR \-lt ,
.BR \-le ,
.BR \-gt
lub
.BR \-ge .
Te arytmetyczne operatory dwuargumentowe zwracaj± prawdê je¶li \fIarg1\fP
jest odpowiednio równe (eq), nie równe (ne), mniejsze ni¿ (lt), mniejsze
b±d¼ równe (le), wiêksze ni¿ (gt) lub wiêksze b±d¼ równe (ge) \fIarg2\fP.
.I Arg1
i
.I arg2
mog± byæ dodatnimi lub ujemnymi liczbami ca³kowitymi.
.PD
.SH "INTERPRETACJA POLECEÑ PROSTYCH"
Gdy wykonywane jest polecenie proste, pow³oka wykonuje nastêpuj±ce
interpretacje, przypisania i przekierowania, od lewej do prawej.
.IP 1.
S³owa oznaczone przez analizator sk³adni jako przypisania zmiennych
(poprzedzaj±ce nazwê polecenia) i przekierowania zachowywane s± do
pó¼niejszego przetworzenia.
.IP 2.
S³owa, nie bêd±ce przypisaniami zmiennych ani przekierowaniami s±
interpretowane. Je¿eli po interpretacji pozostan± jakie¶ s³owa, to
pierwsze z nich przyjmowane jest za nazwê polecenia a pozosta³e za
argumenty.
.IP 3.
Wykonywane s± przekierowania, jak opisano powy¿ej w sekcji
.SM
.BR PRZEKIEROWANIE .
.IP 4.
W ka¿dym przypisaniu zmiennej tekst po znaku równo¶ci \fB=\fP
podlega interpretacji tyldy, interpretacji parametrów, podstawianiu wyników
poleceñ, interpretacji wyra¿eñ arytmetycznych i usuwaniu cudzys³owów,
zanim zostanie przypisany do zmiennej.
.PP
Je¿eli nie otrzymano ¿adnej nazwy polecenia, to przypisania zmienncyh
dotycz± ¶rodowiska aktualnej pow³oki. W przeciwnim razie, zmienne
s± dodawane do ¶rodowiska wykonywanego polecenia i nie maj± wp³ywu na
¶rodowisko bie¿±cej pow³oki. je¿eli które¶ z przypisañ usi³uje nadaæ
warto¶æ zmiennej read-only, pojawia siê b³±d, a polecenie koñczy pracê
z niezerowym kodem.
.PP
Je¿eli nie otrzymano ¿adnej nazwy polecenia, wykonywane s± przekierowania,
ale nie maj± one wp³ywu na bie¿±ce ¶rodowisko pow³oki. B³±d przekierowania
powoduje, ¿e polecenie koñczy pracê z niezerowym kodem.
.PP
Je¿eli po interpretacji istnieje nazwa polecenia, to wykonywanie odbywa siê
jak opisano poni¿ej. W przeciwnym wypadku, polecenie koñczy pracê.
Je¿eli jednym z wykonanych kroków by³o podstawienie wyników polecenia, to
zwracany kod zakoñczenia jest kodem ostatniego wykonanego podstawienia
polecenia. Je¶li nie wyst±pi³o podstawianie poleceñ, to polecenie koñczy
pracê z kodem zerowym.
.SH "WYKONYWANIE POLECEÑ"
Po podziale polecenia na s³owa, je¶li jego wynikiem jest polecenie proste z
opcjonaln± list± argumentów, podejmowane s± poni¿sze akcje.
.PP
Je¶li polecenie nie zawiera uko¶ników, pow³oka usi³uje je zlokalizowaæ.
je¿eli istnieje funkcja pow³oki o tej nazwie, wywo³ywana jest ta funkcja,
jak opisano powy¿ej w sekcji
.SM
.BR FUNKCJE .
Je¿eli nazwa nie pasuje do funkcji, pow³oka szuka jej na li¶cie poleceñ
wbudowanych. Je¿eli nie znaleziono pasuj±ce, to jest ono wywo³ywane.
.PP
Je¿eli nazwa nie jest ani funkcj± pow³oki ani poleceniem wbudowanym i nie
zawiera uko¶ników, to
.B bash
przeszukuje ka¿dy element z
.SM
.B PATH
usi³uj±c znale¼æ katalog zawieraj±cy plik wykonywalny o takiej nazwie.
.B Bash
pos³uguje siê tablic± mieszaj±c± (hash table) do zapamiêtywania pe³nych
nazw plików wykonywalnych (zobacz
.B hash
w
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej).
Pe³ne przeszukiwanie katalogów z
.SM
.B PATH
wykonywane jest tylko wtedy, gdy polecenia nie znaleziono w tablicy mieszaj±cej.
Je¿eli poszukiwanie nie powiod³o siê, pow³oka wypisuje komunikat o b³êdzie
i zwraca kod zakoñczenia równy 127.
.PP
Je¿eli poszukiwanie by³o pomy¶lne lub je¶li nazwa polecenia zawiera jeden
lub wiêcej uko¶ników, pow³oka wykonuje zadany program w odrêbnym ¶rodowisku
wykonania.
Argumentowi 0 przypisywana jest podana nazwa, a pozosta³ym argumentom
polecenia podane argumenty, je¶li by³y takowe.
.PP
Je¿eli wykonanie to nie powiedzie siê, gdy¿ plik nie ma formatu
wykonywalnego, a nie jest katalogiem, to zak³ada siê, ¿e jest on
\fIskryptem pow³oki\fP, plikiem zawieraj±cym polecenia pow³oki.
Powo³ywana jest podpow³oka do jego wykonania. Pow³oka ta reinicjuje
siê, zatem efekt jest taki, jakby do obs³ugi skryptu zosta³a wywo³ana nowa
pow³oka, z wyj±tkiem tego, ¿e po³o¿enia poleceñ zapamiêtane przez
rodzica (zobacz
.B hash
poni¿ej w
.SM
.B WBUDOWANE POLECENIA POW£OKI
s± zachowywane przez potomka.
.PP
Je¿eli program jest plikiem o zawarto¶ci rozpoczynaj±cej siê od
.BR #! ,
to reszta pierwszego wiersza okre¶la interpreter dla tego programu.
Pow³oka uruchamia podany interpreter na systemach operacyjnych, które
same nie obs³uguj± tego formatu wykonywalnego. Argumenty dla interpretera
sk³adaj± siê z pojedynczego opcjonalnego argumentu wystêpuj±cego po nazwie
interpretera w pierwszym wierszu programu, nastêpuj±cej po nim nazwy
programu i nastêpuj±cych po niej argumentów polecenia, je¶li by³y takowe.
.SH ¦RODOWISKO WYKONYWANIA POLECEÑ
Pow³oka posiada \fI¶rodowisko wykonywania\fP (execution environment),
sk³adaj±ce siê z:
.sp 1
.IP \(bu
otwarte pliki odziedziczone przez pow³okê przy wywo³aniu, zmodyfikowane
przez przekierowania przekazane do wbudowanego polecenia \fBexec\fP
.IP \(bu
bie¿±cy katalog roboczy ustawiony przez \fBcd\fP, \fBpushd\fP lub
\fBpopd\fP, albo odziedziczony przez pow³okê przy wywo³aniu
.IP \(bu
maskê trybut tworzonych plików ustawion± przez \fBumask\fP albo
odziedziczon± po rodzicu pow³oki
.IP \(bu
bie¿±ce pu³apki ustawione przez \fBtrap\fP
.IP \(bu
parametry pow³oki ustawione przez przypisania zmiennych przy pomocy \fBset\fP
albo odziedziczone ze ¶rodowiska rodzica pow³oki
.IP \(bu
funkcje pow³oki zdefiniowane podczas wykonywania lub odziedziczone
ze ¶rodowiska rodzica pow³oki
.IP \(bu
opcje w³±czone przy wywo³aniu (albo domy¶lnie albo przy pomocy argumentów
wiersza poleceñ) albo przez \fBset\fP
.IP \(bu
opcje w³±czone przez \fBshopt\fP
.IP \(bu
aliasy pow³oki zdefiniowane przy pomocy \fBalias\fP
.IP \(bu
ró¿ne id procesów, ³±cznie z identyfikatorami zadañ t³a, warto¶æ \fB$$\fP
i warto¶æ \fB$PPID\fP
.PP
Gdy ma zostaæ wykonane polecenie proste inne ni¿ funkcja pow³oki
lub polecenie wbudowane, wywo³ywane jest w odrêbnym ¶rodowisku wykonania,
sk³±daj±cych siê z poni¿szych elementów. Je¶li nie podano inaczej, warto¶ci
dziedziczone s± z pow³oki.
.sp 1
.IP \(bu
otwarte pliki pow³oki, plus modyfikacje i dodatki okre¶lone przez
przekierowania polecenia
.IP \(bu
bie¿±cy katalog roboczy
.IP \(bu
maska trybu tworzonych plików
.IP \(bu
zmienne pow³oki oznaczone do wyeksportowania, razem ze zmiennymi
wyeksportowanymi do polecenia, przekazane w ¶rodowisku.
.IP \(bu
pu³apki przechwycone przez pow³okê resetowane s± do warto¶ci
odziedziczonych przez ni± od rodzica, a pu³apki ignorowane przez pow³okê
s± ignorowane.
.PP
Polecenie wywo³ane w odrêbnym ¶rodowisku nie mo¿e wp³ywaæ na ¶rodowisko
wykonywania pow³oki.
.PP
Podstawienia wyników poleceñ i polecenia asynchroniczne wywo³ywane s± w
¶rodowisku podpow³oki, które jest kopi± ¶rodowiska pow³oki, z wyj±tkiem
tego, ¿e pu³apki przechwycone przez pow³okê s± resetowane do warto¶ci,
jakie pow³oka odziedziczy³a po rodzicu podczas wywo³ania. Polecenia
wbudowane wywo³ywane jako czê¶æ potoku równie¿ wykonywane s± w ¶rodowisku
podpow³oki. Zmiany wykonane w ¶rodowisku podpow³oki nie mog± wp³ywaæ na
¶rodowisko wykonywania pow³oki.
.PP
Je¿eli po poleceniu wystêpuje \fB&\fP, a nie uaktywniono sterowania zadaniami,
to domy¶lnym standardowym wej¶ciem dla tego polecenia jest pusty plik
\fI/dev/null\fP. W przeciwnym razie wywo³ywane polecenie dziedziczy
deskryptory plików po wo³aj±cej pow³oce, zmodyfikowane przekierowaniami.
.SH ¦RODOWISKO
Poczas wywo³ywania program otrzymuje tablicê ³añcuchów zwan±
.IR ¶rodowiskiem (environment).
jest to lista par
\fInazwa\fP\-\fIwarto¶æ\fP, o postaci
.IR "nazwa\fR=\fPwarto¶æ" .
.PP
Pow³oka pozwala na manipulowanie ¶rodowiskiem na kilka sposobów. Przy
wywo³aniu, przeszukuje ona w³asne ¶rodowisko i tworzy parametr dla ka¿dej
znalezionej nazwy, automatycznie zaznaczaj±c go do
.I wyeksportowania
do procesów potomnych. Wykonywane polecenia dziedzicz± ¶rodowisko.
Polecenia
.B export
i
.B declare \-x
pozwalaj± na dodawanie i usuwanie ze ¶rodowiska parametrów i funkcji.
Je¿eli w ¶rodowisku zmieniana jest warto¶æ parametru, to nowa warto¶æ
staje siê czê¶ci± ¶rodowiska, zastêpuj±c star±. ¦rodowisko dziedziczone
przez ka¿de wykonywane polecenie sk³ada siê z pocz±tkowego ¶rodowiska
pow³oki, którego warto¶ci mog± byæ w pow³oce zmieniane, minus ewentualne
pary usuniête poleceniem
.BR unset ,
plus dodane poprzez polecenia
.B export
i
.BR "declare \-x" .
.PP
¦rodowisko dla dowolnego
.I polecenia prostego
czy funkcji mo¿e byæ tymczasowo powiêkszone przez poprzedzenie polecenia
przypisaniem parametrów, jak opisano powy¿ej w sekcji
.SM
.BR PARAMETRY .
Te instrukcje przypisania maj± wp³yw wy³±cznie na ¶rodowisko postrzegane
przez to polecenie.
.PP
Je¿eli ustawiona jest opcja
.B \-k
(zobacz poni¿ej opis wbudowanego polecenia
.BR set ),
to
.I wszystkie
przypisania parametrów umieszczane s± w ¶rodowisku polecenia, a nie tylko
te, które poprzedzaj± nazwê polecenia.
.PP
Gdy
.B bash
wywo³uje polecenie zewnêtrzne, zmienna
.B _
ustawiana jest na pe³n± nazwê pliku polecenia i przekazywana temu poleceniu
w jego ¶rodowisku.
.SH "KOD ZAKOÑCZENIA"
Dla celów pow³oki, polecenie, które zakoñczy³o pracê z zerowym kodem
zakoñczenia, powiod³o siê. Zerowy kod oznacza powodzenie. Niezerowy kod
oznacza niepowodzenie. Gdy polecenie koñczy pracê z b³êdem krytycznym \fIN\fP,
\fIbash\fP pos³uguje siê warto¶ci± 128+\fBN\fP jako kodem zakoñczenia.
.PP
Je¿eli nie znaleziono polecenia, proces potomny powo³any do jego wykonania
zwraca kod 127. Je¿eli polecenie zosta³o znalezione, ale nie jest
wykonywalne, kod zakoñczenia wynosi 126.
.PP
Je¿eli polecenie nie powiod³o siê z powodu b³êdu podczas interpretacji lub
przekierowania, kod zakoñczenia jest wiêkszy od zera.
.PP
Wbudowane polecenia pow³oki zwracaj± kod 0 (\fItrue\fP prawda) je¶li siê
powiod³y, i niezerowy (\fIfalse\fP fa³sz) je¶li podczas ich wykonywania
pojawi³ siê b³±d.
Wszystkie polecenia wbudowane zwracaj± kod 2 dla wskazania niepoprawnego
u¿ycia.
.PP
Sam \fBBash\fP zwraca kod zakoñczenia ostatniego wykonanego polecenia,
chyba ¿e pojawi siê b³±d sk³adni, wówczas koñczy prac± z warto¶ci±
niezerow±. Zobacz te¿ poni¿ej polecenie wbudowane \fBexit\fP.
.SH SYGNA£Y
Gdy \fBbash\fP jest interaktywny, przy braku jakichkolwiek pu³apek (przechwytywania
sygna³ów), ignoruje on
.SM
.B SIGTERM
(tak, ¿e \fBkill 0\fP nie zabija pow³oki interaktywnej),
a
.SM
.B SIGINT
jest przechwytywany i obs³ugiwany (tak, ¿e wbudowane polecenie \fBwait\fP
daje siê przerwaæ).
We wszystkich przypadkach, \fBbash\fP ignoruje
.SM
.BR SIGQUIT .
Je¿eli dzia³a kontrola zadañ,
.B bash
ignoruje
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU
i
.SM
.BR SIGTSTP .
.PP
Zadania synchroniczne uruchomione przez \fBbash\fP maj± procedury obs³ugi
sygna³ów (signal handlers) ustawione na warto¶ci odziedziczone przez pow³okê
po rodzicu. Je¿eli nie pracuje kontrola zadañ, to polecenia asynchroniczne
ignoruj± równie¿
.SM
.B SIGINT
i
.SM
.BR SIGQUIT .
Polecenia uruchamiane wskutek podstawiania poleceñ ignoruj± generowane
z klawiatury sygna³y kontroli zadañ
.SM
.BR SIGTTIN ,
.SM
.BR SIGTTOU
i
.SM
.BR SIGTSTP .
.PP
Pow³oka domy¶lnie koñczy pracê po otrzymaniu
.SM
.BR SIGHUP .
Przed zakoñczeniem, pow³oka interaktywna rozsy³a otrzymany
.SM
.B SIGHUP
do wszystkich zadañ, pracuj±cych lub zatrzymanych.
Do zatrzymanych zadañ wysy³any jest
.SM
.B SIGCONT
by upewniæ siê, ¿e otrzymuj±
.SM
.BR SIGHUP .
Chc±c unikn±æ wys³ania sygna³u przez pow³okê do konkretnego zadania,
nale¿y usun±æ je z tablicy zadañ przy pomocy wbudowanego polecenia
.B disown
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" )
lub oznakowaæ, by nie otrzymywa³o
.SM
.BR SIGHUP ,
pos³uguj±c siê
.BR "disown \-h" .
.PP
Je¿eli przy pomocy
.B shopt
zosta³a ustawiona opcja
.B huponexit
pow³oki,
.B bash
wysy³a
.SM
.B SIGHUP
do wszystkich zadañ, gdy koñczy pracê interaktywna pow³oka zg³oszeniowa.
.PP
Gdy \fBbash\fP podczas oczekiwania na ukoñczenie polecenia otrzymuje
sygna³, dla którego ustawiono pu³apkê, pu³apka ta nie zostanie wykonana a¿
do zakoñczenia pracy polecenia.
Gdy \fBbash\fP oczekuje na polecenie asynchroniczne za po¶rednictwem
wbudowanego \fBwait\fP, odbiór sygna³u, dla którego ustawiono przechwytywanie
spowoduje, ¿e wbudowane \fBwait\fP natychmiast skoñczy pracê z kodem
wiêkszym od 128, po czym natychmiast zostanie wywo³ana pu³apka.
.SH "KONTROLA ZADAÑ"
.I Kontrola zadañ
odnosi siê do mo¿liwo¶ci selektywnego zatrzymywania (\fIzawieszania\fP -
suspend) wykonywania procesów i pó¼niejszej kontynuacji (\fIwznawiania\fP -
resume) ich wykonywania. U¿ytkownik zwykle wykorzystuje to udogodnienie za
po¶rednictwem interaktywnego interfejsu obs³ugiwanego wspólnie przez
systemowy sterownik terminala i
.BR bash .
.PP
Pow³oka kojarzy z ka¿dym potokiem
.IR zadanie .
Przechowuje tablicê aktualnie wykonywanych zadañ, któr± mo¿na przegl±daæ
za pomoc± polecenia
.BR jobs .
Gdy
.B bash
uruchamia zadanie asynchronicznie (w
.IR tle ),
wypisuje wiersz w rodzaju:
.RS
.PP
[1] 25647
.RE
.PP
wskazuj±cy, ¿e zadanie to ma numer 1 a ID ostatniego procesu w potoku
zwi±zanym z zadaniem wynosi 25647.
Wszystkie procesy w jednym potoku nale¿± do tego samego zadania.
.B Bash
pos³uguje siê abstrakcj± (abstraction)
.I zadania
jako podstaw± kontroli zadañ.
.PP
Dla u³atwienia implementacji interfejsu u¿ytkownika do kontroli zadañ,
system operacyjny utrzymuje pojêcie \fIID grupy procesów bie¿±cego
terminala\fP
(current terminal process group ID).
Elementy tej grupy procesów (procesy, których ID grupy procesów jest równy
ID grupy procesów bie¿±cego terminala) otrzymuj± generowane z klawiatury
sygna³y, takie jak
.SM
.BR SIGINT .
Mówimy, ¿e procesy te pracuj±
.IR pierwszoplanowo .
Procesy
.I t³a
to takie, których ID grupy procesów ró¿ni siê od terminala; procesy takie
s± odporne na sygna³y pochodz±ce z klawiatury.
Tylko procesom pierwszoplanowym wolno czytaæ z lub pisaæ na terminalu.
Do procesów t³a usi³uj±cych czytaæ (pisaæ) z terminala wysy³any jest
przez sterownik terminala sygna³
.SM
.BR "SIGTTIN (SIGTTOU)" ,
który, je¶li nie zostanie przechwycony, wstrzymuje proces.
.PP
Je¿eli system operacyjny, na którym dzia³a
.B bash
obs³uguje kontrolê zadañ,
.B bash
zawiera funkcje do jej wykorzystywania.
Naci¶niêcie klawisza
.I wstrzymania
(zwykle
.BR ^Z ,
Control-Z) podczas pracy procesu powoduje, ¿e proces ten zostanie zatrzymany
a sterowanie zostanie zwrócone do
.BR bash .
Naci¶niêcie klawisza
.I opó¼nione wstrzymanie
(zwykle
.BR ^Y ,
Control-Y) powoduje, ¿e proces zostanie zatrzymywany gdy bêdzie usi³owa³
czytaæ wej¶cie z terminala, a sterowanie powróci do
.BR bash .
U¿ytkownik mo¿e nastêpnie zmieniaæ stan takiego zadania, pos³uguj±c siê
poleceniem
.B bg
do kontynuacji zadania w tle,
.B fg
do kontynuacji na pierwszym planie lub poleceniem
.B kill
do zabicia zadania.
\fB^Z\fP dzia³a natychmiast i ma efekt uboczny: powoduje
odrzucenie oczekuj±cego wyj¶cia i wprowadzonych, a nieprzetworzonych
naci¶niêæ klawiszy (typeahead).
.PP
Istnieje kilka sposobów wskazywania zadania w pow³oce.
Znak
.B %
poprzedza nazwê zadania. Zadanie numer
.I n
mo¿na wskazaæ jako
.BR %n .
Zadanie mo¿e byæ te¿ okre¶lone przez u¿ycie przedrostka nazwy u¿ytej do
jego uruchomienia lub pod³añcucha, jaki wystêpuje w jego wierszu poleceñ.
Na przyk³ad,
.B %ce
odnosi siê do zatrzymanego zadania
.BR ce .
Je¶li przedrostek pasuje do wiêcej ni¿ jednego zadania,
.B bash
zg³asza b³±d. Z drugiej strony, u¿ycie
.BR %?ce ,
wskazuje na zadanie zawieraj±ce pod³añcuch
.B ce
w swym wierszu poleceñ. Je¿eli ³añcuch pasuje do wiêcej ni¿ jednego
zadania,
.B bash
zg³asza b³±d. Symbole
.B %%
i
.B %+
okre¶laj± rozumiane przez pow³okê
.\" shell's notion of the
.IR "bie¿±ce zadanie" ,
bêd±ce ostatnim zadaniem zatrzymanym, gdy by³o na pierwszym planie lub
uruchomionym w tle.
Do
.I "poprzedniego zadania"
mo¿na odwo³ywaæ siê przy pomocy
.BR %\- .
W wyj¶ciu odnosz±cym siê do zadañ (np. wyj¶cie polecenia
.BR jobs ),
bie¿±ce zadanie jest zawsze zaznaczone znakiem
.BR + ,
a zadanie poprzednie
.BR \- .
.PP
Do przywrócenia zadania na pierwszy plan mo¿na pos³u¿yæ siê po prostu jego
nazw±:
.B %1
jest synonimem dla
,,\fBfg %1\fP'',
przywracaj±cego zadanie 1 z t³a na pierwszy plan.
Podobnie,
,,\fB%1 &\fP''
wznawia zadanie 1 w tle, równowa¿nie do
,,\fBbg %1''\fP''.
.PP
Pow³oka natychmiast dowiaduje siê czy zadanie zmieni³o stan.
Normalnie,
.B bash
czeka ze zg³oszeniem zmian do momentu, gdy ma wy¶wietliæ zachêtê, by nie
przerywaæ innego wyj¶cia. Je¿eli w³±czono opcjê
.B \-b
wbudowanego polecenia
.BR set ,
.B bash
zg³asza takie zmiany natychmiast.
Dla ka¿dego koñcz±cego pracê procesu potomnego wykonywana jest ewentualna
pu³apka przechwytuj±ca
.SM
.BR SIGCHLD .
.PP
Je¿eli wykonano próbê zakoñczenia pracy
.B bash
przy istniej±cych zatrzymanych zadaniach, pow³oka wypisuje komunikat
ostrzegawczy. Mo¿na wówczas pos³u¿yæ siê poleceniem
.B jobs
do sprawdzenia ich stanu. Je¿eli wykonywana jest druga próba zakoñczenia
pracy bez wyst±pienia wtr±conego miêdzy nie polecenia, pow³oka
nie wypisuje kolejnego ostrze¿enia a zatrzymane zadania s± przerywane.
.SH ZACHÊTA POW£OKI
Przy wykonywaniu interaktywnym
.B bash
wy¶wietla g³ówny symbol zachêty (primary prompt)
.SM
.B PS1
kiedy jest gotowa na odczyt polecenia, za¶ wtórn± (secondary) zachêtê
.SM
.B PS2
kiedy potrzebuje wiêcej danych z wej¶cia do uzupe³nienia polecenia.
.B Bash
pozwala na dostosowywanie tych ³añcuchów zachêty poprzez wstawianie
pewnej ilo¶ci znaków specjalnych rozpoczynaj±cych siê odwrotnym
uko¶nikiem, które s± dekodowane jak nastêpuje:
.RS
.PD 0
.TP
.B \ea
znak dzwonka ASCII (07)
.TP
.B \ed
data w formacie "DzieñTyg Miesi±c Dzieñ" format (np., "Tue May 26")
.TP
.B \ee
znak escape ASCII (033)
.TP
.B \eh
nazwa hosta do pierwszej kropki `.'
.TP
.B \eH
nazwa hosta
.TP
.B \ej
liczba zadañ aktualnie obs³ugiwanych przez pow³okê
.TP
.B \el
g³ówna czê¶æ nazwy urz±dzenia terminala pow³oki
.TP
.B \en
znak nowej linii
.TP
.B \er
powrót karetki
.TP
.B \es
nazwa pow³oki, g³ówna czê¶æ nazwy
.B $0
(fragment wystêpuj±cy po ostatnim uko¶niku)
.TP
.B \et
bie¿±cy czas w formacie 24-godzinnym GG:MM:SS
.TP
.B \eT
bie¿±cy czas w formacie 12-godzinnym GG:MM:SS
.TP
.B \e@
bie¿±cy czas w 12-godzinnym formacie am/pm
.TP
.B \eA
bie¿±cy czas w 24-godzinnym formacie GG:MM
.TP
.B \eu
nazwa bie¿±cego u¿ytkownika (username)
.TP
.B \ev
wersja programu \fBbash\fP (np. 2.00)
.TP
.B \eV
wydanie \fBbash\fP, wersja+poziom ³at (np., 2.00.0)
.TP
.B \ew
bie¿±cy katalog roboczy
.TP
.B \eW
g³ówna czê¶æ nazwy bie¿±cego katalogu roboczego
.TP
.B \e!
numer tego polecenia w historii
.TP
.B \e#
numer polecenia tego polecenia
.TP
.B \e$
Je¿eli efektywnym UID jest 0, to
.BR # ,
w przeciwnym razie
.B $
.TP
.B \e\fInnn\fP
znak odpowiadaj±cy szesnastkowej liczbie \fInnn\fP
.TP
.B \e\e
odwrotny uko¶nik
.TP
.B \e[
pocz±tek sekwencji znaków niedrukowalnych, która mo¿e s³u¿yæ do osadzenia
w zachêcie sekwencji steruj±cych terminalem
.TP
.B \e]
koniec sekwencji znaków niedrukowalnych
.PD
.RE
.PP
Numer polecenia i numer w historii s± zwykle ró¿ne: numer polecenia
w historii jest jego pozycj± na li¶cie historii, która mo¿e obejmowaæ
polecenia odtworzone z pliku historii
(zobacz poni¿ej
.SM
.BR HISTORIA ),
podczas gdy numer polecenia jest pozycj± w sekwencji poleceñ wykonanych
w obecnej sesji pow³oki.
Po zdekodowaniu, ³añcuch jest interpretowany poprzez interpretacjê
parametrów, podstawianie wyników poleceñ, interpretacjê wyra¿eñ
arytmetycznych, interpretacjê ³añcuchów i usuwanie cytowañ, zgodnie
z warto¶ci± opcji
.B promptvars
pow³oki (zobacz opis polecenia
.B shopt
w sekcji
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej).
.SH READLINE
Jest to biblioteka obs³uguj±ca odczytywanie wej¶cia podczas pos³ugiwania siê
pow³ok± interaktywn±, chyba ¿e przy wywo³aniu pow³oki podano opcjê
.BR \-\-noediting .
Domy¶lnie, polecenia edycji wiersza s± podobne do wystêpuj±cych w emacsie.
Dostêpny jest tak¿e interfejs edycji wiersza w stylu vi.
By wy³±czyæ edycjê wiersza po uruchomieniu pow³oki, u¿yj opcji
.B +o emacs
lub
.B +o vi
wbudowanego polecenia
.B set
(zobacz
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
.SS "Notacja Readline"
.PP
W tej sekcji, do zapisu naci¶niêæ klawiszy u¿ywana jest notacja w stylu
emacsa. Klawisze kontrolne zapisywane s± jako  C\-\fIklawisz\fR, np., C\-n
oznacza Control\-N. Podobnie,
.I meta
klawisze zapisywane s± jako M\-\fIklawisz\fR, zatem M\-x oznacza Meta\-X.
(Na klawiaturach bez klawisza
.I meta
M\-\fIx\fP oznacza ESC \fIx\fP, tj. naci¶nij klawisz Escape a nastêpnie
klawisz
.IR x .
Czyni to ESC the \fIprzedrostkiem meta\fP (meta prefix).
Kombinacja M\-C\-\fIx\fP oznacza ESC\-Control\-\fIx\fP,
lub naci¶nij klawisz Escape, nastêpnie przytrzymaj klawisz Control podczas
naciskania klawisza
.IR x .)
.PP
Poleceniom readline mo¿na podawaæ numeryczne
.IR argumenty ,
które normalnie dzia³aj± jako licznik powtórzeñ.
Czasami jednak, znacz±cy jest znak argumentu. Przekazanie ujemnego argumentu
poleceniu, które dzia³a w przód (np. \fBkill\-line\fP) powoduje, ¿e bêdzie
ono dzia³aæ odwrotnym kierunku (wstecz).
Polecenia, których zachowanie z argumentami odbiega od podanego odnotowano
poni¿ej.
.PP
Gdy polecenie opisano jako \fIusuwaj±ce\fP (killing) tekst, tekst ten jest
zachowywany to ewentualnego pó¼niejszego odzyskania (\fIprzywo³ania\fP
yanking). Kolejne usuniêcia powoduj±, ¿e tekst jest zbierany w jedn±
ca³o¶æ, któr± mo¿na odzyskaæ naraz. Polecenia nie usuwaj±ce tekstu
oddzielaj± kawa³ki tekstu w stosie usuwania (killing ring).
.SS "Inicjalizacja Readline"
.PP
Readline dostosowywane jest przy pomocy poleceñ umieszczanych w pliku
inicjuj±cym (plik \fIinputrc\fP).
Nazwa tego pliku brana jest z warto¶ci zmiennej
.SM
.BR INPUTRC .
Je¿eli zmienna ta nie jest ustawiona, domy¶ln± nazw± jest
.IR ~/.inputrc .
Gdy startuje program u¿ywaj±cy biblioteki readline, odczytywany jest plik
inicjuj±cy, po czym ustawiane s± przypisania klawiszy i zmienne.
Istnieje tylko kilka podstawowych konstrukcjii dozwolonych w pliki
inicjacji readline.
Puste wiersze s± ignorowane.
Wiersze rozpoczynaj±ce siê od \fB#\fP s± komentarzami.
Wiersze rozpoczynaj±ce siê od \fB$\fP wskazuj± konstrukcje warunkowe.
Inne wiersze wyznaczaj± przypisania klawiszy i ustawienia zmiennych.
.PP
Domy¶lne przypisania klawiszy mo¿na zmieniæ przy pomocy pliku
.IR inputrc .
Inne programy pos³uguj±ce siê t± bibliotek± mog± dodawaæ w³asne polecenia
i przypisania.
.PP
Na przyk³ad, umieszczenie
.RS
.PP
M\-Control\-u: universal\-argument
.RE
lub
.RS
C\-Meta\-u: universal\-argument
.RE
w
.I inputrc
spowodowa³oby, ¿e M\-C\-u wywo³ywa³oby polecenie readline
.IR universal\-argument .
.PP
Rozpoznawane s± nastêpuj±ce symboliczne nazwy znaków:
.IR RUBOUT ,
.IR DEL ,
.IR ESC ,
.IR LFD ,
.IR NEWLINE ,
.IR RET ,
.IR RETURN ,
.IR SPC ,
.IR SPACE
i
.IR TAB .
.PP
Oprócz nazw poleceñ readline pozwala przypisywaæ klawisze do ³añcucha.
£añcuch ten zostanie wstawiony po naci¶niêciu klawisza (\fImakro\fP).
.SS "Przypisania klawiszy Readline"
.PP
Sk³adnia przypisañ klawiszy steruj±cych w pliku
.I inputrc
jest prosta. Wymagana jest wy³±cznie nazwa polecenia lub tekst makra
i sekwencja klawiszy, do której powinno byæ przypisane. Klawisze mog± byæ
podane na dwa sposoby:
jako symboliczna nazwa klawisza, mo¿e byæ z przedrostkami \fIMeta\-\fP
lub \fIControl\-\fP, lub jako sekwencja klawiszy.
.PP
Przy u¿yciu postaci \fBnazwa-klaw\fP:\^\fInazwa-funkcji\fP lub \fImakro\fP,
.I nazwa-klaw
jest nazw± klawisza zapisan± w jêz.angielskim. Na przyk³ad:
.sp
.RS
Control-u: universal\-argument
.br
Meta-Rubout: backward-kill-word
.br
Control-o: "> output"
.RE
.LP
W powy¿szym przyk³adzie,
.I C\-u
przypisane jest do funkcji
.BR universal\-argument ,
.I M\-DEL
przypisane jest do funkcji
.BR backward\-kill\-word
a
.I C\-o
przypisane do uruchamiania makra wyra¿onego po prawej (to jest,
wstawiania tekstu
.if t \f(CW> output\fP
.if n ,,> output''
w wiersz).
.PP
W drugiej postaci, \fB"sekw-klaw"\fP:\^\fInazwa-funkcji\fP lub \fImakro\fP,
.B sekw-klaw
ró¿ni siê od
.B nazwa-klaw
powy¿ej tym, ¿e przez umieszczenie sekwencji w cudzys³owach mo¿na podaæ
³añcuchy oznaczaj±ce ca³± sekwencjê klawiszy. Mo¿na pos³u¿yæ siê niektórymi
kombinacjami klawiszy w stylu GNU Emacs-a, jak w poni¿szym przyk³adzie,
nie s± jednak rozpoznawane symboliczne nazwy znaków:
.sp
.RS
"\eC\-u": universal\-argument
.br
"\eC\-x\eC\-r": re\-read\-init\-file
.br
"\ee[11~": "Klawisz funkcyjny 1"
.RE
.PP
W tym przyk³adzie,
.I C\-u
jest ponownie przypisane do funkcji
.BR universal\-argument .
.I "C\-x C\-r"
przypisane jest do funkcji
.BR re\-read\-init\-file ,
za¶
.I "ESC [ 1 1 ~"
przypisane jest do wstawienia tekstu
.if t \f(CWKlawisz funkcyjny 1\fP.
.if n ,,Klawisz funkcyjny 1''.
Oto pe³ny zestaw sekwencji specjalnych w stylu GNU Emacs
.RS
.PD 0
.TP
.B \eC\-
przedrostek control
.TP
.B \eM\-
przedrostek meta
.TP
.B \ee
znak escape
.TP
.B \e\e
odwrotny uko¶nik
.TP
.B \e"
dos³owny cudzys³ów "
.TP
.B \e'
dos³owny apostrof '
.RE
.PD
.PP
Oprócz sekwencji specjalnych w stylu GNU Emacsa, dostêpny jest drugi zestaw
sekwencji z u¿yciem odwrotnego uko¶nika:
.RS
.PD 0
.TP
.B \ea
alarm (dzwonek)
.TP
.B \eb
backspace
.TP
.B \ed
delete
.TP
.B \ef
wysuw strony (form feed)
.TP
.B \en
nowa linia (newline)
.TP
.B \er
powrót karetki (carriage return)
.TP
.B \et
tabulacja pozioma (horizontal tab)
.TP
.B \ev
tabulacja pionowa (vertical tab)
.TP
.B \e\fInnn\fP
o¶miobitowy znak, którego warto¶ci± jest ósemkowa liczba \fInnn\fP
(jedna do trzech cyfr)
.TP
.B \ex\fIHH\fP
o¶miobitowy znak, którego warto¶ci± jest szesnastkowa liczba \fInnn\fP
(jedna lub dwie cyfry szesnastkowe)
.RE
.PD
.PP
Podczas wprowadzania tekstu makra, do wskazania jego definicji musz± byæ
u¿yte pojedyncze lub podwójne cudzys³owy.
Zak³ada siê, ¿e tekst niecytowany jest nazw± funkcji.
W ciele makra interpretowane s± sekwencje specjalne z u¿yciem odwrotnego
uko¶nika opisane powy¿ej. odwrotny uko¶nik cytuje dowolny inny znak
w tek¶cie makra, ³±cznie z " i '.
.PP
.B Bash
umo¿liwia wy¶wietlanie i zmianê bie¿±cych przypisañ klawiszy readline
za pomoc± wbudowanego polecenia
.BR bind .
Tryb edycji mo¿na prze³±czaæ podczas u¿ywania interaktywnego przez pos³u¿enie
siê opcj±
.B \-o
wbudowanego polecenia
.B set
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
.SS "Zmienne Readline"
.PP
Readline posiada zmienne, których mo¿na u¿ywaæ do dodatkowego dostosowania
jej zachowania. Zmienna mo¿e byæ ustawiana w pliku
.I inputrc
przy pomocy instrukcji postaci
.RS
.PP
\fBset\fP \fInazwa\-zmiennej\fP \fIwarto¶æ\fP
.RE
.PP
Z wymienionymi ni¿ej wyj±tkami, zmienne readline mog± przyjmowaæ warto¶ci
.B On
lub
.BR Off .
A oto zmienne i ich warto¶ci domy¶lne:
.PP
.PD 0
.TP
.B bell\-style (audible)
Kontroluje, co dzieje siê gdy readline chce u¿yæ sygna³u d¼wiêkowego
terminala. Je¶li ustawiona na \fBnone\fI, readline nigdy nie emituje sygna³u.
Je¶li ustawiona na \fBvisible\fP, readline pos³uguje siê "widzialnym
dzwonkiem" (visible bell), je¶li jest dostêpny.
Je¿eli ustawiona na \fBaudible\fP, readline usi³uje uzyskaæ sygna³ d¼wiêkowy
z terminala.
.TP
.B comment\-begin (,,#'')
£añcuch wstawiany, gdy wykonywane jest polecenie
.B insert\-comment
readline.
Polecenie to jest przypisane do
.B M\-#
w trybie emacs, za¶ do
.B #
w trybie vi.
.TP
.B completion\-ignore\-case (Off)
Je¿eli ustawiona na \fBOn\fP, readline wykonuje dopasowywanie i uzupe³nianie
nazw plików bez rozró¿niania wielko¶ci liter.
.TP
.B completion\-query\-items (100)
Okre¶la, kiedy u¿ytkownik jest pytany o ogl±danie takiej liczby mo¿liwych
uzupe³nieñ tworzonych przez polecenie \fBpossible\-completions\fP.
Mo¿e byæ ustawiona na dowoln± liczbê ca³kowit± wiêksz± lub równ± zero.
Je¿eli liczba mo¿liwych uzupe³nieñ jest wiêksza b±d¼ równa warto¶ci tej
zmiennej, to u¿ytkownik jest pytany czy chce je ogl±dn±æ; w przeciwnym razie
s± one po prostu pokazywane na terminalu.
.TP
.B convert\-meta (On)
Je¶li ustawione na \fBOn\fP, readline bêdzie zamienia³ znaki z ustawionym
ósmym bitem na sekwencje klawiszy ASCII przez obciêcie ósmego bitu i
poprzedzenie znakiem escape (w efekcie, u¿ywaj±c escape jako
\fIprzedrostka meta\fP).
.TP
.B disable\-completion (Off)
Je¶li ustawione na \fBOn\fP, readline zabroni uzupe³niania s³ów. Znaki
uzupe³niania zostan± wstawione w wiersz tak, jakby zosta³y przypisane do
\fBself-insert\fP.
.TP
.B editing\-mode (emacs)
Kontroluje czy readline rozpoczyna pracê z zestawem przypisañ klawiszy
podobnym do \fIemacs\fP czy do \fIvi\fP.
.B editing\-mode
mo¿e byæ ustawiane albo na
.B emacs
albo na
.BR vi .
.TP
.B enable\-keypad (Off)
Gdy jest ustawione na \fBOn\fP, readline bêdzie usi³owaæ w³±czyæ
numeryczny blok klawiatury (application keypad) przy wywo³aniu.
Niektóre systemy potrzebuj± tego do w³±czenia klawiszy strza³ek.
.TP
.B expand\-tilde (Off)
Je¿eli ustawione na \fBon\fP, podczas próby uzupe³niania s³ów readline
wykonuje interpretacjê tyldy.
.TP
.B history-preserve-point
Ustawione na \fBon\fP powoduje, ¿e kod obs³ugi historii poleceñ usi³uje
w ka¿dym wierszu poleceñ odzyskanym za pomoc± \fBprevious-history\fP
lub \fBnext-history\fP umie¶ciæ punkt (bie¿±c± pozycjê kursora) w tym
samym miejscu.
.TP
.B horizontal\-scroll\-mode (Off)
Ustawione na \fBOn\fP powoduje, ¿e readline do wy¶wietlania pos³uguje siê
pojedynczym wierszem. Je¶li wej¶cie jest d³u¿sze ni¿ szeroko¶æ ekranu,
to jego zawarto¶æ jest wówczas przewijana w poziomie w pojedynczym wierszu
ekranu, zamiast zawijania do nastêpnego wiersza.
.TP
.B input\-meta (Off)
Je¶li ustawiona na \fBOn\fP, readline dopu¶ci o¶miobitowe wej¶cie (to znaczy,
nie bêdzie obcinaæ ósmego bitu z odczytywanych znaków), bez wzglêdu na to,
.\" the high bit
co twierdzi terminal o mo¿liwo¶ci obs³ugi. Nazwa
.B meta\-flag
jest synonimem tej zmiennej.
.TP
.B isearch\-terminators (,,C\-[C\-J'')
£añcuch znaków, który powinien przerywaæ wyszukiwanie krokowe
(incremental search) bez pó¼niejszego wykonywania znaku jako polecenia.
Je¿eli zmiennej tej nie nadano warto¶ci, to wyszukiwanie krokowe bêd±
przerywaæ \fIESC\fP i \fIC\-J\fP.
.TP
.B keymap (emacs)
Ustawia bie¿±ce mapowanie klawiatury readline. Zestawami poprawnych mapowañ
s±
.IR emacs ,
.IR emacs\-standard ,
.IR emacs\-meta ,
.IR emacs\-ctlx ,
.IR vi ,
.I vi\-command\fP
i
.IR vi\-insert .
\fIvi\fP jest równowa¿nikiem dla \fIvi\-command\fP; \fIemacs\fP jest
równowa¿ne \fIemacs\-standard\fP. Domy¶ln± warto¶ci± jest
.IR emacs ;
warto¶æ
.B editing\-mode
równie¿ wp³ywa na domy¶lne mapowanie.
.TP
.B mark\-directories (On)
Je¿eli ustawione na \fBOn\fP, to uzupe³niane nazwy katalogów maj± do³±czany
koñcowy uko¶nik.
.TP
.B mark\-modified\-lines (Off)
Je¿eli ustawione na \fBOn\fP, wiersze historii, które zosta³y zmienione
wy¶wietlane s± z poprzedzaj±c± je gwiazdk± (\fB*\fP).
.TP
.B match\-hidden\-files (On)
Ta zmienna, gdy jest ustawiona na \fBOn\fP, powoduje, ¿e readline wykonuj±c
uzupe³nianie nazw plików dopasowuje pliki, których nazwy zaczynaj± siê od
kropki `.' (pliki ukryte), chyba ¿e u¿ytkownik poda³ tak± pocz±tkow± kropkê
w nazwie, jaka ma byæ uzupe³niona.
.TP
.B output\-meta (Off)
Je¿eli ustawione na \fBOn\fP, readline wy¶wietla znaki z ustawionym ósmym
bitem wprost zamiast jako sekwencje specjalne z meta-przedrostkiem.
.TP
.B print\-completions\-horizontally (Off)
Je¿eli ustawione na \fBOn\fP, readline wy¶wietla dopasowane uzupe³nienia
w kolejno¶ci alfabetycznej poziomo, zamiast w dó³ ekranu.
.TP
.B show\-all\-if\-ambiguous (Off)
Zmienia to domy¶lne zachowanie funkcji uzupe³niania. Je¿eli jest
ustawione na
.BR on ,
to s³owa maj±ce wiêcej ni¿ jedno mo¿liwe uzupe³nienie powoduj±, ¿e
natychmiast zostan± podane dopasowania zamiast wyemitowania sygna³u
d¼wiêkowego.
.TP
.B visible\-stats (Off)
Je¿eli ustawione na \fBOn\fP, to przy wy¶wietlaniu mo¿liwych uzupe³nieñ
do nazwy pliku zostanie do³±czony znak okre¶laj±cy typ pliku wskazywany
przez \fIstat\fP(2).
.PD
.SS "Konstrukcje warunkowe Readline"
.PP
Readline implementuje udogodnienie podobne duchem do funkcji kompilacji
warunkowej preprocesora C, pozwalaj±ce na wykonywanie przypisañ klawiszy
i ustawieñ zmiennych w zale¿no¶ci od wyniku testów. U¿ywane s± cztery
dyrektywy analizatora sk³adni.
.IP \fB$if\fP
Konstrukcja
.B $if
pozwala na wykonanie przypisañ klawiszy w oparciu o tryb edycji, u¿ywany
terminal lub aplikacjê korzystaj±c± z readline. Tekst testu rozci±ga siê
do koñca wiersza; do jego wydzielenia nie s± wymagane ¿adne znaki.
.RS
.IP \fBmode\fP
Postaæ \fBmode=\fP dyrektywy \fB$if\fP s³u¿y do sprawdzania czy readline
jest w trybie emacs czy vi. Mo¿e byæ wykorzystywana, na przyk³ad, w po³±czeniu
z poleceniem \fBset keymap\fP, do ustawienia przypisañ w mapowaniach
\fIemacs\-standard\fP i \fIemacs\-ctlx\fP tylko je¶li readline uruchamia siê
w trybie emacs.
.IP \fBterm\fP
Postaæ \fBterm=\fP mo¿na wykorzystywaæ do w³±czenia specyficznych dla
terminala przypisañ klawiszy, byæ mo¿e do przypisania wyj¶cia dla sekwencji
klawiszy funkcyjnych terminala. S³owo po prawej stronie
.B =
sprawdzane jest z zarówno pe³n± nazw± terminala, jaki i czê¶ci± jego nazwy
przed pierwszym \fB\-\fP. Umo¿liwia to, na przyk³ad, dopasowanie przez
.I sun
zarówno
.I sun
jak i
.IR sun\-cmd .
.IP \fBaplikacja\fP
Konstrukcja \fBaplikacja\fP s³u¿y do w³±czania ustawieñ specyficznych
dla aplikacji. Ka¿dy program korzystaj±cy z biblioteki readline ustawia
nazwê aplikacji (\fIapplication name\fP), a plik inicjuj±cy mo¿e
sprawdziæ czy ma ona jak±¶ szczególn± warto¶æ.
Mo¿e to byæ u¿ywane do przypisywania sekwencji klawiszy funkcjom przydatnym
w danym programie. Na przyk³ad, poni¿sze polecenie dodaje sekwencjê klawiszy
wykonuj±c± w bash cytowanie bie¿±cego lub poprzedniego s³owa:
.sp 1
.RS
.nf
\fB$if\fP Bash
# Cytuj bie¿±ce lub poprzednie s³owo
"\eC\-xq": "\eeb\e"\eef\e""
\fB$endif\fP
.fi
.RE
.RE
.IP \fB$endif\fP
Polecenie to, jak widaæ w poprzednim przyk³adzie, koñczy wykonywanie
polecenia \fB$if\fP.
.IP \fB$else\fP
Polecenia w tej ga³êzi dyrektywy \fB$if\fP wykonywane s± gdy nie powiedzie
siê sprawdzenie warunku.
.IP \fB$include\fP
Dyrektywa ta pobiera jako argument pojedyncz± nazwê pliku i odczytuje
polecenia i przypisania z tego pliku. Na przyk³ad, poni¿sza dyrektywa
odczyta³aby \fI/etc/inputrc\fP:
.sp 1
.RS
.nf
\fB$include\fP \^ \fI/etc/inputrc\fP
.fi
.RE
.SS Wyszukiwanie
.PP
Readline zapewnia polecenia do wyszukiwania w historii poleceñ
(zobacz poni¿ej
.SM
.BR HISTORIA )
wierszy zawieraj±cych zadany ³añcuch.
Istniej± dwa tryby wyszukiwania:
.I krokowy
(incremental) i
.IR nie-niekrokowy (non-incremental).
.PP
Wyszukiwania krokowe rozpoczynaj± siê przed zakoñczeniem wpisywania przez
u¿ytkownika szukanego tekstu.
Po wpisaniu ka¿dego znaków szukanego ³añcucha readline wy¶wietla nastêpn±
pozycjê historii pasuj±c± do wpisanego do tej pory ³añcucha.
Wyszukiwanie krokowe wymaga tylko tylu znaków ile potrzebne jest do
znalezienia po¿±danej pozycji historii.
Znaki wystêpuj±ce w warto¶ci zmiennej \fBisearch-terminators\fP s³u¿±
do przerwania wyszukiwania krokowego.
Je¿eli zmienna ta nie ma przypisanej warto¶ci, to wyszukiwanie przerywaj±
znaki Escape i Control-J.
Control-G porzuca wyszukiwanie krokowe i przywraca pierwotny wiersz.
Gdy przerwie siê wyszukiwanie, pozycja historii zawieraj±ca poszukiwany
³añcuch staje siê bie¿±cym wierszem.
.PP
W celu odnalezienia innych pasuj±cych pozycji, nale¿y nacisn±æ odpowiednio
Control-S lub Control-R.
Wyszukuje to wstecz lub w przód kolejn± pasuj±c± do dotychczas wpisanego
³añcucha pozycjê historii.
Wszystkie inne sekwencje klawiszy przypisane do polecenia readline przerywaj±
wyszukiwanie i wykonuj± zadane polecenie.
Na przyk³ad, znak \fInowej linii\fP przerywa wyszukiwanie i akceptuje
wiersz, wykonuj±c skutkiem tego polecenie z listy historii.
.PP
Readline pamiêta ³añcuch u¿yty w ostatnim wyszukiwaniu krokowym. Je¿eli
Control-R zostanie naci¶niête dwa razy, bez wprowadzenia pomiêdzy
naci¶niêciami innych znaków definiuj±cych nowy ³añcuch szukania,
to wykorzystywany jest uprzednio zapamiêtany ³añcuch.
.PP
Wyszukiwania nie-krokowe czytaj± ca³y szukany ³añcuch przed rozpoczêciem
wyszukiwania pasuj±cych wierszy historii. £añcuch mo¿e byæ wpisany przez
u¿ytkownika lub byæ czê¶ci± zawarto¶ci bie¿±cego wiersza.
.SS "Nazwy poleceñ Readline"
.PP
Poni¿ej podano listê nazw poleceñ i domy¶lnych sekwencji klawiszy, do
których s± one przypisane.
Nazwy poleceñ bez towarzysz±cej sekwencji klawiszy s± domy¶lnie nieprzypisane.
W poni¿szych opisach, \fIpunkt\fP oznacza bie¿±c± pozycjê kursora, za¶
\fIzaznaczenie\fP do pozycji kursora zapamiêtanej przez polecenie
\fBset\-mark\fP.
Tekst pomiêdzy punktem a zaznaczeniem nazywany jest \fIobszarem\fP.
.SS Polecenia ruchu
.PP
.PD 0
.TP
.B beginning\-of\-line (C\-a)
Przesuwa na pocz±tek bie¿±cego wiersza.
.TP
.B end\-of\-line (C\-e)
Przesuwa na koniec wiersza.
.TP
.B forward\-char (C\-f)
Przesuwa o znak w przód.
.TP
.B backward\-char (C\-b)
Przesuwa o znak wstecz.
.TP
.B forward\-word (M\-f)
Przesuwa na koniec nastêpnego s³owa. S³owa z³o¿one s± ze znaków
alfanumerycznych (liter i cyfr).
.TP
.B backward\-word (M\-b)
Przesuwa na pocz±tek bie¿±cego, lub poprzedniego, s³owa. S³owa z³o¿one s±
ze znaków alfanumerycznych (liter i cyfr).
.TP
.B clear\-screen (C\-l)
Czy¶ci ekran pozostawiaj±c bie¿±cy wiersz na górze ekranu. Z argumentem,
od¶wie¿a bie¿±cy wiersz bez czyszczenia ekranu.
.TP
.B redraw\-current\-line
Od¶wie¿a bie¿±cy wiersz.
.PD
.SS Polecenia operuj±ce na historii
.PP
.PD 0
.TP
.B accept\-line (Newline, Return)
Akceptuje wiersz bez wzglêdu na to, gdzie znajduje siê kursor. Je¿eli
wiersz ten nie jest pusty, to dodaje go do listy historii stosownie do
stanu zmiennej
.SM
.BR HISTCONTROL .
Je¿eli wiersz jest zmienionym wierszem historii, to odtwarza wiersz
historii do stanu pierwotnego.
.TP
.B previous\-history (C\-p)
¦prowadza poprzednie polecenie z listy historii, przesuwaj±c siê wstecz listy.
.TP
.B next\-history (C\-n)
¦ci±ga nastêpne polecenie z listy historii, przesuwaj±c siê do przodu na
li¶cie.
.TP
.B beginning\-of\-history (M\-<)
Przesuwa na pierwszy wiersz w historii.
.TP
.B end\-of\-history (M\->)
Przesuwa na koniec historii wprowadzania, tj. obecnie wprowadzanego
wiersza.
.TP
.B reverse\-search\-history (C\-r)
Wyszukuje wstecz poczynaj±c od bie¿±cego wiersza i przesuwaj±c siê, w razie
potrzeby, 'w górê' historii. Jest to wyszukiwanie krokowe.
.TP
.B forward\-search\-history (C\-s)
Wyszukuje w przód poczynaj±c od bie¿±cego wiersza i przesuwaj±c siê, w
razie potrzeby, 'w dó³' historii. Jest to wyszukiwanie krokowe.
.TP
.B non\-incremental\-reverse\-search\-history (M\-p)
Wyszukuje wstecz poczynaj±c od bie¿±cego wiersza pos³uguj±c siê
wyszukiwaniem nie-krokowym podanego przez u¿ytkownika ³añcucha.
.TP
.B non\-incremental\-forward\-search\-history (M\-n)
Wyszukuje w przód poczynaj±c od bie¿±cego wiersza pos³uguj±c siê
wyszukiwaniem nie-krokowym podanego przez u¿ytkownika ³añcucha.
.TP
.B history\-search\-forward
Wyszukuje w przód w historii ³añcucha znaków pomiêdzy pocz±tkiem bie¿±cego
wiersza a punktem.
Jest to wyszukiwanie nie-krokowe.
.TP
.B history\-search\-backward
Wyszukuje wstecz w historii ³añcucha znaków pomiêdzy pocz±tkiem bie¿±cego
wiersza a bie¿±c± pozycj± kursora (\fIpunkt\fP).
Jest to wyszukiwanie nie-krokowe.
.TP
.B yank\-nth\-arg (M\-C\-y)
Wstawia pierwszy argument poprzedniego polecenia (zwykle drugie s³owo
z poprzedniego wiersza) w punkt (bie¿±c± pozycjê kursora). Z argumentem
.IR n ,
wstawia \fIn\fP-te s³owo poprzedniego polecenia (s³owa w poprzednim
poleceniu zaczynaj± siê od s³owa 0). Argument ujemny wstawia \fIn\fP-te
s³owo od koñca poprzedniego polecenia.
.TP
.B
yank\-last\-arg (M\-.\^, M\-_\^)
Wstawia ostatni argument poprzedniego polecenia (ostatnie s³owo poprzedniej
pozycji historii). Z argumentem, zachowuje siê dok³adnie tak, jak
\fByank\-nth\-arg\fP.
Kolejne wywo³ania \fByank\-last\-arg\fP przesuwaj± wstecz listy historii,
wstawiaj±c po kolei ostatni argument ka¿dego wiersza.
.TP
.B shell\-expand\-line (M\-C\-e)
Interpretuj wiersz, jak czyni to pow³oka. Wykonuje to aliasy
i interpretacjê historii, jak równie¿ interpretacjê s³ów pow³oki. Zobacz
.SM
.B INTERPRETACJA HISTORII
poni¿ej.
.TP
.B history\-expand\-line (M\-^)
Wykonuje interpretacjê pow³oki w odniesieniu do bie¿±cego wiersza.
Zobacz
.SM
.B INTERPRETACJA HISTORII
poni¿ej.
.TP
.B magic\-space
Wykonuje interpretacjê pow³oki w odniesieniu do bie¿±cego wiersza i wstawia
spacjê.
Zobacz
.SM
.B INTERPRETACJA HISTORII
poni¿ej.
.TP
.B alias\-expand\-line
Wykonuje interpretacjê aliasów w odniesieniu do bie¿±cego wiersza.
Zobacz
.SM
.B ALIASY
powy¿ej.
.TP
.B history\-and\-alias\-expand\-line
Wykonuje interpretacjê historii i aliasów w odniesieniu do bie¿±cego
wiersza.
.TP
.B insert\-last\-argument (M\-.\^, M\-_\^)
Synonim \fByank\-last\-arg\fP.
.TP
.B operate\-and\-get\-next (C\-o)
Akceptuje do wykonania bie¿±cy wiersz i ¶ci±ga do edycji nastêpny
wzglêdem bie¿±cego wiersz z historii. Argumenty s± ignorowane.
.PD
.SS Polecenia zmiany tekstu
.PP
.PD 0
.TP
.B delete\-char (C\-d)
Usuwa znak w punkcie (pod kursorem).
Je¿eli punkt jest pocz±tkiem wiersza, nie ma ¿adnych znaków w wierszu,
a ostatni wpisany znak zosta³ przypisany do \fBdelete\-char\fP, to zwraca
.SM
.BR EOF .
.TP
.B backward\-delete\-char (Rubout)
Usuwa znak przed kursorem. Je¿eli podano argument numeryczny, zachowuje
usuniêty tekst na stosie usuniêæ.
.\" on the kill ring.
.TP
.B forward\-backward\-delete\-char
Usuwa znak pod kursorem, chyba ¿e kursor znajduje siê na koñcu wiersza,
wówczas usuwany jest znak przed kursorem.
.TP
.B quoted\-insert (C\-q, C\-v)
Dodaje nastêpny znak do wiersza dos³ownie. W ten sposób wstawiane s± znaki
takie, jak na przyk³ad \fBC\-q\fP.
.TP
.B tab\-insert (C\-v TAB)
Wstawia znak tabulacji.
.TP
.B self\-insert (a,\ b,\ A,\ 1,\ !,\ ...)
Wstawia wpisany znak.
.TP
.B transpose\-chars (C\-t)
Zamienia miejscami znak sprzed punktu ze znakiem w punkcie, równocze¶nie
przesuwaj±c punkt w przód. Je¿eli punkt jest na koñcu wiersza to
zamienia to miejscami dwa znaki przed punktem. Argumenty ujemne nie skutkuj±.
.TP
.B transpose\-words (M\-t)
Zamienia miejscami s³owo sprzed punktu ze s³owem za punktem, przesuwaj±c
równocze¶nie punkt za przesuniête sprzed niego s³owo.
Je¿eli punkt jest na koñcu wiersza to zamienia to miejscami dwa ostanie s³owa
wiersza.
.TP
.B upcase\-word (M\-u)
Zamienia na wielkie litery bie¿±ce (lub nastêpne) s³owo. Z argumentem ujemnym
zamienia na wielkie litery poprzednie s³owo, ale nie przesuwa punktu.
.TP
.B downcase\-word (M\-l)
Zamienia na ma³e litery bie¿±ce (lub nastêpne) s³owo. Z argumentem ujemnym
zamienia na ma³e litery poprzednie s³owo, ale nie przesuwa punktu.
.TP
.B capitalize\-word (M\-c)
Zamienia na kapitaliki (pierwsza litera wielka, pozosta³e ma³e) bie¿±ce
(nastêpne) s³owo. Z argumentem ujemnym zamienia na kapitaliki poprzednie
s³owo, ale nie przesuwa punktu.
.PD
.SS Usuwanie i wklejanie
.PP
.PD 0
.TP
.B kill\-line (C\-k)
Usuwa tekst od punktu do koñca wiersza.
.TP
.B backward\-kill\-line (C\-x Rubout)
Usuwa wstecz do pocz±tku wiersza.
.TP
.B unix\-line\-discard (C\-u)
Usuwa wstecz od punktu do pocz±tku wiersza. Usuwany tekst jest zachowywany
na stosie usuniêæ.
.\" Nie ma ¿adnej faktycznej ró¿nicy miêdzy tym a backward-kill-line
.TP
.B kill\-whole\-line
Usuwa wszystkie znaki bie¿±cego wiersza, bez wzglêdu na po³o¿enie punktu.
.TP
.B kill\-word  (M\-d)
Usuwa od punktu do koñca bie¿±cego s³owa, lub je¶li u¿yte pomiêdzy
s³owami, do koñca nastêpnego s³owa. Granice s³ów s± takie same, jak u¿ywane
przez \fBforward\-word\fP.
.TP
.B backward\-kill\-word (M\-Rubout)
Usuwa s³owo sprzed punktu. Granice s³ów s± takie same, jak u¿ywane
przez \fBbackward\-word\fP.
.TP
.B unix\-word\-rubout (C\-w)
Usuwa s³owo sprzed punktu, jako separatora s³ów u¿ywaj±c bia³ych znaków.
Usuniêty tekst zachowywany jest na stosie usuniêæ.
.TP
.B delete\-horizontal\-space (M\-\e)
Usuwa wszystkie spacje i tabulatory wokó³ punktu.
.TP
.B kill\-region
Usuwa tekst w bie¿±cym obszarze.
.TP
.B copy\-region\-as\-kill
Kopiuje tekst obszaru do bufora usuwania.
.TP
.B copy\-backward\-word
Kopiuje s³owo sprzed punktu do bufora usuwania.
Granice s³ów s± takie same, jak dla \fBbackward\-word\fP.
.TP
.B copy\-forward\-word
Kopiuje s³owo wystêpuj±ce po punkcie do bufora usuwania.
Granice s³ów s± takie same, jak dla \fBforward\-word\fP.
.TP
.B yank (C\-y)
Wkleja wierzcho³ek stosu usuniêæ do bufora w punkcie (w miejscu kursora).
.TP
.B yank\-pop (M\-y)
Obraca stos usuniêæ i wkleja nowy wierzcho³ek. Dzia³a tylko nastêpuj±c po
.B yank
lub
.BR yank\-pop .
.PD
.SS Argumenty numeryczne
.PP
.PD 0
.TP
.B digit\-argument (M\-0, M\-1, ..., M\-\-)
Dodaje tê cyfrê do ju¿ sk³adanego argumentu lub rozpoczyna nowy argument.
M\-\- rozpoczyna argument ujemny.
.TP
.B universal\-argument
Jest to inna metoda podawania argumentu.
Je¿eli po tym poleceniu wystêpuje jedna lub wiêcej cyfr, z opcjonalnym
pocz±tkowym znakiem minus, to cyfry te definiuj± argument.
Je¿eli po poleceniu wystêpuj± cyfry, to powtórne wykonanie
.B universal\-argument
koñczy argument numeryczny, ale w przeciwnym wypadku jest ignorowane.
W przypadku specjalnym, je¿eli bezpo¶rednio po tym poleceniu wystêpuje
znak nie bêd±cy ani cyfr± ani znakiem minus, to argument licznik dla
nastêpnego polecenia mno¿ony jest przez cztery.
Argument licznik [zwykle powtórzeñ] wynosi pocz±tkowo cztery, tote¿
wykonanie tej funkcji po raz pierwszy nadaje mu warto¶æ cztery, po raz
drugi szesna¶cie, i tak dalej.
.PD
.SS Uzupe³nianie
.PP
.PD 0
.TP
.B complete (TAB)
Usi³uje przeprowadziæ uzupe³nianie tekstu przed punktem.
.B Bash
próbuje uzupe³niania traktuj±c tekst kolejno: jako zmienn± (je¿eli tekst
zaczyna siê od \fB$\fP), nazwê u¿ytkownika (je¶li tekst zaczyna siê od
\fB~\fP), nazwê hosta (i je¶li tekst zaczyna siê od \fB@\fP) lub polecenie
(³±cznie z aliasami i funkcjami). Je¿eli ¿adne z powy¿szych nie daje
dopasowania, to próbowane jest uzupe³nianie nazw plików.
.TP
.B possible\-completions (M\-?)
Pokazuje mo¿liwe uzupe³nienia tekstu przed punktem.
.TP
.B insert\-completions (M\-*)
Wstawia przed punktem wszystkie uzupe³nienia tekstu, które zosta³yby
wygenerowane przez \fBpossible\-completions\fP.
.TP
.B menu\-complete
Podobne do \fBcomplete\fP, ale zastêpuje s³owo, jakie ma zostaæ
uzupe³nione pojedynczym uzupe³nieniem z listy mo¿liwych.
Powtarzane wykonanie \fBmenu\-complete\fP powoduje krokowe przechodzenie
przez listê mo¿liwych uzupe³nieñ i wstawianie ka¿dego z nich po kolei
(zamiast uzupe³nianego s³owa).
Na koñcu listy uzupe³nieñ emitowany jest sygna³ d¼wiêkowy (zale¿ny od
ustawienia \fBbell\-style\fP) i przywracany jest pierwotny tekst.
Argument \fIn\fP przesuwa \fIn\fP pozycji w przód na li¶cie dopasowañ;
do przesuwania siê wstecz mo¿na u¿yæ argumentu ujemnego. Polecenie
w zamierzeniu ma byæ przypisane do klawisza \fBTAB\fP, ale domy¶lnie
nie jest przypisane.
.TP
.B delete\-char\-or\-list
Usuwa znak pod kursorem, je¶li nie jest to pocz±tek b±d¼ koniec wiersza
(jak \fBdelete\-char\fP). Na koñcu wiersza, zachowuje siê identycznie jak
\fBpossible\-completions\fP. To polecenie jest domy¶lnie nieprzypisane.
.TP
.B complete\-filename (M\-/)
Usi³uje wykonaæ uzupe³nianie nazw plików na tek¶cie sprzed kursora.
.TP
.B possible\-filename\-completions (C\-x /)
Pokazuje mo¿liwe uzupe³nienia tekstu sprzed kursora, traktuj±c go jak nazwê
pliku.
.TP
.B complete\-username (M\-~)
Usi³uje wykonaæ uzupe³nianie tekstu sprzed kursora, traktuj±c go jak nazwê
u¿ytkownika.
.TP
.B possible\-username\-completions (C\-x ~)
Pokazuje mo¿liwe uzupe³nienia tekstu sprzed kursora, traktuj±c go jak nazwê
u¿ytkownika.
.TP
.B complete\-variable (M\-$)
Usi³uje wykonaæ uzupe³nianie tekstu sprzed kursora, traktuj±c go jak
zmienn± pow³oki.
.TP
.B possible\-variable\-completions (C\-x $)
Pokazuje mo¿liwe uzupe³nienia tekstu sprzed kursora, traktuj±c go jak
zmienn± pow³oki.
.TP
.B complete\-hostname (M\-@)
Usi³uje wykonaæ uzupe³nianie tekstu sprzed kursora, traktuj±c go jak
nazwê hosta.
.TP
.B possible\-hostname\-completions (C\-x @)
Pokazuje mo¿liwe uzupe³nienia tekstu sprzed kursora, traktuj±c go jak
nazwê hosta.
.TP
.B complete\-command (M\-!)
Usi³uje uzupe³niæ tekst sprzed punktu, traktuj±c go jak nazwê polecenia.
Uzupe³nianie polecenia próbuje dopasowaæ tekst kolejno do aliasów, s³ów
zastrze¿onych, funkcji pow³oki, poleceñ wbudowanych pow³oki i wreszcie
nazw plików wykonywalnych.
.TP
.B possible\-command\-completions (C\-x !)
Pokazuje mo¿liwe uzupe³nienia tekstu sprzed kursora, traktuj±c go jak
nazwê polecenia.
.TP
.B dynamic\-complete\-history (M\-TAB)
Usi³uje uzupe³niæ tekst sprzed kursora, w celu odnalezienia
mo¿liwych uzupe³nieñ porównuj±c go z wierszami listy historii.
.TP
.B complete\-into\-braces (M\-{)
Wykonuje uzupe³nianie nazwy pliku i wstawia listê mo¿liwych uzupe³nieñ ujêt±
w nawiasy klamrowe, tak ¿e jest ona dostêpna dla pow³oki (zobacz powy¿ej
.BR "Interpretacja nawiasów" ).
.PD
.SS Makra klawiaturowe
.PP
.PD 0
.TP
.B start\-kbd\-macro (C\-x (\^)
Rozpoczyna zachowywanie wpisywanych znaków w bie¿±cym makrze klawiaturowym.
.TP
.B end\-kbd\-macro (C\-x )\^)
Zatrzymuje zachowywanie wpisywanych znaków w bie¿±cym makrze klawiaturowym
i przechowuje definicjê.
.TP
.B call\-last\-kbd\-macro (C\-x e)
Ponownie wykonuje zdefiniowane makro klawiaturowe, powoduj±c
pojawianie siê znaków makra tak, jakby zosta³y wpisane z klawiatury.
.PD
.SS Ró¿ne
.PP
.PD 0
.TP
.B re\-read\-init\-file (C\-x C\-r)
Odczytuje zawarto¶æ pliku \fIinputrc\fP i do³±cza wszystkie
znalezione tam przypisania klawiszy i zmiennych.
.TP
.B abort (C\-g)
Zaniechuje bie¿±cego polecenia edycji i emituje sygna³ d¼wiêkowy terminala
(zgodnie z ustawieniami
.BR bell\-style ).
.TP
.B do\-uppercase\-version (M\-a, M\-b, M\-\fIx\fP, ...)
Je¿eli poprzedzony przedrostkiem meta znak \fIx\fP jest ma³± liter±,
uruchamia plecenie, które jest przypisane do odpowiedniej wielkiej litery.
.TP
.B prefix\-meta (ESC)
Poprzed¼ przedrostkiem meta nastêpny wpisany znak.
.SM
.B ESC
.B f
jest równowa¿ne
.BR Meta\-f .
.TP
.B undo (C\-_, C\-x C\-u)
Krokowe cofniêcie operacji, pamiêtane odrêbnie dla ka¿dego wiersza.
.TP
.B revert\-line (M\-r)
Cofa wszystkie zmiany wykonane na tym wierszu. Podobne do wykonania
polecenia
.B undo
wystarczaj±co wiele razy, by przywróciæ wiersz do stanu pocz±tkowego.
.TP
.B tilde\-expand (M\-&)
Wykonuje interpretacjê tyldy w odniesieniu do bie¿±cego s³owa.
.TP
.B set\-mark (C\-@, M\-<space>)
ustawia znacznik (mark) w bie¿±cym punkcie. Je¿eli podano argument
numeryczny, znacznik jest ustawiany na takiej pozycji.
.TP
.B exchange\-point\-and\-mark (C\-x C\-x)
Zamieñ punkt ze znacznikiem. Aktualna pozycja kursora ustawiana jest na
zapamietan±, a dotychczasowa pozycja zachowywana jako znacznik.
.TP
.B character\-search (C\-])
Odczytywany jest znak a punkt przesuwa siê na nastêpne wyst±pienie tego
znaku. Licznik ujemny wyszukuje poprzednie wyst±pienia.
.TP
.B character\-search\-backward (M\-C\-])
Odczytywany jest znak a punkt przesuwa siê na poprzednie wyst±pienie tego
znaku. Licznik ujemny wyszukuje kolejne wyst±pienia.
.TP
.B insert\-comment (M\-#)
Na pocz±tek bie¿±ceg wiersza wstawiana jest warto¶æ zmiennej
.B comment\-begin
readline,
a wiersz jest akceptowany tak, jakby wprowadzono znak nowej linii.
Domy¶lna warto¶æ \fBcomment\-begin\fP powoduje, ¿e polecenie to czyni
bie¿±cy wiersz komentarzem pow³oki.
.TP
.B glob\-expand\-word (C\-x *)
S³owo sprzed kursora traktowane jest jak wzorzec rozwijania nazw plików
i wstawiana jest lista pasuj±cych nazw, zastêpuj±c s³owo-wzorzec.
.TP
.B glob\-list\-expansions (C\-x g)
Wy¶wietlana jest lista rozwiniêæ, jakie zosta³yby utworzone przez
.BR glob\-expand\-word,
a wiersz jest ponownie wy¶wietlany.
.TP
.B dump\-functions
Wypisuje do strumienia wyj¶ciowego readline wszystkie funkcje i ich
przypisania klawiszy. Je¿eli podano argument numeryczny, wyj¶cie jest
formatowane w taki sposób, by mo¿na zrobiæ je czê¶ci± pliku \fIinputrc\fP.
.TP
.B dump\-variables
Wypisuje do strumienia wyj¶ciowego readline wszystkie ustawialne zmienne
readline i ich warto¶ci. Je¿eli podano argument numeryczny, wyj¶cie jest
formatowane w taki sposób, by mo¿na zrobiæ je czê¶ci± pliku \fIinputrc\fP.
.TP
.B dump\-macros
Wypisuje wszystkie sekwencje klawiszy readline przypisane do makr
i ³añcuchy jakie daj± w wyniku.  Je¿eli podano argument numeryczny,
wyj¶cie  jest formatowane w taki sposób, by mo¿na zrobiæ je czê¶ci± pliku
\fIinputrc\fP.
.TP
.B display\-shell\-version (C\-x C\-v)
Wy¶wietla informacjê o wersji aktualnego egzemplarza
.BR bash .
.PD
.SS Programowalne uzupe³nianie
.PP
Gdy nastêpuje próba uzupe³nienia s³owa dla argumentu polecenia, dla którego
zdefiniowano specyfikacjê uzupe³niania (completion specification,
\fIcompspec\fP) przy pomocy wbudowanego polecenia \fBcomplete\fP (zobacz
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej), wywo³ywane s± us³ugi programowalnego uzupe³niania.
.PP
Po pierwsze, identyfikowana jest nazwa polecenia.
Je¿eli dla tego polecenia zdefiniowano compspec, to compspec jest u¿ywane
do utworzenia listy mo¿liwych uzupe³nieñ s³owa.
Je¿eli s³owo polecenia jest pe³n± nazw± ¶cie¿kow±, to najpierw szukane jest
compspec dla pe³nej nazwy.
Je¶li nie zostanie odnalezione, to nastêpuje próba znalezienia compspec dla
czê¶ci wystêpuj±cej po ostatnim uko¶niku.
.PP
Po odnalezieniu compspec, jest ono u¿ywane do utworzenia listy pasuj±cych
s³ów.
Je¿eli compspec nie zosta³o znalezione, to wykonywane jest domy¶lne
uzupe³nianie \fBbash\fPa, jak opisano powy¿ej w \fBUzupe³nianie\fP.
.PP
Na pocz±tek, u¿ywane s± akcje okre¶lone przez compspec. Zwracane s± wy³±cznie
dopasowania poprzedzone dopasowywanym s³owem.
Gdy do uzupe³niania nazw plików lub katalogów u¿yto opcji
.B \-f
lub
.BR \-d ,
do filtrowania dopasowañ wykorzystywana jest zmienna pow³oki
.SM
.BR FIGNORE .
.PP
W nastêpnej kolejno¶ci tworzone s± ewentualne uzupe³nienia okre¶lone przez
wzorzec rozwiniêcia nazw plików opcji \fB\-G\fP.
S³owa tworzone przez wzorzec nie musz± pasowaæ do uzupe³nianego s³owa.
Zmienna pow³oki
.SM
.B GLOBIGNORE
nie jest u¿ywana do filtrowania dopasowañ, ale zmienna
.SM
.B FIGNORE
jest u¿ywana.
.PP
Nastêpnie, brany jest pod uwagê ³añcuch podany jako argument opcji \fB\-W\fP.
£añcuch jest najpierw rozbijany przy zastosowaniu znaków ze zmiennej
specjalnej
.SM
.B IFS
jako separatorów.
Honorowane jest cytowanie pow³oki.
Pó¼niej ka¿de ze s³ów interpretowane jest z wykorzystaniem
interpretacji nawiasów, interpretacji tyld, podstawiania parametrów,
interpretacji zmiennych i wyra¿eñ arytmetycznych, podstawiania wyników
poleceñ i rozwijania nazw ¶cie¿kowych, jak opisano powy¿ej w sekcji
.SM
.BR INTERPRETACJA .
Wyniki s± rozbijane z zastosowaniem regu³ opisanych powy¿ej w sekcji
\fBPodzia³ na s³owa\fP.
Wyniki interpretacji s± dopasowywane przedrostkiem z uzupe³nianym s³owem,
a pasuj±ce s³owa staj± siê mo¿liwymi uzupe³nieniami.
.PP
Po utworzeniu tych dopasowañ, wywo³ywana jest funkcja lub polecenie
okre¶lone opcjami \fB\-F\fP i \fB\-C\fP.
Podczas wywo³ywania polecenia czy funkcji, zmiennym
.SM
.B COMP_LINE
i
.SM
.B COMP_POINT
przypisywane s± warto¶ci, jak opisano to powy¿ej w sekcji \fBZmienne
pow³oki\fP.
Je¿eli wywo³ywana jest funkcja pow³oki, ustawiane s± równie¿ zmienne
.SM
.B COMP_WORDS
i
.SM
.BR COMP_CWORD .
Kiedy wywo³ywana jest funkcja czy polecenie, pierwszym argumentem staje siê
nazwa polecenia, którego argumenty s± uzupe³niane, drugim argumentem \-\-
uzupe³niane s³owo, a trzecim s³owo poprzedzaj±ce w wierszu poleceñ s³owo
aktualnie uzupe³niane.
Nie jest wykonywane ¿adne filtrowanie utworzonych uzupe³nieñ stosownie do
uzupe³nianego s³owa. Funkcja czy polecenie maj± pe³n± swobodê tworzenia
dopasowañ.
.PP
W pierwszej kolejno¶ci wywo³ywana jest funkcja okre¶lona przez \fB\-F\fP.
Do tworzenia dopasowañ mo¿e ona korzystaæ z dowolnych mo¿liwo¶ci pow³oki,
³±cznie z opisanym poni¿ej poleceniem wbudowanym \fBcompgen\fP.
Funkcja musi umie¶ciæ mo¿liwe uzupe³nienia w zmiennej tablicowej
.SM
.BR COMPREPLY .
.PP
Nastêpnie, wywo³ywane jest polecenie okre¶lone opcj± \fB\-C\fP, dzia³aj±ce
w ¶rodowisku równowa¿nym podstawianiu poleceñ.
Powinno ono wypisaæ listê uzupe³nieñ, po jednym w wierszu, na standardowe
wyj¶cie.
Je¿eli jest to niezbêdne, do utworzenia znaku nowej linii mo¿na u¿yæ
odwróconego uko¶nika.
.PP
Po utworzeniu wszelkich mo¿liwych uzupe³nieñ, do listy tej stosowany jest
filtr okre¶lony opcj± \fB\-X\fP.
Filtr jest takim wzorcem, jak u¿ywany przy rozwijaniu nazw ¶cie¿kowych.
Znak \fB&\fP we wzorcu zastêpowany jest tekstem uzupe³nianego s³owa.
Litera³ \fB&\fP mo¿na otrzymaæ poprzedzaj±c go odwrotnym uko¶nikiem;
odwrotny uko¶nik zostanie usuniêty przed prób± dopasowania.
Wszystkie uzupe³nienia pasuj±ce do wzorca bêd± usuniête z listy.
Pocz±tkowy \fB!\fP daje zaprzeczenie wzorca. Bêd± wówczas usuwane uzupe³nienia
nie pasuj±ce do wzorca.
.PP
Na koniec, do ka¿dego elementu listy dodawane s± przedrostek i przyrostek
okre¶lone opcjami \fB\-P\fP i \fB\-S\fP, a wynik zwracany jest do kodu
uzupe³niania readline jako lista mo¿liwych uzupe³nieñ.
.PP
Je¶li poprzednio zastosowane dzia³ania nie utworzy³y ¿adnych dopasowañ,
za¶ przy definiowaniu compspec podano opcjê \fB\-o dirnames\fP polecenia
\fBcomplete\fP, to dokonywana jest próba uzupe³nienia nazwy katalogu.
.PP
Domy¶lnie, je¿eli znaleziono compspec, to cokolwiek ono utworzy zwracane
jest do kodu uzupe³niaj±cego jako pe³ny zestaw mo¿liwych uzupe³nieñ.
Nie s± próbowane domy¶lne uzupe³nienia \fBbash\fP, a domy¶lne uzupe³nianie
nazw ¶cie¿kowych przez readline jest wy³±czone.
Je¶li przy definiowaniu compspec podano opcjê \fB\-o default\fP polecenia
\fBcomplete\fP, to je¿eli compspec nie utworzy ¿adnych uzupe³nieñ, wykonane
zostanie domy¶lne uzupe³nianie z readline.
.SH HISTORIA
Je¿eli w³±czona jest opcja
.B \-o history
wbudowanego polecenia
.BR set ,
to pow³oka zapewnia dostêp do \fIhistorii poleceñ\fP, listy poleceñ
poprzednio wprowadzonych.
Warto¶æ zmiennej \fBHISTSIZE\fP wykorzystywana jest jako liczba poleceñ
do zachowania na li¶cie historii.
Zachowywany jest tekst ostatnich
.SM
.B HISTSIZE
poleceñ (domy¶lnie 500. Pow³oka
przechowuje ka¿de polecenie na li¶cie przed podstawieniem warto¶ci
parametrów i zmiennych (zobacz powy¿ej
.SM
.BR INTERPRETACJA ),
ale przed wykonaniem interpretacji historii, w zale¿no¶ci od warto¶ci
zmiennych pow³oki
.SM
.B HISTIGNORE
i
.SM
.BR HISTCONTROL .
.PP
Przy uruchamianiu, historia inicjowana jest z pliku o nazwie wskazanej
zmienn±
.SM
.B HISTFILE
(domy¶lnie \fI~/.bash_history\fP). Plik o nazwie wziêtej z warto¶ci
.SM
.B HISTFILE
jest obcinany, je¶li zachodzi potrzeba, by zawiera³ nie wiêcej wierszy ni¿
okre¶lono to warto¶ci± zmiennej
.SM
.BR HISTFILESIZE .
Podczas koñczenia pracy pow³oki interaktywnej, ostatnie
.SM
.B $HISTSIZE
wierszy kopiowane jest z listy historii do
.SM
.BR $HISTFILE .
Je¿eli w³±czona jest opcja pow³oki
.B histappend
(zobacz opis
.B shopt
w sekcji
.SM
.B "WBUDOWANE POLECENIA POW£OKI"
poni¿ej), to wiersze s± dodawane na koniec pliku historii, w przeciwnym
razie plik historii jest nadpisywany.
Je¿eli
.SM
.B HISTFILE
nie jest ustawione lub plik historii nie daje siê zapisaæ, to historia nie
jest zachowywana. Po zapisaniu, plik historii jest obcinany, by nie zawiera³
wiêcej ni¿
.SM
.B HISTFILESIZE
wierszy. Je¶li
.SM
.B HISTFILESIZE
nie jest ustawione, to obcinanie nie jest wykonywane.
.PP
Do edycji lub ponownego wykonania czê¶ci listy historii mo¿na korzystaæ
z wbudowanego polecenia
.B fc
(zobacz
.SM
.B WBUDOWANE POLECENIA POW£OKI
poni¿ej).
Wbudowanego polecenia
.B history
mo¿na u¿ywaæ do wy¶wietlania lub zmiany listy historii i manipulacji plikiem
historii.
Podczas pos³ugiwania siê edycj± wiersza poleceñ, w ka¿dym z trybów edycji
umo¿liwiaj±cych dostêp do listy historii, dostêpne s± polecenia przeszukiwania.
.PP
Pow³oka umo¿liwia kontrolê nad tym, jakie polecenia s± zachowywane na li¶cie.
Mo¿na ustawiæ zmienne
.SM
.B HISTCONTROL
i
.SM
.BR HISTIGNORE,
co spowoduje, ¿e pow³oka bêdzie zachowywaæ tylko podzbiór wprowadzonych
poleceñ.
Opcja pow³oki
.BR cmdhist ,
je¿eli jest w³±czona, powoduje, ¿e pow³oka bêdzie usi³owaæ zachowaæ ka¿dy
wiersz polecenia wielowierszowego w tej samej pozycji historii, dodaj±c,
gdzie jest to niezbêdne, ¶redniki, by zachowaæ poprawno¶æ sk³adni.
Opcja pow³oki
.B lithist
powoduje, ¿e pow³oka bêdzie zachowywaæ polecenia z osadzonymi znakami nowej
linii zamiast ¶redników. Zobacz opis wbudowanego
.B shopt
poni¿ej, w sekcji
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ,
gdzie znajdziesz informacje o ustawianiu i kasowaniu opcji pow³oki.
.SH "INTERPRETACJA HISTORII"
.PP
Pow³oka obs³uguje funkcjê interpretacji historii, podobn± do interpretacji
historii w
.BR csh .
Ta sekcja opisuje dostêpne mo¿liwo¶ci sk³adni. Funkcja ta jest domy¶lnie
w³±czona dla pow³ok interaktywnych i mo¿e byæ wy³±czona przy pomocy opcji
.B \+H
wbudowanego polecenia
.B set
(zobacz poni¿ej
.SM
.BR "WBUDOWANE POLECENIA POW£OKI" ).
Pow³oki nie-interaktywne domy¶lnie nie wykonuj± interpretacji historii.
.PP
Interpretacja historii wprowadza s³owa z listy historii do strumienia
wej¶ciowego, u³atwiaj±c powtarzanie poleceñ lub poprawianie szybkie b³êdów
w poprzednich poleceniach.
.PP
Interpretacja historii przeprowadzana jest bezpo¶rednio po przeczytaniu
pe³nego wiersza, przed jego podzia³em na s³owa przez pow³okê.
Odbywa siê w dwu czê¶ciach.
Pierwsz± jest okre¶lenie, który wiersz z listy historii ma zostaæ u¿yty
podczas podstawiania.
Drug± stanowi wybór czê¶ci tego wiersza do w³±czenia w bie¿±cy.
Wybrany z historii wiersz jest \fIzdarzeniem\fP (event), a jego czê¶ci
na których wykonywane s± dzia³ania s± \fIs³owami\fP.
Dostêpne s± ró¿ne \fImodyfikatory\fP do manipulowania wybranymi s³owami.
Wiersz rozbijany jest na s³owa w ten sam sposób jak podczas odczytu
wej¶cia, tak ¿e kilka s³ów separowanych \fImetaznakami\fP ujêtych
w cudzys³owy traktowanych jest jak jedno s³owo.
Interpretacja historii wprowadzana s± obecno¶ci± znaku rozwijaj±cego
historiê, którym domy¶lnie jest \^\fB!\fP\^.
Cytowaæ ten znak mog± wy³±cznie odwrotny uko¶nik (\^\fB\e\fP\^)
i pojedyncze cudzys³owy.
.PP
Kilka opcji pow³oki ustawianych przy pomocy
.B shopt
mo¿e s³u¿yæ do ¶ledzenia dzia³ania interpretacji historii.
Je¿eli opcja
.B histverify
pow³oki jest w³±czona (zobacz opis wbudowanego
.BR shopt )
i u¿ywane jest
.BR readline ,
to podstawienia historii nie s± natychmiast przesy³ane do analizatora
sk³adni (parsera) pow³oki.
Zamiast tego, zinterpretowany wiersz jest ponownie ³adowany do bufora
edycyjnego
.B readline
w celu dalszej modyfikacji.
Je¿eli wykorzystywane jest
.B readline
i w³±czona jest opcja
.BR histreedit ,
to zakoñczone niepowodzeniem podstawienie historii zostanie ponownie
za³adowane do bufora edycyjnego
.B readline
w celu poprawienia.
Opcj±
.B \-p
wbudowanego polecenia
.B history
mo¿na pos³u¿yæ siê do ogl±dniêcia, co zrobi interpretacja historii
przed jej zastosowaniem.
Opcji
.B \-s
wbudowanego polecenia
.B history
mo¿na u¿yæ w celu dodania poleceñ na koniec listy historii bez faktycznego
ich wykonania, tak ¿e bêd± dostêpne dla nastêpnych przywo³añ.
.PP
Pow³oka pozwala na kontrolowanie ró¿nych znaków stosowanych przez mechanizm
interpretacji historii (zobacz opis
.B histchars
powy¿ej, w sekcji
.BR "Zmienne pow³oki" ).
.SS Desygnatory zdarzeñ (Event Designators)
.PP
Desygnator zdarzenia jest odwo³aniem do pozycji wiersza poleceñ na li¶cie
historii.
.PP
.PD 0
.TP
.B !
Rozpoczyna podstawianie historii, z wyj±tkiem sytuacji, gdy wystêpuje
po nim odstêp, znak nowej linii, = lub (.
.TP
.B !\fIn\fR
Wskazuje na
.IR n -ty
wiersz poleceñ.
.TP
.B !\-\fIn\fR
Wskazuje na wiersz poleceñ bie¿±cy minus
.IR n .
.TP
.B !!
Wskazuje na poprzednie polecenie. jest to synonim `!\-1'.
.TP
.B !\fI³añcuch\fR
Wskazuje na ostatnie poleceniem rozpoczynaj±ce siê od
.IR ³añcucha .
.TP
.B !?\fI³añcuch\fR\fB[?]\fR
Wskazuje na ostatnie polecenie zawieraj±ce
.IR ³añcuch .
Koñcz±ce \fB?\fP mo¿na pomin±æ je¶li bezpo¶rednio po
.I ³añcuchu
wystêpuje znak nowej linii.
.TP
.B \d\s+2^\s-2\u\fI³añcuch1\fP\d\s+2^\s-2\u\fI³añcuch2\fP\d\s+2^\s-2\u
Szybkie podstawianie. Powtarza ostatnie polecenie, wymieniaj±c
.I ³añcuch1
na
.IR ³añcuch2 .
Rónowa¿nik
,,!!:s/\fI³añcuch1\fP/\fI³añcuch\fP/''
(zobacz poni¿ej \fBModyfikatory\fP).
.TP
.B !#
Ca³y wiersz poleceñ wpisany do tego momentu.
.PD
.SS Desygnatory s³ów (Word Designators)
.PP
Desygnatory s³ów s³u¿± do wybierania ze zdarzenia ¿±danych s³ów.
Dwukropek
.B :
oddziela okre¶lenie zdarzenia od desygnatora s³owa. Mo¿e byæ pominiêty
je¶li desygnator s³owa rozpoczyna siê od
.BR ^ ,
.BR $ ,
.BR * ,
.BR \-
lub
.BR % .
S³owa numerowane s± od pocz±tku wiersza, przy czym pierwsze ma
numer 0 (zero).  S³owa s± wstawiane do bie¿±cego wiersza, rozdzielane
pojedynczymi spacjami.
.PP
.PD 0
.TP
.B 0 (zero)
S³owo zerowe. Dla pow³oki jest to s³owo polecenia.
.TP
.I n
\fIn\fR-te s³owo.
.TP
.B ^
Pierwszy argument. To znaczy, s³owo 1.
.TP
.B $
Ostatni argument.
.TP
.B %
S³owo dopasowane przez ostatnie wyszukanie `?\fI³añcuch\fR?'.
.TP
.I x\fB\-\fPy
Zakres s³ów; `\-\fIy\fR' jest skróconym `0\-\fIy\fR'.
.TP
.B *
Wszystkie s³owa prócz zerowego. jest to synonim dla `\fI1\-$\fP'.
Nie jest b³êdem u¿ycie
.B *
je¶li w zdarzeniu jest tylko jedno s³owo; w tym przypadku zwracany jest
³añcuch pusty.
.TP
.B x*
Skrót od \fIx\-$\fP.
.TP
.B x\-
Skrót od \fIx\-$\fP podobnie jak \fBx*\fP, ale pomija ostatnie s³owo.
.PD
.PP
je¶li desygnator s³owa podano bez okre¶lenia zdarzenia, za zdarzenie
przyjmowane jest poprzednie polecenie.
.SS Modyfikatory
.PP
Po opcjonalnym desygnatorze s³owa mo¿e pojawiæ siê sekwencja jednego lub
wiêcej poni¿szych modyfikatorów, ka¿dy poprzedzony dwukropkiem `:'.
.PP
.PD 0
.PP
.TP
.B h
Usuwa koñcow± sk³adow± nazwy pliku, pozostawiaj±c tylko pocz±tek.
.TP
.B t
Usuwa wszystkie pocz±tkowe sk³adowe nazwy pliku, pozostawiaj±c koniec.
.TP
.B r
Usuwa koñcz±cy przyrostek postaci \fI.xxx\fP, pozostawiaj±c g³ówn± czê¶æ
nazwy (basename).
.TP
.B e
Usuwa wszystko prócz koñcowego przyrostka.
.TP
.B p
Wypisuje nowe polecenie, ale go nie wykonuje.
.TP
.B q
Cytuje podstawiane s³owa, zabezpieczaj±c je przed dalszym podstawianiem.
.TP
.B x
Cytuje podstawiane s³owa jak
.BR q ,
ale rozbija na s³owa w miejscach
.B odstêpów
i znaków nowej linii.
.TP
.B s/\fIstary\fP/\fInowy\fP/
Zastêpuje
.I nowym
pierwsze wyst±pienie
.I starego
w wierszu zdarzenia. Zamiast / mo¿e zostaæ u¿yty dowolny ogranicznik.
Koñcowy ogranicznik jest opcjonalny je¿eli jest ostatnim znakiem wiersza
zdarzenia. Separator mo¿e byæ cytowany w
.I nowym
i
.I starym
przy pomocy pojedynczego odwrotnego uko¶nika. Je¿eli w
.IR nowym
pojawia siê &, to jest zastêpowany
.IR starym .
Pojedynczy odwrotny uko¶nik bêdzie cytowa³ &. Je¿eli
.I stary
jest pusty, to ustawiany jest na ostatni podstawiany
.I stary
lub, je¶li nie by³o poprzednich podstawieñ historii, ostatni
.I ³añcuch
w wyszukiwaniu
.BR !?\fI³añcuch\fR\fB[?]\fR .
.TP
.B &
Powtarza poprzednie podstawienie.
.TP
.B g
Powoduje, ¿e zmiany zostan± zastosowane do ca³ego wiersza zdarzenia.
U¿ywany w po³±czeniu z `\fB:s\fP' (np. `\fB:gs/\fIold\fP/\fInew\fP/\fR')
lub `\fB:&\fP'. Je¶li u¿yty z `\fB:s\fP', to zamiast / mo¿na pos³u¿yæ siê
dowolnym separatorem, a ostatni separator jest opcjonalny je¿eli jest
ostatnim znakiem wiersza zdarzenia.
.PD
.SH "WBUDOWANE POLECENIA POW£OKI"
.\" pocz±tek bash_builtins
.zZ
.PP
Je¶li nie podano inaczej, ka¿de z poleceñ wbudowanych opisanych
w niniejszej sekcji jako akceptuj±ce opcje poprzedzone
.B \-
akceptuje równie¿ symbol
.B \-\-
okre¶laj±cy koniec opcji.
.sp .5
.PD 0
.TP
\fB:\fP [\fIargumenty\fP]
.PD
Bez efektów; polecenie to nie robi niczego poza interpretacj±
.I argumentów
i wykonaniem ewentualnych podanych przekierowañ. Zwracany jest zerowy kod
zakoñczenia.
.TP
.PD 0
\fB .\| \fP \fIplik\fP [\fIargumenty\fP]
.TP
\fBsource\fP \fIplik\fP [\fIargumenty\fP]
.PD
Odczytuje i wykonuje polecenia z zadanego
.I pliku
w aktualnym ¶rodowisku pow³oki i zwraca kod zakoñczenia ostatniego
wykonanego polecenia z tego
.IR pliku .
Je¿eli nazwa
.I pliku
nie zawiera uko¶nika, to do znalezienia katalogu go zawieraj±cego u¿ywana
jest zmienna
.SM
.BR PATH .
Plik poszukiwany w
.SM
.B PATH
nie musi byæ wykonywalny.
Je¶li \fBbash\fP nie jest w \fItrybie posix\fP, wówczas
je¿eli nie znaleziono pliku w
.SM
.BR PATH ,
to przeszukiwany jest katalog bie¿±cy.
Je¶li we wbudowanym poleceniu
.B shopt
wy³±czona jest opcja
.BR sourcepath ,
to
.SM
.B PATH
nie jest przeszukiwane.
je¶li podano jakie¶ \fIargumenty\fP, to staj± siê one parametrami
pozycyjnymi podczas wykonywania \fIpliku\fP. W przeciwnym razie argumenty
pozycyjne pozostaj± bez zmian.
Kod zakoñczenia jest kodem ostatniego zakoñczonego przez skrypt
polecenia (0 je¶li nie wykowano ¿adnego polecenia), a fa³szem je¿eli
nie znaleziono
.I pliku
lub nie mo¿na go odczytaæ.
.TP
\fBalias\fP [\fB\-p\fP] [\fInazwa\fP[=\fIwarto¶æ\fP] ...]
\fBAlias\fP bez argumentów b±d¼ z opcj±
.B \-p
wypisuje na standardowym wyj¶ciu listê aliasów w postaci
\fBalias\fP \fInazwa\fP=\fIwarto¶æ\fP.
Je¶li nie dostarczono argumenty, to definiowany jest alias (synonim)
dla ka¿dej \fInazwy\fP, dla której podano \fIwarto¶æ\fP.
Pocz±tkowa spacja w \fIwarto¶ci\fP powoduje, ¿e podczas interpretacji aliasu
nastêpne s³owo bêdzie sprawdzane na podstawianie aliasów.
Dla ka¿dej \fInazwy\fP z listy argumentów, dla której nie podano
\fIwarto¶ci\fP, wypisywana jest nazwa i warto¶æ aliasu.
\fBAlias\fP zwraca prawdê, chyba ¿e podano \fInazwê\fP, dla której nie
zosta³ zdefiniowany ¿aden alias.
.TP
\fBbg\fP [\fIspec_zad\fP]
Wznawia w tle zawieszone zadanie \fIspec_zad\fP, tak jakby zosta³o
ono uruchomione z
.BR & .
Je¶li \fIspec_zad\fP nie wystêpuje, to u¿ywane jest
\fIbie¿±ce zadanie\fP, okre¶lone tak, jak je pojmuje pow³oka.
.B bg
.I spec_zad
zwraca 0, chyba ¿e uruchomiono je przy wy³±czonej kontroli zadañ
(job control) lub uruchomiono z w³±czon± kontrol± zadañ, je¶li
nie znaleziono \fIspec_zad\fP lub uruchomiono bez kontroli zadañ.
.TP
.PD 0
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] [\fB\-lpsvPSV\fP]
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] [\fB\-q\fP \fIfunkcja\fP] [\fB\-u\fP \fIfunkcja\fP] [\fB\-r\fP \fIsekw_klaw\fP]
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] \fB\-f\fP \fIplik\fP
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] \fB\-x\fP \fIsekw_klaw\fP:\fIpolec_pow³oki\fP
.TP
\fBbind\fP [\fB\-m\fP \fIkeymap\fP] \fIsekw_klaw\fP:\fInazwa_funkcji\fP
.PD
Wy¶wietla bie¿±ce ustawienia przypisañ (bindings) klawiszy i funkcji
.B readline
lub przypisuje sekwencjê klawiszy to funkcji lub makra
.BR readline .
Sk³adnia tych przypisañ jest identyczna jak dla
.IR .inputrc ,
ale ka¿de z przypisañ musi byæ przes³ane jako osobny argument;
np., '"\eC\-x\eC\-r": re\-read\-init\-file'. Opcje, je¶li je podano, maj±
nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
.B \-m \fIkeymap\fP
Wykorzystuje
.I keymap
jako mapê klawiszy, do której maj± byæ zastosowane nastêpne przypisania.
Akceptowanymi nazwami
.I map klawiszy
s±
.IR emacs ,
.IR emacs\-standard ,
.IR emacs\-meta ,
.IR emacs\-ctlx ,
.IR vi ,
.IR vi\-move ,
.I vi\-command
i
.IR vi\-insert .
\fIvi\fP równowa¿ne jest \fIvi\-command\fP; \fIemacs\fP jest równowa¿ne
\fIemacs\-standard\fP.
.TP
.B \-l
Podaje nazwy wszystkich funkcji \fBreadline\fP.
.TP
.B \-p
Wy¶wietla nazwy funkcji i przypisania w taki sposób, ¿e mog± byæ ponownie
odczytane.
.TP
.B \-P
Podaje bie¿±ce przypisania i nazwy funkcji \fBreadline\fP.
.TP
.B \-v
Wy¶wietla nazwy i warto¶ci zmiennych \fBreadline\fP w taki sposób, ¿e mog±
byæ ponownie odczytane.
.TP
.B \-V
Podaje bie¿±ce nazwy i warto¶ci zmiennych \fBreadline\fP.
.TP
.B \-s
Wy¶wietla sekwencje klawiszy \fBreadline\fP przypisane do makr i ³añcuchy
jakie one wysy³aj± w taki sposób, ¿e mog± byæ ponownie odczytane.
.TP
.B \-S
Wy¶wietla sekwencje klawiszy \fBreadline\fP przypisane do makr i ³añcuchy
jakie one wysy³aj±.
.TP
.B \-f \fIplik\fP
Czyta przypisania klawiszy z \fIpliku\fP.
.TP
.B \-q \fIfunkcja\fP
Podaje, które klawisze wywo³uj± podan± \fIfunkcjê\fP.
.TP
.B \-u \fIfunkcja\fP
Odwo³uje przypisania wszystkich klawiszy przypisanych do danej \fIfunkcji\fP.
.TP
.B \-r \fIsekw_klaw\fP
Usuwa bie¿±ce przypisania dla \fIsekwencji klawiszy\fP.
.TP
.B \-x \fIsekw_klaw\fP:\fIpolec_pow³oki\fP
Powoduje, ¿e za ka¿dym naci¶niêciem \fIsekwencji klawiszy\fP zostanie
wykonane \fIpolecenie pow³oki\fP.
.PD
.PP
Zwracana jest warto¶æ 0, chyba ¿e podano nierozpoznan± opcjê lub pojawi³ siê
b³±d.
.RE
.TP
\fBbreak\fP [\fIn\fP]
Opuszcza pêtlê
.BR for ,
.BR while ,
.BR until
lub
.BR select .
Je¿eli podano \fIn\fB, przerywa dzia³anie do \fIn\fP-tego poziomu.
.I n
musi byæ \(>= 1. Je¿eli
.I n
jest wiêksze od liczby obejmuj±cych polecenie pêtli, to koñczone s±
wszystkie obejmuj±ce pêtle. Warto¶ci± zwracan± jest 0, chyba ¿e pow³oka nie
wykonuje pêtli podczas wykonania
.BR break .
.TP
\fBbuiltin\fP \fIwbudowane\fP [\fIargumenty\fP]
Wykonuje zadane polecenie wbudowane pow³oki, przesy³aj±c mu
.IR argumenty i zwraca jego kod zakoñczenia.
Przydatne podczas definiowania funkcji o nazwie to¿samej z nazw±
wbudowanego polecenia pow³oki, zachowuj±c funkcjonalno¶æ polecenia
wbudowanego wewn±trz funkcji.
Wbudowane \fBcd\fP jest powszechnie redefiniowane w ten sposób.
Kodem zakoñczenia jest fa³sz je¶li
.I wbudowane
nie jest wbudowanym poleceniem pow³oki.
.TP
\fBcd\fP [\fB\-LP\fP] [\fIkatalog\fP]
Zmienia bie¿±cy katalog roboczy na \fIdir\fP. Zmienna
.SM
.B HOME
jest domy¶lnym
.IR katalogiem .
Zmienna
.SM
.B CDPATH
definiuje ¶cie¿kê przeszukiwañ dla katalogu zawieraj±cego
.IR katalog .
Alternatywne nazwy katalogów w
.SM
.B CDPATH
rozdzielane s± dwukropkiem (:)> Pusta nazwa katalogu w
.SM
.B CDPATH
jest tym samym, co katalog bie¿±cy, tj. ,,\fB.\fP''. Je¿eli
.I katalog
rozpoczyna siê uko¶nikiem (/), to
.SM
.B CDPATH
nie jest u¿ywane. Opcja
.B \-P
nakazuje u¿ycie fizycznej struktury katalogów zamiast pod±¿ania za
dowi±zaniami symbolicznymi (zobacz te¿ opcja
.B \-P
wbudowanego polecenia
.BR set );
Opcja
.B \-L
wymusza pod±¿anie za dowi±zaniami symbolicznymi.
Argument
.B \-
jest równowa¿ny
.SM
.BR $OLDPWD .
Warto¶ci± zwracan± jest prawda je¶li pomy¶lnie zmieniono katalog; w
przeciwnym przypadku fa³sz.
.TP
\fBcommand\fP [\fB\-pVv\fP] \fIpolecenie\fP [\fIarg\fP ...]
Uruchamia
.I polecenie
z
.I argumentami
zakazuj±c zwyk³ego wyszukiwania funkcji przez pow³okê.
Wykonywane s± wy³±cznie polecenia wbudowane i polecenia znalezione w
.SM
.BR PATH .
Je¿eli podano opcjê
.BR \-p ,
wyszukiwanie
.I polecenia
wykonywane jest przy u¿yciu domy¶lnej
.BR PATH ,
która gwarantuje znalezienie wszystkich standardowych narzêdzi.
Je¶li u¿yto albo opcji
.B \-V
albo
.BR \-v ,
to wypisywany jest opis
.IR polecenia .
Opcja
.B \-v
powoduje, ¿e zostanie wy¶wietlone pojedyncze s³owo wskazuj±ce polecenie
lub nazwê pliku, u¿yte do wywo³ania
.IR polecenia ;
opcja
.B \-V
tworzy bardziej rozgadany opis.
Je¿eli podano opcjê
.B \-V
lub
.BR \-v ,
to kodem zakoñczenia jest 0 gdy odnaleziono
.I polecenie,
za¶ 1 gdy nie. Je¶li nie podano ¿adnej z tych opcji i pojawi³ siê b³±d
lub nie mo¿na znale¿æ
.IR polecenia ,
to kod zakoñczenia wynosi 127. W przeciwnym wypadku kodem zakoñczenia
wbudowanego polecenia
.B command
jest kod zakoñczenia
.IR polecenia .
.TP
\fBcompgen\fP [\fIopcja\fP] [\fIs³owo\fP]
Tworzy mo¿liwe dopasowania uzupe³nieñ dla \fIs³owa\fP zgodnie
z \fIopcjami\fP, które mog± byæ dowolnymi z opcji akceptowanych przez
wbudowane polecenie
.BR complete ,
z wyj±tkiem \fB\-p\fP i \fB\-r\fP, i wypisuje dopasowania na standardowe
wyj¶cie.
Przy stosowaniu opcji \fB\-F\fP lub \fB\-C\fP, ró¿ne zmienne pow³oki
ustawiane przez us³ugi programowalnego uzupe³niania, gdy s± dostêpne,
nie bêd± mieæ u¿ytecznych warto¶ci.
.sp 1
Dopasowania bêd± tworzone w ten sam sposób, jakby kod uzupe³niania
programowalnego tworzy³ je wprost ze specyfikacji uzupe³niania z tymi samymi
flagami.
Je¿eli podano \fIs³owo\fP, to wy¶wietlone zostan± wy³±cznie uzupe³nienia
doñ pasuj±ce.
.sp 1
Warto¶ci± zwracan± jest prawda, chyba ¿e podano niepoprawn± opcjê lub
nie zosta³y utworzone ¿adne dopasowania.
.TP
.PD 0
\fBcomplete\fP [\fB\-abcdefgjkvu\fP] [\fB\-o\fP \fIopcjacomp\fP] [\fB\-A\fP \fIakcja\fP] [\fB\-G\fP \fIwzglob\fP] [\fB\-W\fP \fIlistas³ów\fP] [\fB\-P\fP \fIprzedrostek\fP] [\fB\-S\fP \fIprzyrostek\fP]
.br
[\fB\-X\fP \fIwzfiltr\fP] [\fB\-F\fP \fIfunkcja\fP] [\fB\-C\fP \fIpolecenie\fP] \fInazwa\fP [\fInazwa ...\fP]
.TP
\fBcomplete\fP \fB\-pr\fP [\fInazwa\fP ...]
.PD
Okre¶la, w jaki sposób bêd± uzupe³niane argumenty dla ka¿dej z \fInazw\fP.
Je¿eli podano opcjê \fB\-p\fP, lub nie podano ¿adnych opcji,
to wypisywane s± istniej±ce specyfikacje uzupe³niania - w sposób, który
pozwala na ich ponowne wykorzystanie jako wej¶cia.
Opcja \fB\-r\fP usuwa specyfikacjê uzupe³niania dla ka¿dej z \fInazw\fP, lub
je¶li \fInazw\fP nie podano, wszystkie specyfikacje uzupe³niania.
.sp 1
Proces stosowania tych specyfikacji uzupe³nieñ podczas prób uzupe³niania
s³ów omówiono powy¿ej w sekcji \fBProgramowalne uzupe³nianie\fP.
.sp 1
Pozosta³e opcje, je¶li je podano, maj± ni¿ej opisane znaczenie.
Argumenty opcji \fB\-G\fP, \fB\-W\fP i \fB\-X\fP (i, je¶li to niezbêdne,
\fB\-P\fP i \fB\-S\fP) powinny byæ cytowane dla ochrony przed interpretacj±
jaka wyst±pi zanim zostanie wywo³ane polecenie
.BR complete .
.RS
.PD 0
.TP 8
\fB\-o\fP \fIopcjacomp\fP
Warto¶æ \fIopcjacomp\fP reguluje kilka aspektów zachowania siê compspec
wykraczaj±cych poza zwyk³e tworzenie uzupe³nieñ.
\fIopcjacomp\fP przyjmuje jedn± z warto¶ci:
.RS
.TP 8
.B default
Stosuje domy¶lne uzupe³nianie readline je¶li compspec nie utworzy ¿adnych
dopasowañ.
.TP 8
.B dirnames
Wykonuje uzupe³nianie nazw katalogów je¶li compspec nie utworzy ¿adnych
dopasowañ.
.TP 8
.B filenames
Powiadamia readline, ¿e compspec tworzy nazwy plików, zatem mo¿e
wykonaæ przetwarzanie specyficzne dla takich nazw (jak dodanie uko¶nika
do nazw katalogów czy usuniêcie koñcowych spacji). Zaprojektowane do
stosowania z funkcjami pow³oki.
.RE
.TP 8
\fB\-A\fP \fIakcja\fP
\fIakcja\fP mo¿e byæ jedn± z poni¿szych, tworz±cych listê mo¿liwych
dopasowañ:
.RS
.TP 8
.B alias
Nazwy aliasów. Mo¿na te¿ podaæ jako \fB\-a\fP.
.TP 8
.B arrayvar
Nazwy zmiennych tablicowych.
.TP 8
.B binding
Nazwy przypisañ klawiszy \fBreadline\fP.
.TP 8
.B builtin
Nazwy wbudowanych poleceñ pow³oki. Mo¿na te¿ podaæ jako \fB\-b\fP.
.TP 8
.B command
Nazwy poleceñ. Mo¿na te¿ podaæ jako \fB\-c\fP.
.TP 8
.B directory
Nazwy katalogów. Mo¿na te¿ podaæ jako \fB\-d\fP.
.TP 8
.B disabled
Nazwy wy³±czonych poleceñ wbudowanych pow³oki.
.TP 8
.B enabled
Nazwy w³±czonych poleceñ wbudowanych pow³oki.
.TP 8
.B export
Nazwy wyeksportowanych zmiennych pow³oki. Mo¿na te¿ podaæ jako \fB\-e\fP.
.TP 8
.B file
Nazwy plików. Mo¿na te¿ podaæ jako \fB\-f\fP.
.TP 8
.B function
Nazwy funkcji pow³oki.
.TP 8
.B group
Nazwy grup. Mo¿na te¿ podaæ jako \fB\-g\fP.
.TP 8
.B helptopic
Tematy pomocy akceptowane przez wbudowane polecenie \fBhelp\fP.
.TP 8
.B hostname
Nazwy hostów, pobrane z pliku okre¶lonego przez zmienn± pow³oki
.SM
.BR HOSTFILE .
.TP 8
.B job
Nazwy zadañ, je¿eli aktywne jest sterowanie zadaniami. Mo¿na te¿ podaæ
jako \fB\-j\fP.
.TP 8
.B keyword
Zastrze¿one s³owa pow³oki. Mo¿na te¿ podaæ jako \fB\-k\fP.
.TP 8
.B running
Nazwy dzia³aj±cych zadañ, je¿eli aktywne jest sterowanie zadaniami.
.TP 8
.B setopt
Dozwolone argumenty opcji \fB\-o\fP polecenia wbudowanego \fBset\fP.
.TP 8
.B shopt
Nazwy opcji pow³oki, takie, jakie akceptuje polecenie wbudowane \fBshopt\fP.
.TP 8
.B signal
Nazwy sygna³ów.
.TP 8
.B stopped
Nazwy zatrzymanych zadañ, je¶li aktywne jest sterowanie zadaniami.
.TP 8
.B user
Nazwy u¿ytkowników. Mo¿na te¿ podaæ jako \fB\-u\fP.
.TP 8
.B variable
Nazwy wszystkich zmiennych pow³oki. Mo¿na te¿ podaæ jako \fB\-v\fP.
.RE
.TP 8
\fB\-G\fP \fIwzglob\fP
Wzorzec rozwijania nazw plików \fIwzglob\fP jest rozwijany, tworz±c
listê mo¿liwych uzupe³nieñ.
.TP 8
\fB\-W\fP \fIlistas³ów\fP
\fIlistas³ów\fP jest rozbijana przy zastosowaniu znaków ze zmiennej
specjalnej
.SM
.B IFS
jako separatorów, a ka¿de ze s³ów wynikowych jest interpretowane.
Mo¿liwe uzupe³nienia s± elementami listy wynikowej, pasuj±cymi
do uzupe³nianego s³owa.
.TP 8
\fB\-C\fP \fIpolecenie\fP
\fIpolecenie\fP wykonywane jest w ¶rodowisku podpow³oki, a jego wyj¶cie
u¿ywane jest jako mo¿liwe uzupe³nienia.
.TP 8
\fB\-F\fP \fIfunkcja\fP
Funkcja pow³oki \fIfunkcja\fP wykonywana jest w bie¿±cym ¶rodowisku pow³oki.
Po jej zakoñczeniu, mo¿liwe uzupe³nienia pobierane s± z warto¶ci zmiennej
tablicowej
.SM
.BR COMPREPLY .
.TP 8
\fB\-X\fP \fIwzfiltr\fP
\fIwzfiltr\fP jest wzorcem u¿ywanym do rozwijania nazw plików.
Stosowany jest do listy mo¿liwych uzupe³nieñ utworzonej przez poprzedzaj±ce
go opcje i argumenty, a ka¿de pasuj±ce do niego uzupe³nienie jest usuwane
z listy.
Pocz±tkowy \fB!\fP w \fIwzfiltr\fP powoduje negacjê wzorca; usuwane s± wówczas
uzupe³nienia nie pasuj±ce do \fIwzfiltr\fP.
.TP 8
\fB\-P\fP \fIprzedrostek\fP
Po zastosowaniu wszystkich innych opcji na pocz±tku ka¿dego mo¿liwego
uzupe³nienia jest dodawany \fIprzedrostek\fP.
.TP 8
\fB\-S\fP \fIprzyrostek\fP
Po zastosowaniu wszystkich innych opcji na koñcu ka¿dego mo¿liwego
uzupe³nienia jest do³±czany \fIprzyrostek\fP.
.PD
.PP
Warto¶ci± zwracana jest prawda, chyba ¿e podano niepoprawn± opcjê,
podano bez argumentu \fInazwa\fP opcjê inn± ni¿ \fB\-p\fP lub \fB\-r\fP,
usi³owano usun±æ specyfikacjê uzupe³niania dla \fInazwy\fP, dla której
nie istnieje ¿adna specyfikacja, albo te¿ podczas dodawania specyfikacji
uzupe³niania wyst±pi³ b³±d.
.RE
.TP
\fBcontinue\fP [\fIn\fP]
Wznawia nastêpn± iteracjê obejmuj±cej je pêtli
.BR for ,
.BR while ,
.BR until
lub
.BR select .
Je¿eli podano
.IR n ,
wznawia \fIn\fP-t± obejmuj±c± pêtlê.
.I n
musi byæ \(>= 1. Je¿eli
.I n
jest wiêksze ni¿ liczba obejmuj±cych pêtli, to wznawiana jest ostatnia
z pêtli (,,najwy¿sza''). Warto¶æ zwracana wynosi 0, chyba ¿e pow³oka nie
wykonuje pêtli podczas wykonywania
.BR continue .
.TP
.PD 0
\fBdeclare\fP [\fB\-afFirx\fP] [\fB\-p\fP] [\fInazwa\fP[=\fIwarto¶æ\fP]]
.TP
\fBtypeset\fP [\fB\-afFirx\fP] [\fB\-p\fP] [\fInazwa\fP[=\fIwarto¶æ\fP]]
.PD
Deklaruje zmienne i/lub nadaje im atrybuty.
Je¶li nie podano ¿adnych \fInazw\fP, wy¶wietla warto¶ci zmiennych.
Opcja
.B \-p
bêdzie wy¶wietlaæ atrybuty i warto¶ci ka¿dej
.IR nazwy .
Gdy u¿ywane jest
.BR \-p ,
ignorowane s± dodatkowe opcje.
Opcja
.B \-F
zabrania wy¶wietlania definicji funkcji; wypisywane s± tylko nazwy
i atrybuty funkcji.
Opcja
.B \-F
implikuje
.BR \-f .
Poni¿szych opcji mo¿na u¿yæ do ograniczenia wyników do zmiennych
o okre¶lonym atrybucie lub do nadania zmiennym atrybutów:
.RS
.PD 0
.TP
.B \-a
Ka¿da z \fInazw\fP jest zmienn± tablicow± (zobacz
.B Tablice
powy¿ej).
.TP
.B \-f
U¿ywa wy³±cznie nazw funkcji.
.TP
.B \-i
Zmienna jest traktowana jak ca³kowita; gdy zmiennej jest przypisywana
warto¶æ, wykonywana jest interpretacja wyra¿eñ arytmetycznych
(zobacz
.SM
.BR "OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH" ).
.TP
.B \-r
Powoduje, ¿e dane \fInazwy\fP staj± siê tylko-do-odczytu (readonly).
Nazwom tym nie mo¿na przypisaæ warto¶ci nastêpnymi poleceniami przypisania.
Nie mo¿na te¿ ich usun±æ za pomoc± unset.
.TP
.B \-x
Zaznacza \fInazwê\fP do wyeksportowania przez ¶rodowisko do kolejnych
poleceñ.
.PD
.PP
U¿ycie `+' zamiast `\-'
wy³±cza atrybut, z wyj±tkiem tego, ¿e \fB+a\fP nie mo¿e byæ u¿ywane do
niszczenia zmiennej tablicowej. U¿yte w funkcji, powoduj±, ¿e ka¿da z
\fInazw\fP staje siê lokalna, jak przy pomocy polecenia
.BR local .
Zwracana jest warto¶æ 0, chyba ¿e napotkano niepoprawn± opcjê, próbê
zdefiniowania funkcji przy pomocy
.if n ,,\-f foo=bar'',
.if t \f(CW\-f foo=bar\fP,
przypisania warto¶ci zmiennej readonly,
przypisania warto¶ci zmiennej tablicowej bez u¿ycia sk³adni przypisania
z³o¿onego (zobacz
.B Tablice
powy¿ej),
jedna z \fInazw\fP nie jest poprawn± nazw± zmiennej pow³oki,
usi³owano wy³±czyæ status readonly dla zmiennej tylko do odczytu,
wy³±czyæ status tablicy dla zmiennej tablicowej
albo próbowano wy¶wietliæ nieistniej±c± funkcjê przy pomocy \fB\-f\fP.
.RE
.TP
.B dirs [\fB\-clpv\fP] [+\fIn\fP] [\-\fIn\fP]
Bez opcji wy¶wietla listê aktualnie zapamiêtanych katalogów.
Domy¶lnie wy¶wietlana jest ona w pojedynczym wierszu, z nazwami katalogów
rozdzielonymi spacjami.
Katalogi dodawane s± do listy poleceniem
.B pushd
polecenie
.B popd
usuwa pozycje z listy.
.RS
.PD 0
.TP
\fB+\fP\fIn\fP
Wy¶wietla \fIn\fPt± pozycjê licz±c od lewej na li¶cie pokazywanej przez
.B dirs
przy wywo³aniu bez opcji; pocz±tkow± jest zero.
.TP
\fB\-\fP\fIn\fP
Wy¶wietla \fIn\fPt± pozycjê licz±c od prawej na li¶cie pokazywanej
przez
.B dirs
przy wywo³aniu bez opcji; pocz±tkow± jest zero.
.TP
.B \-c
Czy¶ci stos katalogów usuwaj±c wszystkie jego pozycje.
.TP
.B \-l
Tworzy d³u¿szy listing; domy¶lnie format listingu pos³uguje siê tyld± do
oznaczania katalogu domowego.
.TP
.B \-p
Wypisuje stos katalogów po jednej pozycji na wiersz.
.TP
.B \-v
Wypisuje stos katalogów po jednej pozycji na wiersz,
poprzedzaj±c ka¿d± z nich jej pozycj± (indeksem) w stosie.
.PD
.PP
Warto¶ci± zwracan± jest 0, chyba ¿e podano nieprawid³ow± opcjê lub
\fIn\fP wskazuje poza koniec stosu katalogów.
.RE
.TP
\fBdisown\fP [\fB\-ar\fP] [\fB\-h\fP] [\fIzadanie\fP ...]
Bez opcji, ka¿de z podanych
.I zadañ
usuwane jest z tablicy zadañ aktywnych.
Je¶li u¿yto opcji \fB\-h\fP, ka¿de
.I zadanie
nie jest usuwane z tablicy, ale jest jako takie zaznaczane, tak ¿e
do zadania nie jest wysy³any sygna³
.SM
.B SIGHUP
je¶li pow³oka otrzymuje
.SM
.BR SIGHUP .
Je¶li nie podano
.I zadania
i nie u¿yto ani opcji
.B \-a
ani
.BR \-r ,
to u¿ywane jest \fIzadanie bie¿±ce\fP.
Je¿eli podano
.IR zadanie ,
opcja
.B \-a
oznacza usuniêcie lub zaznaczenie wszystkich zadañ;
opcja
.B \-r
bez argumentu
.I zadania
ogranicza akcjê do dzia³aj±cych zadañ.
Warto¶ci± zwracan± jest 0, chyba ¿e
.I zadanie
nie okre¶la poprawnego zadania.
.TP
\fBecho\fP [\fB\-neE\fP] [\fIargument\fP ...]
Wy¶wietla \fIargument\fPy, rozdzielone spacjami, zakoñczone znakiem nowej
linii. Kodem zakoñczenia jest zawsze 0.
Je¿eli podano \fB\-n\fP, to nie jest wysy³any koñcz±cy znak nowej linii.
Je¿eli podano opcjê \fB\-e\fP, w³±czana jest interpretacja podanych ni¿ej
znaków specjalnych. Opcja \fB\-E\fP wy³±cza interpretacjê tych znaków,
nawet na systemach, gdzie s± one domy¶lnie interpretowane.
Do dynamicznego sprawdzania, czy \fBecho\fP interpretuje domy¶lnie te znaki,
czy nie, s³u¿y opcja pow³oki \fBxpg_echo\fP.
.B echo
nie interpretuje
.B \-\-
jako oznaczenia koñca opcji.
.B echo
interpretuje nastêpuj±ce sekwencje specjalne:
.RS
.PD 0
.TP
.B \ea
dzwonek (alert)
.TP
.B \eb
backspace
.TP
.B \ec
pomiñ koñcz±cy znak nowej linii
.TP
.B \ee
znak escape
.TP
.B \ef
wysuw strony (form feed)
.TP
.B \en
znak nowej linii (new line)
.TP
.B \er
powrót karetki (carriage return)
.TP
.B \et
tabulacja pozioma (horizontal tab)
.TP
.B \ev
tabulacja pionowa (vertical tab)
.TP
.B \e\e
odwrotny uko¶nik (backslash)
.TP
.B \e\fInnn\fP
o¶miobitowy znak, którego warto¶ci± jest ósemkowa liczba \fInnn\fP
(jedna do trzech cyfr)
.TP
.B \ex\fIHH\fP
o¶miobitowy znak, którego warto¶ci± jest szesnastkowa liczba \fInnn\fP
(jedna lub dwie cyfry szesnastkowe)
.PD
.RE
.TP
\fBenable\fP [\fB\-adnps\fP] [\fB\-f\fP \fIplik\fP] [\fInazwa\fP ...]
W³±cza i wy³±cza wbudowane polecenia pow³oki.
Wy³±czenie poleceñ wbudowanych umo¿liwia wykonanie polecenia dyskowego
maj±cego tê sam± nazwê, co wbudowane, bez podawania jego pe³nej
nazwy ¶cie¿kowej, mimo i¿ pow³oka normalnie szuka
poleceñ wbudowanych przed poleceniami dyskowymi.
Je¿eli pos³u¿ono siê opcj± \fB\-n\fP, wy³±czana jest ka¿da z \fInazw\fP;
w przeciwnym razie \fInazwy\fB s± w³±czone.
Na przyk³ad, chc±c u¿yæ pliku binarnego
.B test
znalezionego przez
.SM
.B PATH
zamiast wersji wbudowanej w pow³okê, nale¿y uruchomiæ
.if t \f(CWenable -n test\fP.
.if n ,,enable -n test''.
Opcja
.B \-f
oznacza za³adowanie nowego polecenia wbudowanego
.I nazwa
z obiektu dzielonego (shared object)
.IR plik ,
na systemach obs³uguj±cych dynamiczne ³adowanie.
Opcja
.B \-d
usunie polecenie wbudowane za³adowane poprzednio przez
.BR \-f .
Je¿eli nie podano ¿adnych argumentów \fInazwa\fP lub je¶li podano opcjê
.BR \-p ,
wypisywana jest lista poleceñ wbudowanych pow³oki.
Bez innych argumentów opcyjnych, lista ta sk³ada siê ze wszystkich
w³±czonych poleceñ wbudowanych.
Je¶li podano \fB\-n\fP, wypisywane s± tylko wy³±czone polecenia
wbudowane.
Je¿eli podano \fB\-a\fP, wypisywana lista zawiera wszystkie polecenia
wbudowane, ze wskazaniem przy ka¿dym czy jest ono w³±czone czy te¿ nie.
Je¿eli podano \fB\-s\fP, wyj¶cie ograniczone jest do POSIXowych
,,\fIspecjalnych\fP'' poleceñ wbudowanych.
Warto¶ci± zwracan± jest 0, chyba ¿e
.I nazwa
nie jest poleceniem wbudowanym pow³oki lub wyst±pi³ b³±d podczas
³adowania nowego polecenia wbudowanego z obiektu dzielonego.
.TP
\fBeval\fP [\fIargument\fP ...]
\fIArgument\fPy s± czytane i ³±czone w pojedyncze polecenie.
Polecenie to jest nastêpnie odczytywane i wykonywane przez pow³okê, za¶
jego kod zakoñczenia jest zwracany jako warto¶æ
.BR eval .
Je¿eli nie na ¿adnych
.IR argumentów ,
lub wszystkie argumenty s± puste,
.B eval
zwraca 0.
.TP
\fBexec\fP [\fB\-cl\fP] [\fB\-a\fP \fInazwa\fP] [\fIpolecenie\fP [\fIargumenty\fP]]
Je¿eli podano
.IR polecenie ,
zastêpuje ono pow³okê.
Nie tworzony jest ¿aden nowy proces.
.I Argumenty
staj± siê argumentami \fIpolecenia\fP.
Je¶li podano opcjê
.BR \-l ,
umieszcza kreskê na pocz±tku zerowego argumentu przesy³anego do
.IR polecenia .
Tak samo, jak robi to
.IR login (1).
Opcja
.B \-c
powoduje, ¿e
.I polecenie
zostanie wykonane z pustym ¶rodowiskiem. Je¿eli podano
.BR \-a ,
pow³oka przesy³a do wykonywanego polecenia
.I nazwê
jako zerowy argument. Je¿eli
.I polecenie
z jakiego¶ powodu nie mo¿e zostaæ wykonane, to pow³oka nie-interaktywna
koñczy pracê, chyba ¿e w³±czona jest opcja pow³oki
.BR execfail,
wówczas zwraca niepowodzenie.
Pow³oka interaktywna zwraca niepowodzenie je¶li plik nie mo¿e zostaæ
wykonany.
Je¿eli nie podano
.IR polecenia ,
przekierowania skutkuj± w bie¿±cej pow³oce, a kodem zakoñczenia
jest 0. W przypadku b³êdu przekierowania kod zakoñczenia wynosi 1.
.\" any redirections take effect in the current shell,
.TP
\fBexit\fP [\fIn\fP]
Powoduje, ¿e pow³oka koñczy pracê z kodem równym \fIn\fP. Je¶li pominiêto
.IR n ,
kodem zakoñczenia jest kod ostatniego wykonanego polecenia.
Przed koñcem pracy pow³oki wykonywane jest przechwycenie sygna³u
.SM
.BR EXIT .
.TP
.PD 0
\fBexport\fP [\fB\-fn\fP\^] [\fInazwa\fP[=\fIs³owo\fP]] ...
.TP
.B export \-p
.PD
Podane
.I nazwy
zaznaczane s± do automatycznego wyeksportowania do ¶rodowiska nastêpnych
wykonywanych poleceñ. Je¶li podano opcjê
.BR \-f ,
to
.I nazwy
odnosz± siê do funkcji.
Je¿eli nie podano ¿adnych
.I nazw
lub je¿eli podano opcjê
.BR \-p ,
to wypisywana jest lista wszystkich eksportowanych w tej pow³oce nazw.
Opcja
.B \-n
powoduje usuniêcie cechy eksportowania z podanych zmiennych.
.B export
zwraca zerowy kod zakoñczenia, chyba ¿e napotkano nieprawid³ow± opcjê,
jedna z \fInazw\fP nie jest poprawn± nazw± zmiennej pow³oki lub
podano
.B \-f
z
.IR nazw± ,
która nie jest funkcj±.
.TP
.PD 0
\fBfc\fP [\fB\-e\fP \fInazwa_e\fP] [\fB\-nlr\fP] [\fIpierwsze\fP] [\fIostatnie\fP]
.TP
\fBfc\fP \fB\-s\fP [\fIwzorzec\fP=\fIzast±pienie\fP] [\fIpolecenie\fP]
.PD
Polecenie poprawiania (Fix Command).
W pierwszej postaci, z listy historii wybierany jest zakres poleceñ od
.I pierwszego
do
.IR ostatniego .
.I Pierwsze
i
.I ostatnie
mog± byæ podawane jako ³añcuch (do odnalezienia ostatniego polecenia
rozpoczynaj±cego siê tym ³añcuchem) lub jako liczba (indeks w li¶cie
historii, gdzie liczba ujemna u¿ywana jest jako offset od numeru bie¿±cego
polecenia), Je¿eli nie okre¶lono
.IR ostatniego ,
to jest ono ustawiane na bie¿±ce polecenie w przypadku listowania (tak ¿e
.if n ,,fc \-l \-10''
.if t \f(CWfc \-l \-10\fP
wypisuje ostatnich 10 poleceñ) i na
.I pierwsze
w pozosta³ych przypadkach.
Je¿eli nie okre¶lono
.IR pierwszego ,
polecenia to jest ono ustawiane na poprzednie polecenie w przypadku edycji
a na \-16 przy listowaniu.
.sp 1
Opcja
.B \-n
wstrzymuje wy¶wietlanie numerów poleceñ podczas listowania.
Opcja
.B \-r
odwraca kolejno¶æ poleceñ.
Je¿eli podano opcjê
.BR \-l ,
to polecenia listowane s± na standardowym wyj¶ciu. W przeciwnym razie
dla pliku zawieraj±cego te polecenia wywo³ywany jest edytor podany przez
.IR nazwa_e .
Je¿eli nie podano
.IR nazwa_e ,
u¿ywana jest warto¶æ
.SM
.BR FCEDIT ,
a warto¶æ
.SM
.B EDITOR
je¶li nie ustawiono
.SM
.BR FCEDIT .
Je¿eli nie ustawiono ¿adnej z nich u¿ywany, jest
.FN vi .
Po zakoñczeniu edycji, wysy³ane edytowane polecenia s± wy¶wietlane przez
echo i wykonywane.
.sp 1
W drugiej postaci, \fIpolecenie\fP jest ponownie wykonywane po ka¿dej
wymianie wyst±pienia \fIwzorca\fP przez \fIzast±pienie\fP.
Przydatnym aliasem do wykorzystania z t± form± jest
.if n ,,r=fc -s'',
.if t \f(CWr='fc \-s'\fP,
tak, ¿e napisanie
.if n ,,r cc''
.if t \f(CWr cc\fP
uruchamia ostatnie polecenie rozpoczynaj±ce siê od
.if n ,,cc''
.if t \f(CWcc\fP
a napisanie
.if n ,,r''
.if t \f(CWr\fP
ponownie wykonuje ostatnie polecenie.
.sp 1
Je¿eli u¿yta zosta³a pierwsza postaæ, to warto¶ci± zwracan± jest 0, chyba
¿e napotkano nieprawid³ow± opcjê lub
.I pierwszy
albo
.I ostatni
okre¶laj± wiersze historii spoza zakresu.
Je¿eli podano opcjê
.BR \-e ,
warto¶ci± zwracan± jest warto¶æ ostatniego wykonanego polecenia lub
niepowodzenie je¶li pojawi³ siê b³±d tymczasowego pliku poleceñ.
Je¿eli u¿yta zosta³a druga postaæ, to zwracanym kodem jest kod ponownie
wykonanego polecenia, chyba ¿e
.I polecenie
nie okre¶la poprawnego wiersza poleceñ -- wówczas
.B fc
zwraca pora¿kê.
.TP
\fBfg\fP [\fIzadanie\fP]
Wznawia
.I zadanie
na pierwszym planie i czyni je zadaniem bie¿±cym.
Je¿eli nie podano
.IR zadania ,
u¿ywane jest \fIbie¿±ce zadanie\fP w pojêciu pow³oki.
Warto¶ci± zwracan± jest warto¶æ polecenia umieszczonego na pierwszym planie,
lub pora¿ka je¿eli
.B fb
uruchomiono przy wy³±czonej kontroli zadañ, lub uruchomiono je przy w³±czonej
kontroli zadañ, ale
.I zadanie
nie okre¶la prawid³owego zadania lub
.I zadanie
okre¶la zadanie, które zosta³o uruchomione bez kontroli zadañ.
.TP
\fBgetopts\fP \fI³añcuch_opcji\fP \fInazwa\fP [\fIargumenty\fP]
.B getopts
u¿ywane jest przez procedury pow³oki do analizy parametrów pozycyjnych.
.I ³añcuch opcji
zawiera znaki opcji, jakie maj± byæ rozpoznawane; je¿eli po znaku
wystêpuje dwukropek, to oczekuje siê, ¿e opcja bêdzie posiadaæ argument,
który powinien byæ od niej oddzielony bia³ym znakiem.
Jako znaki opcji mog± wyst±piæ dwukropek i znak zapytania.
Przy ka¿dym wywo³aniu
.B getopts
umieszcza nastêpn± opcjê w zmiennej pow³oki
.IR nazwa ,
inicjuj±c
.I nazwê
je¶li nie istnia³a. Indeks nastêpnego argumentu do przetwarzania umieszczany
jest w zmiennej
.SM
.BR OPTIND .
.SM
.B OPTIND
inicjowany jest na 1 za ka¿dym razem, gdy wywo³ywana jest pow³oka lub skrypt
pow³oki. Gdy opcja wymaga argumentu,
.B getopts
umieszcza go w zmiennej
.SM
.BR OPTARG .
Pow³oka nie resetuje
.SM
.B OPTIND
automatycznie; musi byæ on resetowany rêcznie pomiêdzy wielokrotnymi
odwo³aniami do
.B getopts
w tym samym wywo³aniu pow³oki, je¶li u¿ywany ma byæ nowy zestaw parametrów.
.sp 1
Po napotkaniu koñca opcji, \fBgetopts\fP koñczy pracê zwracaj±c warto¶æ
wiêksz± od zera.
\fBOPTIND\fP ustawiane jest na indeks pierwszego argumentu nie bêd±cego
opcj±, za¶ \fBnazwa\fP ustawiana jest na ?.
.sp 1
.B getopts
normalnie analizuje parametry pozycyjne, ale je¶li w
.IR argumentach ,
podano wiêcej argumentów, to
.B getopts
przetwarza je zamiast parametrów pozycyjnych.
.sp 1
.B getopts
mo¿e zg³aszaæ b³êdy na dwa sposoby. Je¿eli pierwszym znakiem
.I ³añcucha opcji
jest dwukropek, to stosowane jest
.I ciche
(silent) zg³aszanie b³êdów. Przy zwyk³ej pracy komunikaty diagnostyczne
wypisywane s± przy napotkaniu nieprawid³owych opcji lub brakuj±cych argumentów
opcji.
Je¿eli zmienna
.SM
.B OPTERR
ustawiona jest na 0, nie bêd± wy¶wietlane ¿adne komunikaty b³êdów, nawet
je¶li pierwszym znakiem
.I ³añcucha opcji
nie jest dwukropek.
.sp 1
Przy napotkaniu nieprawid³owej opcji
.B getopts
umieszcza ? w
.I nazwie
i, je¶li nie pracuje w trybie cichym, wypisuje komunikat b³êdu i kasuje
.SM
.BR OPTARG .
Je¿eli
.B getopts
pracuje w trybie cichym, to znaleziony znak opcji umieszczany jest w
.SM
.B OPTARG
i nie jest wypisywany ¿aden komunikat diagnostyczny.
.sp 1
Je¶li nie znaleziono wymaganego argumentu, a
.B getopts
nie pracuje w trybie cichym, w
.I nazwa
umieszczany jest znak zapytania (\^\fB?\fP\^), kasowane jest
.SM
.B OPTARG
i wy¶wietlany jest komunikat b³êdu.
Je¿eli
.B getopts
pracuje w trybie cichym, to w
.I nazwie
umieszczany jest dwukropek (\^\fB:\fP\^), a
.SM
.B OPTARG
ustawiane jest na znaleziony znak opcji.
.sp 1
.B getopts
zwraca prawdê, je¶li znaleziono okre¶lon± lub nie okre¶lon± opcjê.
Zwraca fa³sz je¿eli napotkano koniec opcji lub pojawi³ siê b³±d.
.TP
\fBhash\fP [\fB\-r\fP] [\fB\-p\fP \fIplik\fP] [\fB\-t\fP] [\fInazwa\fP]
Dla ka¿dej
.I nazwy
okre¶lana i zapamiêtywana jest pe³na nazwa plikowa polecenia wyszukanego w
katalogach
.B $PATH .
Je¿eli podano opcjê
.BR \-p ,
nie jest wykonywane przeszukanie ¶cie¿ki, a
.I plik
u¿ywane jest jako pe³na nazwa pliku polecenia.
Opcja
.B \-r
powoduje, ¿e pow³oka zapomina wszystkie zapamiêtane wcze¶niej miejsca.
Je¶li podano opcjê
.BR \-t ,
to wypisywana jest odpowiadaj±ca \fInazwie\fP pe³na nazwa pliku.
Je¿eli przy wiêcej ni¿ jednym argumencie \fInazwy\fP podano \fB\-t\fP,
to przed ka¿d± przechowywan± pe³n± nazw± wypisywana jest \fInazwa\fP.
Je¿eli nie podano ¿adnych argumentów, to wypisywana jest informacja o
zapamiêtanych poleceniach.
Kodem zwracanym jest prawda, chyba ¿e nie odnaleziono
.I nazwy
lub podano nieprawid³ow± opcjê.
.TP
\fBhelp\fP [\fB\-s\fP] [\fIwzorzec\fP]
Wy¶wietla pomocne informacje o poleceniach wbudowanych. Je¿eli podano
.IR wzorzec ,
to
.B help
daje szczegó³ow± pomoc dotycz±c± wszystkich poleceñ pasuj±cych do
.IR wzorca ;
w przeciwnym razie wypisywana jest pomoc dla wszystkich poleceñ wbudowanych
i struktur steruj±cych pow³oki.
Opcja \fB\-s\fP ogranicza wy¶wietlan± informacjê do krótkiego opisu sk³adni.
Zwracany jest kod 0, chyba ¿e ¿adne z poleceñ nie pasuje do
.IR wzorca .
.TP
.PD 0
\fBhistory [\fIn\fP]
.TP
\fBhistory\fP \fB\-c\fP
.TP
\fBhistory \-d\fP \fIoffset\fP
.TP
\fBhistory\fP \fB\-anrw\fP [\fIplik\fP]
.TP
\fBhistory\fP \fB\-p\fP \fIarg\fP [\fIarg ...\fP]
.TP
\fBhistory\fP \fB\-s\fP \fIarg\fP [\fIarg ...\fP]
.PD
Bez ¿adnych opcji, wy¶wietla listê historii poleceñ z numerami wierszy.
Wiersze ukazane z
.B *
zosta³y zmienione. Argument
.I n
pokazuje jedynie ostatnich
.I n
wierszy. Je¿eli podano \fIplik\fP, to u¿ywany jest on jako nazwa pliku
historii; je¶li nie, to u¿ywana jest warto¶æ
.SM
.BR HISTFILE .
Opcje, je¿eli je podano, maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.B \-c
Czy¶ci listê historii usuwaj±c wszystkie jej pozycje.
.TP
\fB\-d\fP \fIoffset\fP
Usuwa wpis historii z pozycji \fIoffset\fP.
.TP
.B \-a
Dodaje ,,nowe'' wiersze (wprowadzone od pocz±tku bie¿±cej sesji \fBbash\fP)
do pliku historii.
.TP
.B \-n
Wczytuje do bie¿±cej listy wiersze jeszcze nie przeczytane z pliku
historii. S± to wiersze do³±czone do pliku historii od chwili rozpoczêcia
bie¿±cej sesji pracy \fBbash\fP.
.TP
.B \-r
Czyta zawarto¶æ pliku historii i pos³uguje siê ni± jako bie¿±c±
list± historii.
.TP
.B \-w
Zapisuje bie¿±c± listê do pliku historii, nadpisuj±c jego zawarto¶æ.
.TP
.B \-p
Na zadanych \fIargumentach\fP wykonuje podstawianie historii (history
substitution). Wy¶wietla wyniki na standardowym wyj¶ciu.
Nie zachowuje wyników na li¶cie.
Ka¿dy z \fIargumentów\fP musi byæ cytowany, by wy³±czyæ normaln±
interpretacjê historii.
.TP
.B \-s
Zachowuje
.I argumenty
na li¶cie historii jako pojedyncz± pozycjê. Przed dodaniem
.I argumentów
z listy usuwane jest ostatnie polecenie.
.PD
.PP
Warto¶ci± zwracan± jest 0, chyba ¿e napotkano nieprawid³ow± opcjê lub
podczas odczytu czy zapisu pliku historii pojawi³ siê b³±d, podano
niepoprawny argument \fIoffset\fP opcji \fB\-d\fP, lub nie powiod³a siê
interpretacja historii podanej jako argument \fB\-p\fP.
.RE
.TP
.PD 0
\fBjobs\fP [\fB\-lnprs\fP] [ \fIzadanie\fP ... ]
.TP
\fBjobs\fP \fB\-x\fP \fIpolecenie\fP [ \fIargumenty\fP ... ]
.PD
Pierwsza postaæ podaje aktywne zadania. Opcje maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
.B \-l
Oprócz zwyk³ej informacji podaje identyfikatory procesów.
.TP
.B \-p
Listuje tylko ID procesu lidera grupy procesów zadania.
.TP
.B \-n
Wy¶wietla wy³±cznie informacjê o zadaniach, które zmieni³y status od
chwili, gdy u¿ytkownik by³ ostatnio powiadamiany o ich statusie.
.TP
.B \-r
Ogranicz wyniki do zadañ pracuj±cych.
.TP
.B \-s
Ogranicz wyniki do zadañ zatrzymanych.
.PD
.PP
Je¿eli podano
.IR zadanie ,
wyniki ograniczane s± do informacji o tym zadaniu.
Kodem zwracanym jest 0, chyba ¿e napotkano nieprawid³ow± opcjê
lub podano nieprawid³owe
.IR zadanie .
.PP
Je¿eli podano opcjê
.BR \-x ,
to
.B jobs
zastêpuje wszelkie
.I zadania
znalezione w
.I poleceniu
lub
.I argumentach
odpowiednim ID grupy procesów, wykonuje
.I polecenie
przesy³aj±c mu
.IR argumenty ,
i zwraca jego kod zakoñczenia.
.RE
.TP
.PD 0
\fBkill\fP [\fB\-s\fP \fIsigspec\fP | \fB\-n\fP \fIsignum\fP | \fB\-\fP\fIsigspec\fP] [\fIpid\fP | \fIjobspec\fP] ...
.TP
\fBkill\fP \fB\-l\fP [\fIsigspec\fP | \fIexit_status\fP]
.PD
Wysy³a sygna³y okre¶lony przez
.I sigspec
lub
.I signum
do procesu okre¶lonego przez
.I pid
lub
.IR jobspec .
.I sigspec
jest albo nazw± sygna³u, jak np.
.SM
.B SIGKILL
albo numerem sygna³u;
.I signum
jest numerem sygna³u. Je¿eli
.I sigspec
jest nazw± sygna³u, to mo¿e ona zostaæ podana z przedrostkiem
.SM
.B SIG
lub bez niego.
Je¶li nie podano
.IR sigspec ,
to przyjmuje siê
.SM
.BR SIGTERM .
Opcja
.B \-l
listuje nazwy sygna³ów.
Je¿eli przy podanym
.B \-l
u¿yto jakich¶ argumentów, to listowane s± sygna³y odpowiadaj±ce tym
argumentom, a kodem zwracanym jest 0.
Argument \fIexit_status\fP opcji
.B \-l
jest liczb± okre¶laj±c± numer sygna³u lub kod zakoñczenia procesu
przerwanego przez sygna³.
.B kill
zwraca prawdê, je¶li przynajmniej jeden z sygna³ów zosta³ pomy¶lnie
przes³any, lub fa³sz, je¶li pojawi³ siê b³±d lub napotkano niepoprawn±
opcjê.
.TP
\fBlet\fP \fIarg\fP [\fIarg\fP ...]
Ka¿dy
.I argument
jest wyra¿eniem arytmetycznym, jakie ma zostaæ zinterpretowane (zobacz
.SM
.BR "OBLICZANIE WYRA¯EÑ ARYTMETYCZNYCH" ).
Je¿eli ostatni z nich interpretowany jest jako zero, to
.B let
zwraca 1; w przeciwnym wypadku zwracane jest 0.
.TP
\fBlocal\fP [\fIopcja\fP] [\fInazwa\fP[=\fIwarto¶æ\fP] ...]
Dla ka¿dego argumentu tworzona jest zmienna lokalna o nazwie
.I nazwa
i jest jej przypisywana
.IR warto¶æ .
\fIOpcj±\fP mo¿e byæ ka¿da z opcji akceptowanych przez \fBdeclare\fP.
Gdy
.B local
u¿ywane jest wewn±trz funkcji, powoduje, ¿e zmienna
.I nazwa
ma zasiêg widzialno¶ci ograniczony do tej funkcji i jej potomków.
Bez operandów,
.B local
wysy³a listê zmiennych lokalnych na standardowe wyj¶cie. B³êdem jest u¿ycie
.B local
poza funkcj±.
Zwracany jest kod 0, chyba ¿e
.B local
zostanie u¿yte poza funkcj± lub podano nieprawid³ow±
.IR nazwê ,
albo \fInazwa\fP jest zmienn± tylko do odczytu.
.TP
.B logout
Koñczy pracê pow³oki zg³oszeniowej.
.TP
\fBpopd\fP [\-\fBn\fP] [+\fIn\fP] [\-\fIn\fP]
Usuwa pozycje ze stosu katalogów. Bez argumentów, usuwa katalog
z wierzcho³ka stosu i wykonuje
.B cd
do nowego katalogu na wierzcho³ku.
Argumenty, je¶li wystêpuj±, maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
\fB+\fP\fIn\fP
Usuwa \fIn\fPt± pozycjê, licz±c od lewej, listy pokazywanej przez
.BR dirs ,
zaczynaj±c od zera. Na przyk³ad
.if n ,,popd +0''
.if t \f(CWpopd +0\fP
usuwa pierwszy katalog, a
.if n ,,popd +1''
.if t \f(CWpopd +1\fP
drugi.
.TP
\fB\-\fP\fIn\fP
Usuwa \fIn\fPt± pozycjê, licz±c od prawej, listy pokazywanej przez
.BR dirs ,
zaczynaj±c od zera. Na przyk³ad ,,popd -0'' usuwa ostatni katalog,
,,popd -1'' przedostatni.
.TP
.B \-n
Nie wykonuje zwyk³ej zmiany katalogu podczas usuwania katalogów ze stosu,
tak ¿e zmieniana jest tylko zawarto¶æ stosu.
.PD
.PP
Je¿eli polecenie
.B popd
powiedzie siê, to wykonywane jest równie¿
.BR dirs ,
a kodem zwracanym jest 0.
.B popd
zwraca fa³sz je¶li napotkano nieprawid³ow± opcjê, stos katalogów jest
pusty, podano nieistniej±c± pozycjê stosu lub nie uda³a siê zmiana
katalogu.
.RE
.TP
\fBprintf\fP \fIformat\fP [\fIargumenty\fP]
Zapisuje sformatowane \fIargumenty\fP na standardowe wyj¶cie przy pomocy
zadanego \fIformatu\fP.
\fIformat\fP jest ³añcuchem znakowym zawieraj±cym trzy rodzaje obiektów:
zwyk³e znaki, które s± po prostu kopiowane na standardowe wyj¶cie,
sekwencje specjalne, które s± konwertowane i kopiowane na standardowe
wyj¶cie, i specyfikacje formatu, z których ka¿da powoduje wypisanie
nastêpnego kolejnego \fIargumentu\fP.
Oprócz standardowych formatów \fIprintf\fP(1), \fB%b\fP powoduje, ¿e
\fBprintf\fP interpretuje sekwencje specjalne w odpowiednim \fIargumencie\fP,
za¶ \fB%q\fP powoduje, ¿e \fBprintf\fP wysy³a odpowiedni \fIargument\fP
w formacie, jaki mo¿e byæ ponownie wykorzystany jako wej¶cie pow³oki.
.sp 1
W razie potrzeby \fIformat\fP wykorzystywany jest ponownie, a¿ do
obs³u¿enia wszystkich \fIargumentów\fP.
Je¿eli \fIformat\fP wymaga wiêkszej ilo¶ci
\fIargumentów\fP ni¿ podano, to dodatkowe specyfikacje formatu zachowuj±
siê tak, jakby dostarczono im odpowiednio warto¶æ zerow± lub ³añcuch pusty.
Zwracana jest warto¶æ zero w przypadku powodzenia, niezerowa przy pora¿ce.
.TP
.PD 0
\fBpushd\fP [\fB\-n\fP] [\fIkatalog\fP]
.TP
\fBpushd\fP [\fB\-n\fP] [+\fIn\fP] [\-\fIn\fP]
.PD
Dodaje katalog na wierzcho³ek stosu katalogów, albo obraca stos, czyni±c
nowy wierzcho³ek stosu bie¿±cym katalogiem roboczym.
Bez argumentów, zamienia miejscami dwa najwy¿sze katalogi stosu
[wierzcho³ek i nastêpny] i zwraca 0, chyba ¿e stos jest pusty.
Argumenty, je¶li je podano, maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
\fB+\fP\fIn\fP
Obraca stos, tak ¿e \fIn\fPty katalog (licz±c od lewej listy pokazywanej
przez
.BR dirs ,
poczynaj±c od zera)
staje siê wierzcho³kiem.
.TP
\fB\-\fP\fIn\fP
Obraca stos, tak ¿e \fIn\fPty katalog (licz±c od prawej listy pokazywanej
przez
.BR dirs ,
poczynaj±c od zera)
staje siê wierzcho³kiem.
.TP
.B \-n
Nie wykonuje zwyk³ej zmiany katalogu podczas dodawania katalogów do stosu,
tak ¿e zmieniany jest tylko stos.
.TP
.I katalog
Odk³ada
.I katalog
na wierzcho³ek stosu, czyni±c go nowym bie¿±cym katalogiem roboczym.
.PD
.PP
Je¿eli polecenie
.B pushd
powiod³o siê, to wykonywane jest równie¿
.BR dirs .
Je¿eli u¿ywana jest pierwsza postaæ
.BR pushd ,
to zwracane jest 0, chyba ¿e nie uda³o siê cd na
.IR katalog .
Przy drugiej postaci,
.B pushd
zwraca 0, chyba ¿e stos katalogów jest pusty, podano nieistniej±cy element
stosu lub nie powiod³a siê zmiana katalogu na zadany nowy katalog
bie¿±cy.
.RE
.TP
\fBpwd\fP [\fB\-LP\fP]
Wypisuje bezwzglêdn± nazwê pliku bie¿±cego katalogu roboczego.
Pokazana nazwa nie zawiera ¿adnych dowi±zañ symbolicznych je¶li
podano opcjê
.B \-P
albo
w³±czona jest opcja
.B \-o physical
wbudowanego polecenia
.BR set .
Je¶li u¿yto opcji
.BR \-L ,
wypisana nazwa ¶cie¿kowa mo¿e zawieraæ dowi±zania symboliczne.
Zwracany kod wynosi 0, chyba ¿e podczas odczytu nazwy bie¿±cego katalogu
pojawi siê b³±d lub podano nieprawid³ow± opcjê.
.TP
\fBread\fP [\fB\-ers\fP] [\fB\-t\fP \fItimeout\fP] [\fB\-a\fP \fIanazwa\fP] [\fB\-p\fP \fIzachêta\fP] [\fB\-n\fP \fInznak\fP] [\fB\-d\fP \fIsep\fP] [\fInazwa\fP ...]
Ze standardowego wej¶cia czytany jest pojedynczy wiersz, a jego pierwsze
s³owo jest przypisywane do pierwszej
.IR nazwy ,
drugie s³owo do drugiej
.I nazwy
i tak dalej, przy czym pozosta³e na koniec s³owa i rozdzielaj±ce je
separatory przypisane zostan± do ostatniej
.IR nazwy .
Je¿eli ze standardowego wej¶cia przeczytano mniej s³ów ni¿ podanych zosta³o
nazw, to pozosta³ym nazwom przypisywane s± puste warto¶ci.
Do podzia³u wiersza na s³owa wykorzystywane s± znaki z
.SM
.BR IFS .
Znaku odwrotnego uko¶nika (\fB\e\fP) mo¿na u¿yæ do usuniêcia specjalnego
znaczenia nastêpnego czytanego znaku oraz do oznaczenia kontynuacji wiersza.
Opcje, je¶li je podano, maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
.B \-a \fIanazwa\fP
S³owa s± przypisywane do kolejnych indeksów zmiennej tablicowej
.IR anazwa ,
poczynaj±c od 0.
.I anazwa
jest kasowana przed przypisaniem nowych warto¶ci.
Inne argumenty \fInazwa\fP s± ignorowane.
.TP
.B \-d \fIsep\fP
Pierwszy znak \fIsep\fP s³u¿y do zakoñczenia wiersza wej¶cia, zamiast
znaku nowej linii.
.TP
.B \-e
Je¿eli standardowe wej¶cie pochodzi z terminala, to do uzyskania wiersza
u¿ywane jest
.B readline
(zobacz
.SM
.B READLINE
powy¿ej).
.TP
.B \-n \fInznak\fP
\fBread\fP powraca po przeczytaniu \fInznak\fP znaków, zamiast czekaæ na
ca³y wiersz wej¶cia.
.TP
.B \-p \fIzachêta\fP
Wy¶wietla \fIzachêtê\fP (prompt) na standardowym wyj¶ciu b³êdów,
bez koñcz±cego znaku nowej linii, przed prób± odczytu wej¶cia.
Zachêta wy¶wietlana jest tylko je¶li wej¶cie pochodzi z terminala.
.TP
.B \-r
Odwrotny uko¶nik nie dzia³a jako znak specjalny. Traktowany jest jako czê¶æ
wiersza. W szczególno¶ci, para odwrotny uko¶nik-znak nowej linii nie mo¿e
byæ wykorzystana jako kontynuacja wiersza.
.TP
.B \-s
Tryb cichy. Je¿eli wej¶cie pochodzi z terminala, to znaki nie s± powtarzane
(bez echa).
.TP
.B \-t \fItimeout\fP
Powoduje, ¿e \fBread\fP zwraca niepowodzenie, je¶li w ci±gu \fItimeout\fP
sekund nie zostanie przeczytany pe³ny wiersz wej¶cia.
Opcja ta nie dzia³a, je¿eli odczyt nie jest prowadzony z terminala
lub potoku.
.PD
.PP
Je¶li nie podano ¿adnych
.IR nazw ,
odczytany wiersz przypisywany jest zmiennej
.SM
.BR REPLY .
Zwracany kod wynosi 0, chyba ¿e napotkano koniec pliku lub \fBread\fP
przekroczy czas oczekiwania.
.RE
.TP
\fBreadonly\fP [\fB\-apf\fP] [\fInazwa\fP ...]
.PD
Podane
\fInazwy\fP oznaczane s± jako readonly; warto¶ci tych
.I nazw
nie mog± byæ zmieniane nastêpuj±cymi pó¼niej przypisaniami.
Je¶¿li podano opcjê
.BR \-f ,
oznaczane s± funkcje o nazwach odpowiadaj±cych
.IR nazwom .
Opcja
.B \-a
ogranicza zmienne do tablic.
Je¶li nie podano argumentów
.I nazw
lub je¶li podano opcjê
.BR \-p ,
wypisywane jest zestawienie wszystkich nazw o atrybucie readonly.
Opcja
.B \-p
powoduje, ¿e wyniki bêd± wy¶wietlane w formacie, który mo¿e byæ ponownie
wykorzystany jako wej¶cie.
Zwracany jest kod równy 0, chyba ¿e napotkano nieprawid³ow± opcjê,
jedna z
.I nazw
nie jest poprawn± nazw± zmiennej pow³oki lub podano
.B \-f
z
.IR nazw± ,
która nie jest funkcj±.
.TP
\fBreturn\fP [\fIn\fP]
Powoduje, ¿e funkcja koñczy pracê zwracaj±c warto¶æ okre¶lon± przez
.IR n .
Je¶li pominiêto
.IR n ,
kodem zakoñczenia jest kod ostatniego polecenia wykonanego w ciele funkcji.
Je¿eli zostanie u¿yte poza funkcj±, ale podczas wykonywania skryptu przez
polecenie
.B .
(\fBsource\fP), powoduje zatrzymanie wykonywania tego skryptu przez pow³okê
i zwrócenie albo
.I n
albo kodu zakoñczenia ostatniego wykonanego w skrypcie polecenia.
Je¿eli zostanie u¿yte poza funkcj± i nie podczas wykonywania skryptu
przez \fB.\fP\^, zwracany jest fa³sz.
.TP
\fBset\fP [\fB\-\-abefhkmnptuvxBCHP\fP] [\fB\-o\fP \fIopcja\fP] [\fIarg\fP ...]
Bez opcji, wy¶wietlane s± nazwa i warto¶æ ka¿dej ze zmiennych pow³oki,
w formacie który mo¿e byæ ponownie wykorzystany jako wej¶cie.
Wyniki s± sortowane zgodnie z bie¿±cymi ustawieniami locale.
Gdy podane s± opcje, ustawiaj± one lub kasuj± atrybuty pow³oki.
Argumenty pozosta³e po przetworzeniu opcji traktowane s± jako warto¶ci
parametrów pozycyjnych i przypisywane, kolejno, do
.BR $1 ,
.BR $2 ,
.B ...
.BR $\fIn\fP .
Opcje, je¶li je podano, maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP 8
.B \-a
Automatycznie zaznacza zmienione lub utworzone zmienne i funkcje
do wyeksportowania ich do ¶rodowiska kolejnych poleceñ.
.TP 8
.B \-b
Natychmiast podaje status zakoñczonych zadañ drugoplanowych,
zamiast czyniæ to przed nastêpn± podstawow± zachêt±. Dzia³a
.\" this is effective only
tylko je¶li w³±czona jest kontrola zadañ.
.TP 8
.B \-e
Zakoñcz natychmiast je¶li \fIpolecenie proste\fP (zobacz
.SM
.B GRAMATYKA POW£OKI
powy¿ej) koñczy pracê z kodem niezerowym. Pow³oka nie koñczy pracy, je¶li
polecenie, które siê nie powiod³o jest czê¶ci± pêtli
.I until
lub
.IR while ,
czê¶ci± instrukcji
.IR if ,
czê¶ci± listy
.B &&
lub
.B \(bv\(bv
lub warto¶æ zwrócona przez polecenie zosta³a odwrócona przez
.BR ! .
Przed zakoñczeniem pracy pow³oki wykonywana jest pu³apka
na sygna³ \fBERR\fP, je¶li by³a ustawiona.
.TP 8
.B \-f
Wy³±cza rozwijanie nazw plików.
.TP 8
.B \-h
Zapamiêtuje po³o¿enie poleceñ przy wyszukiwania ich do wykonania.
Domy¶lnie w³±czone.
.TP 8
.B \-k
Wszystkie argumenty wystêpuj±ce w postaci instrukcji przypisania
umieszczane s± w ¶rodowisku polecenia, nie za¶ tylko te, które poprzedzaj±
nazwê polecenia.
.TP 8
.B \-m
Tryb monitorowania. W³±czona jest kontrola zadañ. Opcja ta jest
domy¶lnie w³±czona dla pow³ok interaktywnych na systemach j± obs³uguj±cych
(zobacz
.SM
.B STEROWANIE ZADANIAMI
powy¿ej). Procesy drugoplanowe dzia³aj± w odrêbnej grupie procesów
a po ich zakoñczeniu wypisywany jest wiersz zawieraj±cy ich kod zakoñczenia.
.TP 8
.B \-n
Odczytuje polecenia, ale nie ich nie wykonuje. Mo¿e byæ wykorzystane do
sprawdzenia b³êdów sk³adni w skrypcie pow³oki. Ignorowane przez pow³oki
interaktywne.
.TP 8
.B \-o \fInazwa\-opcji\fP
Nazw± opcji mo¿e byæ jedna z poni¿szych:
.RS
.TP 8
.B allexport
To samo, co
.BR \-a .
.TP 8
.B braceexpand
To samo, co
.BR \-B .
.TP 8
.B emacs
U¿yj interfejsu edycji wiersza poleceñ w stylu emacsa. W³±czone domy¶lnie,
je¶li pow³oka jest interaktywna, chyba ¿e zosta³a uruchomiona z opcj±
.BR \-\-noediting .
.TP 8
.B errexit
To samo, co
.BR \-e .
.TP 8
.B hashall
To samo, co
.BR \-h .
.TP 8
.B histexpand
To samo, co
.BR \-H .
.TP 8
.B history
W³±cza historiê poleceñ, jak opisano powy¿ej w sekcji
.SM
.BR HISTORII .
Opcja ta jest domy¶lnie w³±czona w pow³okach interaktywnych.
.TP 8
.B ignoreeof
Efekt jest taki, jakby zosta³o wykonane polecenie pow³oki
.if t \f(CWIGNOREEOF=10\fP
.if n ,,IGNOREEOF=10''
(zobacz powy¿ej
.BR "Zmienne pow³oki" ).
.TP 8
.B keyword
To samo, co
.BR \-k .
.TP 8
.B monitor
To samo, co
.BR \-m .
.TP 8
.B noclobber
To samo, co
.BR \-C .
.TP 8
.B noexec
To samo, co
.BR \-n .
.TP 8
.B noglob
To samo, co
.BR \-f .
.TP
.B nolog
Obecnie ignorowane.
.TP 8
.B notify
To samo, co
.BR \-b .
.TP 8
.B nounset
To samo, co
.BR \-u .
.TP 8
.B onecmd
To samo, co
.BR \-t .
.TP 8
.B physical
To samo, co
.BR \-P .
.TP 8
.B posix
Zmienia zachowanie
.B bash
tam, gdzie domy¶lne dzia³anie ró¿ni siê od standardu
POSIX 1003.2, tak by spe³niaæ standard (\fItryb posix\fP).
.TP 8
.B privileged
To samo, co
.BR \-p .
.TP 8
.B verbose
To samo, co
.BR \-v .
.TP 8
.B vi
U¿ywa interfejsu edycji wiersza poleceñ w stylu vi.
.TP 8
.B xtrace
To samo, co
.BR \-x .
.sp .5
.PP
Je¿eli podano
.B \-o
bez \fInazwy\-opcji\fP, to wypisywane s± warto¶ci bie¿±cych opcji.
Je¿eli podano
.B +o
bez \fInazwy\-opcji\fP, na standardowym wyj¶ciu wy¶wietlana jest seria
poleceñ
.B set
potrzebnych do odtworzenia aktualnych ustawieñ opcji.
.RE
.TP 8
.B \-p
W³±cza tryb
.I uprzywilejowany
(privileged). W tym trybie pliki
.SM
.B $ENV
i
.SM
.B $BASH_ENV
nie s± przetwarzane, funkcje pow³oki nie s± dziedziczone
ze ¶rodowiska, a zmienna
.SM
.BR SHELLOPTS,
je¶li wystêpuje w ¶rodowisku, jest ignorowana.
Je¶li pow³oka zosta³a uruchomiona z efektywnym id u¿ytkownika (grupy)
ró¿nych od id rzeczywistego a nie podano opcji \fB\-p\fP, to podejmowane s±
opisane wy¿ej akcje a efektywny id u¿ytkownika jest ustawiany na
identyfikator rzeczywisty. Je¿eli przy uruchamianiu podano opcjê \fB\-p\fP,
to efektywny identyfikator u¿ytkownika nie jest resetowany.
Wy³±czenie tej opcji powoduje, ¿e identyfikatory efektywne u¿ytkownika
i grupy zostan± ustawione na identyfikatory rzeczywiste.
.TP 8
.B \-t
Koñczy pracê po przeczytaniu i wykonaniu jednego polecenia.
.TP 8
.B \-u
Podczas interpretacji parametrów traktuje nieustawione zmienne jako b³±d.
Je¿eli wykonywana jest próba interpretacji nieustawionej zmiennej, to
pow³oka wypisuje komunikat o b³êdzie i, je¶li nie jest interaktywna, koñczy
pracê z niezerowym kodem.
.TP 8
.B \-v
Wypisuje wiersze wej¶ciowe pow³oki przy ich odczytywaniu.
.TP 8
.B \-x
Po interpretacji ka¿dego \fIpolecenia prostego\fP, wy¶wietla zinterpretowan±
warto¶æ
.SM
.BR PS4 ,
po której nastêpuje polecenie i jego zinterpretowane argumenty.
.TP 8
.B \-B
Pow³oka wykonuje interpretacj± nawiasów (zobacz
.B Interpretacja nawiasów
powy¿ej). Domy¶lnie w³±czone.
.TP 8
.B \-C
Je¶li w³±czone,
.B bash
nie nadpisuje istniej±cego pliku przy u¿yciu operatorów przekierowania
.BR > ,
.B >&
i
.BR <> .
Mo¿na to omin±æ tworz±c pliki wyj¶ciowe przy u¿yciu operatora przekierowania
.B >|
zamiast
.BR > .
.TP 8
.B \-H
W³±cza zastêpowanie historii w stylu
.BR ! .
Opcja ta jest domy¶lnie w³±czona dla pow³oki interaktywnej.
.TP 8
.B \-P
Je¿eli jest ustawiona, to pow³oka nie pod±¿a za dowi±zaniami symbolicznymi
podczas wykonywania poleceñ zmieniaj±cych bie¿±cy katalog roboczy, jak
.BR cd .
U¿ywa zamiast tego fizycznej struktury katalogów. Domy¶lnie,
.B bash
pod±¿a za logicznym ³añcuchem katalogów podczas wykonywania poleceñ
zmieniaj±cych bie¿±cy katalog roboczy.
.TP 8
.B \-\-
Je¿eli po tej opcji nie wystêpuj± ¿adne argumenty, to parametry pozycyjne
s± kasowane. W przeciwnym razie, parametry pozycyjne ustawiane s± na
\fIargument\fPy, nawet je¶li niektóre z nich zaczynaj± siê od znaku
.BR \- .
.TP 8
.B \-
Sygnalizuje koniec opcji, powoduj±c przypisanie wszystkich pozosta³ych
\fIargument\fPów do parametrów pozycyjnych.
Opcje
.B \-x
i
.B \-v
s± wy³±czane.
Je¿eli nie ma \fIargumentów\fP, to parametry pozycyjne pozostaj± bez zmian.
.PD
.PP
Opcje s± domy¶lnie wy³±czone, chyba ¿e wskazano inaczej.
U¿ycie + zamiast \- spowoduje, ¿e opcje te zostan± wy³±czone.
Opcje mog± tak¿e zostaæ okre¶lone jako argumenty wywo³ania pow³oki.
Bie¿±cy zestaw opcji mo¿na znale¼æ w
.BR $\- .
Zwracanym kodem jest zawsze prawda, chyba ¿e napotkano nieprawid³ow± opcjê.
.RE
.TP
\fBshift\fP [\fIn\fP]
Parametrom pozycyjne od \fIn\fP+1 ... zmieniaj± nazwy
.B $1
.B ....
parametry reprezentowane przez liczby \fB$#\fP w dó³ do \fB$#\fP\-\fIn\fP+1
s± usuwane.
.I n
musi byæ liczb± nieujemn± mniejsz± lub równ± \fB$#\fP.
Je¿eli
.I n
wynosi 0, parametry nie s± zmieniane.
Je¿eli nie podano
.IR n ,
zak³ada siê, ¿e wynosi 1.
Je¿eli
.I n
jest wiêksze od \fB$#\fP, parametry pozycyjne nie s± zmieniane.
Kod zakoñczenia jest wiêkszy od zera je¿eli
.I n
jest wiêksze od
.B $#
lub mniejsze od zera; w przeciwnym wypadku 0.
.TP
\fBshopt\fP [\fB\-pqsu\fP] [\fB\-o\fP] [\fInazwa_opcji\fP ...]
Prze³±cza warto¶ci zmiennych steruj±cych opcjonalnym zachowaniem pow³oki.
Bez ¿adnych opcji, albo z opcj±
.BR \-p ,
wy¶wietlana jest lista wszystkich daj±cych siê ustawiæ opcji, ze wskazaniem
dla ka¿dej czy jest ona ustawiona czy nie.
Opcja \fB\-p\fP powoduje, ¿e wyniki bêd± wy¶wietlane w postaci daj±cej siê
ponownie wykorzystaæ jako wej¶cie.
Pozosta³e opcje maj± nastêpuj±ce znaczenie:
.RS
.PD 0
.TP
.B \-s
W³±cz (ustaw) ka¿d± \fInazwê_opcji\fP.
.TP
.B \-u
Wy³±cz (usuñ) ka¿d± \fInazwê_opcji\fP.
.TP
.B \-q
Zaniechaj zwyk³ego wy¶wietlania (tryb cichy); zwracany kod wskazuje na
to czy \fInazwa_opcji\fP jest ustawiona czy nie ustawiona.
Je¿eli z
.B \-q
podano wiele argumentów \fInazw_opcji\fP, to zwracanym kodem jest zero, gdy
wszystkie \fInazwy_opcji\fP s± w³±czone; w przeciwnym razie kod jest
niezerowy.
.TP
.B \-o
Ogranicza warto¶ci \fInazwy_opcji\fP do warto¶ci zdefiniowanych dla opcji
.B \-o
wbudowanego polecenia
.BR set .
.PD
.PP
Je¿eli u¿yto albo
.B \-s
albo
.B \-u
bez argumentów \fInazw_opcji\fP, wy¶wietlanie ogranicza siê do tych opcji,
które, odpowiednio, s± ustawione b±d¼ nieustawione.
Je¿eli nie wskazano inaczej, opcje \fBshopt\fP s± domy¶lnie wy³±czone (nie
ustawione).
.PP
Przy listowaniu opcji zwracany jest kod zerowy je¶li wszystkie
\fInazwy_opcji\fP s± w³±czone, niezerowy w przeciwnym wypadku. Przy
ustawianiu lub kasowaniu opcji zwracany jest zerowy kod, chyba ¿e
\fInazwa_opcji\fP nie jest poprawn± opcj± pow³oki.
.PP
Lista opcji \fBshopt\fP obejmuje:
.if t .sp .5v
.if n .sp 1v
.PD 0
.TP 8
.B cdable_vars
Je¶li jest ustawiona, to nie bêd±cy katalogiem argument wbudowanego
polecenia
.B cd
uwa¿any jest za nazwê zmiennej; warto¶ci± tej zmiennej jest katalog,
na który ma nast±piæ zmiana.
.TP 8
.B cdspell
Je¶li jest ustawiona, to pomniejsze b³êdy w pisowni sk³adowej katalogu
w poleceniu
.B cd
bêd± poprawiane.
Sprawdzenie takich b³êdów obejmuje znaki zamienione miejscami, znaki
pominiête i pojedyncze zbêdne znaki. Je¿eli znaleziono poprawkê, wypisywana
jest poprawna nazwa pliku a polecenie kontynuuje dzia³anie.
.\" the command proceeds.
Opcja ta jest wykorzystywana tylko przez pow³oki interaktywne.
.TP 8
.B checkhash
Je¶li jest ustawiona, \fBbash\fP sprawdza przed prób± wykonania polecenia
znalezionego w tablicy mieszaj±cej, czy polecenie to istnieje. Je¿eli
ju¿ nie istnieje, to wykonywane jest zwyk³e przeszukiwanie ¶cie¿ki.
.TP 8
.B checkwinsize
Je¿eli jest ustawione, \fBbash\fP sprawdza rozmiar okna po ka¿dym poleceniu
i, je¶li zachodzi potrzeba, aktualizuje warto¶æ
.SM
.B LINES
i
.SM
.BR COLUMNS .
.TP 8
.B cmdhist
Je¿eli jest ustawione,
.B bash
usi³uje zapisaæ wszystkie wiersze polecenia wielowierszowego w tej samej
pozycji historii. Pozwala to na ³atw± ponown± edycjê poleceñ obejmuj±cych
wiele wierszy.
.TP 8
.B dotglob
Je¿eli jest ustawione, to
.B bash
do wyników rozwiniêcia nazw plików w³±cza tak¿e nazwy plików rozpoczynaj±ce
siê kropk± `.'.
.TP 8
.B execfail
Je¿eli jest ustawione, to pow³oka nie-interaktywna nie zakoñczy pracy
nie mog±c wykonaæ pliku okre¶lonego jako argument wbudowanego polecenia
.BR exec .
Pow³oka interaktywna nie koñczy pracy, je¶li
.B exec
zawiedzie.
.TP 8
.B expand_aliases
Je¿eli jest ustawiona, aliasy s± interpretowane jak opisano powy¿ej w
.SM
.BR ALIASY .
Opcja ta jest w³±czona domy¶lnie dla pow³ok interaktywnych.
.TP 8
.B extglob
Je¶li jest w³±czona, w³±czane s± rozszerzone funkcje dopasowywania
wzorców opisane powy¿ej w \fBRozwijanie nazw plików\fP.
.\" extended pattern matching features
.TP 8
.B histappend
Je¿eli jest ustawiona, to do pliku o nazwie wskazanej zmienn±
.B HISTFILE
podczas koñczenia pracy przez pow³okê dodawana jest lista historii, zamiast
nadpisywania tego pliku list±.
.TP 8
.B histreedit
Je¿eli jest ustawione, a u¿ywane jest
.BR readline ,
to u¿ytkownik ma mo¿liwo¶æ ponownej edycji nieudanego podstawienia historii
historii.
.\" failed history substitution.
.TP 8
.B histverify
Je¿eli jest ustawione, a u¿ywane jest
.BR readline ,
to wyniki podstawiania historii nie s± natychmiast przesy³ane do
analizatora pow³oki. Zamiast tego, wiersz wynikowy ³adowany jest do bufora
edycyjnego \fBreadline\fP, pozwalaj±c na dalsze zmiany.
.TP 8
.B hostcomplete
Je¿eli jest ustawione, a u¿ywane jest
.BR readline ,
\fBbash\fP bêdzie usi³owaæ wykonaæ uzupe³nianie nazwy hosta podczas
uzupe³niania s³owa zawieraj±cego \fB@\fP (zobacz
.B Uzupe³nianie
w
.B READLINE
powy¿ej).
Domy¶lnie w³±czone.
.TP 8
.B huponexit
Je¿eli jest ustawione, to \fBbash\fP wy¶le
.SM
.B SIGHUP
do wszystkich zadañ podczas koñczenia pracy interaktywnej pow³oki
zg³oszeniowej.
.TP 8
.B interactive_comments
Je¶li jest w³±czone, pozwala by s³owo rozpoczynaj±ce siê od
.B #
powodowa³o pominiêcie tego s³owa i wszystkich pozosta³ych znaków wiersza
w pow³oce interaktywnej (zobacz powy¿ej
.SM
.BR KOMENTARZE).
Opcja domy¶lnie w³±czona.
.TP 8
.B lithist
Je¶li jest ustawione, a w³±czona jest opcja
.BR cmdhist ,
to polecenia wielowierszowe zachowywane s± w historii w miarê mo¿liwo¶ci
z osadzonymi znakami nowej linii zamiast przy u¿yciu ¶redników jako
separatorów.
.TP 8
.B login_shell
Pow³oka ustawia tê opcjê je¶li zostanie uruchomiona jako zg³oszeniowa
(zobacz
.SM
.B WYWO£ANIE
powy¿ej).
Ta warto¶æ nie mo¿e byæ zmieniona.
.TP 8
.B mailwarn
Je¿eli jest ustawione, za¶ do pliku, w którym sprawdza pocztê \fBbash\fP
siêgano od czasu ostatniego sprawdzania, to zostanie wy¶wietlony komunikat
,,The mail in \fIplikpoczty\fP has been read'' (Poczta w \fIplikpoczty\fP
zosta³a przeczytana).
.TP 8
.B no_empty_cmd_completion
Je¶li jest ustawione, i stosowane jest
.BR readline ,
to
.B bash
nie bêdzie usi³owa³ szukaæ w \fBPATH\fP mo¿liwych uzupe³nieñ, gdy
próba uzupe³niania wyst±pi w pustym wierszu.
.TP 8
.B nocaseglob
Je¶li zosta³o ustawione, to
.B bash
przy rozwijaniu nazw plików dopasowuje je nie zwracaj±c uwagi na
wielko¶æ liter (zobacz
.B Rozwijanie nazw plików
powy¿ej).
.TP 8
.B nullglob
Je¶li jest ustawione, to,
.B bash
pozwala by wzorce nie dopasowuj±ce ¿adnych plików (zobacz
.B Rozwijanie nazw plików
powy¿ej)
rozwija³y siê w ³añcuch pusty, zamiast na same siebie.
.TP 8
.B progcomp
Je¿eli jest ustawione, to w³±czone s± us³ugi programowalnego uzupe³niania
(zobacz powy¿ej \fBProgramowalne uzupe³nianie\fP). Domy¶lnie w³±czone.
.TP 8
.B promptvars
Je¿eli jest ustawione, to ³añcuchy zachêty podlegaj± interpretacji
zmiennych i podstawianiu parametrów po interpretacji zachêty opisanej w
.SM
.B ZACHÊTA
powy¿ej. Opcja ta jest domy¶lnie w³±czona.
.TP 8
.B restricted_shell
Pow³oka ustawia tê opcjê je¶li zosta³a uruchomiona w trybie okrojonym
(zobacz
.SM
.B "POW£OKA OKROJONA"
poni¿ej).
Warto¶æ ta nie mo¿e byæ zmieniona.
Nie jest ona resetowana podczas odczytu plików startowych, pozwalaj±c im
na odkrycie czy pow³oka jest okrojona czy nie.
.TP 8
.B shift_verbose
Je¿eli jest ustawiona, to wbudowane
.B shift
wypisuje komunikat o b³êdzie gdy liczba przesuniêæ (przez shift) przekracza
liczbê parametrów pozycyjnych.
.TP 8
.B sourcepath
Je¶li jest ustawiona, to polecenie wbudowane
\fBsource\fP (\fB.\fP) pos³uguje siê warto¶ci±
.SM
.B PATH
do znalezienia katalogu zawieraj±cego plik podany jako argument.
Opcja domy¶lnie w³±czona.
.TP 8
.B xpg_echo
Je¿eli jest ustawiona, to dla wbudowanego polecenia \fBecho\fP w³±czane jest
domy¶lne interpretowanie sekwencji specjalnych z odwrotnym uko¶nikiem.
.RE
.TP
\fBsuspend\fP [\fB\-f\fP]
Zawiesza wykonywanie tej pow³oki do otrzymania przez ni± sygna³u
.SM
.BR SIGCONT .
Opcja
.B \-f
mówi, by nie narzekaæ, je¶li u¿yto \fBsuspend\fP w pow³oce zg³oszeniowej;
po prostu zawiesiæ mimo to. Kodem zwracanym jest 0, chyba ¿e pow³oka jest
pow³ok± zg³oszeniow± i nie podano opcji
.BR \-f ,
lub gdy nie jest w³±czona kontrola zadañ.
.TP
.PD 0
\fBtest\fP \fIwyra¿\fP
.TP
\fB[\fP \fIwyra¿\fP \fB]\fP
Zwraca kod 0 lub 1 w zale¿no¶ci od interpretacji wyra¿enia warunkowego
.IR wyra¿ .
ka¿dy operator i operand musi byæ odrêbnym argumentem.
Wyra¿enia sk³adaj±c siê ze sk³adowych opisanych powy¿ej w
.SM
.BR "WYRA¯ENIA WARUNKOWE" .
.if t .sp 0.5
.if n .sp 1
Wyra¿enia mog± byæ ³±czone przy u¿yciu poni¿szych operatorów, podanych
w kolejno¶ci malej±cego priorytetu.
.RS
.PD 0
.TP
.B ! \fIwyra¿\fP
Prawda je¶li
.I wyra¿
jest fa³szem.
.TP
.B ( \fIwyra¿\fP )
Zwraca warto¶æ \fIwyra¿\fP.
Mo¿e byæ stosowane do obej¶cia zwyk³ej kolejno¶ci operatorów.
.TP
\fIwyra¿1\fP \-\fBa\fP \fIwyra¿2\fP
Prawda je¶li oba:
.I wyra¿1
i
.I wyra¿2
s± prawdziwe.
.TP
\fIwyra¿1\fP \-\fBo\fP \fIwyra¿2\fP
Prawda je¶li
.I wyra¿1
lub
.I wyra¿2
jest prawdziwe.
.PD
.PP
\fBtest\fP i \fB[\fP interpretuj± wyra¿enia warunkowe pos³uguj±c siê zestawem
regu³ opartych o liczbê argumentów.
.if t .sp 0.5
.if n .sp 1
.PD 0
.TP
0 argumentów
Wyra¿enie jest fa³szywe.
.TP
1 argument
Wyra¿enie jest prawdziwe wtedy i tylko wtedy gdy argument nie jest
pusty (null).
.TP
2 argumenty
Je¶li pierwszym argumentem jest \fB!\fP, to wyra¿enie jest prawdziwe wtedy
i tylko wtedy gdy drugi argument jest pusty. Je¶li pierwszy argument jest
jednym z jednoargumentowych operatorów warunkowych podanych powy¿ej w
.SM
.BR "WYRA¯ENIA WARUNKOWE" ,
to wyra¿enie jest prawdziwe je¿eli test jednoargumentowy jest prawdziwy.
Je¿eli pierwszy argument nie jest poprawnym jednoargumentowym operatorem
warunkowym, to wyra¿enie ma warto¶æ fa³sz.
.TP
3 argumenty
je¿eli drugi argument jest jednym z dwuargumentowych operatorów
warunkowych podanych powy¿ej w
.SM
.BR "WYRA¯ENIA WARUNKOWE" ,
to wynik wyra¿enia jest wynikiem dwuargumentowego testu
z zastosowaniem pierwszego i trzeciego argumentu jako operandów.
Je¶li pierwszym argumentem jest \fB!\fP, to warto¶æ stanowi negacjê testu
dwuargumentowego przy u¿yciu drugiego i trzeciego argumentu.
Je¶li pierwszym argumentem jest dok³adnie \fB(\fP a trzecim argumentem
dok³adnie \fB)\fP, to wynik jest jednoargumentowym testem drugiego
argumentu.
W pozosta³ych przypadkach wyra¿enie jest fa³szywe.
Operatory \fB\-a\fP i \fB\-o\fP w tym przypadku uwa¿ane s± za
dwuargumentowe.
.TP
4 argumenty
Je¶li pierwszym argumentem jest \fB!\fP, to wynik jest negacj±
trójargumentowego wyra¿enia z³o¿onego z pozosta³ych argumentów.
W przeciwnym wypadku, wyra¿enie jest poddawanie analizie sk³adni
i interpretowane zgodnie z priorytetami przy zastosowaniu regu³ podanych
powy¿ej.
.TP
5 lub wiêcej argumentów
Wyra¿enie jest poddawanie analizie sk³adni i interpretowane zgodnie
z priorytetami przy zastosowaniu regu³ podanych powy¿ej.
.RE
.PD
.TP
.B times
Wypisuje sumaryczne czasy u¿ytkownika i systemu dla pow³oki i procesów z
niej uruchomionych. Kodem zwracanym jest 0.
.TP
\fBtrap\fP [\fB\-lp\fP] [\fIargument\fP] [\fIsigspec\fP ...]
Polecenie
.I argument
ma zostaæ odczytane i wykonane, gdy pow³oka otrzyma sygna³(y)
.IR sigspec .
Je¶li nie wystêpuje
.I argument
lub jest to
.BR \- ,
to wszystkie podane sygna³y resetowane s± do swych warto¶ci pierwotnych
(warto¶ci, jakie mia³y przy wej¶ciu do pow³oki).
Je¿eli
.I argument
jest ³añcuchem pustym, to sygna³ okre¶lony przez ka¿de
.I sigspec
jest ignorowany przez pow³okê i polecenia, jakie ona wywo³uje.
Je¿eli nie wyst±pi³
.I argumentu
a podano
.BR \-p ,
wy¶wietlane s± polecenia zwi±zane z przechwyceniem ka¿dego z sygna³ów
.IR sigspec .
Je¿eli nie podano ¿adnych argumentów lub je¶li podano tylko
.BR \-p ,
to
.B trap
wypisuje listê poleceñ zwi±zanych z ka¿dym z numerów sygna³ów.
Ka¿de
.I sigspec
jest albo nazw± sygna³u zdefiniowan± w <\fIsignal.h\fP
albo numerem sygna³u.
Je¿eli
.I sigspec
jest sygna³em
.SM
.B EXIT
(0), to polecenie
.I argument
wykonywane jest przy koñczeniu pracy przez pow³okê. Je¿eli
.I sigspec
jest równe
.SM
.BR DEBUG ,
to polecenie
.I argument
wykonywane jest po ka¿dym \fIpoleceniu prostym\fP (zobacz
.SM
.B GRAMATYKA POW£OKI
powy¿ej).
Je¶li
.I sigspec
to
.SM
.BR ERR ,
wówczas polecenie
.I argument
wykonywane jest ka¿dorazowo gdy polecenie proste zwróci niezerowy
kod zakoñczenia.
Pu³apka zastawiona na
.SM
.BR ERR
nie jest wykonywana gdy polecenie, które zakoñczy³o siê niepowodzeniem
jest czê¶ci± pêtli
.I until
lub
.IR while ,
czê¶ci± instrukcji
.IR if ,
czê¶ci± listy
.B &&
lub
.B \(bv\(bv
albo je¶li warto¶æ zwracana przez to polecenie jest wstawiana za pomoc±
.BR ! .
Opcja
.B \-l
powoduje, ¿e pow³oka wypisuje zestawienie nazw sygna³ów i odpowiadaj±cych
im numerów.
Sygna³y ignorowane przy wej¶ciu do pow³oki nie mog± byæ przechwycone ani
zresetowane.
W procesie potomnym, podczas jego tworzenia, sygna³y przechwycone
resetowane s± do swych warto¶ci pierwotnych.
Zwracanym kodem jest fa³sz je¶li którykolwiek z
.I sigspec
jest nieprawid³owy; w przeciwnym razie
.B trap
zwraca true.
.TP
\fBtype\fP [\fB\-atp\fP] \fInazwa\fP [\fInazwa\fP ...]
Bez opcji wskazuje, jak powinna byæ interpretowana ka¿da z
.IR nazw ,
je¶li zostanie u¿yta jako nazwa polecenia.
Je¿eli u¿yto opcji
.BR \-t ,
to
.B type
wypisuje ³añcuch bêd±cy jednym z
.IR alias ,
.IR keyword ,
.IR function ,
.IR builtin
lub
.IR file ,
je¶li
.I nazwa
jest odpowiednio aliasem, zastrze¿onym s³owem pow³oki, funkcj±, poleceniem
wbudowanym lub plikiem dyskowym.
Je¶li nie znaleziono
.IR nazwy ,
to nie jest wypisywane nic i jako kod zakoñczenia zwracany jest fa³sz.
Je¶li pos³u¿ono siê opcj±
.B \-p
to
.B type
zwraca albo nazwê pliku dyskowego, który zosta³by wykonany je¶li
.I nazwa
zosta³aby podana jako nazwa polecenia, albo nic je¶li
! .if t \f(CWtype -t nazwa\fP
! .if n ,,type -t nazwa''
nie zwróci³oby
.IR file .
Je¶li polecenie istnieje w tablicy mieszaj±cej,
.B \-p
wypisuje warto¶æ z tablicy, niekoniecznie plik, który pojawia siê jako
pierwszy w
.SM
.BR PATH .
Je¿eli u¿yto opcji
.BR \-a ,
to
.B type
wypisuje wszystkie miejsca zawierajace wykonywaln±
.IR nazwê .
Obejmuje to aliasy i funkcje, wtedy i tylko wtedy gdy u¿yto równie¿ opcji
.BR \-p .
Przy u¿yciu
.B \-a
nie korzysta siê z tablicy mieszaj±cej poleceñ.
.B type
zwraca prawdê je¶li znaleziono jakie¶ jego argumenty, fa³sz je¶li nie
znaleziono ¿adnych.
.TP
\fBulimit\fP [\fB\-SHacdflmnpstuv\fP [\fIlimit\fP]]
Zapewnia kontrolê nad zasobami dostêpnymi pow³oce i procesów jakie ona
uruchamia, na systemach umo¿liwiaj±cych tak± kontrolê.
Opcje \fB\-H\fP i \fB\-S\fP okre¶laj±, ¿e dla danego zasobu ustawiane jest
twarde (hard) lub miêkkie (soft) ograniczenie. Ograniczenie twarde nie mo¿e
byæ zwiêkszane po ustawieniu; ograniczenie miêkkie mo¿e byæ zwiêkszane a¿ do
warto¶ci ograniczenia twardego. Je¶li nie podano ani \fB\-H\fP ani
\fB\-S\fP, to ustawiane jest zarówno ograniczenie miêkkie jak i twarde.
Ograniczenie
.I limit
mo¿e byæ liczb± w jednostkach okre¶lonych dla zasobu lub jedn± ze specjalnych
warto¶ci:
.BR hard ,
.BR soft
lub
.BR unlimited ,
oznaczaj±cych odpowiednio: bie¿±ce twarde ograniczenie, bie¿±ce miêkkie
ograniczenie oraz brak ograniczenia.
Je¿eli pominiêto
.IR limit ,
wypisywana jest bie¿±ca warto¶æ ograniczenia miêkkiego danego zasobu, chyba
¿e podano opcjê \fB\-H\fP. Gdy podano wiêcej ni¿ jedno okre¶lenie zasobu,
przed warto¶ci± wypisywana jest nazwa ograniczenia i jednostka miary.
Inne opcje interpretowane s± nastêpuj±co:
.RS
.PD 0
.TP
.B \-a
Podawane s± wszystkie bie¿±ce ograniczenia
.TP
.B \-c
Maksymalny rozmiar tworzonych plików core
.TP
.B \-d
Maksymalny rozmiar segmentu danych procesu
.TP
.B \-f
Maksymalny rozmiar plików tworzonych przez pow³okê
.TP
.B \-l
Maksymalny rozmiar, jaki mo¿e zostaæ zablokowany w pamiêci
.TP
.B \-m
Maksymalny rozmiar czê¶ci rezydentnej
.TP
.B \-n
Maksymalna liczba otwartych deskryptorów pliku (wiêkszo¶æ systemów nie
pozwala na ustawianie tej warto¶ci)
.TP
.B \-p
Rozmiar potoku w blokach 512-bajtowych (mo¿e nie byæ ustawione)
.TP
.B \-s
Maksymalny rozmiar stosu
.TP
.B \-t
Maksymalny czas CPU w sekundach
.TP
.B \-u
Maksymalna liczba procesów dostêpnych dla pojedynczego u¿ytkownika
.TP
.B \-v
Maksymalna wielko¶æ pamiêci wirtualnej dostêpna dla pow³oki
.PD
.PP
Je¿eli podano
.IR limit ,
to staje siê now± warto¶ci± ograniczenia zadanego zasobu (opcja
.B \-a
tylko wy¶wietla).
Je¿eli nie podano ¿adnej ocpji, to zak³ada siê opcjê
.BR \-f .
Warto¶ci podawane s± przyrostowo co 1024-bajty, z wyj±tkiem
.BR \-t ,
podawanego w sekundach,
.BR \-p ,
w jednostkach 512-bajtowych bloków,
oraz
.B \-n
i
.BR \-u ,
bêd±cych warto¶ciami bez miana. Zwracanym kodem jest 0, chyba ¿e podano
nieprawid³ow± opcjê lub argument albo podczas ustawiania nowego ograniczenia
wyst±pi³ b³±d.
.RE
.TP
\fBumask\fP [\fB\-p\fP] [\fB\-S\fP] [\fItryb\fP]
Maska praw dostêpu dla plików tworzonych przez u¿ytkownika ustawiana jest na
.IR tryb .
Je¿eli
.I tryb
rozpoczyna siê od cyfry, jest interpretowany jako liczba ósemkowa; w
przeciwnym razie interpretowany jest jako maska w trybie symbolicznym,
podobnie jak akceptowane przez
.IR chmod (1).
Je¿eli pominiêto
.I tryb
wypisywana jest aktualna warto¶æ maski.
Opcja
.B \-S
powoduje, ¿e maska zostanie wypisana w postaci symbolicznej; domy¶lne
wyj¶cie jest w postaci liczby ósemkowej.
Je¿eli podano opcjê
.B \-p
i pominiêto
.IR tryb ,
to wyj¶cie ma postaæ, która mo¿e byæ powtórnie wykorzystana jako wej¶cie.
Kodem zwracanym jest 0 je¶li pomy¶lnie zmieniono tryb lub nie podano
argumentu \fItryb\fP, za¶ fa³sz w pozosta³ych sytuacjach.
.TP
\fBunalias\fP [\-\fBa\fP] [\fInazwa\fP ...]
Usuwa ka¿d± z \fInazw\fP z listy zdefiniowanych aliasów. Je¿eli podano
.BR \-a ,
to usuwane s± definicje wszystkich aliasów. Zwracanym kodem jest prawda,
chyba ¿e podana
.I nazwa
nie jest zdefiniowanym aliasem.
.TP
\fBunset\fP [\-\fBfv\fP] [\fInazwa\fP ...]
Dla ka¿dej
.IR nazwy ,
usuwa odpowiadaj±c± jej warto¶æ lub funkcjê. Je¿eli nie podano ¿adnych opcji
lub podano opcjê
.BR \-v ,
to ka¿da z
.I nazw
odnosi siê do zmiennej pow³oki.
Zmienne read-only nie mog± byæ kasowane.
Je¿eli podano
.BR \-f ,
to ka¿da z
.I nazw
wskazuje na funkcjê pow³oki, a definicja funkcji jest usuwana.
Ka¿da z usuniêtych zmiennych lub funkcji usuwana jest ze ¶rodowiska
przesy³anego nastêpnym poleceniom.
Je¶li usuniêta zostanie która¶ ze zmiennych
.SM
.BR RANDOM ,
.SM
.BR SECONDS ,
.SM
.BR LINENO ,
.SM
.BR HISTCMD ,
.SM
.BR FUNCNAME ,
.SM
.BR GROUPS ,
lub
.SM
.BR DIRSTACK ,
to traci ona swe specjalne w³a¶ciwo¶ci, nawet je¶li zostanie nastêpnie
ponownie ustawiona. Kodem zakoñczenia jest prawda, chyba ¿e
.I nazwa
nie istnieje lub jest readonly.
.TP
\fBwait\fP [\fIn\fP]
Czeka na okre¶lony proces i zwraca jego kod zakoñczenia.
.I n
mo¿e byæ identyfikatorem procesu lub okre¶leniem zadania; je¶li podano
okre¶lenie zadania, to nast±pi oczekiwanie na wszystkie procesy w potoku
tego zadania.
Je¿eli nie podano
.IR n ,
nastêpuje oczekiwanie na wszystkie aktualnie aktywne procesy potomne i
zwracany jest kod zerowy.
Je¶li
.I n
okre¶la nieistniej±cy proces lub zadanie, to zwracany jest kod 127.
W pozosta³ych przypadkach zwracany jest kod zakoñczenia ostatniego procesu
lub zadania na jakie czekano.
.\" bash_builtins
.if \n(zZ=1 .ig zZ
.SH "POW£OKA OKROJONA"
.\" rbash.1
.\" pocz±tek podrêcznika rbash
.zY
.PP
Je¶li
.B bash
uruchomiony jest pod nazw±
.BR rbash ,
lub przy jego wywo³aniu pos³u¿ono siê opcj±
.BR \-r ,
to staje siê pow³ok± okrojon± (restricted).
Pow³oka okrojona s³u¿y do ustawienia ¶rodowiska lepiej kontrolowanego
ni¿ pow³oka standardowa. Zachowuje siê ona identycznie jak
.B bash
z wyj±tkiem tego, ¿e poni¿sze nie s± dozwolone lub nie s± wykonywane:
.IP \(bu
zmiana katalogów przy pomocy \fBcd\fP
.IP \(bu
ustawianie lub kasowanie warto¶ci
.BR SHELL ,
.BR PATH ,
.BR ENV
lub
.B BASH_ENV
.IP \(bu
podawanie nazw poleceñ zawieraj±cych
.B /
.IP \(bu
podawanie nazw plików zawieraj±cych
.B /
jako argumentu wbudowanego polecenia
.B .
(kropka).
.IP \(bu
importowanie definicji funkcji ze ¶rodowiska pow³oki przy uruchamianiu
.IP \(bu
analiza warto¶ci \fBSHELLOPTS\fP ze ¶rodowiska pow³oki przy uruchamianiu
.IP \(bu
przekierowywanie wyj¶cia przy pomocy operatorów >, >|, <>, >&, &> i >>
.IP \(bu
pos³ugiwanie siê wbudowanym poleceniem
.B exec
w celu zast±pienia pow³oki innym poleceniem
.IP \(bu
dodawanie lub usuwanie poleceñ przy pomocy opcji
.B \-f
i
.B \-d
wbudowanego polecenia
.B enable
.IP \(bu
podawanie opcji
.B \-p
wbudowanego polecenia
.B command
.IP \(bu
wy³±czanie trybu okrojonego za pomoc±
\fBset +r\fP lub \fBset +o restricted\fP.
.PP
Powy¿sze ograniczenia wymuszane s± po przeczytaniu plików uruchomieniowych.
.PP
Je¶li polecenie do wykonania okazuje siê byæ skryptem pow³oki (zobacz
.SM
.B "WYKONYWANIE POLECEÑ"
powy¿ej), to
.B rbash
wy³±cza wszelkie ograniczenia w pow³oce zrodzonej do wykonania skryptu.
.\" koniec podrêcznika rbash
.if \n(zY=1 .ig zY
.SH "ZOBACZ TAK¯E"
.PD 0
.TP
\fIBash Features\fP, Brian Fox and Chet Ramey
.TP
\fIThe Gnu Readline Library\fP, Brian Fox and Chet Ramey
.TP
\fIThe Gnu History Library\fP, Brian Fox and Chet Ramey
.TP
\fIPortable Operating System Interface (POSIX) Part 2: Shell and Utilities\fP, IEEE
.TP
\fIsh\fP(1), \fIksh\fP(1), \fIcsh\fP(1)
.TP
\fIemacs\fP(1), \fIvi\fP(1)
.TP
\fIreadline\fP(3)
.PD
.SH PLIKI
.PD 0
.TP
.FN /bin/bash
Plik wykonywalny pow³oki \fBbash\fP
.TP
.FN /etc/profile
Ogólnosystemowy plik inicjuj±cy, wykonywany dla pow³ok zg³oszeniowych
.TP
.FN ~/.bash_profile
Osobisty plik inicjuj±cy, wykonywany dla pow³ok zg³oszeniowych
.TP
.FN ~/.bashrc
Indywidualny plik startowy dla pow³oki trybu interaktywnego
.TP
.FN ~/.bash_logout
Indywidualny plik porz±dkuj±cy dla pow³oki zg³oszeniowej, wykonywany
podczas koñczenia przez ni± pracy
.TP
.FN ~/.inputrc
Indywidualny plik inicjuj±cy dla \fIreadline\fP
.PD
.SH AUTORZY
Brian Fox, Free Software Foundation
.br
bfox@gnu.ai.MIT.Edu
.PP
Chet Ramey, Case Western Reserve University
.br
chet@ins.CWRU.Edu
.SH ZG£OSZENIA B£ÊDÓW
Je¶li znajdziesz w
.B bash
b³±d, powiniene¶ go zg³osiæ. Ale najpierw powiniene¶ upewniæ siê, ¿e
rzeczywi¶cie jest to b³±d i ¿e pojawia siê w naj¶wie¿szej wersji
.B bash
jak± masz.
.PP
Po ustaleniu, ¿e b³±d faktycznie istnieje, u¿yj polecenia
.I bashbug
do wys³ania zg³oszenia b³êdu.
Je¶li masz poprawkê usuwaj±c± problem, zachêcamy do przes³ania jej równie¿!
Sugestie i `filozoficzne' zg³oszenia b³êdów mog± byæ przesy³ane [w jêzyku
angielskim] do \fIbug-bash@gnu.org\fP lub wysy³ane na grupê dyskusyjn±
.BR gnu.bash.bug .
.PP
WSZYSTKIE zg³oszenia b³êdów powinny zawieraæ:
.PP
.PD 0
.TP 20
Numer wersji \fBbash\fR
.TP
Sprzêt i system operacyjny
.TP
U¿yty kompilator
.TP
Opis b³êdnego zachowania
.TP
Krótki skrypt lub przepis na uzyskanie b³êdu
.PD
.PP
.I bashbug
wstawia pierwsze trzy pozycje automatycznie do szablonu jaki udostêpnia
w celu wype³nienia zg³oszenia b³êdów.
.PP
Komentarze i zg³oszenia b³êdów dotycz±ce tej strony podrêcznika [orygina³u]
powinny byæ kierowane na adres
.IR chet@ins.CWRU.Edu .
.SH B£ÊDY
.PP
Jest za du¿y i zbyt wolny.
.PP
Istnieje trochê subtelnych ró¿nic pomiêdzy
.B bash
a tradycyjnymi wersjami
.BR sh ,
g³ównie z powodu specyfikacji
.SM
.BR POSIX .
.PP
Aliasy w niektórych zastosowaniach wprawiaj± w zak³opotanie.
.PP
Poleceñ wbudowanych pow³oki i funkcji nie mo¿na zatrzymywaæ/wznawiaæ.
.PP
Polecenia z³o¿one i sekwencje poleceñ postaci `a ; b ; c' nie s±
obs³ugiwane przychylnie przy próbie wstrzymania procesu. Gdy proces jest
zatrzymany, pow³oka natychmiast wykonuje nastêpnej polecenie sekwencji.
Wystarcza umieszczanie sekwencji poleceñ wewn±trz nawiasów by wymusiæ
wykonanie ich przez podpow³okê, która mo¿e byæ zatrzymana jako ca³o¶æ.
.PP
Polecenia wewn±trz konstrukcji podstawiania poleceñ \fB$(\fP...\fB)\fP nie
s± analizowane do momentu próby podstawienia. Powoduje to opó¼nion±
sygnalizacjê b³êdów, pojawiaj±c± siê po up³ywie pewnego czasu od
wprowadzenia polecenia.
.PP
Zmienne tablicowe nie mog± byæ (na razie) eksportowane.
.zZ
.zY
