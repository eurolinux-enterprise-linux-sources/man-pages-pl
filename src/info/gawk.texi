%& -translate-file=il2-pl
\def\fontprefix{pl}
\input texinfo   @c -*-texinfo-*-
@c %**start of header (This is for running Texinfo on a region.)
@setfilename gawk.info
@settitle Podrêcznik u¿ytkownika GNU awk
@documentencoding ISO-8859-2
@documentlanguage pl
@c %**end of header (This is for running Texinfo on a region.)

@c zmiany/komentarze t³umacza oznakowano 'HQ'

@c inside ifinfo for older versions of texinfo.tex
@ifinfo
@c I hope this is the right category
@dircategory Programming Languages
@direntry
* Gawk: (gawk).           Jêzyk przeszukiwania i przetwarzania tekstu.
@end direntry
@end ifinfo

@c @set xref-automatic-section-title
@c @set DRAFT

@c The following information should be updated here only!
@c This sets the edition of the document, the version of gawk it
@c applies to, and when the document was updated.
@set TITLE Efektywne programowanie w AWK
@set TITLEORG Effective AWK Programming
@set SUBTITLE Podrêcznik u¿ytkownika GNU awk
@set PATCHLEVEL 6
@set EDITION 1.0.@value{PATCHLEVEL}
@set VERSION 3.0
@set UPDATE-MONTH lipiec 2000
@iftex
@set DOCUMENT book
@end iftex
@ifinfo
@set DOCUMENT Info file
@end ifinfo

@ignore
Some comments on the layout for TeX.
1. Use at least texinfo.tex 2.159. It contains fixes that
   are needed to get the footings for draft mode to not appear.
2. I have done A LOT of work to make this look good. There are  `@page' commands
   and use of `@group ... @end group' in a number of places. If you muck
   with anything, it's your responsibility not to break the layout.
@end ignore

@c merge the function and variable indexes into the concept index
@ifinfo
@synindex fn cp
@synindex vr cp
@end ifinfo
@iftex
@syncodeindex fn cp
@syncodeindex vr cp
@end iftex

@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@ifclear DRAFT
@iftex
@finalout
@end iftex
@end ifclear

@smallbook
@iftex
@c @cropmarks
@end iftex

@ifinfo
Niniejszy plik opisuje @code{awk}, program do wybierania konkretnych
rekordów z pliku i wykonywania na nich dzia³añ.

To jest wydanie @value{EDITION} ksi±¿ki @cite{@value{TITLE}}; @*
opisuj±ce wersjê @value{VERSION}.@value{PATCHLEVEL} AWK w implementacji GNU.

Copyright (C) 1989, 1991, 1992, 1993, 1996-2000 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.


@end ifinfo

@setchapternewpage odd

@titlepage
@title @value{TITLE}
@subtitle @value{SUBTITLE}
@subtitle wydanie @value{EDITION}
@subtitle @value{UPDATE-MONTH}
@author Arnold D. Robbins
@ignore
@sp 1
@author W oparciu o @cite{The GAWK Manual},
@author autorstwa Robbinsa, Close'a, Rubina i Stallmana
@end ignore

@c Include the Distribution inside the titlepage environment so
@c that headings are turned off.  Headings on and off do not work.

@page
@vskip 0pt plus 1filll
@ifset LEGALJUNK
The programs and applications presented in this book have been
included for their instructional value.  They have been tested with care,
but are not guaranteed for any particular purpose.  The publisher does not
offer any warranties or representations, nor does it accept any
liabilities with respect to the programs or applications.
So there.
@sp 2
UNIX is a registered trademark of X/Open, Ltd. @*
Microsoft, MS, and MS-DOS are registered trademarks, and Windows is a
trademark of Microsoft Corporation in the United States and other
countries. @*
Atari, 520ST, 1040ST, TT, STE, Mega, and Falcon are registered trademarks
or trademarks of Atari Corporation. @*
DEC, Digital, OpenVMS, ULTRIX, and VMS, are trademarks of Digital Equipment
Corporation. @*
@end ifset
``To boldly go where no man has gone before'' is a
Registered Trademark of Paramount Pictures Corporation. @*
@c sorry, i couldn't resist
@sp 3
Copyright @copyright{} 1989, 1991, 1992, 1993, 1996-2000
Free Software Foundation, Inc. @*
Tytu³ oryginalny: @value{TITLEORG}.
@sp 2

To jest wydanie @value{EDITION} ksi±¿ki @cite{@value{TITLE}}; @*
opisuje wersjê @value{VERSION}.@value{PATCHLEVEL} (lub pó¼niejsz±)
AWK w implementacji GNU.

@sp 2
Opublikowana przez:

Free Software Foundation @*
59 Temple Place --- Suite 330 @*
Boston, MA  02111-1307 USA @*
Telefon: +1-617-542-5942 @*
Fax: +1-617-542-2652 @*
Email: @code{gnu@@gnu.org} @*
URL: @code{http://www.gnu.org/} @*

@sp 1
@c this ISBN can change!
@c This one is correct for gawk 3.0 and edition 1.0 from the FSF
ISBN 1-882114-26-4 @*

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.

@sp 2
Ilustracja na ok³adce: Etienne Suvasa.
@end titlepage

@c Thanks to Bob Chassell for directions on doing dedications.
@iftex
@headings off
@page
@w{ }
@sp 9
@center @i{Miriam, za dope³nianie mnie.}
@sp 1
@center @i{Chanie, za rado¶æ jak± nam przynios³a¶.}
@sp 1
@center @i{Ryfce, za wyk³adniczy wzrost.}
@sp 1
@center @i{Nachumowi, za dodany wymiar.}
@sp 1
@center @i{Malce, za nowy pocz±tek.}
@page
@w{ }
@page
@headings on
@end iftex

@iftex
@headings off
@evenheading @thispage@ @ @ @strong{@value{TITLE}} @| @|
@oddheading  @| @| @strong{@thischapter}@ @ @ @thispage
@ifset DRAFT
@evenfooting @today{} @| @emph{SZKIC!} @| Proszê nie rozpowszechniaæ
@oddfooting Proszê nie rozpowszechniaæ @| @emph{SZKIC!} @| @today{}
@end ifset
@end iftex

@ifinfo
@node Top, Przedmowa, (dir), (dir)
@top Ogólne wprowadzenie
@c Preface or Licensing nodes should come right after the Top
@c node, in `unnumbered' sections, then the chapter, `What is gawk'.

Niniejszy plik opisuje @code{awk}, program do wybierania konkretnych
rekordów z pliku i wykonywania na nich dzia³añ.

To jest wydanie @value{EDITION} ksi±¿ki @cite{@value{TITLE}}; @*
opisuje wersjê @value{VERSION}.@value{PATCHLEVEL}
AWK w implementacji GNU of AWK.

@end ifinfo

@menu
* Przedmowa::                   O czym jest ta ksi±¿ka; krótka historia
                                i podziêkowania.
* Czym jest awk::               Czym jest jêzyk @code{awk}; pos³ugiwanie siê
                                niniejsz± ksi±¿k±.
* Zaczynamy::                   Podstawowe wprowadzenie do u¿ytkowania @code{awk}.
                                Jak uruchamiaæ programy @code{awk}. Sk³adnia
                                wiersza poleceñ.
* Jednolinijkowce::             Krótkie, przyk³adowe programy @code{awk}.
* Regexp::                      Wszystko o dopasowywaniu za pomoc± wyra¿eñ
                                regularnych.
* Czytanie plików::             Jak czytaæ pliki i operowaæ na polach.
* Wypisywanie::                 Jak wypisywaæ wyniki w @code{awk}. Opisuje
                                instrukcje @code{print} i @code{printf}.
                                Opisuje te¿ przekierowanie wyj¶cia.
* Wyra¿enia::                   Wyra¿enia s± podstawowymi cegie³kami
                                instrukcji.
* Wzorce i akcje::              Przegl±d wzorców i akcji.
* Instrukcje::                  Szczegó³owo opisane rozmaite instrukcje
                                steruj±ce.
* Zmienne wbudowane::           Zmienne wbudowane
* Tablice::                     Opis i stosowanie tablic. Zawiera tak¿e
                                instrukcje steruj±ce dotycz±ce tablic.
* Wbudowane::                   Tu podsumowano funkcje wbudowane.
* U¿ytkownika::                 Szczegó³owo opisano funkcje definiowane przez
                                u¿ytkownika.
* Wywo³anie gawk::              Jak uruchamiaæ @code{gawk}.
* Funkcje biblioteczne::        Biblioteczka funkcji @code{awk}.
* Przyk³adowe programy::        Wiele programów @code{awk} z pe³nymi
                                obja¶nieniami.
* Historia jêzyka::             Ewolucja jêzyka @code{awk}.
* Podsumowanie gawk::           Podsumowanie opcji i jêzyka @code{gawk}.
* Instalacja::                  Instalowanie @code{gawk} na ró¿nych
                                systemach operacyjnych.
* Uwagi::                       Co nieco o implementacji @code{gawk}.
* S³ownik::                     Obja¶nienie rzadziej spotykanych terminów.
* Kopiowanie::                  Prawo do kopiowania i rozpowszechniania
                                @code{gawk}.
* Indeks::                      Indeks pojêæ i zmiennych.


* Historia::                    Historia @code{gawk} i @code{awk}.
* Historia podrêcznika::        Krótka historia projektu GNU i niniejszej
                                ksi±¿ki.
* Podziêkowania::               Podziêkowania.
* Od t³umacza::                 Parê s³ów od t³umacza.
* Niniejszy podrêcznik::        Pos³ugiwanie siê t± ksi±¿k±.  Zawiera
                                przyk³adowe pliki wej¶ciowe.
* Konwencje::                   Konwencje typograficzne.
* Przyk³adowe pliki danych::    Przyk³adowe pliki danych do zastosowania
                                z programami @code{awk} pokazanymi
                                w tej ksi±¿ce.
* Nazwy::                       Jakiej nazwy u¿yæ, by znale¼æ @code{awk}.
* Uruchamianie gawk::           Jak uruchamiaæ programy @code{gawk}; zawiera
                                sk³adniê wiersza poleceñ.
* Jednorazowe::                 Uruchamianie krótkich jednorazowych
                                programów @code{awk}.
* Czytanie z terminala::        Niestosowanie plików wej¶ciowych (pobieranie
                                wej¶cia z terminala).
* D³ugie::                      Umieszczanie sta³ych programów @code{awk}
                                w plikach.
* Skrypty wykonywalne::         Tworzenie samodzielnych programów @code{awk}.
* Komentarze::                  Dodawanie dokumentacji do programów @code{gawk}.
* Bardzo prosty::               Bardzo prosty przyk³ad.
* Dwie regu³y::                 Mniej prosty jednolinijkowy przyk³ad z
                                dwoma regu³ami.
* Trudniejszy::                 Bardziej z³o¿ony przyk³ad.
* Instrukcje/wiersze::          Podzia³ lub ³±czenie instrukcji w wierszach.
* Inne cechy::                  Inne cechy @code{awk}.
* Kiedy::                       Kiedy stosowaæ @code{gawk} a kiedy inne rzeczy.
* U¿ywanie regexp::             Jak stosowaæ wyra¿enia regularne.
* Sekwencje specjalne::         Jak wypisaæ znaki niedrukowalne.
* Operatory regexp::            Operatory wyra¿eñ regularnych.
* Operatory regexp GNU::        Operatory specyficzne dla programów GNU.
* Wielko¶æ liter::              Uwzglêdnianie wielko¶ci liter w dopasowaniach.
* Lewe najd³u¿sze::             Jak bardzo pasuje tekst.
* Regexp obliczane::            Stosowanie dynamicznych wyra¿eñ regularnych.
* Rekordy::                     Sterowanie podzia³em danych na rekordy.
* Pola::                        Wprowadzenie do pól.
* Pola nie-sta³e::              Numery pól nie bêd±ce sta³ymi.
* Zmiana pól::                  Zmiana zawarto¶ci pól.
* Separatory pól::              Separator pól. Jak go zmieniæ.
* Podstawy podzia³u na pola::   W jaki sposób pola dzielone s± przez
                                pojedyncze znaki lub proste ³añcuchy.
* Regexp w podziale na pola::   Stosowanie wyra¿eñ regularnych do podzia³u
                                na pola.
* Pola jednoznakowe::           Jak z ka¿dego znaku zrobiæ osobne pole.
* Separator pól w wierszu poleceñ:: Ustalanie @code{FS} z wiersza poleceñ.
* Podsumowanie podzia³u na pola:: Kwestie koñcowe i tablica podsumowuj±ca.
* Sta³y rozmiar::               Czytanie danych o sta³ej szeroko¶ci.
* Wiele wierszy::               Czytanie rekordów wielowierszowych.
* Getline::                     Odczyt plików pod bezpo¶redni± kontrol±
                                programu przy wykorzystaniu funkcji
                                @code{getline}.
* Wstêp do getline::            Wprowadzenie do funkcji @code{getline}.
* Zwyk³e getline::              U¿ycie @code{getline} bez argumentów.
* Getline/Zmienna::             U¿ycie @code{getline} do zmiennej.
* Getline/Plik::                U¿ycie @code{getline} z pliku.
* Getline/Zmienna/Plik::        U¿ycie @code{getline} z pliku do zmiennej.
* Getline/Potok::               U¿ycie @code{getline} z potoku.
* Getline/Zmienna/Potok::       U¿ycie @code{getline} z potoku do zmiennej.
* Podsumowanie getline::        Podsumowanie wariantów @code{getline}.
* Print::                       Instrukcja @code{print}.
* Przyk³ady print::             Proste przyk³ady instrukcji @code{print}.
* Separatory wyj¶cia::          Separatory wyj¶cia. Jak je zmieniaæ.
* OFMT::                        Sterowanie wyj¶ciem numerycznym przez @code{print}.
* Printf::                      Instrukcja @code{printf}.
* Podstawy printf::             Sk³adnia instrukcji @code{printf}.
* Litery steruj±ce::            Litery steruj±ce formatem.
* Modyfikatory formatu::        Modyfikatory w specyfikacji formatu.
* Przyk³ady printf::            Kilka przyk³adów.
* Przekierowanie::              Jak przekierowywaæ wyj¶cie do wielu plików
                                czy potoków.
* Pliki specjalne::             Interpretacja nazw plików przez @code{gawk}.
                                @code{gawk} pozwala na dostêp
                                do odziedziczonych deskryptorów plików.
* Zamykanie plików i potoków::  Zamykanie potoków oraz plików wej¶ciowych
                                i wyj¶ciowych.
* Sta³e::                       Sta³e ³añcuchowe, numeryczne i regexp.
* Sta³e skalarne::              Sta³e numeryczne i ³añcuchowe.
* Sta³e regexp::                Wyra¿enia regularne sta³e.
* U¿ywanie sta³ych regexp::     Kiedy i stosowaæ sta³e regexp.
* Zmienne::                     Zmienne daj± nazwy warto¶ciom do pó¼niejszego
                                u¿ytku.
* U¿ywanie zmiennych::          Stosowanie zmiennych we w³asnych programach.
* Opcje przypisywania::         Nadawanie warto¶ci zmiennym w wierszu
                                poleceñ. Podsumowanie sk³adni wiersza
                                poleceñ. To zaawansowana metoda wprowadzania.
* Konwersja::                   Przekszta³canie ³añcuchów na liczby
                                i odwrotnie.
* Operatory arytmetyczne::      Operacje arytmetyczne (@samp{+}, @samp{-}, itd.)
* Konkatenacja::                Sklejanie ³añcuchów.
* Operatory przypisania::       Zmienianie warto¶ci zmiennej lub pola.
* Operatory inkrementacji::     Zwiêkszanie numerycznej warto¶ci zmiennej.
* Warto¶ci prawdy::             Co jest ``prawdziwe'' a co ``fa³szywe''.
* Typy i porównania::           Jak zmienne otrzymuj± typy. Jak to wp³ywa na
                                porównania liczb i ³añcuchów przez @samp{<},
                                itd.
* Operatory logiczne::          £±cznie wyra¿eñ porównania za pomoc±
                                operatorów logicznych @samp{||} (``or''),
                                @samp{&&} (``and'') i @samp{!} (``not'').
* Wyra¿enia warunkowe::         Wyra¿enia warunkowe wybieraj± miêdzy dwoma
                                podwyra¿eniami pod kontrol± trzeciego.
* Wywo³ania funkcji::           Wywo³anie funkcji jest wyra¿eniem.
* Priorytet::                   Jak ³±cz± siê ró¿ne operatory.
* Przegl±d wzorców::            Co wchodzi w sk³ad wzorca.
* Rodzaje wzorców::             Lista wszystkich rodzajów wzorców.
* Wzorce regexp::               U¿ywanie wyra¿eñ regularnych jako wzorców.
* Wyra¿enia wzorcami::          Jako wzorzec mo¿e byæ u¿yte dowolne wyra¿enie.
* Zakresy::                     Para wzorców okre¶la zakres rekordów.
* BEGIN/END::                   Podawanie regu³ inicjuj±cych i koñcz±cych.
* U¿ywanie BEGIN/END::          Jak i dlaczego korzystaæ z regu³ BEGIN/END.
* I/O i BEGIN/END::             Kwestie I/O w regu³ach BEGIN/END.
* Pusty::                       Pusty wzorzec, który dopasowuje ka¿dy rekord.
* Przegl±d akcji::              Co wchodzi w sk³ad akcji.
* Instrukcja if::               Warunkowe wykonanie pewnych instrukcji @code{awk}.
* Instrukcja while::            Pêtla dopóki jest spe³niony warunek.
* Instrukcja do::               Wykonywanie w pêtli zadanej akcji a¿ do
                                spe³nienia pewnego warunku.
* Instrukcja for::              Inna instrukcja pêtli, która zapewnia
                                klauzule inicjalizacji i inkrementacji.
* Instrukcja break::            Natychmiastowe opuszczenie najbardziej
                                wewnêtrznej obejmuj±cej pêtli.
* Instrukcja continue::         Skok na koniec najbardziej wewnêtrznej
                                obejmuj±cej pêtli.
* Instrukcja next::             Zakoñczenie przetwarzania bie¿±cego
                                rekordu wej¶ciowego.
* Instrukcja nextfile::         Zakoñczenie przetwarzania bie¿±cego pliku.
* Instrukcja exit::             Zakoñczenie wykonywania @code{awk}.
* Modyfikowalne::               Zmienne wbudowane, którymi sterujemy
                                prac± @code{awk}.
* Auto-ustalane::               Zmienne wbudowane, w których @code{awk}
                                udostêpnia ró¿ne informacje.
* ARGC i ARGV::                 Metody korzystania z @code{ARGC} i @code{ARGV}.
* Wprowadzenie do tablic::      Wprowadzenie do tablic.
* Odwo³ania do elementów::      Jak zbadaæ pojedynczy element tablicy.
* Przypisania do elementów::    Jak zmieniæ element tablicy.
* Przyk³ad tablicy::            Prosty przyk³ad tablicy.
* Przegl±danie tablic::         Odmiana instrukcji @code{for}. Wykonuje
                                pêtlê po indeksach elementów tablicy.
* Delete::                      Instrukcja @code{delete} usuwa element z tablicy.
* Numeryczne indeksy tablic::   Jak w @code{awk} wykorzystywaæ liczby
                                jako indeksy.
* Niezainicjowane indeksy::     Stosowanie niezainicjowanych zmiennych
                                jako indeksów.
* Wielowymiarowe::              Emulacja tablic wielowymiarowych w @code{awk}.
* Przegl±danie wielowymiarowych:: Przegl±danie tablic wielowymiarowych.
* Efektywno¶æ tablic::            Specjalne wskazówki dotycz±ce @code{gawk}.
* Wywo³ywanie wbudowanych::     Jak wywo³ywaæ funkcje wbudowane.
* Funkcje numeryczne::          Funkcje dzia³aj±ce na liczbach, m.in.
                                @code{int}, @code{sin} i @code{rand}.
* Funkcje ³añcuchowe::          Funkcje do dzia³añ na ³añcuchach, jak
                                @code{split}, @code{match} i @code{sprintf}.
* Funkcje I/O::                 Funkcje obs³ugi plików i poleceñ pow³oki.
* Funkcje czasu::               Funkcje do pracy ze znacznikami czasu.
* Sk³adnia definicji::          Jak pisaæ definicje i co one znacz±.
* Przyk³ad definicji::          Przyk³ad definicji funkcji i co ona robi.
* Pu³apki funkcji::             Rzeczy, na które lepiej uwa¿aæ.
* Instrukcja return::           Okre¶lanie warto¶ci, jak± zwraca funkcja.
* Opcje::                       Opcje wiersza poleceñ i ich znaczenie.
* Inne argumenty::              Nazwy plików wej¶ciowych i przypisania
                                zmiennych.
* Zmienna AWKPATH::             Katalogi przeszukiwania dla programów @code{awk}.
* Przestarza³e::                Przestarza³e opcje i/lub cechy.
* Nieudokumentowane::           Nieudokumentowane opcje i cechy.
* Znane b³êdy::                 Znane b³êdy @code{gawk}.
* Uwagi o przeno¶no¶ci::        Co zrobiæ, je¶li nie mamy @code{gawk}.
* Funkcja nextfile::            Dwie implementacje funkcji @code{nextfile}.
* Funkcja assert::              Funkcja do obs³ugi asercji w programach @code{awk}.
* Funkcja round::               Funkcja do zaokr±glania je¶li @code{sprintf}
                                nie robi tego poprawnie.
* Funkcje porz±dku::            Funkcje do stosowania znaków jako liczb
                                i odwrotnie.
* Funkcja join::                Funkcja do ³±czenia tablicy w ³añcuch.
* Funkcja mktime::              Funkcja do przekszta³cania daty
                                w znacznik czasu.
* Funkcja gettimeofday::        Funkcja do pobierania sformatowanych czasów.
* Funkcja filetrans::           Funkcja obs³ugi przej¶æ miêdzy plikami.
* Funkcja getopt::              Funkcja do przetwarzania argumentów wiersza
                                poleceñ.
* Funkcje passwd::              Funkcje do pobierania danych o u¿ytkownikach.
* Funkcje group::               Funkcje do pobierania danych o grupach.
* Nazwy biblioteczne::          Jak najlepiej nazywaæ prywatne zmienne
                                globalne w funkcjach bibliotecznych.
* Klony::                       Klony typowych narzêdzi.
* Program cut::                 Narzêdzie @code{cut}.
* Program egrep::               Narzêdzie @code{egrep}.
* Program id::                  Narzêdzie @code{id}.
* Program split::               Narzêdzie @code{split}.
* Program tee::                 Narzêdzie @code{tee}.
* Program uniq::                Narzêdzie @code{uniq}.
* Program wc::                  Narzêdzie @code{wc}.
* Rozmaite programy::           Parê interesuj±cych programów @code{awk}.
* Program dupword::             Znajdowanie w dokumencie zdublowanych wyrazów.
* Program alarm::               Budzik.
* Program translate::           Program podobny do narzêdzia @code{tr}.
* Program labels::              Drukowanie etykiet adresowych.
* Sortowanie wyrazów::          Program do tworzenia statystyki wyrazów.
* Sortowanie historii::         Usuwanie zdublowanych pozycji z pliku historii.
* Program extract::             Wyci±ganie programów z plików
                                ¼ród³owych Texinfo.
* Prosty sed::                  Prosty edytor strumieniowy.
* Program igawk::               Interfejs dla @code{awk}, który do³±cza pliki.
* V7/SVR3.1::                   G³ówne zmiany miêdzy V7 a System V Release 3.1.
* SVR4::                        Pomniejsze zmiany miêdzy System V Release 3.1
                                a Release 4.
* POSIX::                       Nowe cechy ze standardu POSIX.
* BTL::                         Nowe cechy z wersji @code{awk} z Bell
                                Laboratories.
* POSIX/GNU::                   Rozszerzenia w @code{gawk} nie wystêpuj±ce
                                w POSIX @code{awk}.
* Podsumowanie wiersza poleceñ:: Streszczenie wiersza poleceñ.
* Podsumowanie jêzyka::         Zwiêz³y przegl±d jêzyka.
* Zmienne/Pola::                Zmienne, pola i tablice.
* Podsumowanie pól::            Podzia³ na pola wej¶ciowe.
* Podsumowanie wbudowanych::    Zmienne wbudowane @code{awk}.
* Podsumowanie tablic::         Stosowanie tablic.
* Podsumowanie typów danych::   Warto¶ci w @code{awk} s± liczbami
                                lub ³añcuchami.
* Podsumowanie regu³::          Wzorce i akcje, i ich czê¶ci sk³adowe.
* Podsumowanie wzorców::        Krótki przegl±d wzorców.
* Podsumowanie regexp::         Krótki przegl±d wyra¿eñ regularnych.
* Podsumowanie akcji::          Krótki przegl±d akcji.
* Podsumowanie operatorów::     Operatory @code{awk}.
* Podsumowanie sterowania::     Instrukcje steruj±ce.
* Podsumowanie I/O::            Instrukcje wej¶cia/wyj¶cia.
* Podsumowanie printf::         Podsumowanie @code{printf}.
* Podsumowanie plików specjalnych:: Interpretowane wewnêtrznie specjalne
                                nazwy plików.
* Podsumowanie funkcji wbudowanych:: Wbudowane funkcje numeryczne
                                i ³añcuchowe.
* Podsumowanie funkcji czasu::  Wbudowane funkcje czasu.
* Podsumowanie sta³ych ³añcuchowych:: Sekwencje specjalne w ³añcuchach.
* Podsumowanie funkcji::        Definiowanie i wywo³ywanie funkcji.
* Cechy historyczne::           Nieudokumentowane, ale obs³ugiwane
                                ``mo¿liwo¶ci''.
* Dystrybucja gawk::            Co jest w dystrybucji @code{gawk}.
* Pozyskiwanie::                Jak pozyskaæ dystrybucyjnê.
* Rozpakowywanie::              Jak rozpakowaæ pakiet dystrybucyjny.
* Zawarto¶æ pakietu dystrybucyjnego:: Co jest w dystrybucji.
* Instalacja na Uniksie::       Instalowanie @code{gawk} na ró¿nych wersjach
                                Uniksa.
* Szybka instalacja::           Kompilowanie @code{gawk} na Uniksie.
* Filozofia konfigurowania::    Jak to wszystko powinno dzia³aæ.
* Instalacja na VMS::           Instalowanie @code{gawk} na VMS.
* Kompilacja na VMS::           Jak skompilowaæ @code{gawk} na VMS.
* Szczegó³y instalowania na VMS:: Jak zainstalowaæ @code{gawk} na VMS.
* Uruchamianie na VMS::         Jak uruchamiaæ @code{gawk} na VMS.
* VMS POSIX::                   Alternatywne instrukcje dla VMS POSIX.
* Instalacja na PC::            Instalowanie i kopiowanie @code{gawk}
                                na MS-DOS i OS/2
* Instalacja na Atari::         Instalowanie @code{gawk} na Atari ST.
* Kompilowanie na Atari::       Kompilowanie @code{gawk} na Atari.
* U¿ytkowanie na Atari::        Uruchamianie @code{gawk} na Atari.
* Instalacja na Amidze::        Instalowanie @code{gawk} na Amidze.
* B³êdy::                       Zg³aszanie problemów i b³êdów.
* Inne wersje::                 Inne wolnodostêpne implementacje @code{awk}.
* Tryb zgodno¶ci::              Jak wy³±czyæ pewne rozszerzenia @code{gawk}.
* Uzupe³nienia::                Tworzenie uzupe³nieñ @code{gawk}.
* Dodawanie kodu::              Dodawanie kodu do g³ównego cia³a @code{gawk}.
* Nowe przeniesienia::          Przenoszenie @code{gawk} na nowy system
                                operacyjny.
* Przysz³e rozszerzenia::       Nowe mo¿liwo¶ci, które kiedy¶ mog± zostaæ
                                wprowadzone.
* Usprawnienia::                Sugestie usprawnieñ, jakie mog± wykonaæ
                                ochotnicy.
@end menu

@c dedication for Info file
@ifinfo
@center Miriam, za dope³nianie mnie.
@sp 1
@center Chanie, za rado¶æ jak± nam przynios³a¶.
@sp 1
@center Ryfce, za wyk³adniczy wzrost.
@sp 1
@center Nachumowi, za dodany wymiar.
@sp 1
@center Malce, za nowy pocz±tek.
@end ifinfo

@node Przedmowa, Czym jest awk, Top, Top
@unnumbered Przedmowa

@c I saw a comment somewhere that the preface should describe the book itself,
@c and the introduction should describe what the book covers.

Niniejsza ksi±¿ka uczy jêzyka @code{awk} i jego efektywnego wykorzystania.
Powiniene¶ byæ ju¿ zaznajomiony z podstawowymi poleceniami systemu poleceñ,
jak @code{cat} i @code{ls},@footnote{Polecenia te s± dostêpne w systemach
zgodnych z POSIX, jak te¿ na tradycyjnych systemach opartych o UNIX.  Je¿eli
pos³ugujesz siê jakim¶ innym systemem operacyjnym, powiniene¶ przynajmniej
znaæ koncepcje przekierowania wej¶cia/wyj¶cia i potoków.} oraz podstawowymi
mo¿liwo¶ciami pow³oki, jak przekierowanie wej¶cia/wyj¶cia i potoki.

Implementacje jêzyka @code{awk} dostêpne s± dla wielu ró¿nych
¶rodowisk obliczeniowych.  Niniejsza ksi±¿ka, mimo i¿ opisuje ogólnie jêzyk,
omawia tak¿e konkretn± implementacjê @code{awk} o nazwie @code{gawk}
(co oznacza ``GNU Awk'').  @code{gawk} dzia³a na szerokim spektrum systemów
uniksowych, pocz±wszy od komputerów PC opartych na 80386, po wielkoskalowe
systemy, jak maszyny Cray.
@code{gawk} przeniesiono równie¿ na MS-DOS i OS/2 z PC, mikrokomputery Atari
i Amiga, oraz VMS.

@menu
* Historia::                    Historia @code{gawk} i @code{awk}.
* Historia podrêcznika::        Krótka historia projektu GNU i niniejszej
                                ksi±¿ki.
* Podziêkowania::               Podziêkowania.
* Od t³umacza::                 Parê s³ów od t³umacza.
@end menu

@node Historia, Historia podrêcznika, Przedmowa, Przedmowa
@unnumberedsec Historia @code{awk} i @code{gawk}

@cindex akronim
@cindex historia @code{awk}
@cindex Aho, Alfred
@cindex Weinberger, Peter
@cindex Kernighan, Brian
@cindex stary @code{awk}
@cindex nowy @code{awk}
Nazwa @code{awk} pochodzi od inicja³ów jego projektantów:  Alfreda V.@:
Aho, Petera J.@: Weinbergera i Briana W.@:  Kernighana.  Pierwotna wersja
@code{awk} zosta³a napisana w 1977 roku w AT&T Bell Laboratories.
W 1985 nowa wersja uczyni³a ten jêzyk programowania potê¿niejszym,
wprowadzaj±c funkcje definiowane przez u¿ytkownika, wiele strumieni
wej¶ciowych i obliczane wyra¿enia regularne.  Ta nowa wersja sta³a siê
ogólnie dostêpna z Unix System V Release 3.1.  Wersja w System V Release 4
doda³a kilka nowych cech jak równie¿ oczy¶ci³a zachowanie w niektórych
``ciemnych k±tach'' jêzyka.  Pó¼niejsza specyfikacja @code{awk}
w standardzie POSIX Command Language and Utilities obja¶ni³a jêzyk w oparciu
o opinie zarówno projektantów @code{gawk}, jak i projektantów pierwotnego
@code{awk} z Bell Labs.

Implementacja GNU, @code{gawk}, zosta³a napisana w 1986 przez Paula Rubina
i Jay Fenlason, z porad± Richarda Stallmana.  John Woods równie¿ wniós³
czê¶æ kodu.  W 1988 i 1989 David Trueman z pomoc± Arnolda Robbinsa,
gruntownie przeredagowali @code{gawk} w kierunku zgodno¶ci z nowszym
@code{awk}.  Obecny rozwój koncentruje siê na usuwaniu b³êdów, poprawie
efektywno¶ci, zgodno¶ci ze standardami i, od czasu do czasu, nowych cechach.

@node Historia podrêcznika, Podziêkowania, Historia, Przedmowa
@unnumberedsec Projekt GNU i ta ksi±¿ka

@cindex Free Software Foundation
@cindex Stallman, Richard
Free Software Foundation (FSF) jest organizacj± non-profit, której
celem jest tworzenie i rozpowszechnianie swobodnie dostêpnego
oprogramowania.  Zosta³a za³o¿ona przez Richarda M.@:  Stallmana, autora
oryginalnego edytora Emacs.  GNU Emacs jest obecnie najszerzej u¿ywan±
wersj± Emacsa.

@cindex GNU, Projekt
@cindex Projekt GNU
Projekt GNU jest nieustaj±cym wysi³kiem ze strony Free Software
Foundation by stworzyæ pe³ne, swobodnie dostêpne, zgodne z POSIX ¶rodowisko
obliczeniowe.  (GNU oznacza ``GNU's not Unix'' -- GNU to nie Unix.)
W celu zagwarantowania, ¿e kod ¼ród³owy ich oprogramowania bêdzie
zawsze dostêpny dla u¿ytkownika, FSF stosuje ``Powszechn± Licencjê Publiczn±
GNU'' (``GNU General Public License'' lub GPL).  Dla informacji czytelnika
do³±czono tu egzemplarz GPL
(@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE}).
GPL ma zastosowanie w odniesieniu do kodu ¼ród³owego @code{gawk} w jêzyku C.

Zosta³y ukoñczone i s± swobodnie dostêpne: pow³oka, edytor (Emacs), wysoce
przeno¶ne optymalizuj±ce kompilatory C, C++ i C-obiektowego, debuger
symboliczny i  dziesi±tki wielkich i ma³ych narzêdzi (jak @code{gawk}).
W momencie pisania (pocz±tek 1997) tej ksi±¿ki, j±dro systemu operacyjnego
GNU (HURD), zosta³o ju¿ wydane, ale wci±¿ jest na wczesnym etapie rozwoju.

@cindex Linux
@cindex NetBSD
@cindex FreeBSD
Dopóki system operacyjny GNU nie zostanie pe³niej rozwiniêty, powiniene¶
rozwa¿yæ u¿ywanie Linuksa, swobodnie dostêpnego, uniksopodobnego systemu
operacyjnego na 80386, DEC Alpha, Sun SPARC i inne systemy.
Istnieje wiele ksi±¿ek o Linuksie.  Jedn± ze wolnodostêpnych jest
@cite{Linux Installation and Getting Started}, Matta Welsha.  Dostêpnych
jest wiele dystrybucji Linuksa, czêsto w sklepach komputerowych lub na
CD-ROM w komplecie z ksi±¿kami o Linuksie.  (Istniej± trzy inne swobodnie
dostêpne, uniksopodobne systemy operacyjne na 80386 i inne systemy, NetBSD,
FreeBSD i OpenBSD.
Wszystkie oparte s± o 4.4-Lite Berkeley Software Distribution i
wykorzystuj± naj¶wie¿sze wersje @code{gawk} jako swoje wersje @code{awk}.)

@iftex
Ksi±¿ka, któr± teraz czytasz jest w rzeczywisto¶ci darmowa.  Zawarte w niej
informacje s± swobodnie dostêpne dla ka¿dego. Nadaj±cy siê do przetwarzania
automatycznego kod ¼ród³owy tej ksi±¿ki dostarczany jest z @code{gawk},
a ka¿dy mo¿e wzi±æ j± na kopiarkê i zrobiæ sobie tyle kopii ile zechce.
(Po¶wiêæ chwilê na sprawdzenie zezwolenia na kopiowanie na stronie z prawami
autorskimi.)

Je¿eli zap³aci³e¶ za tê ksi±¿kê, to faktycznie zap³aci³e¶ za jej ³adne
wydrukowanie i oprawienie, i pokrycie zwi±zanych z jej produkcj± kosztów
wydawcy.  Do³o¿yli¶my starañ, by utrzymaæ te koszty na rozs±dnym poziomie;
wiêkszo¶æ osób woli oprawion± ksi±¿kê ni¿ ponad 330 stron zkserowanych
stron, które nastêpnie musz± byæ trzymane w skoroszycie (nie wspominaj±c
o czasie i pracy w³o¿onej w kopiowanie).
To samo dotyczy tworzenia tej ksi±¿ki ze ¼ród³a nadaj±cego siê
do automatycznego przetworzenia; cena detaliczna jest tylko nieco wy¿sza
od kosztu wydrukowania jej na drukarce laserowej.
@end iftex

Sama ksi±¿ka przesz³a kilka poprzednich, wstêpnych wydañ.  Jesieni± 1988
rozpocz±³em pracê od wstêpnego szkicu podrêcznika @cite{The GAWK Manual},
Diany Close, Paula Rubin i Richarda Stallmana.  Mia³ on oko³o 90 stron,
i ledwie opisywa³ pierwotn±, ``star±'' wersjê @code{awk}.
Po znacz±cych korektach, pierwsz± wersj± @cite{The GAWK Manual}, jak± wydano
by³a Edycja 0.11 Beta w pa¼dzierniku 1989.  Nastêpnie podrêcznik przeszed³
bardziej znaczne zmiany w Edycji 0.13 z grudnia 1991.
David Trueman, Pat Rankin i Michal Jaegermann wnie¶li swoje sekcje do
podrêcznika w Edycji 0.13.  Zosta³a ona opublikowana przez FSF w formie
drukowanej ksi±¿ki na pocz±tku 1992.  Od tej pory by³o kilka pomniejszych
wydañ, by wymieniæ Edycjê 0.14 z listopada 1992, opublikowan± przez FSF
w styczniu 1993, i Edycjê 0.16 z sierpnia 1993.

Edycja 1.0 @cite{@value{TITLE}} jest w istotny sposób ponownym opracowaniem
@cite{The GAWK Manual}, z du¿± ilo¶ci± dodatkowego materia³u.
FSF i ja zgodzili¶my siê, ¿e teraz ja jestem g³ównym autorem.
Czu³em te¿, ¿e potrzebuje ona bardziej opisowego tytu³u.

@cite{@value{TITLE}} bêdzie bez w±tpienia nadal siê rozwijaæ.
Elektroniczna wersja do³±czana jest do dystrybucji @code{gawk} z FSF.
Je¶li znajdziesz b³±d w tej ksi±¿ce, proszê powiadom o nim!
@xref{B³êdy, ,Zg³aszanie problemów i b³êdów}, gdzie podano
informacje na temat elektronicznego przesy³ania zg³oszeñ o b³êdach, albo
napisz do mnie w zastêpstwie FSF.

@node Podziêkowania, Od t³umacza, Historia podrêcznika, Przedmowa
@unnumberedsec Podziêkowania

@cindex Stallman, Richard
Chcia³bym podziêkowaæ Richardowi M.@: Stallmanowi, za jego wizjê lepszego
¶wiata, i za jego odwagê w za³o¿eniu FSF i rozpoczêciu projektu GNU.

Pocz±tkowy szkic podrêcznika @cite{The GAWK Manual} zawiera³ nastêpuj±ce
podziêkowania:

@quotation
Podziêkowanie za pomoc w stworzeniu tego podrêcznika nale¿y siê wielu
ludziom.
Jay Fenlason wniós³ wiele pomys³ów i przyk³adowych programów.
Richard Mlynarik i Robert Chassell dali pomocne komentarze do
wersji roboczych tego podrêcznika.
Dokument @cite{A Supplemental Document for @code{awk}} autorstwa
Johna W.@: Pierce'a z Wydzia³u Chemii UC w San Diego, zwróci³ uwagê na kilka
kwestii zwi±zanych zarówno z implementacj± @code{awk} jak i niniejszym
podrêcznikiem, które inaczej by nam umknê³y.
@end quotation

Ni¿ej wymienieni ludzie dostarczyli wielu pomocnych komentarzy dotycz±cych
Edycji 0.13 podrêcznika @cite{The GAWK Manual}: Rick Adams, Michael
Brennan, Rich Burridge, Diane Close, Christopher (``Topher'') Eliot, Michael
Lijewski, Pat Rankin, Miriam Robbins i Michal Jaegermann.

Poni¿sze osoby dostarczy³y wielu pomocnych komentarzy dotycz±cych
Edycji 1.0 podrêcznika @cite{@value{TITLE}}: Karl Berry, Michael Brennan,
Darrel Hankerson, Michal Jaegermann, Michael Lijewski i Miriam Robbins.
Pat Rankin, Michal Jaegermann, Darrel Hankerson i Scott Deifik
zaktualizowali w³asne odpowiednie sekcje w Edycji 1.0.

Robert J.@: Chassell dostarczy³ bardzo warto¶ciowych porad dotycz±cych
pos³ugiwania siê Texinfo.  Nale¿± mu siê tak¿e specjalne podziêkowania
za przekonanie mnie bym @emph{nie} zatytu³owa³ tej ksi±¿ki
@cite{How To Gawk Politely} (``Jak poprawnie gawkowaæ'').  Karl Berry
znacz±co pomóg³ przy @TeX{}-owej czê¶ci Texinfo.

@cindex Trueman, David
Specjalne podziêkowanie nale¿y siê Davidowi Truemanovi: by³ prawdziwym
stra¿nikiem rozwoju @code{gawk}, dziêki niemu program dzia³a dobrze i bez
b³êdów.  Mimo i¿ nie jest ju¿ zaanga¿owany w prace przy @code{gawk},
praca z nim przy tym projekcie by³a prawdziw± przyjemno¶ci±.

@cindex Deifik, Scott
@cindex Hankerson, Darrel
@cindex Rommel, Kai Uwe
@cindex Rankin, Pat
@cindex Jaegermann, Michal
Scott Deifik, Darrel Hankerson, Kai Uwe Rommel, Pat Rankin i Michal
Jaegermann (niekoniecznie w tej kolejno¶ci) s± d³ugoletnimi cz³onkami
``zespo³u ³amaczy d/s przeno¶no¶ci'' @code{gawk}.
@c   t³um: ``crack portability team''
Bez ich ciê¿kiej pracy i wsparcia @code{gawk} nie by³by nawet
w przybli¿eniu tak wysokiej jako¶ci programem jak jest obecnie.
Praca z tym zespo³em wspania³ych ludzi by³a i jest przyjemno¶ci±.

@cindex Friedl, Jeffrey
Jeffrey Friedl wniós³ nieocenion± pomoc przy wy³apywaniu wielu problemów,
jakie pojawi³y siê ostatniej chwili w wyra¿eniach regularnych
@code{gawk} 3.0.

@cindex Kernighan, Brian
David i ja chcieliby¶my podziêkowaæ Brianowi Kernighanowi z Bell Labs
za nieocenione wsparcie podczas testowania i debugowania @code{gawk} oraz
za pomoc w wyja¶nieniu mnóstwa kwestii dotycz±cych jêzyka.  Bez jego
pomocy nie zdo³aliby¶my wykonaæ nawet w przybli¿eniu tak dobrej roboty,
zarówno przy @code{gawk} jak i dokumentacji.

@cindex Hughes, Phil
Chcia³bym podziêkowaæ Marshallowi i Elaine Hartholz z Seattle oraz Dr.@:
Bertowi i Ricie Schreiber z Detroit za d³ugie okresy spokojnych wakacji
w ich domach, które pozwoli³y mi na dokonanie znacz±cego postêpu w pracy nad
t± ksi±¿k± i nad samym @code{gawk}.  Phil Hughes z SSC wniós³ swój wk³ad
w bardzo istotny sposób, po¿yczaj±c mi swojego laptopa z systemem Linux,
nie tylko jednokrotnie, ale dwa razy, umo¿liwiaj±c mi wykonanie mnóstwa
pracy gdy by³em poza domem.

@cindex Robbins, Miriam
Na koniec, muszê podziêkowaæ swojej wspania³ej ¿onie, Miriam, za cierpliwo¶æ
podczas wielu wersji tego projektu, za korekty i za dzielenie siê mn±
z komputerem.
Chcia³bym podziêkowaæ swoim rodzicom za ich mi³o¶æ i za dobroæ, w której
mnie wychowali i wykszta³cili.
Muszê te¿ wyraziæ sw± wdziêczno¶æ B-gu, za wiele okazji jakie zes³a³
na mojej drodze i za dary jakie mi ofiarowa³, bym móg³ z tych okazji
skorzystaæ.
@sp 2
@noindent
Arnold Robbins @*
Atlanta, Georgia @*
Luty 1997

@ignore
Rzeczy wci±¿ nigdzie nie omówione:
PODSTAWY:
   Ca³kowite a zmiennoprzecinkowe
   Szesnastkowo a ósemkowo, a dziesiêtnie
   Interpreter a kompilator
   input/output
@end ignore

@node Od t³umacza, , Podziêkowania, Przedmowa
@unnumberedsec Od t³umacza
Niniejszy przek³ad powsta³
w ramach @uref{http://ptm.linux.pl/, Projektu T³umaczenia Manuali}.
Zg³oszenia b³êdów, komentarze i sugestie
proszê przesy³aæ na listê dyskusyjn± Projektu: @email{ptm@@amg.net.pl}
lub ewentualnie do autora t³umaczenia.

Polsk± wersjê Powszechnej Licencji Publicznej GNU (GNU GPL) mo¿na znale¼æ
na @uref{http://www.linux.org.pl/} oraz @uref{http://gnu.org.pl/}.
Proszê pamiêtaæ, ¿e pod wzglêdem prawnym obowi±zuj±ca jest wy³±cznie
oryginalna, angielska wersja.  Stanowisko FSF w tej kwestii wyja¶niono
na stronie @uref{http://www.gnu.org/copyleft/copyleft.html}.

W.Kotwica (@email{wkotwica@@post.pl})

@unnumberedsubsec Rozpowszechnianie
To jest nieoficjalne t³umaczenie warunków rozpowszechniania na jêzyk polski.
Nie zosta³o ono opublikowane przez Free Software Foundation
i pod wzglêdem prawnym nie stanowi warunków rozpowszechniania -- ustanawia
je wy³±cznie oryginalny tekst angielski.  Jednak t³umacz ma nadziejê, ¿e
pomo¿e ono lepiej zrozumieæ warunki rozpowszechniania osobom mówi±cym
po polsku.

This is an unofficial translation of the distribution terms into
Polish language. It was not published by the Free Software Foundation, and
does not legally state the distribution terms--only the original English text
does that. However, the translator hopes that it will help Polish language
speakers understand distribution terms better.

Zezwala siê na tworzenie i rozpowszechnianie wiernych kopii
tego podrêcznika, pod warunkiem, ¿e na wszystkich kopiach zostanie zachowana
informacja o prawach autorskich i niniejsze zezwolenie.

Zezwala siê na kopiowanie i rozpowszechnianie zmienionych wersji
tego podrêcznika na warunkach jak dla wiernych kopii, pod warunkiem, ¿e
ca³a praca pochodna bêdzie rozpowszechniana na warunkach zezwolenia
identycznego jak niniejsze.

Zezwala siê na kopiowanie i rozpowszechnianie t³umaczeñ tego
podrêcznika na inny jêzyk, pod wy¿ej podanymi warunkami dla zmienionych
wersji, z wyj±tkiem tego, ¿e niniejsze zezwolenie mo¿e byæ ustanowione
w t³umaczeniu zaakceptowanym przez Fundacjê.

@node Czym jest awk, Zaczynamy, Przedmowa, Top
@chapter Wstêp

Je¶li przypominasz wielu z u¿ytkowników komputerów, to zapewne czêsto
robisz zmiany w rozmaitych plikach tekstowych w miejscach, gdzie
wystêpuj± pewne wzorce, lub wy³uskujesz dane z fragmentów pewnych wierszy
odrzucaj±c resztê.  Napisanie wykonuj±cego to programu w jêzyku takim
jak C czy Pascal jest czasoch³onne i niewygodne, mo¿e te¿ poch³on±æ wiele
linii kodu.  Zadanie mo¿e byæ ³atwiejsze przy u¿yciu @code{awk}.

Narzêdzie @code{awk} interpretuje specjalizowany jêzyk programowania,
umo¿liwiaj±cy obs³ugê prostych zadañ reformatowania danych za pomoc±
zaledwie kilku linii kodu.

Wykonana w ramach GNU implementacja @code{awk} nazywa siê @code{gawk}.
Jest w pe³ni zgodna w górê z wersj± @code{awk} z System V
Release 4.  @code{gawk} jest te¿ zgodny w górê ze specyfikacj± POSIX
jêzyka @code{awk}.  To znaczy, ¿e wszystkie poprawnie napisane programy
@code{awk} powinny dzia³aæ z @code{gawk}.  Zatem, zwykle nie rozró¿niamy
@code{gawk} i innych implementacji @code{awk}.

@cindex zastosowania @code{awk}
Stosuj±c @code{awk} mo¿na:

@itemize @bullet
@item
zarz±dzaæ ma³ymi, osobistymi bazami danych

@item
generowaæ raporty

@item
sprawdzaæ poprawno¶æ danych

@item
tworzyæ indeksy i wykonywaæ inne zadania przygotowywania dokumentów

@item
a nawet eksperymentowaæ z algorytmami, które pó¼niej mog± byæ zaadaptowane
do innych jêzyków komputerowych
@end itemize

@menu
* Niniejszy podrêcznik::        Pos³ugiwanie siê t± ksi±¿k±.  Zawiera
                                przyk³adowe pliki wej¶ciowe.
* Konwencje::                   Konwencje typograficzne.
* Przyk³adowe pliki danych::    Przyk³adowe pliki danych do zastosowania
                                z programami @code{awk} pokazanymi
                                w tej ksi±¿ce.
@end menu

@node Niniejszy podrêcznik, Konwencje, Czym jest awk, Czym jest awk
@section Pos³ugiwanie siê t± ksi±¿k±
@cindex ksi±¿ka, u¿ywanie niniejszej
@cindex u¿ywanie niniejszej ksi±¿ki
@cindex jêzyk, @code{awk}
@cindex program, @code{awk}
@ignore
@cindex @code{awk} jêzyk
@cindex @code{awk} program
@end ignore

Okre¶lenie @code{awk} odnosi siê do konkretnego programu oraz do jêzyka
u¿ywanego, by powiedzieæ temu programowi, co ma zrobiæ.  Gdy potrzebujemy
byæ precyzyjni, nazywamy program ``narzêdziem @code{awk}'' za¶ jêzyk
``jêzykiem @code{awk}''.  Okre¶lenie @code{gawk} odnosi siê do wersji
@code{awk} wykonanej jako czê¶æ projektu GNU.  Celem tej ksi±¿ki
jest obja¶nienie zarówno jêzyka @code{awk} jak i sposobu uruchamiania
narzêdzia @code{gawk}.

G³ównym celem tej ksi±¿ki jest wyja¶nienie mo¿liwo¶ci @code{awk}
zdefiniowanych w standardzie POSIX.  Zrobiono to w kontek¶cie jednej
konkretnej implementacji, @code{gawk}.  Równocze¶nie usi³owano tak¿e opisaæ
istotne ró¿nice pomiêdzy @code{gawk} a innymi implementacjami @code{awk}.
I na koniec, odnotowano wszelkie cechy @code{gawk} nie istniej±ce
w standardzie POSIX dla @code{awk}.

@iftex
Niniejsza ksi±¿ka ma trudne zadanie bycia zarówno podrêcznikiem jak
i informatorem.  Je¿eli jeste¶ nowicjuszem, mo¿esz swobodnie pomin±æ
szczegó³y, które wydaj± siê zbyt skomplikowane.  Powiniene¶ te¿ zignorowaæ
wiele odsy³aczy.  S± one przeznaczone dla do¶wiadczonych u¿ytkowników
i wersji interaktywnej tego dokumentu w postaci Info.
@end iftex

Okre¶lenie @dfn{program @code{awk}} odnosi siê do programu napisanego
w jêzyku programowania @code{awk}.

@xref{Zaczynamy, ,Zaczynamy pracê z @code{awk}}, gdzie znale¼æ
mo¿na same podstawy niezbêdne do rozpoczêcia pracy z @code{awk}.

Do³±czono nieco przydatnych ``jednolinijkowców'', by daæ pojêcie o jêzyku
@code{awk} (@pxref{Jednolinijkowce, ,Przydatne programy jednolinijkowe}).

Podano tu te¿ wiele przyk³adowych programów @code{awk}
(@pxref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}}; równie¿
@pxref{Przyk³adowe programy, ,Praktyczne programy @code{awk}}).

Ca³o¶æ jêzyka @code{awk} podsumowano w krótkim informatorze
@ref{Podsumowanie gawk, ,Podsumowanie @code{gawk}}.  Zagl±dnij tam, je¶li potrzebujesz
przypomnieæ sobie jak±¶ konkretn± cechê.

Je¿eli napotkasz termin, który nie jest ci znany, spróbuj poszukaæ go
w s³owniku (@pxref{S³ownik}).

W wiêkszo¶ci przypadków jako przyk³ady zastosowano kompletne programy
@code{awk}, ale w kilku bardziej zaawansowanych sekcjach pokazano tylko
czê¶æ programu, ilustruj±c± opisywane pojêcie.

Mimo, ¿e ksi±¿ka ta zasadniczo skierowana jest do osób, które nie spotka³y
siê dot±d z @code{awk}, zawiera te¿ wiele informacji, które nawet
ekspert w @code{awk} powinien uznaæ za przydatne.  W szczególno¶ci,
zainteresowaæ powinien opis POSIX @code{awk} i przyk³adowe programy w
@ref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}}, a tak¿e
@ref{Przyk³adowe programy, ,Praktyczne programy @code{awk}}.

@c fakenode --- for prepinfo
@unnumberedsubsec Ciemne k±ty
@display
@i{Kto uchyli³ to okno?!?}
Hrabia Dracula
@end display
@sp 1

@cindex c.k., zobacz ``ciemny k±t''
@cindex ciemny k±t
Do powstania standardu POSIX (i @cite{The Gawk Manual}), wiele cech @code{awk}
by³o albo s³abo udokumentowanych, albo w ogóle nie udokumentowanych.  Opisy
takich cech (czêsto zwanych ``ciemnymi k±tami'' -  ``dark corners'') odnotowane
s± w niniejszej ksi±¿ce za pomoc± ``(c.k.)''.
Pojawiaj± siê te¿ w indeksie pod has³em ``ciemny k±t''.

@node Konwencje, Przyk³adowe pliki danych, Niniejszy podrêcznik, Czym jest awk
@section Konwencje typograficzne

Ksi±¿kê tê napisano za pomoc± Texinfo, jêzyka formatowania dokumentacji
GNU. Pojedynczy plik ¼ród³owy Texinfo s³u¿y do utworzenia zarówno wersji
drukowanej dokumentacji jak i wersji interaktywnej.
@iftex
Z tego powodu, konwencje typograficzne s± nieco odmienne ni¿ w innych
ksi±¿kach, które zapewne czyta³e¶.
@end iftex
@ifinfo
Ta sekcja pokrótce opisuje konwencje typograficzne stosowane w Texinfo.
@end ifinfo

Przyk³ady wpisywane w wierszu poleceñ poprzedzane s± standardowymi symbolami
zachêty pow³oki, g³ównym i pomocniczym, @samp{$} i @samp{>}.
Wyj¶cie poleceñ poprzedzane jest glifem ``@print{}''.
Typowo reprezentuje on standardowe wyj¶cie danego polecenia.
Komunikaty o b³êdach i inne wyniki na standardowym wyj¶ciu b³êdów poprzedzane
s± glifem ``@error{}''.  Na przyk³ad:

@example
@group
$ echo hi on stdout
@print{} hi on stdout
$ echo hello on stderr 1>&2
@error{} hello on stderr
@end group
@end example

@c HQ @iftex
W tek¶cie nazwy poleceñ pojawiaj± siê @code{t± czcionk±}, podczas gdy
fragmenty kodu pojawiaj± siê t± sam± czcionk± i cytowane @samp{w ten
sposób}.  Pewne rzeczy bêd± uwydatnione  @emph{jak ta}, a je¶li istotna
kwestia musi byæ szczególnie podkre¶lona, bêdzie to zrobione @strong{w³a¶nie
tak}.  Pierwsze wyst±pienie nowego okre¶lenia zwykle jest jego
@dfn{definicj±} i pojawia siê napisane t± sam± czcionk±, co poprzednie
wyst±pienie ``definicji'' w tym zdaniu. Nazwy plików wskazywane s± tak:
@file{/sciezka/do/pliku}.
@c HQ @end iftex

Znaki wpisywane z klawiatury wygl±daj± @kbd{w ten sposób}.  W szczególno¶ci,
istniej± znaki specjalne zwane ``znakami steruj±cymi'' (``control
characters'').  S± one znakami wprowadzanymi przez równoczesne przytrzymanie
klawisza @kbd{CONTROL} i innego klawisza.  Na przyk³ad, @kbd{Control-d}
wprowadzane jest przez najpierw naci¶niêcie i przytrzymanie klawisza
@kbd{CONTROL}, nastêpnie naci¶niêcie klawisza @kbd{d}, i na koniec puszczenie
obu klawiszy.

@node Przyk³adowe pliki danych,  , Konwencje, Czym jest awk
@section Pliki danych do przyk³adów

@cindex plik wej¶ciowy, przyk³ad
@cindex przyk³ad pliku wej¶ciowego
@cindex plik @file{BBS-list}
@cindex @file{BBS-list}, plik
Wiele przyk³adów w tej ksi±¿ce pobiera dane wej¶ciowe z dwu przyk³adowych
plików danych.  Pierwszy, o nazwie @file{BBS-list}, reprezentuje zestawienie
systemów elektronicznych tablic og³oszeniowych (BBS), z informacj± o tych systemach.
Drugi plik danych, o nazwie @file{inventory-shipped}, zawiera dane
o wysy³kach towarów w kolejnych miesi±cach.  W obu plikach ka¿dy wiersz
uwa¿any jest za jeden @dfn{rekord}.

W pliku @file{BBS-list}, ka¿dy rekord zawiera nazwê komputera prowadz±cego
BBS, jego numer telefonu, prêdko¶æ (prêdko¶ci) transmisji w bodach i kod
oznaczaj±cy godziny, w jakich dzia³a BBS.  Litera @samp{A} w ostatniej
kolumnie oznacza, ¿e BBS dzia³a 24 godziny na dobê.  @samp{B} w ostatniej
kolumnie oznacza, ¿e BBS dzia³a tylko wieczorami i w weekendy.  @samp{C}
oznacza, ¿e funkcjonuje tylko w weekendy.

@c 2e: Update the baud rates to reflect today's faster modems
@example
@c system mkdir eg
@c system mkdir eg/lib
@c system mkdir eg/data
@c system mkdir eg/prog
@c system mkdir eg/misc
@c file eg/data/BBS-list
aardvark     555-5553     1200/300          B
alpo-net     555-3412     2400/1200/300     A
barfly       555-7685     1200/300          A
bites        555-1675     2400/1200/300     A
camelot      555-0542     300               C
core         555-2912     1200/300          C
fooey        555-1234     2400/1200/300     B
foot         555-6699     1200/300          B
macfoo       555-6480     1200/300          A
sdace        555-3430     2400/1200/300     A
sabafoo      555-2127     1200/300          C
@c endfile
@end example

@cindex plik @file{inventory-shipped}
@cindex @file{inventory-shipped}, plik
Drugi plik danych, o nazwie @file{inventory-shipped}, reprezentuje dane
o dostawach towarów w ci±gu roku.
Ka¿dy rekord zawiera odpowiednio miesi±c roku, liczbê wys³anych zielonych
skrzyñ, liczbê wys³anych czerwonych skrzyñ i liczbê wys³anych niebieskich
skrzyñ.  Jest w nim 16 pozycji, obejmuj±cych 12 miesiêcy jednego roku
i cztery miesi±ce nastêpnego.

@example
@c file eg/data/inventory-shipped
Jan  13  25  15 115
Feb  15  32  24 226
Mar  15  24  34 228
Apr  31  52  63 420
May  16  34  29 208
Jun  31  42  75 492
Jul  24  34  67 436
Aug  15  34  47 316
Sep  13  55  37 277
Oct  29  54  68 525
Nov  20  87  82 577
Dec  17  35  61 401

Jan  21  36  64 620
Feb  26  58  80 652
Mar  24  75  70 495
Apr  21  70  74 514
@c endfile
@end example

@ifinfo
Je¿eli czytasz to w GNU Emacsie przy u¿yciu Info, mo¿esz skopiowaæ obszary
tekstu pokazuj±ce przyk³ady do w³asnych plików testowych.  W ten sposób
bêdziesz móg³ wypróbowaæ przyk³ady pokazane w dalszej czê¶ci niniejszego dokumentu.
Wykonuje siê to poleceniem @kbd{M-x write-region} kopiuj±cym
tekst z pliku Info do pliku, który bêdzie u¿ywany z @code{awk}
(@xref{Misc File Ops, , Miscellaneous File Operations, emacs, GNU Emacs Manual}).
Wykorzystuj±c tê informacjê, stwórz w³asne pliki
@file{BBS-list} i @file{inventory-shipped} i przeæwicz to, czego nauczy³e¶
siê w tej ksi±¿ce.

Je¿eli u¿ywasz samodzielnej wersji Info, zobacz
@ref{Program extract, ,Wydzielanie programów z plików ¼ród³owych Texinfo},
gdzie opisano program @code{awk}, który wydzieli powy¿sze pliki danych
z @file{gawk.texi}, pliku ¼ród³owego Texinfo niniejszego pliku Info.
@end ifinfo

@node Zaczynamy, Jednolinijkowce, Czym jest awk, Top
@chapter Zaczynamy pracê z @code{awk}
@cindex skrypt, definicja
@cindex regu³a, definicja
@cindex program, definicja
@cindex podstawowa funkcja @code{awk}

Podstawow± funkcj± @code{awk} jest wyszukiwanie w plikach wierszy (lub innych
jednostek tekstu) zawieraj±cych pewien wzorzec.  Gdy wiersz pasuje do jednego
ze wzorców, @code{awk} wykonuje na nim zadane akcje.
@code{awk} kontynuuje takie przetwarzanie wierszy wej¶ciowych a¿ do
osi±gniêcia koñca plików wej¶ciowych.

@cindex sterowane danymi, jêzyki
@cindex proceduralne, jêzyki
@cindex jêzyk, sterowany danymi
@cindex jêzyk, proceduralny
Programy w @code{awk} ró¿ni± siê od programów w wiêkszo¶ci innych jêzyków,
gdy¿ s± @dfn{sterowane danymi} (data-driven): to znaczy, opisujemy dane,
z którymi chcemy pracowaæ, a nastêpnie co zrobiæ po ich znalezieniu.
Inne jêzyki przewa¿nie s± @dfn{proceduralne}; musimy opisaæ, bardzo
szczegó³owo, ka¿dy krok jaki ma byæ wykonany przez program.  Pracuj±c w
jêzykach proceduralnych zwykle du¿o trudniej jest precyzyjnie opisaæ dane,
jakie bêdzie przetwarza³ program.  Z tego powodu, programy @code{awk} s±
czêsto buduj±co ³atwe zarówno w pisaniu jak i czytaniu.

@cindex program, definicja
@cindex regu³a, definicja
Przy uruchamianiu @code{awk}, okre¶la siê @dfn{program} @code{awk}, mówi±cy
@code{awk}, co ma zrobiæ.  Program taki sk³ada siê z szeregu @dfn{regu³}.
(Mo¿e te¿ zawieraæ @dfn{definicje funkcji}, zaawansowan± cechê, o której
na razie nie bêdziemy mówiæ.
@xref{U¿ytkownika, ,Funkcje u¿ytkownika}.)  Ka¿da regu³a okre¶la jeden
wzorzec jaki ma byæ szukany i jedn± akcjê jaka zostanie wykonana po
znalezieniu tego wzorca.

Sk³adniowo, regu³a sk³ada siê ze wzorca, po którym nastêpuje akcja.  Akcja
ujêta jest w nawiasy klamrowe, co oddziela j± od wzorca.
Regu³y s± zwykle rozdzielane znakami nowej linii.  St±d te¿ program
@code{awk} wygl±da tak:

@example
@var{wzorzec} @{ @var{akcja} @}
@var{wzorzec} @{ @var{akcja} @}
@dots{}
@end example

@menu
* Nazwy::                       Jakiej nazwy u¿yæ, by znale¼æ @code{awk}.
* Uruchamianie gawk::           Jak uruchamiaæ programy @code{gawk}; zawiera
                                sk³adniê wiersza poleceñ.
* Bardzo prosty::               Bardzo prosty przyk³ad.
* Dwie regu³y::                 Mniej prosty jednolinijkowy przyk³ad z
                                dwoma regu³ami.
* Trudniejszy::                 Bardziej z³o¿ony przyk³ad.
* Instrukcje/wiersze::          Podzia³ lub ³±czenie instrukcji w wierszach.
* Inne cechy::                  Inne cechy @code{awk}.
* Kiedy::                       Kiedy stosowaæ @code{gawk} a kiedy inne rzeczy.
@end menu

@node Nazwy, Uruchamianie gawk , Zaczynamy, Zaczynamy
@section Inne imiê ró¿y

@cindex stary @code{awk} a nowy @code{awk}
@cindex nowy @code{awk} a stary @code{awk}
Jêzyk @code{awk} rozwija³ siê przez wiele lat.  Pe³ne szczegó³y podano w
@ref{Historia jêzyka, ,Ewolucja jêzyka @code{awk}}.
Jêzyk opisany w tej ksi±¿ce czêsto okre¶lany jest jako ``nowy @code{awk}''.

Z tego powodu wiele systemów posiada kilka wersji @code{awk}.
Niektóre z systemów maj± narzêdzie @code{awk} implementuj±ce pierwotn± wersjê
jêzyka @code{awk} a narzêdzie @code{nawk} do nowej wersji.  Inne maj±
@code{oawk} dla ``starego (old) jêzyka @code{awk}'' za¶ zwyk³e @code{awk} do
nowego.  Pozosta³e wci±¿ maja tylko jedn± wersjê, zwykle
now±.@footnote{Czêsto systemy te u¿ywaj± @code{gawk} do realizacji
swego @code{awk}!}

Wszystko to razem powoduje, ¿e podczas pisania programów trudno powiedzieæ,
jak± z wersji @code{awk} powinno siê uruchomiæ.  Najlepsz± rad±, jak±
mo¿emy tu podaæ, jest sprawdzenie lokalnej dokumentacji.  Szukaj @code{awk},
@code{oawk} i @code{nawk}, równie¿ @code{gawk}.  Mo¿liwe, ¿e masz w systemie
jak±¶ wersjê nowego @code{awk}, i uruchamiaj±c swoje programy w³a¶nie jej
powiniene¶ u¿ywaæ.  (Oczywi¶cie, je¿eli czytasz tê ksi±¿kê, s± du¿e szanse
na to, ¿e masz @code{gawk}!)

W ca³ej tej ksi±¿ce, odnosz±c siê do cechy jêzyka, która powinna byæ dostêpna
w ka¿dej pe³nej implementacji POSIX @code{awk}, u¿ywamy po prostu terminu
@code{awk}.  Pisz±c o mo¿liwo¶ci specyficznej dla implementacji GNU,
pos³ugujemy siê terminem @code{gawk}.

@node Uruchamianie gawk, Bardzo prosty, Nazwy, Zaczynamy
@section Jak uruchamiaæ programy @code{awk}

@cindex wiersz poleceñ, formaty
@cindex uruchamianie programów @code{awk}
Istnieje kilka sposobów uruchamiania programu @code{awk}.  Je¶li program jest
krótki, naj³atwiej zawrzeæ go w wierszu poleceñ uruchamiaj±cym @code{awk},
w ten sposób:

@example
awk '@var{program}' @var{plik-wej1} @var{plik-wej2} @dots{}
@end example

@noindent
gdzie @var{program} sk³ada siê z szeregu wzorców i akcji, jak opisano
wcze¶niej. (Przyczyna u¿ycia pojedynczych cudzys³owów jest opisana poni¿ej,
w @ref{Jednorazowe, ,Programy @code{awk} jednorazowego u¿ytku}.)

Gdy program jest d³ugi, zwykle wygodniej umie¶ciæ go w pliku i uruchamiaæ
w taki sposób:

@example
awk -f @var{plik-programu} @var{plik-wej1} @var{plik-wej2} @dots{}
@end example

@menu
* Jednorazowe::                 Uruchamianie krótkich jednorazowych
                                programów @code{awk}.
* Czytanie z terminala::        Niestosowanie plików wej¶ciowych (pobieranie
                                wej¶cia z terminala).
* D³ugie::                      Umieszczanie sta³ych programów @code{awk}
                                w plikach.
* Skrypty wykonywalne::         Tworzenie samodzielnych programów @code{awk}.
* Komentarze::                  Dodawanie dokumentacji do programów @code{gawk}.
@end menu

@node Jednorazowe, Czytanie z terminala, Uruchamianie gawk, Uruchamianie gawk
@subsection Programy @code{awk} jednorazowego u¿ytku

Gdy zapoznasz siê ju¿ z @code{awk}, bêdziesz czêsto wpisywa³ proste programy
w chwili, gdy zechcesz z nich skorzystaæ.  Mo¿na wówczas zapisywaæ takie
programy jako pierwszy argument polecenia @code{awk}, tak:

@example
awk '@var{program}' @var{plik-wej1} @var{plik-wej2} @dots{}
@end example

@noindent
gdzie @var{program} sk³ada siê z szeregu @var{wzorców} i @var{akcji}, jak
to opisano wcze¶niej.

@cindex pojedyncze cudzys³owy, dlaczego potrzebne
@cindex apostrofy, dlaczego potrzebne
Ten format polecenia nakazuje @dfn{pow³oce}, interpreterowi
poleceñ, uruchomienie @code{awk} i u¿ycie @var{programu} do przetwarzania
rekordów w pliku (plikach) wej¶ciowym.  Wokó³ @var{programu} postawiono
pojedyncze cudzys³owy (apostrofy), tak ¿e pow³oka nie zinterpretuje ¿adnych
znaków @code{awk} jako znaków specjalnych pow³oki.  Powoduj± one równie¿, ¿e
pow³oka potraktuje ca³y @var{program} jako pojedynczy argument @code{awk} i
pozwalaj±, by @var{program} by³ d³u¿szy ni¿ jeden wiersz.

Ten format przydaje siê te¿ do uruchamiania krótkich i ¶rednich programów
@code{awk} ze skryptów pow³oki, gdy¿ unika potrzeby stosowania odrêbnego
pliku z programem @code{awk}.  Samodzielny skrypt pow³oki jest bardziej
niezawodny, poniewa¿ nie ma innych plików, które mog³yby byæ ¼le
umieszczone.

@ref{Jednolinijkowce, ,Przydatne programy jednolinijkowe}, pokazuje kilka
krótkich, samodzielnych programów.

Na marginesie, ciekawe, ¿e polecenie

@example
awk '/foo/' @var{pliki} @dots{}
@end example

@noindent
jest w gruncie rzeczy tym samym, co

@cindex @code{egrep}
@example
egrep foo @var{pliki} @dots{}
@end example

@node Czytanie z terminala, D³ugie, Jednorazowe, Uruchamianie gawk
@subsection Uruchamianie @code{awk} bez plików wej¶ciowych

@cindex standardowe wej¶cie
@cindex wej¶cie, standardowe
Mo¿na te¿ uruchamiaæ @code{awk} bez plików wej¶ciowych.  Je¿eli wpiszemy
w wierszu poleceñ:

@example
awk '@var{program}'
@end example

@noindent
to @code{awk} zastosuje @var{program} do @dfn{standardowego wej¶cia}, co
zwykle oznacza to, co wpisujemy na terminalu.  Trwa to do chwili wskazania
koñca pliku przez naci¶niêcie @kbd{Control-d}.  (W innych systemach
operacyjnych, znak koñca pliku mo¿e byæ odmienny.  Na przyk³ad, w OS/2
i MS-DOS, jest to @kbd{Control-z}.)

Na przyk³ad, poni¿szy program wypisuje przyjazn± poradê
(z Douglasa Adamsa @cite{Autostopem przez Galaktykê}),
by¶ nie przejmowa³ siê zawi³o¶ciami programowania komputerów
(@samp{BEGIN} jest cech±, której jeszcze nie omawiali¶my).

@example
$ awk "BEGIN @{ print \"Nie panikuj!\" @}"
@print{} Nie panikuj!

$ awk "BEGIN @{ print \"Don't Panic!\" @}"
@print{} Don't Panic!
@end example

@cindex cytowanie, pow³oka
@cindex pow³oka, cytowanie
Ten program w ogóle nie czyta wej¶cia. Znak @samp{\} przed ka¿dym
z wewnêtrznych cudzys³owów jest konieczny z powodu regu³ cytowania pow³oki,
konkretnie dlatego, ¿e mieszamy cudzys³owy pojedyncze z podwójnymi.

Kolejny prosty program @code{awk} symuluje narzêdzie @code{cat}. Kopiuje
wszystko, co zostanie wpisane z klawiatury, na standardowe wyj¶cie.
(Pokrótce wyja¶niono, dlaczego dzia³a.)

@example
$ awk '@{ print @}'
Now is the time for all good men
@print{} Now is the time for all good men
to come to the aid of their country.
@print{} to come to the aid of their country.
Four score and seven years ago, ...
@print{} Four score and seven years ago, ...
What, me worry?
@print{} What, me worry?
@kbd{Control-d}
@end example

@node D³ugie, Skrypty wykonywalne, Czytanie z terminala, Uruchamianie gawk
@subsection Uruchamianie d³ugich programów

@cindex uruchamianie d³ugich programów
@cindex @code{-f} opcja
@cindex plik programu @code{awk}
@cindex program, w pliku
Czasami programy @code{awk} s± bardzo d³ugie.  W tym przypadku wygodniej
jest umie¶ciæ program w osobnym pliku.  Chc±c nakazaæ @code{awk} u¿ycie tego
pliku jako programu, wpisujemy:

@example
awk -f @var{plik-¼ród³owy} @var{plik-wej1} @var{plik-wej2} @dots{}
@end example

Opcja @samp{-f} poleca narzêdziu @code{awk} pobranie programu @code{awk}
z pliku @var{plik-¼ród³owy}.  Jako @var{plik-¼ród³owy} mo¿na u¿yæ dowolnej
nazwy pliku.  Na przyk³ad, mo¿na umie¶ciæ program:

@example
BEGIN @{ print "Nie panikuj!" @}
@end example

@noindent
w pliku @file{porada}.  Wówczas to polecenie:

@example
awk -f porada
@end example

@noindent
robi to samo, co to:

@example
awk "BEGIN @{ print \"Nie panikuj!\" @}"
@end example

@cindex cytowanie, pow³oka
@cindex pow³oka, cytowanie
@noindent
które by³o obja¶nione wcze¶niej
(@pxref{Czytanie z terminala, ,Uruchamianie @code{awk} bez plików wej¶ciowych}).
Zauwa¿, ¿e zwykle nie trzeba ujmowaæ w pojedyncze cudzys³owy nazwy pliku
podawanego opcj± @samp{-f}, gdy¿ wiêkszo¶æ nazw plików nie zawiera ¿adnych
znaków specjalnych pow³oki.  Zwróæ uwagê, ¿e w pliku @file{porada} program
@code{awk} nie jest ujêty w apostrofy.  S± one potrzebne tylko dla programów
wpisywanych w wierszu poleceñ @code{awk}.

Chc±c wyra¼nie identyfikowaæ pliki programów @code{awk}, mo¿na do nazwy pliku
dodaæ rozszerzenie @file{.awk}.  Nie ma to wp³ywu na wykonanie programu
@code{awk}, ale u³atwia utrzymanie porz±dku.

@node Skrypty wykonywalne, Komentarze, D³ugie, Uruchamianie gawk
@subsection Wykonywalne programy @code{awk}
@cindex skrypty wykonywalne
@cindex wykonywalne, skrypty
@cindex samodzielne programy
@cindex niezale¿ne programy
@cindex program, samodzielny
@cindex program, niezale¿ny
@cindex @code{#!} (skrypty wykonywalne)

Gdy nauczy³e¶ siê ju¿ @code{awk}, mo¿esz pisaæ niezale¿ne skrypty @code{awk},
wykorzystuj±c mechanizm skryptowy @samp{#!}.  Da siê to zrobiæ w wielu
systemach uniksowych@footnote{Mechanizm @samp{#!} dzia³a w systemach
Linux, systemach Unix pochodz±cych od Berkeley Unix, System V Release 4,
i niektórych systemach System V Release 3.} (i pewnego dnia
w systemie GNU).

Na przyk³ad, mo¿emy zaktualizowaæ nasz plik @file{porada} by wygl±da³ tak:

@example
#! /bin/awk -f

BEGIN    @{ print "Nie panikuj!" @}
@end example

@noindent
Po uczynieniu go plikiem wykonywalnym (narzêdziem @code{chmod}), mo¿na
po prostu wpisaæ @samp{porada} w wierszu pow³oki, a system zorganizuje
uruchomienie @code{awk}@footnote{Wiersz rozpoczynaj±cy siê od @samp{#!}
wyszczególnia pe³n± nazwê interpretera, jaki ma zostaæ uruchomiony,
i opcjonalny argument pocz±tkowy wiersza poleceñ, jaki ma zostaæ przes³any
do interpretera.  System operacyjny uruchamia wówczas interpreter z zadanym
argumentem i pe³n± list± argumentów wykonywanego programu.  Pierwszy argument
listy jest pe³n± nazw± pliku programu @code{awk}.  Reszta listy argumentów
bêdzie albo opcjami @code{awk}, albo plikami danych, albo oboma.} tak,
jakby wpisano @samp{awk -f porada}.

@example
@group
$ porada
@print{} !
@end group
@end example

@noindent
Samodzielne skrypty @code{awk} s± u¿yteczne, gdy chcemy napisaæ program,
który u¿ytkownicy mogliby wywo³ywaæ bez potrzeby wiedzy o tym, ¿e napisano
go w @code{awk}.

@strong{Uwaga!} Nie powinno siê umieszczaæ wiêcej ni¿ jednego argumentu
w wierszu @samp{#!} po ¶cie¿ce do @code{awk}. To nie zadzia³a. System
operacyjny traktuje resztê wiersza jako pojedynczy argument i przesy³a go do
@code{awk}. Takie próby prowadz± do wprawiaj±cego w zak³opotanie zachowania
siê programu: najprawdopodobniej jakiego¶ komunikatu diagnostycznego
@code{awk} o b³êdzie wywo³ania.

@cindex skrypty pow³oki
@cindex pow³oka, skrypty
Niektóre ze starszych systemów nie obs³uguj± mechanizmu @samp{#!}. Mo¿na
osi±gn±æ podobny skutek wykorzystuj±c zwyk³y skrypt pow³oki.  Wygl±da³ by
jako¶ tak:

@example
: Dwukropek zapewnia wykonanie przez standardow± pow³okê
awk '@var{program}' "$@@"
@end example

Przy stosowaniu tej techniki @emph{kluczowe} jest ujêcie @var{programu}
w pojedyncze cudzys³owy, by uchroniæ go przed interpretacj± przez pow³okê.
Je¿eli pominie siê apostrofy, to wyniki mo¿e przewidzieæ tylko czarodziej
pow³oki.

Sekwencja @code{"$@@"} powoduje, ¿e pow³oka przekazuje wszystkie argumenty
wiersza poleceñ programowi @code{awk}, bez ich interpretacji.  Pierwszy
wiersz, zaczynaj±cy siê dwukropkiem, zastosowano by skrypt pow³oki dzia³a³
nawet wtedy, gdy wywo³a go u¿ytkownik korzystaj±cy z pow³oki C (csh).
(Nie wszystkie starsze systemy przestrzegaj± tej konwencji, ale wiele to robi.)
@c 2e:
@c Someday: (See @cite{The Bourne Again Shell}, by ??.)

@node Komentarze,  , Skrypty wykonywalne, Uruchamianie gawk
@subsection Komentarze w programach @code{awk}
@cindex @code{#} (komentarz)
@cindex komentarze
@cindex u¿ycie komentarzy
@cindex dokumentowanie programów @code{awk}
@cindex programy, dokumentowanie

@dfn{Komentarz} jest tekstem zawartym w programie ze wzglêdu na
czytelnika-cz³owieka.  Nie jest faktycznie czê¶ci± programu.  Komentarze mog±
obja¶niaæ, co program robi, i jak dzia³a.  Prawie wszystkie jêzyki
programowania umo¿liwiaj± stosowanie komentarzy, gdy¿ bez takiej dodatkowej
pomocy programy s± na ogó³ trudne do zrozumienia.

W jêzyku @code{awk} komentarz rozpoczyna siê od znaku krzy¿yka, @samp{#},
i rozci±ga siê do koñca wiersza.  @samp{#} nie musi byæ pierwszym znakiem
wiersza. Jêzyk @code{awk} ignoruje dalsz± czê¶æ wiersza nastêpuj±c± po
krzy¿yku.  Na przyk³ad, mo¿emy wstawiæ poni¿sze w @file{porada}:

@example
# Ten program wypisuje ³adny przyjazny komunikat. Pomaga
# nowym u¿ytkownikom unikn±æ obaw przed komputerem.
BEGIN    @{ print "Nie panikuj!" @}
@end example

Mo¿na wstawiaæ wiersze komentarzy równie¿ w jednorazowe programy @code{awk}
wpisywane wprost z klawiatury, ale zwykle nie jest to zbyt przydatne.
Celem komentarza jest pomoc autorowi lub innej osobie w pó¼niejszym
zrozumieniu programu.

@strong{Uwaga!} Jak wspomniano w
@ref{Jednorazowe, ,Programy @code{awk} jednorazowego u¿ytku},
ma³e i ¶rednie programy mo¿na umieszczaæ w pojedynczych cudzys³owach, w celu
zachowania samodzielno¶ci skryptów pow³oki.  Przy takim postêpowaniu,
@emph{nie nale¿y} umieszczaæ apostrofu (tj. pojedynczego cudzys³owu)
w komentarzu (lub jakimkolwiek innym miejscu programu).  Pow³oka
zinterpretuje go jako pojedynczy cudzys³ów zamykaj±cy ca³o¶æ programu.
W rezultacie, zwykle pow³oka wypisze komunikat o niedopasowanych
cudzys³owach, a je¶li @code{awk} rzeczywi¶cie siê uruchomi,
najprawdopodobniej wypisze dziwne komunikaty o b³êdach sk³adniowych.
Na przyk³ad:

@example
awk 'BEGIN @{ print "hello" @} # d¼'bry, spryciarzu!'
@end example

@node Bardzo prosty, Dwie regu³y, Uruchamianie gawk, Zaczynamy
@section Bardzo prosty przyk³ad

Poni¿sze polecenie uruchamia prosty program @code{awk} wyszukuj±cy w pliku
wej¶ciowym @file{BBS-list} ³añcucha znaków: @samp{foo}.  (£añcuch znaków
zwykle nazywany jest @dfn{³añcuchem}.  Okre¶lenie @dfn{³añcuch} jest zapewne
oparte na podobnie u¿ywanych w jêzyku angielskim wyra¿eniach ``³añcuch
pere³'' czy ``³añcuch wagonów poci±gu''.)

@example
awk '/foo/ @{ print $0 @}' BBS-list
@end example

@noindent
Gdy znalezione zostan± wiersze zawieraj±ce @samp{foo}, s± one wypisywane,
gdy¿ @w{@samp{print $0}} oznacza wypisanie bie¿±cego wiersza.  (Samo
@samp{print} znaczy to samo, wiêc mogliby¶my zapisaæ to i w taki sposób.)

Zwróæ uwagê na uko¶niki, @samp{/}, otaczaj±ce ³añcuch @samp{foo} w
naszym programie.  Uko¶niki wskazuj±, ¿e @samp{foo} jest wzorcem do
wyszukania.  Ten rodzaj wzorca nazywany jest @dfn{wyra¿eniem regularnym}
(regular expression), i jest szczegó³owo opisany dalej.
(@pxref{Regexp, ,Regular Expressions}).
Dopuszcza siê, by wzorzec pasowa³ do czê¶ci s³ów.
Wokó³ programu @code{awk} mamy pojedyncze cudzys³owy, wiêc pow³oka nie
bêdzie interpretowaæ ¿adnych z nich jako swych znaków specjalnych.

A oto, co wypisuje ten program:

@example
@group
$ awk '/foo/ @{ print $0 @}' BBS-list
@print{} fooey        555-1234     2400/1200/300     B
@print{} foot         555-6699     1200/300          B
@print{} macfoo       555-6480     1200/300          A
@print{} sabafoo      555-2127     1200/300          C
@end group
@end example

@cindex akcja, domy¶lna
@cindex wzorzec, domy¶lny
@cindex domy¶lna akcja
@cindex dimy¶lny wzorzec
Mo¿na pomin±æ jedn± z regu³ @code{awk}, wzorzec albo akcjê, ale nie obie
naraz.  Je¶li pominiêto wzorzec, to akcja wykonywana jest dla @emph{ka¿dego}
wiersza wej¶ciowego.  Je¿eli pominiêto akcjê, to akcj± domy¶ln± jest
wypisanie wszystkich wierszy pasuj±cych do danego wzorca.

@cindex pusta akcja
@cindex akcja, pusta
Zatem, w powy¿szym przyk³adzie mogli¶my opu¶ciæ akcjê (polecenie @code{print}
i nawiasy klamrowe), a wynik by³by taki sam: zosta³yby wypisane wszystkie
wiersze pasuj±ce do wzorca @samp{foo}.  Przez analogiê, pominiêcie instrukcji
@code{print}, ale pozostawienie nawiasów klamrowych tworzy pust± akcjê, która
nic nie robi.  Nie zosta³yby wówczas wypisane ¿adne wiersze.

@node Dwie regu³y, Trudniejszy, Bardzo prosty, Zaczynamy
@section Przyk³ad z dwiema regu³ami
@cindex jak dzia³a @code{awk}

Narzêdzie @code{awk} czyta pliki wej¶ciowe po jednym wierszu.  Dla ka¿dego
wiersza @code{awk} wypróbowuje wzorce ka¿dej z regu³.  Je¿eli pasuje kilka
wzorców, to wykonywanych jest kilka akcji, w kolejno¶ci, w jakiej wystêpuj±
w programie @code{awk}.  Je¶li nie pasuje ¿aden wzorzec, to nie s± wykonywane
¿adne akcje.

Po przetworzeniu wszystkich regu³ (mo¿e ¿adnej) pasuj±cych do wiersza,
@code{awk} czyta nastêpny wiersz (jednak,
@pxref{Instrukcja next, ,Instrukcja @code{next}},
oraz @pxref{Instrukcja nextfile, ,Instrukcja @code{nextfile}}).
Jest to powtarzane a¿ do napotkania koñca pliku.

Na przyk³ad, program @code{awk}:

@example
/12/  @{ print $0 @}
/21/  @{ print $0 @}
@end example

@noindent
zawiera dwie regu³y.  Pierwsza ma ³añcuch @samp{12} jako wzorzec a
@samp{print $0} jako akcjê.  Druga regu³a ma ³añcuch @samp{21} za wzorzec,
i tak¿e @samp{print $0} jako akcjê.  Akcja ka¿dej z regu³ jest ujêta we w³asn±
parê nawiasów klamrowych.

Ten program @code{awk} wypisuje ka¿dy wiersz, który zawiera ³añcuch
@samp{12} @emph{lub} ³añcuch @samp{21}.  Je¿eli wiersz zawiera oba te
³añcuchy, to jest wypisywany dwukrotnie, po jednym razie przez ka¿d±
z regu³.

A oto, co siê stanie, gdy uruchomimy ten program na naszych dwu przyk³adowych
plikach danych, @file{BBS-list} i @file{inventory-shipped}, jak pokazano
ni¿ej:

@example
$ awk '/12/ @{ print $0 @}
>      /21/ @{ print $0 @}' BBS-list inventory-shipped
@print{} aardvark     555-5553     1200/300          B
@print{} alpo-net     555-3412     2400/1200/300     A
@print{} barfly       555-7685     1200/300          A
@print{} bites        555-1675     2400/1200/300     A
@print{} core         555-2912     1200/300          C
@print{} fooey        555-1234     2400/1200/300     B
@print{} foot         555-6699     1200/300          B
@print{} macfoo       555-6480     1200/300          A
@print{} sdace        555-3430     2400/1200/300     A
@print{} sabafoo      555-2127     1200/300          C
@print{} sabafoo      555-2127     1200/300          C
@print{} Jan  21  36  64 620
@print{} Apr  21  70  74 514
@end example

@noindent
Zwróæ uwagê, ¿e wiersz pliku @file{BBS-list} zaczynaj±cy siê od
@samp{sabafoo} zosta³ wypisany dwukrotnie, po razie dla ka¿dej z regu³.

@node Trudniejszy, Instrukcje/wiersze, Dwie regu³y, Zaczynamy
@section Bardziej z³o¿ony przyk³ad

@ignore
We have to use ls -lg here to get portable output across Unix systems.
The POSIX ls matches this behavior too. Sigh.
@end ignore
A teraz przyk³ad daj±cy pojêcie o tym, co robi± typowe programy @code{awk}.
Przyk³ad ten pokazuje jak mo¿na wykorzystaæ @code{awk} do sumowania,
wybierania i reorganizacji wyj¶cia z innego narzêdzia.  Pos³uguje siê
cechami, których jeszcze nie opisywali¶my, wiêc nie przejmuj siê je¶li nie
rozumiesz szczegó³ów.

@example
ls -lg | awk '$6 == "Nov" @{ sum += $5 @}
             END @{ print sum @}'
@end example

@cindex @code{csh}, kontynuacja odwrotnym uko¶nikiem
@cindex kontynuacja odwrotnym uko¶nikiem w @code{csh}
Polecenie to wypisuje ca³kowit± liczbê bajtów we wszystkich plikach bie¿±cego
katalogu, które ostatnio by³y modyfikowane w listopadzie (November),
dowolnego roku.  (W pow³oce C trzeba by³oby wpisaæ ¶rednik a po nim odwrotny
uko¶nik na koñcu pierwszego wiersza. W pow³oce zgodnej z POSIX, jak pow³oka
Bourne'a czy Bash, GNU Bourne-Again shell, mo¿na wpisaæ przyk³ad, jak
pokazano.)
@ignore
FIXME:  how can users tell what shell they are running?  Need a footnote
or something, but getting into this is a distraction.
@end ignore

Czê¶æ @w{@samp{ls -lg}} tego przyk³adu jest poleceniem systemu daj±cym listê
plików w katalogu, ³±cznie z rozmiarami plików i datami ich ostatniej zmiany.
Jego wyj¶cie mo¿e wygl±daæ tak:

@example
-rw-r--r--  1 arnold   user   1933 Nov  7 13:05 Makefile
-rw-r--r--  1 arnold   user  10809 Nov  7 13:03 gawk.h
-rw-r--r--  1 arnold   user    983 Apr 13 12:14 gawk.tab.h
-rw-r--r--  1 arnold   user  31869 Jun 15 12:20 gawk.y
-rw-r--r--  1 arnold   user  22414 Nov  7 13:03 gawk1.c
-rw-r--r--  1 arnold   user  37455 Nov  7 13:03 gawk2.c
-rw-r--r--  1 arnold   user  27511 Dec  9 13:07 gawk3.c
-rw-r--r--  1 arnold   user   7989 Nov  7 13:03 gawk4.c
@end example

@noindent
Pierwsze pole zawiera prawa odczytu-zapisu, drugie liczbê dowi±zañ do pliku,
a trzecie identyfikuje w³a¶ciciela pliku. Czwarte pole identyfikuje grupê
pliku. Pi±te zawiera rozmiar pliku w bajtach. Szóste, siódme i ósme pole
zawieraj± odpowiednio: miesi±c dzieñ i czas ostatniej modyfikacji pliku.
Na koniec, pole dziewi±te zawiera nazwê pliku.

@cindex automatyczna inicjalizacja
@cindex inicjalizacja, automatyczna
@samp{$6 == "Nov"} w naszym programie @code{awk} jest wyra¿eniem, które
sprawdza, czy szóste pole wyj¶cia z @w{@samp{ls -lg}} pasuje do ³añcucha
@samp{Nov}.  Za ka¿dym razem, gdy wiersz ma w szóstym polu ³añcuch
@samp{Nov}, wykonywana jest akcja @samp{sum += $5}.  Dodaje ona szóste pole
(rozmiar pliku) do zmiennej @code{sum}.  W efekcie, gdy @code{awk} zakoñczy
odczyt wszystkich wierszy wej¶ciowych, @code{sum} jest sum± rozmiarów plików,
których wiersze pasowa³y do wzorca.  (To dzia³a, gdy¿ zmienne @code{awk} s±
automatyczne inicjowane na zero.)

Po przetworzeniu ostatniego wiersza wyj¶cia z @code{ls}, wykonywana jest
regu³a @code{END} i wypisywana jest warto¶æ @code{sum}.  W tym przyk³adzie,
warto¶ci± @code{sum} by³oby 80600.

Takie bardziej zaawansowane techniki @code{awk} opisano w dalszych sekcjach
(@pxref{Przegl±d akcji, ,Przegl±d akcji}).  Zanim przejdziemy do
bardziej zaawansowanego programowania w @code{awk}, musimy wiedzieæ jak
@code{awk} interpretuje zadane wej¶cie i wy¶wietla wyj¶cie.  Operuj±c na
polach i u¿ywaj±c instrukcji @code{print}, mo¿na tworzyæ bardzo przydatne
i robi±ce wra¿enie raporty.

@node Instrukcje/wiersze, Inne cechy, Trudniejszy, Zaczynamy
@section Instrukcje @code{awk} a wiersze
@cindex linia, ³amanie
@cindex ³amanie linii
@cindex nowa linia

Najczê¶ciej, ka¿dy wiersz programu @code{awk} jest osobn± instrukcj± lub
osobn± regu³±, jak tu:

@example
awk '/12/  @{ print $0 @}
     /21/  @{ print $0 @}' BBS-list inventory-shipped
@end example

Jednak, @code{gawk} ignoruje znaki nowej linii po dowolnym z:

@example
,    @{    ?    :    ||    &&    do    else
@end example

@noindent
Nowa linia w ka¿dym innym miejscu jest uwa¿ana za koniec instrukcji.
(Rozbicie wierszy po @samp{?} i @samp{:} jest drobnym rozszerzeniem
@code{gawk}.  @samp{?} i @samp{:} odnosz± siê tu do trójargumentowego
wyra¿enia warunkowego opisanego
w @ref{Wyra¿enia warunkowe, ,Wyra¿enia warunkowe}.)

@cindex kontynuacja odwrotnym uko¶nikiem
@cindex kontynuacja linii
@cindex linii kontynuacja
Je¶li chcieliby¶my rozbiæ pojedyncz± instrukcjê na dwa wiersze w miejscu,
gdzie przerwa³by j± znak nowej linii, mo¿emy j± @dfn{kontynuowaæ} koñcz±c
pierwszy wiersz znakiem odwrotnego uko¶nika, @samp{\}.  Odwrotny uko¶nik
musi byæ ostatnim znakiem wiersza, by zosta³ rozpoznany jako znak
kontynuacji.  Jest to dozwolone absolutnie wszêdzie w instrukcji @code{awk},
nawet w ¶rodku ³añcucha czy wyra¿enia regularnego.  Na przyk³ad:

@example
awk '/To wyra¿enie regularne jest za d³ugie, wiêc kontynuujemy je\
 w kolejnym wierszu/ @{ print $1 @}'
@end example

@noindent
@cindex przeno¶no¶æ
Na ogó³ w przyk³adowych programach niniejszej ksi±¿ki nie stosowali¶my
kontynuacji odwrotnym uko¶nikiem.  Poniewa¿ w @code{gawk} nie ma ograniczenia
d³ugo¶ci wiersza, nigdy nie jest to naprawdê konieczne; po prostu powoduje, ¿e
programy s± bardziej czytelne.  Z tego samego powodu, jak równie¿ dla
klarowno¶ci, w wiêkszo¶ci starali¶my siê trzymaæ krótkich instrukcji
w przyk³adowych programach tu prezentowanych.  Kontynuacja odwrotnym
uko¶nikiem najbardziej przydaje siê gdy program @code{awk} umieszczony jest
w odrêbnym pliku, a nie wpisany w wierszu poleceñ.  Powinni¶my te¿ zauwa¿yæ,
¿e wiele implementacji @code{awk} jest bardziej drobiazgowych co do miejsca,
w którym mo¿na u¿yæ takiej kontynuacji.  Zatem, dla maksymalnej przeno¶no¶ci
programów @code{awk}, najlepiej jest nie dzieliæ wierszy w ¶rodku wyra¿eñ
regularnych czy ³añcuchów.

@cindex @code{csh}, kontynuacja odwrotnym uko¶nikiem
@cindex kontynuacja odwrotnym uko¶nikiem w @code{csh}
@strong{Uwaga: z pow³ok± C kontynuacja odwrotnym uko¶nikiem nie dzia³a
tak jak opisano powy¿ej.}  Kontynuacja z u¿yciem odwrotnego uko¶nika
dzia³a w programach zapisanych w plikach, jak te¿ w jednorazowych programach
@emph{pod warunkiem}, ¿e u¿ywamy pow³oki zgodnej z POSIX, jak pow³oka
Bourne'a czy Bash, GNU Bourne-Again shell.  Jednak pow³oka C (@code{csh})
zachowuje siê odmiennie!  Tam musimy u¿yæ dwu kolejnych odwrotnych
uko¶ników, po których nast±pi znak nowej linii.  Nale¿y te¿ pamiêtaæ,
¿e przy stosowaniu pow³oki C @emph{ka¿dy} znak nowej linii w programie awk
musi byæ poprzedzony odwrotnym uko¶nikiem.  Dla ilustracji:

@example
% awk 'BEGIN @{ \
?   print \\
?       "hello, world" \
? @}'
@print{} hello, world
@end example

@noindent
Tu, @samp{%} i @samp{?} s± g³ównym i pomocniczym znakiem zachêty pow³oki C,
analogicznie do znanych z pow³ok standardowych @samp{$} i @samp{>}.

@code{awk} jest jêzykiem wierszowym (``line-oriented'').  Akcja ka¿dej regu³y
musi siê zaczynaæ w tym samym wierszu to wzorzec.  Chc±c mieæ wiersz i akcjê
w osobnych wierszach, @emph{musimy} u¿yæ kontynuacji odwrotnym uko¶nikiem
-- nie ma innego sposobu.

@cindex kontynuacja odwrotnym uko¶nikiem a komentarze
@cindex komentarze a kontynuacja odwrotnym uko¶nikiem
Zwróæ uwagê, ¿e kontynuacja odwrotnym uko¶nikiem i komentarze nie
mieszaj± siê.  Gdy tylko @code{awk} zauwa¿y @samp{#} rozpoczynaj±cy
komentarz, ignoruje @emph{wszystko} w pozosta³ej czê¶ci wiersza. Na
przyk³ad:

@example
@group
$ gawk 'BEGIN @{ print "nie panikuj" # przyjazne \
>                                    BEGIN
> @}'
@error{} gawk: cmd. line:2:                BEGIN
@error{} gawk: cmd. line:2:                ^ parse error
@end group
@end example

@noindent
Wygl±da to jakby odwrotny uko¶nik mia³ kontynuowaæ komentarz w nastêpnym
wierszu. Jednak kombinacja odwrotny uko¶nik-nowa linia nie zostanie nigdy
dostrze¿ona, gdy¿ jest ``ukryta'' wewn±trz komentarza. Zatem, @samp{BEGIN}
odnotowywane jest jako b³±d sk³adni.

@cindex wiele instrukcji w jednym wierszu
Gdy instrukcje @code{awk} wewn±trz jednej regu³y s± krótkie, mo¿na umie¶ciæ
wiêcej ni¿ jedn± w pojedynczym wierszu.  Robi siê to oddzielaj±c
poszczególne instrukcje ¶rednikiem, @samp{;}.

Odnosi siê do tak¿e do samych regu³.
Zatem, poprzedni program mo¿naby zapisaæ:

@example
/12/ @{ print $0 @} ; /21/ @{ print $0 @}
@end example

@noindent
@strong{Zauwa¿:} wymagania, by regu³y w tym samym wierszu by³y rozdzielone
¶rednikiem nie by³o w pierwotnym jêzyku @code{awk}; zosta³o dodane dla
utrzymania spójno¶ci z traktowaniem instrukcji wewn±trz akcji.

@node Inne cechy, Kiedy, Instrukcje/wiersze, Zaczynamy
@section Inne cechy @code{awk}

Jêzyk @code{awk} dostarcza wielu predefiniowanych lub wbudowanych zmiennych,
których programy mog± u¿ywaæ do pozyskania informacji z @code{awk}.  Istniej±
te¿ inne zmienne, za pomoc± których program mo¿e kontrolowaæ sposób, w jaki
@code{awk} przetwarza dane.

Dodatkowo, @code{awk} udostêpnia wiele wbudowanych funkcji do typowych
operacji obliczeniowych i zwi±zanych z ³añcuchami.

Stopniowo podczas naszej prezentacji jêzyka @code{awk}, wprowadzimy
wiêkszo¶æ zmiennych i wiele funkcji. S± one w sposób systematyczny
zdefiniowane w @ref{Zmienne wbudowane} i @ref{Wbudowane, ,Funkcje wbudowane}.

@node Kiedy,  , Inne cechy, Zaczynamy
@section Kiedy stosowaæ @code{awk}

@cindex kiedy stosowaæ @code{awk}
@cindex zastosowania @code{awk}
Zapewne zastanawiasz siê, do czego mo¿e ci siê przydaæ @code{awk}.
Wykorzystuj±c programy narzêdziowe, zaawansowane wzorce, operatory pól,
instrukcje arytmetyczne i inne kryteria wyboru mo¿esz tworzyæ bardziej
z³o¿one wyniki.  Jêzyk @code{awk} jest bardzo u¿yteczny w tworzeniu raportów
z ogromnych ilo¶ci danych pierwotnych, takich jak dane sumaryczne
z wyj¶cia innych programów narzêdziowych, jak np. @code{ls}.
(@xref{Trudniejszy, ,Bardziej z³o¿ony przyk³ad}.)

Programy napisane w @code{awk} s± na ogó³ o wiele mniejsze, ni¿ by³yby
w innych jêzykach.  Powoduje to, ¿e s± ³atwe w tworzeniu i u¿yciu.
Czêsto programy @code{awk} mog± byæ szybko u³o¿one przy terminalu, u¿yte
jednokrotnie i wyrzucone.  Poniewa¿ s± one interpretowane, mo¿na unikn±æ
(zwykle d³ugotrwa³ej) czê¶ci typowego cyklu produkcyjnego oprogramowania
(edycja-kompilacja-testowanie-odpluskwianie), jak± jest kompilacja.

W @code{awk} napisano skomplikowane programy, ³±cznie z kompletnym
zmiennocelowym asemblerem dla mikroprocesorów o¶miobitowych (@pxref{S³ownik},
gdzie znajduje siê wiêcej informacji) i asemblerem mikrokodu dla
specjalizowanego komputera Prologu.  Jednak mo¿liwo¶ci @code{awk} przy
zadaniach tej z³o¿ono¶ci s± nadszarpniête.

Je¶li zaczniesz pisaæ skrypty @code{awk} d³u¿sze ni¿, powiedzmy, kilkaset
linijek, powiniene¶ rozwa¿yæ u¿ycie innego jêzyka programowania. Emacsowy Lisp
jest dobrym wyborem je¶li potrzebujemy wyrafinowanych mo¿liwo¶ci pracy
z ³añcuchami i dopasowywaniem wzorców.  Równie¿ pow³oka jest dobra w
³añcuchach i dopasowywaniu wzorców; dodatkowo umo¿liwia stosowanie narzêdzi
systemowych daj±ce du¿e mo¿liwo¶ci.  Bardziej konwencjonalne jêzyki,
jak C, C++ i Lisp, oferuj± lepsze ¶rodki wspomagaj±ce programowanie systemowe
i zarz±dzanie z³o¿ono¶ci± wielkich programów.  Programy w tych jêzykach mog±
wymagaæ wiêkszej liczby linii kodu ¼ród³owego ni¿ równowa¿ne im programy
@code{awk}, lecz s± ³atwiejsze w konserwacji i zwykle dzia³aj± efektywniej.

@node Jednolinijkowce, Regexp, Zaczynamy, Top
@chapter Przydatne programy jednolinijkowe

@cindex jednolinijkowce
Wiele przydatnych programów @code{awk} jest krótkich, maj± linijkê czy dwie.
Oto kolekcja przydatnych programików na dobry pocz±tek.  Niektóre z nich
zawieraj± konstrukcje, o których jeszcze nie mówiono.  Opis danego programu
powinien daæ ci pojêcie, o co chodzi, ale proszê przeczytaj resztê ksi±¿ki,
by staæ siê ekspertem od @code{awk}!

Wiêkszo¶æ tych przyk³adów u¿ywa pliku danych o nazwie @file{dane}.  Jest
to tylko wype³niacz; gdyby¶ chcia³ siê nimi pos³u¿yæ, podstaw zamiast
@file{dane} w³asne nazwy plików.

@ifinfo
Poniewa¿ czytasz to jako dokumentacjê Info, ka¿dy wiersz przyk³adowego kodu
zawarty jest w cudzys³owach, reprezentuj±c tekst, jaki zosta³by wpisany
z klawiatury dos³ownie.  Same przyk³ady s± poleceniami pow³oki, u¿ywaj±cymi
pojedynczych cudzys³owów do powstrzymania pow³oki przed interpretacj±
zawarto¶ci programu.
Przy czytaniu przyk³adów skoncentruj siê na tek¶cie pomiêdzy
cudzys³owem otwieraj±cym a zamykaj±cym.
@end ifinfo

@table @code
@item awk '@{ if (length($0) > max) max = length($0) @}
@itemx @ @ @ @ @ END @{ print max @}' dane
Ten program wypisuje d³ugo¶æ najd³u¿szego wiersza.

@item awk 'length($0) > 80' dane
Ten program wypisuje ka¿dy wiersz d³u¿szy ni¿ 80 znaków.  Jedyna regu³a
jako wzorzec ma wyra¿enie relacyjne i nie ma akcji (zatem u¿ywana
jest domy¶lna akcja, wypisanie rekordu).

@item expand@ dane@ |@ awk@ '@{ if (x < length()) x = length() @}
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ END @{ print "maximum line length is " x @}'
Ten program wypisuje d³ugo¶æ najd³u¿szego wiersza pliku @file{dane}.
Wej¶cie przetwarzane jest programem @code{expand}, zmieniaj±cym tabulacje
na spacje, zatem porównywane szeroko¶ci s± faktycznie kolumnami od prawego
marginesu.

@item awk 'NF > 0' dane
Ten program wypisuje ka¿dy wiersz maj±cy co najmniej jedno pole.
Jest to prosty sposób na usuniêcie pustych wierszy z pliku (lub raczej,
utworzenia nowego pliku podobnego do starego, ale z którego usuniêto puste
wiersze).

@c Karl Berry points out that new users probably don't want to see
@c multiple ways to do things, just the `best' way.  He's probably
@c right.  At some point it might be worth adding something about there
@c often being multiple ways to do things in awk, but for now we'll
@c just take this one out.
@ignore
@item awk '@{ if (NF > 0) print @}' dane
Ten program równie¿ wypisuje ka¿dy wiersz o najmniej jednym polu.  Zezwalamy
tu, by regu³a dopasowywa³a ka¿dy wiersz i decydujemy w akcji czy go
drukowaæ.
@end ignore

@item awk@ 'BEGIN@ @{@ for (i = 1; i <= 7; i++)
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ print int(101 * rand()) @}'
Ten program wypisuje siedem liczb losowych od zera do 100, w³±cznie.

@item ls -lg @var{pliki} | awk '@{ x += $5 @} ; END @{ print "ogó³em bajtów: " x @}'
Ten program wypisuje ca³kowit± liczbê bajtów u¿ywanych przez @var{pliki}.

@item ls -lg @var{pliki} | awk '@{ x += $5 @}
@itemx @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ END @{ print "ogó³em K-bajtów:  " (x + 1023)/1024 @}'
Ten program wypisuje ca³kowit± liczbê kilobajtów u¿ywanych przez @var{pliki}.

@item awk -F: '@{ print $1 @}' /etc/passwd | sort
Ten program wypisuje posortowan± listê nazw zg³oszeniowych wszystkich
u¿ytkowników.

@item awk 'END @{ print NR @}' dane
Ten program zlicza wiersze pliku.

@item awk 'NR % 2 == 0' dane
Ten program wypisuje wiersze o parzystych numerach w pliku danych.
Gdyby¶my u¿yli zamiast powy¿szego wyra¿enia @samp{NR % 2 == 1},
wypisywa³by wiersze o numerach nieparzystych.
@end table

@node Regexp, Czytanie plików, Jednolinijkowce, Top
@chapter Wyra¿enia regularne
@cindex wzorzec, wyra¿enia regularne
@cindex regexp
@cindex regularne, wyra¿enie
@cindex wyra¿enie regularne
@cindex wyra¿enia regularne jako wzorce

@dfn{Wyra¿enie regularne} (regular expression), lub @dfn{regexp}, jest
metod± opisu zbioru ³añcuchów.  Poniewa¿ wyra¿enia regularne s± tak
podstawow± czê¶ci± programowania w jêzyku @code{awk}, ich format
i stosowanie wymagaj± odrêbnego rozdzia³u.

Wyra¿enie regularne ujête w uko¶niki (@samp{/}) jest wzorcem
@code{awk}, dopasowuj±cym ka¿dy rekord wej¶ciowy, którego tekst nale¿y do
tego zbioru.

Najprostszym wyra¿eniem regularnym jest ci±g liter, cyfr lub
zarówno liter jak cyfr.  Takie wyra¿enie regularne dopasowuje dowolny ³añcuch
zawieraj±cy ten ci±g.  Zatem, wyra¿enie regularne @samp{foo} dopasowuje
dowolny ³añcuch zawieraj±cy @samp{foo}.  St±d te¿, wzorzec @code{/foo/}
dopasowuje dowolny rekord wej¶ciowy zawieraj±cy trzy znaki @samp{foo},
@emph{w dowolnym miejscu} rekordu.  Inne rodzaje wyra¿eñ regularnych pozwalaj±
na okre¶lanie bardziej skomplikowanych klas ³añcuchów.

@iftex
Pocz±tkowo, przyk³ady bêd± proste.  Kiedy wyja¶nimy wiêcej na temat
dzia³ania wyra¿eñ regularnych, przedstawimy bardziej skomplikowane
@end iftex

@menu
* U¿ywanie regexp::             Jak stosowaæ wyra¿enia regularne.
* Sekwencje specjalne::         Jak wypisaæ znaki niedrukowalne.
* Operatory regexp::            Operatory wyra¿eñ regularnych.
* Operatory regexp GNU::        Operatory specyficzne dla programów GNU.
* Wielko¶æ liter::              Uwzglêdnianie wielko¶ci liter w dopasowaniach.
* Lewe najd³u¿sze::             Jak bardzo pasuje tekst.
* Regexp obliczane::            Stosowanie dynamicznych wyra¿eñ regularnych.
@end menu

@node U¿ywanie regexp, Sekwencje specjalne, Regexp, Regexp
@section Jak stosowaæ wyra¿enia regularne

Przez umieszczenie go w uko¶nikach wyra¿enie regularne mo¿e byæ u¿ywane
jako wzorzec.  Jest ono wówczas sprawdzane z ca³ym tekstem ka¿dego rekordu.
(Normalnie, wystarczy mu dopasowanie tylko czê¶ci tekstu, by sprawdzenie siê
powiod³o.)  To, na przyk³ad, wypisuje drugie pole z ka¿dego rekordu, który
gdziekolwiek zawiera trzy znaki @samp{foo}:

@example
@group
$ awk '/foo/ @{ print $2 @}' BBS-list
@print{} 555-1234
@print{} 555-6699
@print{} 555-6480
@print{} 555-2127
@end group
@end example

@cindex regexp, operatory dopasowania
@cindex ³añcuchy, operatory dopasowania
@cindex operatory, dopasowanie ³añcuchów
@cindex operatory, dopasowanie regexp
@cindex regexp, operatory dopasowania/niepasowania
@cindex @code{~} operator
@cindex @code{!~} operator
Wyra¿eñ regularnych mo¿na te¿ u¿ywaæ w wyra¿eniach dopasowania.  Wyra¿enia
takie umo¿liwiaj± podanie ³añcucha, który ma byæ dopasowywany; nie musi to
byæ ca³y bie¿±cy rekord wej¶ciowy.  Porównañ wyra¿eñ regularnych dokonuj±
dwa operatory, @samp{~} i @samp{!~}.  Wyra¿enia wykorzystuj±ce te
operatory mog± byæ u¿ywane jako wzorce lub w instrukcjach @code{if},
@code{while}, @code{for} i @code{do}.

@ifinfo
@c dodanie tego xref w TeX za du¿o miesza w formatowaniu
(@xref{Instrukcje, ,Instrukcje steruj±ce w akcjach}.)
@end ifinfo

@table @code
@item @var{wyr} ~ /@var{regexp}/
Jest prawdziwe je¶li wyra¿enie @var{wyr} (wziête jako ³añcuch) pasuje do
@var{regexp}.  Poni¿szy przyk³ad dopasowuje, lub wybiera, wszystkie rekordy
wej¶ciowe zawieraj±ce du¿± literê @samp{J} gdzie¶ w pierwszym polu:

@example
@group
$ awk '$1 ~ /J/' inventory-shipped
@print{} Jan  13  25  15 115
@print{} Jun  31  42  75 492
@print{} Jul  24  34  67 436
@print{} Jan  21  36  64 620
@end group
@end example

To samo robi to:

@example
awk '@{ if ($1 ~ /J/) print @}' inventory-shipped
@end example

@item @var{wyr} !~ /@var{regexp}/
Jest prawd± je¶li wyra¿enie @var{wyr} (wziête jako ³añcuch znakowy)
@emph{nie} pasuje do @var{regexp}.  Poni¿szy przyk³ad dopasowuje, lub
wybiera, wszystkie rekordy wej¶ciowe, których pierwsze pole @emph{nie}
zawiera du¿ej litery @samp{J}:

@example
@group
$ awk '$1 !~ /J/' inventory-shipped
@print{} Feb  15  32  24 226
@print{} Mar  15  24  34 228
@print{} Apr  31  52  63 420
@print{} May  16  34  29 208
@dots{}
@end group
@end example
@end table

@cindex sta³a regexp
@cindex wyra¿enie regularne sta³e
Gdy wyra¿enie regularne zapisane jest w uko¶nikach, jak @code{/foo/},
nazywamy je @dfn{sta³± regexp} (wyra¿eniem regularnym sta³ym), podobnie jak
@code{5.27} jest sta³± liczbow±, a @code{"foo"} jest sta³± ³añcuchow±.

@node Sekwencje specjalne, Operatory regexp, U¿ywanie regexp, Regexp
@section Sekwencje specjalne

@cindex sekwencje specjalne, notacja
@cindex notacja sekwencji specjalnych
Pewne znaki nie mog± byæ zawarte dos³ownie w sta³ych ³añcuchowych
(@code{"foo"}) czy sta³ych wyra¿eniach regularnych (@code{/foo/}).  Zamiast
tego s± reprezentowane przez @dfn{sekwencje specjalne} (escape sequences),
bêd±ce ci±gami znaków rozpoczynaj±cymi siê od odwrotnego uko¶nika (@samp{\}).

Jednym z zastosowañ sekwencji specjalnych jest w³±czanie znaku cudzys³owu
do sta³ej ³añcuchowej.  Poniewa¿ zwyk³y cudzys³ów koñczy³by ³añcuch, musimy
u¿yæ @samp{\"} do przedstawienia rzeczywistego znaku cudzys³owu jako czê¶ci
³añcucha.  Na przyk³ad:

@example
$ awk 'BEGIN @{ print "He said \"hi!\" to her." @}'
@print{} He said "hi!" to her.
@end example

Sam znak odwrotnego uko¶nika jest innym znakiem, który nie mo¿e do³±czany
normalnie; piszemy @samp{\\} by umie¶ciæ pojedynczy odwrotny uko¶nik
w ³añcuchu lub wyra¿eniu regularnym.  Zatem, ³añcuch, którego zawarto¶ci±
s± dwa znaki: @samp{"} i @samp{\}, musi zostaæ zapisany @code{"\"\\"}.

Innym zastosowaniem odwrotnego uko¶nika jest reprezentacja znaków takich jak
tabulacja czy znak nowej linii.  Mimo, ¿e nic nie powstrzymuje ciê przed
wprowadzeniem wiêkszo¶ci znaków niedrukowalnych do sta³ej ³añcuchowej czy
regexp, mog± one wygl±daæ paskudnie.

A oto tabela wszystkich sekwencji specjalnych u¿ywanych w @code{awk}, razem
z tym, co oznaczaj±.  Wszystkie te sekwencje maj± zastosowanie zarówno
do sta³ych ³añcuchowych jak i do sta³ych regexp, chyba ¿e powiedziano
inaczej.

@c @cartouche
@table @code
@item \\
Dos³owny odwrotny uko¶nik (backslash), @samp{\}.

@cindex @code{awk} jêzyk, wersja V.4
@item \a
Znak alarmu (dzwonek, ``alert''), @kbd{Control-g}, kod ASCII 7 (BEL).

@item \b
Backspace, @kbd{Control-h}, kod ASCII 8 (BS).

@item \f
Wysuw strony, formfeed, @kbd{Control-l}, kod ASCII 12 (FF).

@item \n
Nowa linia, newline, @kbd{Control-j}, kod ASCII 10 (LF).

@item \r
Powrót karetki, carriage return, @kbd{Control-m}, kod ASCII 13 (CR).

@item \t
Tabulacja pozioma, @kbd{Control-i}, kod ASCII 9 (HT).

@cindex @code{awk} jêzyk, wersja V.4
@item \v
Tabulacja pionowa, @kbd{Control-k}, kod ASCII 11 (VT).

@item \@var{nnn}
Warto¶æ ósemkowa @var{nnn}, gdzie @var{nnn} to jedna do trzech cyfr od
@samp{0} do @samp{7}.  Na przyk³ad, kodem znaku ASCII ESC (escape)
jest @samp{\033}.

@cindex @code{awk} jêzyk, wersja V.4
@cindex @code{awk} jêzyk, wersja POSIX
@cindex POSIX @code{awk}
@item \x@var{hh}@dots{}
Warto¶æ szesnastkowa @var{hh}, gdzie @var{hh} s± cyframi szesnastkowymi
(@samp{0} do @samp{9} i albo @samp{A} do @samp{F} albo @samp{a} do
@samp{f}).  Podobnie jak w takiej samej konstrukcji w C, sekwencja specjalna
rozci±ga siê do napotkania pierwszego znaku nie bêd±cego cyfr± szesnastkow±.
Jednak u¿ycie wiêcej ni¿ dwu cyfr szesnastkowych daje niezdefiniowane
rezultaty. (Sekwencja specjalna @samp{\x} nie jest dozwolona w POSIX-owym
@code{awk}.)

@item \/
Dos³owny uko¶nik (niezbêdny tylko w sta³ych regexp).  Sekwencji tej u¿ywa
siê chc±c zapisaæ sta³± regexp zawieraj±c± uko¶nik. Poniewa¿ samo wyra¿enie
regularne jest ograniczone uko¶nikami, nale¿y zacytowaæ uko¶nik bêd±cy
czê¶ci± wzorca, sygnalizuj±c @code{awk}, by przetwarza³ resztê wyra¿enia.

@item \"
Dos³owny cudzys³ów (niezbêdny tylko w sta³ych ³añcuchowych). U¿ywany tylko
gdy chcemy zapisaæ sta³± ³añcuchow± zawieraj±c± cudzys³ów. Poniewa¿ ³añcuch
ograniczany jest cudzys³owami, nale¿y zacytowaæ uko¶nik bêd±cy czê¶ci±
³añcucha, sygnalizuj±c @code{awk}, by przetwarza³ resztê ³añcucha.
@end table
@c @end cartouche

W @code{gawk} istniej± dwie dodatkowe sekwencje specjalne, rozpoczynaj±ce
siê odwrotnym uko¶nikiem i maj±ce specjalne znaczenie w wyra¿eniach
regularnych.
@xref{Operatory regexp GNU, ,Dodatkowe operatory regexp w @code{gawk}}.

Co siê stanie, je¶li w sta³ej ³añcuchowej umie¶cimy odwrotny uko¶nik
przed czym¶, co nie jest jednym ze znaków wyszczególnionych powy¿ej?
POSIX @code{awk} celowo pozostawia ten przypadek niezdefiniowany.
S± dwie mo¿liwo¶ci.

@itemize @bullet
@item
Usuniêcie odwrotnego uko¶nika. Robi tak zarówno uniksowy @code{awk}, jak
i @code{gawk}.  Na przyk³ad, @code{"a\qc"} jest tym samym co @code{"aqc"}.

@item
Pozostawienie odwrotnego uko¶nika w spokoju. Robi± tak niektóre inne
implementacje @code{awk}.  W takich implementacjach, @code{"a\qc"} jest
tym samym, co napisanie @code{"a\\qc"}.
@end itemize

W wyra¿eniu regularnym, odwrotny uko¶nik przed znakiem nie znajduj±cym siê
w powy¿szej tablicy, i nie wymienionym
w @ref{Operatory regexp GNU, ,Dodatkowe operatory regexp w @code{gawk}},
oznacza, ¿e kolejny znak powinien byæ brany dos³ownie, nawet je¶li normalnie by³by on
operatorem wyra¿eñ regularnych. Np., @code{/a\+b/} dopasowuje trzy znaki
@samp{a+b}.

@cindex przeno¶no¶æ
Dla zapewnienia pe³nej przeno¶no¶ci, nie stosuj odwrotnego uko¶nika przed
¿adnym ze znaków nie podanych w tablicy powy¿ej.

Nasuwa siê inna interesuj±ca kwestia.
Za³ó¿my, ¿e u¿ywamy sekwencji specjalnej z warto¶ci± ósemkow± lub
szesnastkow± do reprezentacji metaznaku wyra¿eñ regularnych
(@pxref{Operatory regexp, , Operatory wyra¿eñ regularnych}).  Czy @code{awk}
potraktuje ten znak jako znak dos³owny, czy te¿ jako operator wyra¿eñ
regularnych?

@cindex ciemny k±t
Okazuje siê, ¿e historycznie takie znaki by³y brane dos³ownie (c.k.).
Jednak standard POSIX wskazuje, ¿e powinny byæ one traktowane jak
rzeczywiste metaznaki, i tak to robi @code{gawk}.  Jednak, w trybie
zgodno¶ci (@pxref{Opcje, ,Opcje wiersza poleceñ}), @code{gawk} traktuje
znaki reprezentowane przez ósemkowe lub szesnastkowe sekwencje specjalne
dos³ownie, gdy s± one stosowane w sta³ych regexp.  Zatem, @code{/a\52b/}
jest równowa¿ne @code{/a\*b/}.

Podsumowuj±c:

@enumerate 1
@item
Sekwencje specjalne z tablicy powy¿ej s± zawsze przetwarzane jako pierwsze,
zarówno w sta³ych ³añcuchowych jak i w sta³ych regexp. Dzieje siê to bardzo
wcze¶nie, zaraz po odczycie twego programu przez @code{awk}.

@item
@code{gawk} przetwarza zarówno sta³e wyra¿enia regularne jak i
dynamiczne wyra¿enia regularne (@pxref{Regexp obliczane, ,Stosowanie dynamicznych wyra¿eñ regularnych}),
specjalne operatory podano
w @ref{Operatory regexp GNU, ,Dodatkowe operatory regexp w @code{gawk}}.

@item
Odwrotny uko¶nik przed ka¿dym innym znakiem oznacza, ¿e znak ten nale¿y
traktowaæ dos³ownie.
@end enumerate

@node Operatory regexp, Operatory regexp GNU, Sekwencje specjalne, Regexp
@section Operatory wyra¿eñ regularnych
@cindex metaznaki
@cindex metaznaki wyra¿eñ regularnych
@cindex operatory wyra¿eñ regularnych

Wyra¿enia regularne mo¿na ³±czyæ za pomoc± ni¿ej opisanych znaków,
zwanych @dfn{operatorami wyra¿eñ regularnych}, lub @dfn{metaznakami},
zwiêkszaj±c moc i wszechstronno¶æ wyra¿eñ regularnych.

Wewn±trz wyra¿eñ regularnych poprawne s± sekwencje specjalne opisane
@iftex
powy¿ej
@end iftex
w @ref{Sekwencje specjalne}.
S± one wprowadzane przez @samp{\}. Ich rozpoznawanie i przekszta³canie na
odpowiadaj±ce im rzeczywiste znaki jest pierwszym krokiem przetwarzania
wyra¿eñ regularnych.

A oto tabela metaznaków.  Wszystkie znaki nie bêd±ce sekwencjami specjalnymi
i nie podane w tej tabeli znacz± same siebie.

@table @code
@item \
S³u¿y do wyeliminowania specjalnego znaczenia znaku podczas dopasowywania.
Na przyk³ad:

@example
\$
@end example

@noindent
dopasowuje znak @samp{$}.

@c NEEDED
@page
@cindex kotwice w wyra¿eniach regularnych
@cindex wyra¿enia regularne, kotwice
@item ^
Dopasowuje pocz±tek ³añcucha.  Na przyk³ad:

@example
^@@chapter
@end example

@noindent
dopasowuje @samp{@@chapter} na pocz±tku ³añcucha, i mo¿e byæ wykorzystane
do identyfikacji rozdzia³ów w plikach ¼ród³owych Texinfo. @samp{^} znany
jest jako @dfn{kotwica}, gdy¿ zaczepia wzorzec tak, by pasowa³ tylko na
pocz±tku ³añcucha.

Nale¿y zdawaæ sobie sprawê z tego, ¿e @samp{^} nie dopasowuje pocz±tku
wiersza zawartego w ³añcuchu. W tym przyk³adzie warunek nie jest prawdziwy:

@example
if ("wiersz1\nWIERSZ 2" ~ /^W/) @dots{}
@end example

@item $
Podobne do @samp{^}, ale pasuje tylko na koñcu ³añcucha.  Na przyk³ad:

@example
p$
@end example

@noindent
dopasowuje rekord koñcz±cy siê na @samp{p}.  @samp{$} jest równie¿
kotwic±, i równie¿ nie dopasowuje koñca wiersza zawartego wewn±trz ³añcucha.
W tym przyk³adzie warunek nie jest prawdziwy:

@example
if ("wiersz1\nWIERSZ 2" ~ /1$/) @dots{}
@end example

@item .
Kropka dopasowuje dowolny pojedynczy znak, @emph{równie¿} znak nowej linii.
Na przyk³ad:

@example
.P
@end example

@noindent
dopasowuje w ³añcuchu dowolny pojedynczy znak, po którym nastêpuje @samp{P}.
Pos³uguj±c siê konkatenacj± (³±czeniem) mo¿na tworzyæ takie wyra¿enia
regularne jak np. @samp{U.A}, dopasowuj±ce dowoln± trzyznakow± sekwencjê
rozpoczynaj±c± siê od @samp{U} a koñcz±c± na @samp{A}.

@cindex @code{awk} jêzyk, wersja POSIX
@cindex POSIX @code{awk}
W trybie ¶cis³ej zgodno¶ci z POSIX (@pxref{Opcje, ,Opcje wiersza poleceñ}),
@samp{.} nie dopasowuje znaku @sc{nul}, bêd±cego znakiem o wszystkich
bitach równych zero.  Bez ¶cis³ej zgodno¶ci @sc{nul} jest po prostu
znakiem jak ka¿dy inny. Inne wersje @code{awk} mog± nie umieæ dopasowaæ
znaku @sc{nul}.

@ignore
2e: Add stuff that character list is the POSIX terminology. In other
    literature known as character set or character class.
@end ignore

@cindex lista znaków
@item [@dots{}]
Zwane @dfn{list± znaków}.  Dopasowuje dowolny @emph{jeden} znak spo¶ród
znaków zawartych w nawiasach kwadratowych.  Na przyk³ad:

@example
[MVX]
@end example

@noindent
dopasowuje w ³añcuchu dowolny ze znaków @samp{M}, @samp{V} albo @samp{X}.

Zakresy znaków wskazywane s± przez u¿ycie my¶lnika pomiêdzy znakiem
rozpoczynaj±cym a koñcz±cym zakres, i ujêcie ca³o¶ci w nawiasy kwadratowe.
Na przyk³ad:

@example
[0-9]
@end example

@noindent
dopasowuje dowoln± cyfrê.
Dopuszcza siê wielokrotne zakresy. Np. lista @code{@w{[A-Za-z0-9]}} jest
popularnym sposobem wyra¿ania pojêcia ``wszystkich znaków alfanumerycznych''
[t³um.: w alfabecie ³aciñskim].

Chc±c w li¶cie uj±æ jeden ze znaków @samp{\}, @samp{]}, @samp{-} lub @samp{^}
nale¿y postawiæ przed nim @samp{\}.  Na przyk³ad:

@example
[d\]]
@end example

@noindent
dopasowuje albo @samp{d} albo @samp{]}.

@cindex @code{egrep}
Takie traktowanie odwrotnego uko¶nika @samp{\} w li¶cie znaków jest zgodne
z innymi implementacjami @code{awk}, jest te¿ wymagane przez POSIX.
Wyra¿enia regularne w @code{awk} s± nadzbiorem specyfikacji
POSIX opisuj±cej rozszerzone wyra¿enia regularne (Extended Regular
Expressions, EREs).  ERE POSIX-a oparte s± na wyra¿eniach regularnych
akceptowanych przez tradycyjne narzêdzie @code{egrep}.

@cindex klasy znaków
@cindex znaków klasy
@cindex @code{awk} jêzyk, wersja POSIX
@cindex POSIX @code{awk}
@dfn{Klasy znaków} s± now± cech± wprowadzon± w standardzie POSIX.  Klasa
znaków jest specjaln± notacj± opisuj±c± listy znaków maj±cych specyficzne
w³a¶ciwo¶ci, gdzie jednak same konkretne znaki mog± zmieniaæ siê w
zale¿no¶ci od kraju i/lub zestawu znaków.  Na przyk³ad, pojêcie tego, co
jest znakiem alfabetu, jest ró¿ne w USA i we Francji.

Klasa znaków jest poprawna wy³±cznie @emph{wewn±trz} nawiasów kwadratowych
listy znaków w wyra¿eniu regularnym.  Klasy znaków sk³adaj± siê z @samp{[:},
s³owa kluczowego oznaczaj±cego klasê, i @samp{:]}.  Oto klasy znaków
zdefiniowane przez standard POSIX.

@table @code
@item [:alnum:]
Znaki alfanumeryczne.

@item [:alpha:]
Znaki alfabetyczne.

@item [:blank:]
Znaki spacji i tabulacji.

@item [:cntrl:]
Znaki steruj±ce.

@item [:digit:]
Znaki numeryczne.

@item [:graph:]
Znaki, które s± równocze¶nie drukowalne i widoczne.  (Spacja jest
drukowalna, lecz nie jest widoczna, podczas gdy @samp{a} jest drukowalne
i widoczne.)

@item [:lower:]
Znaki ma³ych liter alfabetu.

@item [:print:]
Znaki drukowalne (znaki nie bêd±ce znakami steruj±cymi).

@item [:punct:]
Znaki przestankowe (znaki nie bêd±ce literami, cyframi, znakami
steruj±cymi czy odstêpami).

@item [:space:]
Znaki odstêpu (jak spacja, tabulacja czy wysuw strony, by wymieniæ
tylko niektóre z nich).

@item [:upper:]
Znaki du¿ych liter alfabetu.

@item [:xdigit:]
Znaki bêd±ce cyframi szesnastkowymi.
@end table

Na przyk³ad, przed standardem POSIX, by dopasowaæ znaki alfanumeryczne,
nale¿a³o napisaæ @code{/[A-Za-z0-9]/}.  Je¿eli wykorzystywany zestaw
znaków mia³ inne znaki alfabetu, to powy¿sze by ich nie dopasowywa³o.
Za pomoc± POSIX-owych klas znaków mo¿na napisaæ @code{/[[:alnum:]]/},
i bêdzie to dopasowywaæ @emph{wszystkie} znaki literowe i cyfrowe naszego
zestawu znaków.

@cindex elementy sortowania
@cindex sortowania, elementy
@cindex elementy porz±dkowania
@cindex porz±dkowania, elementy
W listach znaków mog± pojawiæ siê dwie dodatkowe specjalne sekwencje.
Maj± one zastosowanie w zestawach znaków innych ni¿ ASCII,
maj±cych pojedyncze symbole (zwane @dfn{elementami porz±dkowania},
collating elements) reprezentowane przez wiêcej ni¿ jeden znak, lub
te¿ kilka znaków, które s± sobie równowa¿ne przy @dfn{porz±dkowaniu} czy
sortowaniu.  (Np. we francuskim zwyk³e ``e'' i z akcentem grave
``@`e'' s± równowa¿ne.)

@table @asis
@cindex symbole porz±dkowania
@cindex porz±dkowania symbole
@item Symbole porz±dkowania (collating symbols)
@dfn{Symbol porz±dkowania} jest wieloznakowym elementem porz±dkowania
ujêtym pomiêdzy @samp{[.} a @samp{.]}.  Na przyk³ad, je¶li @samp{ch} jest
elementem porz±dkowania, to @code{[[.ch.]]} jest wyra¿eniem regularnym
dopasowuj±cym ten element porz±dkowania, podczas gdy @code{[ch]} jest
wyra¿eniem regularnym dopasowuj±cym albo @samp{c} albo @samp{h}.

@cindex klasy równowa¿no¶ci
@cindex równowa¿no¶æ, klasy
@item Klasy równowa¿no¶ci (equivalence classes)
@dfn{Klasa równowa¿no¶ci} jest specyficzn± dla ustawieñ narodowych (locale)
nazw± znaków, które s± sobie równowa¿ne. Nazwa ta jest ujêta miêdzy
@samp{[=} i @samp{=]}.  Na przyk³ad, mo¿na u¿yæ nazwy @samp{e} do
przedstawienia wszystkich ``e'', ``@`e'' i ``@'e''.  W tym przypadku,
@code{[[=e]]} jest wyra¿eniem regularnym dopasowuj±cym dowolny ze znaków
@samp{e}, @samp{@'e} lub @samp{@`e}.
@end table

Mo¿liwo¶ci te s± bardzo cenne przy ustawieniach innych ni¿ jêzyk angielski.

@strong{Uwaga!} Funkcje biblioteczne wykorzystywane przez @code{gawk}
do dopasowywania wyra¿eñ regularnych rozpoznaj± obecnie jedynie POSIX-owe
klasy znaków; nie rozpoznaj± symboli porz±dkowania ani klas równowa¿no¶ci.
@c mo¿e kiedy¶ ...

@cindex dope³niaj±ca lista znaków
@cindex lista znaków, dope³nienie
@item [^ @dots{}]
Jest to @dfn{dope³niaj±ca lista znaków}.  Pierwszym znakiem po @samp{[}
@emph{musi} byæ @samp{^}.  Zapis ten dopasowuje dowolne znaki @emph{oprócz}
tych, które znajduj± siê w nawiasach kwadratowych.
Na przyk³ad:

@example
[^0-9]
@end example

@noindent
dopasowuje dowolny znak nie bêd±cy cyfr±.

@item |
Jest to @dfn{operator alternatywy}.  S³u¿y do podawania alternatyw.
Na przyk³ad:

@example
^P|[0-9]
@end example

@noindent
dopasowuje dowolny ³añcuch, który pasuje albo do @samp{^P} albo do
@samp{[0-9]}.  To znaczy, ¿e dopasowuje dowolny ³añcuch zaczynaj±cy siê
od @samp{P} lub zawieraj±cy cyfrê.

Alternatywa odnosi siê do najwiêkszego mo¿liwego wyra¿enia regularnego
wystêpuj±cego po jednej ze stron.  Innymi s³owy, @samp{|} ma najni¿szy
priorytet ze wszystkich operatorów wyra¿eñ regularnych.

@item (@dots{})
Nawiasy zwyk³e s³u¿± do grupowania wyra¿eñ regularnych i arytmetycznych.
Mo¿na stosowaæ je do sklejania wyra¿eñ regularnych zawieraj±cych operator
alternatywy, @samp{|}.  Na przyk³ad, @samp{@@(samp|code)\@{[^@}]+\@}}
dopasowuje zarówno @samp{@@code@{foo@}} jak i @samp{@@samp@{bar@}}.  (S± to
sekwencje steruj±ce formatowaniem Texinfo.)

@item *
Ten symbol oznacza, ¿e poprzedzaj±ce go wyra¿enie regularne ma byæ
powtórzone tyle razy, ile jest to niezbêdne do znalezienia dopasowania.
Na przyk³ad:

@example
ph*
@end example

@noindent
stosuje symbol @samp{*} do poprzedzaj±cego go @samp{h} i szuka dopasowañ
pojedynczego @samp{p}, po którym wystêpuje dowolna ilo¶æ @samp{h}.
Dopasuje ono równie¿ samo @samp{p}, je¶li nie wyst±pi± ¿adne @samp{h}.

@samp{*} powtarza @emph{najmniejsze} mo¿liwe poprzedzaj±ce go
wyra¿enie.  (Chc±c powtórzyæ wiêksze wyra¿enie nale¿y u¿yæ nawiasów.)
Odnajduje tyle powtórzeñ, ile to mo¿liwe.  Na przyk³ad:

@example
awk '/\(c[ad][ad]*r x\)/ @{ print @}' sample
@end example

@noindent
wypisuje ka¿dy rekord z @file{sample} zawieraj±cy ³añcuch postaci
@samp{(car x)}, @samp{(cdr x)}, @samp{(cadr x)}, i tak dalej.
Zauwa¿ cytowanie nawiasów przez poprzedzenie ich odwrotnymi uko¶nikami.

@item +
Symbol zbli¿ony do @samp{*}, ale poprzedzaj±ce go wyra¿enie musi
zostaæ dopasowane przynajmniej jeden raz.  To znaczy, ¿e:

@example
wh+y
@end example

@noindent
bêdzie dopasowywaæ @samp{why} i @samp{whhy}, ale nie @samp{wy},
podczas gdy @samp{wh*y} dopasowywa³oby wszystkie te trzy ³añcuchy.
Prostszym sposobem zapisania ostatniego przyk³adu @samp{*} jest:

@example
awk '/\(c[ad]+r x\)/ @{ print @}' sample
@end example

@item ?
Symbol podobny do @samp{*}, ale poprzedzaj±ce wyra¿enie regularne mo¿e byæ
dopasowane raz albo wcale.  Na przyk³ad:

@example
fe?d
@end example

@noindent
dopasuje @samp{fed} i @samp{fd}, ale nic innego.

@cindex @code{awk} jêzyk, wersja POSIX
@cindex POSIX @code{awk}
@cindex wyra¿enia przedzia³owe
@item @{@var{n}@}
@itemx @{@var{n},@}
@itemx @{@var{n},@var{m}@}
Jedna lub dwie liczby w nawiasach klamrowych oznaczaj± @dfn{wyra¿enie
przedzia³owe} (interval expression).  Je¶li w nawiasach jest jedna liczba,
to poprzedzaj±ce wyra¿enie regularne powtarzane jest @var{n} razy.  Je¿eli
s± tam dwie liczby rozdzielone przecinkiem, to poprzedzaj±ce wyra¿enie
powtarzane jest od @var{n} do @var{m} razy.  Je¶li jest tam jedna
liczba, po której nastêpuje przecinek, to poprzedzaj±ce
wyra¿enie powtarzane jest co najmniej @var{n} razy.

@table @code
@item wh@{3@}y
dopasowuje @samp{whhhy}, ale nie @samp{why} czy @samp{whhhhy}.

@item wh@{3,5@}y
dopasowuje tylko @samp{whhhy} lub @samp{whhhhy} lub @samp{whhhhhy}.

@item wh@{2,@}y
dopasowuje @samp{whhy} lub @samp{whhhy}, i tak dalej.
@end table

Wyra¿enia przedzia³owe nie by³y tradycyjnie dostêpne w @code{awk}.  Zosta³y
dodane jako czê¶æ standardu POSIX, by @code{awk} i @code{egrep} by³y ze sob±
zgodne.

Poniewa¿ jednak stare programy mog± wykorzystywaæ @samp{@{} i @samp{@}}
w sta³ych regexp, domy¶lnie @code{gawk} @emph{nie} dopasowuje wyra¿eñ
przedzia³owych w wyra¿eniach regularnych. Je¿eli podano opcjê @samp{--posix}
lub @samp{--re-interval} (@pxref{Opcje, , Opcje wiersza poleceñ}),
to wyra¿enia przedzia³owe w wyra¿eniach regularnych s± dozwolone.
@end table

@cindex priorytet, operatory wyra¿eñ regularnych
@cindex operatory wyra¿eñ regularnych, priorytet
W wyra¿eniach regularnych najwy¿szy priorytet maj± operatory @samp{*},
@samp{+} id @samp{?}, tak samo jak nawiasy klamrowe @samp{@{} and
@samp{@}}.  Po nich wystêpuje ³±czenie, i na koniec @samp{|}.
Tak jak w arytmetyce, nawiasy okr±g³e mog± zmieniæ sposób grupowania
operatorów.

Je¶li @code{gawk} pracuje w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}),
klasy znaków i wyra¿enia przedzia³owe w wyra¿eniach regularnych nie s±
dostêpne.

W nastêpnej sekcji
omówiono operatory wyra¿eñ regularnych specyficzne dla GNU i podano
wiêcej szczegó³ów dotycz±cych tego, jak opcje wiersza poleceñ wp³ywaj±
na sposób, w jaki @code{gawk} interpretuje znaki w wyra¿eniach regularnych.

@node Operatory regexp GNU, Wielko¶æ liter, Operatory regexp, Regexp
@section Dodatkowe operatory regexp w @code{gawk}

@c This section adapted from the regex-0.12 manual

@cindex operatory regexp, specyficzne dla GNU
Programy GNU maj±ce dzia³aj±ce na wyra¿eniach regularnych
udostêpniaj± kilka dodatkowych operatorów tych wyra¿eñ.
Opisano je w niniejszej sekcji.  S± one specyficzne dla
@code{gawk}; nie s± dostêpne w innych implementacjach @code{awk}.

@cindex s³owo, definicja w wyra¿eniu regularnym
Wiêkszo¶æ dodatkowych operatorów przeznaczonych jest do zadañ zwi±zanych z
dopasowywaniem s³ów.  Do naszych celów, @dfn{s³owo} jest ci±giem jednej
lub wiêcej liter, cyfr lub znaków podkre¶lenia (@samp{_}).

@table @code
@cindex @code{\w} operator regexp
@item \w
Ten operator dopasowuje dowolny ze znaków tworz±cych s³owa, tj. dowoln±
literê, cyfrê lub podkre¶lenie.  Mo¿na traktowaæ go jako skrót dla
@c @w{@code{[A-Za-z0-9_]}} lub
@w{@code{[[:alnum:]_]}}.

@cindex @code{\W} operator regexp
@item \W
Dopasowuje dowolny znak nie bêd±cy znakiem wspó³tworz±cym s³owa.
Mo¿na traktowaæ go jako skrót dla
@c @w{@code{[^A-Za-z0-9_]}} lub
@w{@code{[^[:alnum:]_]}}.

@cindex @code{\<} operator regexp
@item \<
Ten operator dopasowuje pusty ³añcuch na pocz±tku s³owa.  Na przyk³ad,
@code{/\<away/} dopasowuje @samp{away}, ale nie @samp{stowaway}.

@cindex @code{\>} operator regexp
@item \>
Ten operator dopasowuje pusty ³añcuch na koñcu s³owa.  Na przyk³ad,
@code{/stow\>/} dopasowuje @samp{stow}, ale nie @samp{stowaway}.

@cindex @code{\y} operator regexp
@cindex granice s³ów, dopasowywanie
@item \y
Ten operator dopasowuje pusty ³añcuch albo na pocz±tku albo na koñcu s³owa.
Na przyk³ad, (angielskie boundar@strong{y} to ``granica'').  Na przyk³ad,
@samp{\yballs?\y} dopasowuje @samp{ball} lub @samp{balls} jako osobne s³owo.

@cindex @code{\B} operator regexp
@item \B
Dopasowuje pusty ³añcuch wewn±trz s³owa.  Inaczej mówi±c, @samp{\B}
dopasowuje ³añcuch pusty wystêpuj±cy pomiêdzy dwoma znakami buduj±cymi
s³owa. Na przyk³ad, @code{/\Brat\B/} dopasowuje @samp{crate}, ale nie
dopasowuje @samp{dirty rat}.  @samp{\B} jest w gruncie rzeczy przeciwieñstwem
@samp{\y}.
@end table

Istniej± jeszcze dwa inne operatory, operuj±ce na buforach. W Emacsie
@dfn{bufor} jest, naturalnie, buforem Emacsa.  Przy innych programach,
procedury biblioteczne regexp u¿ywane przez @code{gawk} traktuj± jako bufor
ca³y ³añcuch jaki ma zostaæ dopasowany.

W @code{awk}, poniewa¿ @samp{^} i @samp{$} zawsze dzia³aj± jako pocz±tek
i koniec ³añcuchów, wspomniane operatory nie wnosz± ¿adnych nowych
mo¿liwo¶ci.  Udostêpniane s± z uwagi na zgodno¶æ z innym oprogramowaniem GNU.

@cindex operatory dopasowania bufora
@cindex bufor, operatory dopasowania
@table @code
@cindex @code{\`} operator regexp
@item \`
Operator ten dopasowuje pusty ³añcuch na pocz±tku bufora.

@cindex @code{\'} operator regexp
@item \'
Operator ten dopasowuje pusty ³añcuch na koñcu bufora.
@end table

W innych programach GNU operatorem granicy s³owa jest @samp{\b}.
Jednak powoduje to konflikt w wystêpuj±c± w jêzyku @code{awk} definicji
@samp{\b} jako backspace, wiêc @code{gawk} u¿ywa innej litery.

Metod± alternatywn± by³by wymóg dwu odwrotnych uko¶ników w operatorach
GNU, ale zosta³o to uznane za
zbyt myl±ce, a obecna metoda stosowania @samp{\y} dla GNU @samp{\b}
wygl±da na mniejsze z³o.

@c NOTE!!! Keep this in sync with the same table in the summary appendix!
@cindex regexp, wp³yw opcji wiersza poleceñ
@cindex wyra¿enia regularne, wp³yw opcji wiersza poleceñ
Rozmaite opcje wiersza poleceñ
(@pxref{Opcje, ,Opcje wiersza poleceñ})
decyduj± o sposobie, w jaki @code{gawk} interpretuje znaki w wyra¿eniach
regularnych.

@table @asis
@item Bez opcji
W przypadku domy¶lnym udostêpnia wszystkie mo¿liwo¶ci wyra¿eñ regularnych
POSIX-a i operatory GNU opisane
@iftex
powy¿ej.
@end iftex
@ifinfo
w @ref{Operatory regexp, , Operatory wyra¿eñ regularnych}.
@end ifinfo
Wyra¿enia przedzia³owe nie s± jednak obs³ugiwane.

@item @code{--posix}
Obs³ugiwane s± tylko wyra¿enia regularne POSIX, operatory GNU nie maj±
specjalnego znaczenia (np., @samp{\w} dopasowuje dos³owne @samp{w}).
Wyra¿enia przedzia³owe s± dozwolone.

@item @code{--traditional}
Dopasowywane s± wyra¿enia regularne tradycyjnego uniksowego @code{awk}.
Operatory GNU nie maj± znaczenia specjalnego, nie s± dostêpne wyra¿enia
przedzia³owe ani POSIX-owe klasy znaków (@code{[[:alnum:]]} i tak dalej).
Znaki opisane ósemkowymi i szesnastkowymi sekwencjami specjalnymi traktowane
s± dos³ownie, nawet je¶li reprezentuj± metaznaki wyra¿eñ regularnych.

@item @code{--re-interval}
Dopuszcza wyra¿enia przedzia³owe w wyra¿eniach regularnych, nawet je¶li
podano @samp{--traditional}.
@end table

@node Wielko¶æ liter, Lewe najd³u¿sze, Operatory regexp GNU, Regexp
@section Uwzglêdnianie wielko¶ci liter w dopasowaniach

@cindex uzwglêdnianie wielko¶ci liter
@cindex wielko¶æ liter
@cindex ignorowanie wielko¶ci liter
Normalnie w wyra¿eniach regularnych wielko¶æ liter jest znacz±ca,
zarówno przy dopasowywaniu zwyk³ych znaków (tj.@: nie metaznaków), jak i
wewn±trz zestawów znaków.  St±d @samp{w} w wyra¿eniu regularnych dopasowuje
wy³±cznie ma³± literê @samp{w} a nie du¿e @samp{W}.

Najprostszym sposobem wykonania dopasowania niezale¿nego od wielko¶ci liter
jest u¿ycie listy znaków: @samp{[Ww]}.  Mo¿e byæ on jednak niewygodny
je¶li trzeba stosowaæ go czêsto; utrudnia te¿ czytanie wyra¿eñ
regularnych.  Istniej± dwie alternatywne metody, które mog± siê bardziej
podobaæ.
@c  There are two alternatives that you might prefer.

Jednym ze sposobów wykonania dopasowania bez rozró¿niania wielko¶ci liter
w danym miejscu programu jest konwersja danych na jednakow± wielko¶æ
liter, za pomoc± wbudowanych funkcji ³añcuchowych @code{tolower} lub
@code{toupper} (których jeszcze nie omawiali¶my;
@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Na przyk³ad:

@example
tolower($1) ~ /foo/  @{ @dots{} @}
@end example

@noindent
przekszta³ca pierwsze pole na ma³e litery przed wykonaniem na nim
dopasowania.  Dzia³a to w dowolnej implementacji @code{awk} zgodnej z POSIX.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex @code{~} operator
@cindex @code{!~} operator
@vindex IGNORECASE
Inn± metod±, specyficzn± dla @code{gawk}, jest nadanie zmiennej
@code{IGNORECASE} warto¶ci niezerowej (@pxref{Zmienne wbudowane}).
Gdy @code{IGNORECASE} jest niezerowe, @emph{wszystkie} operacje na
wyra¿eniach regularnych i ³añcuchach ignoruj± wielko¶æ liter.
Zmiana warto¶ci @code{IGNORECASE} steruje dynamicznie wra¿liwo¶ci± programu
na wielko¶æ liter w trakcie jego dzia³ania.  Domy¶lnie wielko¶æ znaków jest
istotna, poniewa¿ @code{IGNORECASE} (jak wiêkszo¶æ zmiennych) jest
inicjowana na zero.

@example
@group
x = "aB"
if (x ~ /ab/) @dots{}   # ten test siê nie powiedzie
@end group

@group
IGNORECASE = 1
if (x ~ /ab/) @dots{}   # a teraz siê uda
@end group
@end example

Ogólnie, nie mo¿na wykorzystaæ @code{IGNORECASE} do zrobienia pewnych regu³
niewra¿liwymi na wielko¶æ liter a innych wra¿liwymi, gdy¿ nie ma mo¿liwo¶ci
ustawienia @code{IGNORECASE} tylko dla wzorca konkretnej regu³y.
@ignore
Nie jest to ca³kiem prawda. Rozwa¿my:

	IGNORECASE=1 && /foObAr/ { .... }
	IGNORECASE=0 || /foobar/ { .... }

Lecz jest to raczej z³y styl pisania i nie chcia³bym w to wchodziæ
But that's pretty bad style and I don't want to get into it at this
late date.
@end ignore
Chc±c zrobiæ co¶ takiego, musimy u¿yæ list znaków lub @code{tolower}.
Jednak jedn± z rzeczy, jakie mo¿na zrobiæ z @code{IGNORECASE}, jest
dynamiczne w³±czanie lub wy³±czanie uwzglêdniania wielko¶ci liter dla
wszystkich regu³ naraz.

@code{IGNORECASE} mo¿na ustawiæ w wierszu poleceñ lub w regule @code{BEGIN}
(@pxref{Inne argumenty, ,Inne argumenty wiersza poleceñ}; tak¿e
@pxref{U¿ywanie BEGIN/END, ,Akcje pocz±tkowe i koñcowe}).  Ustawienie
@code{IGNORECASE} z wiersza poleceñ jest sposobem na uczynienie programu
niewra¿liwym na wielko¶æ liter bez konieczno¶ci zmieniania go.

Przed wersj± 3.0 @code{gawk}, warto¶æ @code{IGNORECASE} wp³ywa³a tylko
na operacje na wyra¿eniach regularnych.  Nie dotyczy³a porównywania
³añcuchów przez @samp{==}, @samp{!=}, i tak dalej.  Pocz±wszy od
wersji 3.0, @code{IGNORECASE} ma wp³yw zarówno na dzia³ania na wyra¿eniach
regularnych jak i na ³añcuchach.

@cindex ISO 8859-1
@cindex ISO Latin-1
Pocz±wszy od wersji 3.0 @code{gawk}, równowa¿niki miêdzy du¿ymi a ma³ymi
znakami oparte s± na zestawie znaków ISO-8859-1 (ISO Latin-1). Zestaw ten
jest nadzbiorem tradycyjnych 128 znaków ASCII, udostêpniaj±cym te¿ wiele
znaków odpowiednich do u¿ytku w jêzykach europejskich [t³um.: niestety --
zachodnioeuropejskich].
@ignore
Mo¿na zamiast tego u¿ywaæ czystego zestawu znaków ASCII je¶li @code{gawk}
zostanie skompilowany z @samp{-DUSE_PURE_ASCII}.
@end ignore

Warto¶æ @code{IGNORECASE} nie ma znaczenia je¶li @code{gawk} pracuje w
trybie zgodno¶ci (@pxref{Opcje, ,Opcje wiersza poleceñ}).  W trybie
zgodno¶ci wielko¶æ liter jest zawsze istotna.

@node Lewe najd³u¿sze, Regexp obliczane, Wielko¶æ liter, Regexp
@section Jak bardzo pasuje tekst?

@cindex lewe najd³u¿sze dopasowanie
@cindex dopasowanie, lewe najd³u¿sze
Rozwa¿my nastêpuj±cy przyk³ad:

@example
echo aaaabcd | awk '@{ sub(/a+/, "<A>"); print @}'
@end example

Przyk³ad ten wykorzystuje funkcjê @code{sub} (której jeszcze nie omawiali¶my,
@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach})
do zmiany rekordu wej¶ciowego.  Wystêpuj±ce tu wyra¿enie regularne
@code{/a+/} oznacza ``co najmniej jeden znak @samp{a}'',
a tekstem zastêpuj±cym jest @samp{<A>}.

Wej¶cie zawiera cztery znaki @samp{a}.  Jakie bêdzie wyj¶cie?
Inaczej mówi±c, ile to jest ``co najmniej jeden'' -- czy @code{awk}
dopasuje dwa, trzy czy wszystkie cztery znaki @samp{a}?

Odpowied¼ brzmi: wyra¿enia regularne @code{awk} (i POSIX-a) zawsze
dopasowuj± pierwszy z lewej @emph{najd³u¿szy} ci±g znaków wej¶ciowych,
jaki mo¿na dopasowaæ.  Zatem, w tym przyk³adzie, przez @samp{<A>}
zostan± zast±pione wszystkie cztery znaki @samp{a}.

@example
$ echo aaaabcd | awk '@{ sub(/a+/, "<A>"); print @}'
@print{} <A>bcd
@end example

Przy prostych sprawdzeniach typu pasuje/nie pasuje, nie jest to takie wa¿ne.
Jednak przy
@c dokonywaniu podzia³u na pola i rekordy opartego na wyra¿eniach
@c regularnych, czy przy
dopasowywaniu tekstów i podstawieniach przez funkcje
@code{match}, @code{sub}, @code{gsub} i @code{gensub}, jest bardzo istotne.
@ifinfo
@xref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach},
gdzie bli¿ej opisano te funkcje.
@end ifinfo
Zrozumienie tej zasady jest równie¿ istotne przy podziale na pola i rekordy
opartym na wyra¿eniach regularnych (@pxref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy},
a tak¿e @pxref{Separatory pól, ,Jak rozdzielaæ pola}).

@node Regexp obliczane, , Lewe najd³u¿sze, Regexp
@section Stosowanie dynamicznych wyra¿eñ regularnych

@cindex obliczane wyra¿enia regularne
@cindex wyra¿enia regularne, obliczane
@cindex dynamiczne wyra¿enia regularne
@cindex wyra¿enia regularne, dynamiczne
@cindex regexp, dynamiczne
@cindex @code{~} operator
@cindex @code{!~} operator
Prawa strona operatora @samp{~} lub @samp{!~} nie musi byæ sta³ym wyra¿eniem
regularnym (tj.@: ³añcuchem znaków pomiêdzy uko¶nikami).  Mo¿e byæ dowolnym
wyra¿eniem.  Wyra¿enie podlega wyliczeniu warto¶ci i jej przekszta³ceniu na
³añcuch, je¶li zachodzi taka potrzeba; zawarto¶æ ³añcucha u¿ywana jest jako
wyra¿enie regularne.  Wyra¿enie regularne obliczane w ten sposób nazywane
jest @dfn{dynamicznym wyra¿eniem regularnym}.  Na przyk³ad:

@example
BEGIN @{ identifier_regexp = "[A-Za-z_][A-Za-z_0-9]*" @}
$0 ~ identifier_regexp    @{ print @}
@end example

@noindent
przypisuje do @code{identifier_regexp} wyra¿enie regularne
opisuj±ce nazwy zmiennych @code{awk} i sprawdza, czy rekord wej¶ciowy
pasuje do tego wyra¿enia.

@ignore
Do we want to use "^[A-Za-z_][A-Za-z_0-9]*$" to restrict the entire
record to just identifiers?  Doing that also would disrupt the flow of
the text.
@end ignore

@strong{Uwaga!} W stosowaniu operatorów @samp{~} i @samp{!~}
istnieje ró¿nica pomiêdzy sta³ym regexp ujêtym w uko¶niki a sta³±
³añcuchow± ujêt± w cudzys³owy.  Je¶li mamy zamiar u¿yæ sta³ej ³añcuchowej,
powinni¶my rozumieæ, ¿e ³añcuch w gruncie rzeczy badany jest
@emph{dwukrotnie}: za pierwszym razem gdy @code{awk} czyta program, i za
drugim gdy zamierza dopasowaæ ³añcuch stoj±cy po lewej stronie operatora ze
wzorcem po prawej.  Obowi±zuje to nie tylko dla sta³ych ³añcuchowych, ale
i dowolnych wyra¿eñ o warto¶ci ³añcuchowej (jak  @code{identifier_regexp}
powy¿ej).

@cindex sta³e regexp, ró¿nica miêdzy uko¶nikami a cudzys³owami
Co wynika z tego, ¿e ³añcuch jest sprawdzany dwukrotnie?  Istotna
ró¿nica wystêpuje przy sekwencjach specjalnych, w szczególno¶ci przy
odwrotnych uko¶nikach.  W celu umieszczenia odwrotnego uko¶nika w wyra¿eniu
regularnym wewn±trz ³añcucha musimy wpisaæ dwa odwrotne uko¶niki.

Na przyk³ad, @code{/\*/} jest sta³± regexp opisuj±c± dos³owne @samp{*}.
Potrzebny jest tylko jeden odwrotny uko¶nik.  Chc±c zrobiæ to samo za
pomoc± ³añcucha, musieliby¶my wpisaæ @code{"\\*"}.  Pierwszy odwrotny
uko¶nik s³u¿y tylko do zacytowania drugiego, tak ¿e ³añcuch faktycznie
zawiera dwa znaki @samp{\} i @samp{*}.

@cindex czêste pomy³ki
@cindex pomy³ki, czêste
@cindex b³êdy, czêste
Skoro do opisu wyra¿enia regularnego mo¿emy u¿yæ zarówno
sta³ej typu regexp jak i sta³ej ³añcuchowej, któr± z nich powinni¶my
zastosowaæ?  Odpowied¼ brzmi: ``sta³± regexp'', z kilku powodów.

@enumerate 1
@item
Sta³e ³añcuchowe s± bardziej skomplikowane w pisaniu i trudniejsze
w czytaniu.  Stosowanie sta³ych regexp powoduje, ¿e
program staje siê mniej podatny na b³êdy.  Brak zrozumienia ró¿nicy
pomiêdzy tymi dwoma rodzajami sta³ych jest typowym ¼ród³em b³êdów.

@item
U¿ywanie sta³ych regexp jest te¿ bardziej efektywne: @code{awk} potrafi
zauwa¿yæ, ¿e podali¶my wyra¿enie regularne i przechowuje je wewnêtrznie
w postaci powoduj±cej efektywniejsze dopasowywanie wzorców.  Przy zastosowaniu
sta³ej ³añcuchowej, @code{awk} musi najpierw przekszta³ciæ ³añcuch na tak±
postaæ wewnêtrzn±, a nastêpnie dopiero wykonaæ dopasowanie wzorca.

@item
U¿ywanie sta³ych regexp to lepszy styl pisania; jasno pokazuje, ¿e
mamy na my¶li dopasowanie wyra¿enia regularnego.
@end enumerate

@node Czytanie plików, Wypisywanie, Regexp, Top
@chapter Czytanie plików wej¶ciowych

@cindex odczyt plików
@cindex czytanie plików
@cindex wej¶cie
@cindex standardowe wej¶cie
@vindex FILENAME
W typowym programie @code{awk}, ca³o¶æ wej¶cia czytana jest albo ze
standardowego wej¶cia (domy¶lnie z klawiatury, ale czêsto potokiem z innego
polecenia) albo z plików, których nazwy podano w wierszu poleceñ @code{awk}.
Je¿eli podano pliki wej¶ciowe, to @code{awk} czyta je kolejno, odczytuj±c
wszystkie dane z jednego przed przej¶ciem do nastêpnego.  Nazwê bie¿±cego
pliku wej¶ciowego mo¿na znale¼æ w zmiennej wbudowanej
@code{FILENAME} (@pxref{Zmienne wbudowane}).

Wej¶cie czytane jest jednostkami zwanymi @dfn{rekordami}, i przetwarzane
przez regu³y danego programu po jednym rekordzie naraz.  Domy¶lnie ka¿dy
rekord jest jednym wierszem.  Ka¿dy rekord jest automatycznie dzielony na
kawa³ki zwane @dfn{polami}.  U³atwia to programom pracê z czê¶ciami rekordów.

Przy rzadkich okazjach zachodzi potrzeba zastosowania polecenia
@code{getline}.  Jest cenne, poniewa¿ potrafi bezpo¶rednio
pobieraæ dane z dowolnej ilo¶ci plików, a ponadto pliki, których
u¿ywa nie musz± byæ podane w wierszu poleceñ
@code{awk} (@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).

@menu
* Rekordy::                     Sterowanie podzia³em danych na rekordy.
* Pola::                        Wprowadzenie do pól.
* Pola nie-sta³e::              Numery pól nie bêd±ce sta³ymi.
* Zmiana pól::                  Zmiana zawarto¶ci pól.
* Separatory pól::              Separator pól. Jak go zmieniæ.
* Sta³y rozmiar::               Czytanie danych o sta³ej szeroko¶ci.
* Wiele wierszy::               Czytanie rekordów wielowierszowych.
* Getline::                     Odczyt plików pod bezpo¶redni± kontrol±
                                programu przy wykorzystaniu funkcji
                                @code{getline}.
@end menu

@node Rekordy, Pola, Czytanie plików, Czytanie plików
@section Jak wej¶cie dzielone jest na rekordy

@cindex separator rekordów, @code{RS}
@cindex rekordy, separator @code{RS}
@cindex zmiana separatora rekordów
@cindex rekord, definicja
@vindex RS
Narzêdzie @code{awk} dzieli wej¶cie naszego programu @code{awk}
na rekordy i pola.
Rekordy oddzielane s± znakiem nazywanym @dfn{separatorem rekordów}
(record separator).
Domy¶lnie separatorem rekordów jest znak nowej linii.
Z tego powodu domy¶lnie rekordy s± pojedynczymi wierszami.
Jako separatora rekordów mo¿na u¿yæ innego znaku, przypisuj±c go
zmiennej wbudowanej @code{RS}.

Warto¶æ @code{RS}, jak ka¿dej innej zmiennej programu @code{awk},
mo¿na zmieniæ za pomoc± operatora przypisania @samp{=}
(@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).
Nowy znak separatora rekordów powinien byæ ujêty w znaki cudzys³owu,
które sygnalizuj± sta³± ³añcuchow±.  Czêsto odpowiednim do wykonania takiej
zmiany miejscem jest pocz±tek wykonywania programu, przed przetworzeniem
czegokolwiek z wej¶cia, tak by pierwszy rekord zosta³ odczytany za pomoc±
w³a¶ciwego separatora.
Mo¿na to osi±gn±æ wykorzystuj±c specjalny wzorzec @code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}).
Na przyk³ad:

@example
awk 'BEGIN @{ RS = "/" @} ; @{ print $0 @}' BBS-list
@end example

@noindent
zmienia warto¶æ @code{RS} na @code{"/"}, przed odczytaniem czegokolwiek
z wej¶cia.  Pierwszym znakiem tego ³añcucha jest uko¶nik.  W rezultacie,
rekordy separowane s± uko¶nikami.  Nastêpnie czytany jest plik wej¶ciowy,
a druga regu³a programu (akcja bez wzorca) wypisuje ka¿dy rekord.  Poniewa¿
ka¿da instrukcja @code{print} na koñcu swego wyj¶cia dodaje znak nowej
linii, efektem pracy tego programu jest skopiowanie wej¶cia z ka¿dym
uko¶nikiem zmienionym na znak nowej linii.  A oto wyniki uruchomienia
programu z plikiem @file{BBS-list}:

@example
@group
$ awk 'BEGIN @{ RS = "/" @} ; @{ print $0 @}' BBS-list
@print{} aardvark     555-5553     1200
@print{} 300          B
@print{} alpo-net     555-3412     2400
@print{} 1200
@print{} 300     A
@print{} barfly       555-7685     1200
@print{} 300          A
@print{} bites        555-1675     2400
@print{} 1200
@print{} 300     A
@print{} camelot      555-0542     300               C
@print{} core         555-2912     1200
@print{} 300          C
@print{} fooey        555-1234     2400
@print{} 1200
@print{} 300     B
@print{} foot         555-6699     1200
@print{} 300          B
@print{} macfoo       555-6480     1200
@print{} 300          A
@print{} sdace        555-3430     2400
@print{} 1200
@print{} 300     A
@print{} sabafoo      555-2127     1200
@print{} 300          C
@print{}
@end group
@end example

@noindent
Zauwa¿, ¿e pozycja BBS-u @samp{camelot} nie zosta³a podzielona.
W pierwotnym pliku
(@pxref{Przyk³adowe pliki danych, , Pliki danych do przyk³adów}),
odpowiedni wiersz wygl±da tak:

@example
camelot      555-0542     300               C
@end example

@noindent
Poniewa¿ @samp{camelot} ma tylko jedn± prêdko¶æ transmisji, to w jego
rekordzie nie ma uko¶ników.

Mo¿na te¿ zmieniæ separator rekordów w inny sposób, w wierszu poleceñ,
wykorzystuj±c mo¿liwo¶æ przypisywania warto¶ci
zmiennej (@pxref{Inne argumenty, ,Inne argumenty wiersza poleceñ}).

@example
awk '@{ print $0 @}' RS="/" BBS-list
@end example

@noindent
Przed przetworzeniem @file{BBS-list} @code{RS} nadawana jest warto¶æ @samp{/}.

Wykorzystanie jako separatora rekordów tak nietypowego znaku jak @samp{/}
daje w przewa¿aj±cej wiêkszo¶ci przypadków prawid³owe zachowanie siê
programu.  Jednak poni¿szy (skrajny) przyk³ad potoku wypisuje zaskakuj±ce
@samp{1}.  Wystêpuje tu tylko jedno pole, sk³adaj±ce siê ze znaku nowej
linii.  Warto¶ci± zmiennej wbudowanej @code{NF} jest liczba pól bie¿±cego
rekordu.

@example
@group
$ echo | awk 'BEGIN @{ RS = "a" @} ; @{ print NF @}'
@print{} 1
@end group
@end example

@cindex ciemny k±t
@noindent
Osi±gniêcie koñca pliku wej¶ciowego koñczy bie¿±cy rekord wej¶ciowy, nawet
je¶li ostatni znak pliku nie jest znakiem z @code{RS}
(c.k.).

@cindex empty string
£añcuch pusty, @code{""} (³añcuch nie zawieraj±cy ¿adnych znaków), ma
specjalne znaczenie jako warto¶æ @code{RS}: oznacza on, ¿e rekordy s±
rozdzielone jednym lub wieloma wierszami pustymi, i niczym innym wiêcej.
@xref{Wiele wierszy, ,Rekordy wielowierszowe}, gdzie opisano szczegó³y.

Je¿eli zmienimy warto¶æ @code{RS} w ¶rodku dzia³ania @code{awk}, to nowa
warto¶æ bêdzie u¿ywana do rozdzielania kolejnych rekordów, ale nie bêdzie to
mieæ wp³ywu na aktualnie przetwarzany rekord (i rekordy ju¿ przetworzone).

@vindex RT
@cindex zakoñczenie rekordu, @code{RT}
@cindex zakoñczenie, rekordu
@cindex terminator, rekordu
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Po wyznaczeniu koñca rekordu @code{gawk} nadaje zmiennej @code{RT} (record
terminator) warto¶æ tekstu wej¶cia, który dopasowa³ @code{RS}.

@cindex wyra¿enia regularne jako separatory rekordów
Warto¶æ @code{RS} nie jest w rzeczywisto¶ci ograniczona do ³añcucha
jednoznakowego.  Mo¿e byæ dowolnym wyra¿eniem regularnym
(@pxref{Regexp, ,Regular Expressions}).  Ogólnie, ka¿dy rekord koñczy siê
na nastêpnym ³añcuchu pasuj±cym do tego wyra¿enia regularnego.  Nastêpny
rekord zaczyna siê na koñcu dopasowanego ³añcucha.  Ta ogólna zasada dzia³a
faktycznie w zwyk³ym, codziennym przypadku, gdy @code{RS} zawiera tylko znak
nowej linii: rekord koñczy siê u pocz±tku nastêpnego pasuj±cego ³añcucha
(nastêpnego znaku nowej linii z wej¶cia) a kolejny rekord zaczyna siê zaraz
za koñcem tego ³añcucha (od pierwszego znaku kolejnego wiersza).
Znak nowej linii, jako pasuj±cy do @code{RS}, nie jest czê¶ci± ¿adnego
z tych rekordów.

Je¶li @code{RS} jest pojedynczym znakiem, to @code{RT} bêdzie zawieraæ ten
sam pojedynczy znak.  Jednak, gdy @code{RS} bêdzie wyra¿eniem regularnym,
@code{RT} staje siê bardziej przydatne.  Zawiera wówczas faktyczny tekst
wej¶ciowy dopasowany wyra¿eniem regularnym.

Poni¿szy przyk³ad ilustruje obie te w³a¶ciwo¶ci.
Nadaje @code{RS} warto¶æ wyra¿enia regularnego dopasowuj±cego albo znak
nowej linii albo ci±g du¿ych liter z opcjonalnymi pocz±tkowymi i/lub
koñcowymi bia³ymi znakami (@pxref{Regexp, , Regular Expressions}).

@example
$ echo rekord 1 AAAA rekord 2 BBBB rekord 3 |
> gawk 'BEGIN @{ RS = "\n|( *[[:upper:]]+ *)" @}
>             @{ print "Rekord =", $0, "a RT =", RT @}'
@print{} Rekord = rekord 1 a RT =  AAAA
@print{} Rekord = rekord 2 a RT =  BBBB
@print{} Rekord = rekord 3 a RT =
@print{}
@end example

@noindent
Ostatni wiersz wyj¶cia ma dodatkowy pusty wiersz. Wynika to st±d, ¿e
warto¶ci± @code{RT} jest znak nowej linii, po którym instrukcja @code{print}
dok³ada swój w³asny koñcowy znak nowej linii.

@xref{Prosty sed, ,Prosty edytor strumieniowy}, gdzie umieszczono przydatniejszy
przyk³ad @code{RS} jako wyra¿enia regularnego i wynikaj±cego st±d @code{RT}.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
U¿ycie @code{RS} jako wyra¿enia regularnego i zmienna @code{RT} s±
rozszerzeniami.  Nie s± one dostêpne w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}).
W trybie tym do okre¶lenia koñca rekordu u¿ywany jest tylko pierwszy znak
warto¶ci @code{RS}.

@cindex liczba rekordów, @code{NR}, @code{FNR}
@vindex NR
@vindex FNR
Narzêdzie @code{awk} zapamiêtuje liczbê rekordów, jakie do tej pory
przeczytano z bie¿±cego pliku wej¶ciowego.  Warto¶æ ta przechowywana jest
we wbudowanej zmiennej o nazwie @code{FNR}.  Jest ona zerowana przy
rozpoczynaniu nowego pliku.  Inna zmienna wbudowana, @code{NR}, Jest
ca³kowit± liczb± rekordów przeczytanych dot±d ze wszystkich plików danych.
Zaczyna siê od zera, ale nigdy nie jest automatycznie zerowana.

@node Pola, Pola nie-sta³e, Rekordy, Czytanie plików
@section Badanie pól

@cindex sprawdzanie pól
@cindex pola
@cindex odwo³ywanie siê do pól
Przy odczycie przez @code{awk} rekordu wej¶ciowego, jest on automatycznie
rozdzielany, @dfn{parsowany}, przez interpreter na kawa³ki zwane
@dfn{polami} (fields).  Domy¶lnie pola rozdzielane s± bia³ymi znakami,
podobnie jak s³owa w wierszu.

Bia³y znak w @code{awk} oznacza ³añcuch z³o¿ony z jednej lub wiêcej spacji,
tabulacji lub znaków nowej linii; @footnote{W POSIX-owym @code{awk}, znaki
nowej linii przy podziale na pola nie s± uwa¿ane za bia³e znaki.} inne
znaki, jak formfeed (znak wysuwu strony), i tak dalej, uwa¿ane za bia³e znaki
przez inne jêzyki @emph{nie} s± bia³ymi znakami dla @code{awk}.

Celem istnienia pól jest zapewnienie nam wygodniejszego dostêpu przy
odwo³ywaniu siê do tych fragmentów rekordu.  Nie musimy ich u¿ywaæ -- je¶li
chcemy, mo¿emy dzia³aæ na ca³ym rekordzie -- ale to dziêki polom proste
programy @code{awk} s± tak efektywne.

@cindex @code{$} (operator pola)
@cindex pola, operator pola, @code{$}
Odwo³uj±c siê do pola w programie @code{awk}, u¿ywamy znaku dolara, @samp{$},
po którym wystêpuje numer ¿±danego pola.  Zatem, @code{$1} odnosi siê do
pierwszego pola, @code{$2} do drugiego, i tak dalej.  Na przyk³ad, za³ó¿my
¿e mamy nastêpuj±cy wiersz wej¶cia:

@example
To wygl±da na ca³kiem ³adny przyk³ad.
@end example

@noindent
Pierwszym polem, lub @code{$1}, jest tutaj @samp{To}.  Drugim polem, lub
@code{$2}, jest @samp{wygl±da}, i tak dalej.  Zauwa¿, ¿e ostatnim polem
@code{$7}, jest @samp{przyk³ad.}.  Poniewa¿ pomiêdzy @samp{d} a @samp{.} nie
ma odstêpu, kropka uwa¿ana jest za czê¶æ siódmego pola.

@vindex NF
@cindex liczba pól, @code{NF}
@code{NF} jest zmienn± wbudowan±, której warto¶æ jest liczb± pól bie¿±cego
rekordu.
@code{awk} automatycznie aktualizuje warto¶æ @code{NF} za ka¿dym razem,
gdy czytany jest rekord.

Bez wzglêdu na to, ile jest pól, ostatnie pole mo¿na przedstawiæ jako
@code{$NF}.  Zatem w powy¿szym przyk³adzie @code{$NF} by³oby tym samym, co
@code{$7}, czyli @samp{przyk³ad.}.  Dlaczego dzia³a taka notacja wyja¶niono
poni¿ej (@pxref{Pola nie-sta³e, ,Numery pól nie bêd±ce sta³ymi}).
Próbuj±c odwo³aæ siê do pola za ostatnim polem, jak na przyk³ad @code{$8}
gdy rekord ma tylko siedem pól, otrzymujemy ³añcuch pusty.
@c the empty string acts like 0 in some contexts, but I don't want to
@c get into that here....

@code{$0}, wygl±daj±cy jak odwo³anie do ``zerowego'' pola, jest przypadkiem
specjalnym:  reprezentuje ca³y rekord wej¶ciowy.  @code{$0} wykorzystuje
siê, gdy nie jeste¶my zainteresowani polami:

@c POTRZEBNE
@page
Oto jeszcze kilka przyk³adów:

@example
@group
$ awk '$1 ~ /foo/ @{ print $0 @}' BBS-list
@print{} fooey        555-1234     2400/1200/300     B
@print{} foot         555-6699     1200/300          B
@print{} macfoo       555-6480     1200/300          A
@print{} sabafoo      555-2127     1200/300          C
@end group
@end example

@noindent
W tym przyk³adzie wypisywany jest ka¿dy rekord pliku @file{BBS-list},
którego pierwszego pole zawiera ³añcuch @samp{foo}.  Operator @samp{~}
nazywany jest @dfn{operatorem dopasowania}
(@pxref{U¿ywanie regexp, , Jak stosowaæ wyra¿enia regularne}).
Sprawdza on czy ³añcuch (tutaj: pole @code{$1}) pasuje do zadanego wyra¿enia
regularnego.

Poni¿szy przyk³ad, w przeciwieñstwie do poprzedniego, szuka @samp{foo}
w @emph{ca³ym rekordzie} i wypisuje pierwsze i ostatnie pole dla ka¿dego
dopasowanego rekordu wej¶ciowego.

@example
@group
$ awk '/foo/ @{ print $1, $NF @}' BBS-list
@print{} fooey B
@print{} foot B
@print{} macfoo A
@print{} sabafoo C
@end group
@end example

@node Pola nie-sta³e, Zmiana pól, Pola, Czytanie plików
@section Numery pól nie bêd±ce sta³ymi

Liczba pól nie musi byæ sta³a.  Po @samp{$} mo¿e wyst±piæ dowolne wyra¿enie
jêzyka @code{awk}.  Warto¶æ wyra¿enia bêdzie okre¶laæ numer pola.  Je¿eli
warto¶ci± jest ³añcuch, a nie liczba, to jest zostanie przekszta³cony
na liczbê.
Rozwa¿my przyk³ad:

@example
awk '@{ print $NR @}'
@end example

@noindent
Przypomnijmy, ¿e @code{NR} jest liczb± dotychczas odczytanych rekordów:
jeden przy pierwszym rekordzie, dwa przy drugim, itd.  Przyk³ad wypisuje
wiêc pierwsze pole pierwszego rekordu, drugie pole drugiego rekordu, i tak
dalej.  Dla dwudziestego rekordu wypisywane jest pole numer 20.
Najprawdopodobniej rekord ma mniej ni¿ 20 pól, wiêc nasz kod wypisze
pusty wiersz.

Oto inny przyk³ad zastosowania wyra¿eñ jako numerów pól:

@example
awk '@{ print $(2*2) @}' BBS-list
@end example

@code{awk} musi wyznaczyæ warto¶æ wyra¿enia @samp{(2*2)} i u¿yæ jej jako
numeru pola, jakie ma byæ wypisane.  Znak @samp{*} reprezentuje mno¿enie,
wiêc wyliczon± warto¶ci± wyra¿enia @samp{2*2} jest cztery.
Poniewa¿ u¿yto nawiasów, mno¿enie wykonywane jest przed operacj±
@samp{$}.  S± one niezbêdne zawsze wtedy, gdy w wyra¿eniu okre¶laj±cym numer
pola wystêpuje operator dwuargumentowy.  Nasz przyk³ad, zatem, wypisuje
godziny pracy (czwarte pole) dla ka¿dego wiersza pliku @file{BBS-list}.
(Wszystkie operatory @code{awk}, w kolejno¶ci malej±cych priorytetów
spisano w @ref{Priorytet, , Priorytet operatorów}.)
Je¶li obliczony numer pola wynosi zero, to otrzymujemy ca³y rekord.
Zatem, @code{$(2-2)} ma tê sam± warto¶æ, co @code{$0}.  Ujemne numery pól
s± niedozwolone.  Próba ich u¿ycia na ogó³ przerywa dzia³anie programu
@code{awk}.  (Standard POSIX nie definiuje, co siê dzieje przy odwo³aniu
do ujemnego numeru pola.  @code{gawk} zauwa¿a tak± sytuacjê i przerywa
program.  Inne implementacje @code{awk} mog± siê inaczej zachowywaæ.)

Jak wspomniano w @ref{Pola, ,Badanie pól},
liczba pól bie¿±cego rekordu przechowywana jest w zmiennej wbudowanej
@code{NF} (równie¿ @pxref{Zmienne wbudowane}).  Wyra¿enie @code{$NF} nie
jest specjaln± cech±: jest bezpo¶redni± konsekwencj± wyznaczenia @code{NF}
i u¿ycia otrzymanej warto¶ci jako numeru pola.

@node Zmiana pól, Separatory pól, Pola nie-sta³e, Czytanie plików
@section Zmiana zawarto¶ci pól

@cindex pola, zmiana zawarto¶ci
@cindex zmiana zawarto¶ci pola
@cindex przypisania do pól
W programie @code{awk} mo¿na zmieniaæ zawarto¶æ pól widzianych przez @code{awk}.
Zmienia to równocze¶nie to, co @code{awk} postrzega jako bie¿±cy rekord
wej¶ciowy.  (Faktyczne wej¶cie pozostaje nietkniête; @code{awk} @emph{nigdy}
nie zmienia pliku wej¶ciowego.)

Rozwa¿my taki przyk³ad i jego wyniki:

@example
@group
$ awk '@{ $3 = $2 - 10; print $2, $3 @}' inventory-shipped
@print{} 13 3
@print{} 15 5
@print{} 15 5
@dots{}
@end group
@end example

@noindent
Znak @samp{-} reprezentuje odejmowanie, wiêc program przypisuje trzeciemu
polu, @code{$3}, now± warto¶æ równ± warto¶ci drugiego pola minus
dziesiêæ, @samp{$2 - 10}.  (@xref{Operatory arytmetyczne, ,Operatory arytmetyczne}.)
Nastêpnie wypisywane jest pole numer dwa i nowa warto¶æ pola numer trzy.

Tekst w polu @code{$2} musi mieæ sens jako liczba aby to zadzia³a³o.
£añcuch znaków musi zostaæ przekszta³cony na liczbê, by komputer móg³ na nim
wykonaæ obliczenia arytmetyczne.  Wynik³a z odejmowania liczba jest
powtórnie przekszta³cana na ³añcuch znaków, który nastêpnie staje siê
polem numer trzy.
@xref{Konwersja, ,Konwersja ³añcuchów i liczb}.

Przy zmianie warto¶ci pola (postrzeganego przez @code{awk}), tekst rekordu
wej¶ciowego jest przeliczany tak, by zawiera³ nowe pole w miejscu starego.
St±d te¿, @code{$0} zmienia siê, by odzwierciedliæ odmienione pole.
Zatem, powy¿szy program wypisuje kopiê pliku wej¶ciowego, z dziesi±tk± odjêt±
od drugiego pola ka¿dego wiersza.

@example
@group
$ awk '@{ $2 = $2 - 10; print $0 @}' inventory-shipped
@print{} Jan 3 25 15 115
@print{} Feb 5 32 24 226
@print{} Mar 5 24 34 228
@dots{}
@end group
@end example

Mo¿na tak¿e przypisaæ warto¶æ polom spoza zakresu.  Na przyk³ad:

@example
$ awk '@{ $6 = ($5 + $4 + $3 + $2)
>        print $6 @}' inventory-shipped
@print{} 168
@print{} 297
@print{} 301
@dots{}
@end example

@noindent
W³a¶nie stworzyli¶my @code{$6}, którego warto¶ci± jest suma pól
@code{$2}, @code{$3}, @code{$4} i @code{$5}.  Znak @samp{+} reprezentuje
dodawanie.  W przypadku pliku @file{inventory-shipped} pole @code{$6}
przedstawia ca³kowit± liczbê paczek wys³anych w konkretnym miesi±cu.

Tworzenie nowego pola zmienia u¿ywan± przez @code{awk} wewnêtrzn± kopiê
rekordu wej¶ciowego -- warto¶æ @code{$0}.  Zatem, je¿eli po dodaniu pola
wykonamy @samp{print $0}, to wypisany rekord bêdzie zawiera³ nowe pole,
z odpowiedni± ilo¶ci± separatorów pól pomiêdzy nim a uprzednio istniej±cymi
polami.

Przeliczenie to ma wp³yw na warto¶æ @code{NF}
(liczbê pól; @pxref{Pola, ,Badanie pól}). Równocze¶nie za¶ podlega
wp³ywom zmiennej @code{NF} i, elementowi jeszcze nie omawianemu,
@dfn{separatorowi pól wyj¶ciowych}, @code{OFS}, u¿ywanemu do rozdzielania
pól (@pxref{Separatory wyj¶cia}).
Na przyk³ad, warto¶æ @code{NF} ustalana jest na numer najdalszego
stworzonego przez nas pola.

Zauwa¿ jednak, ¿e samo @emph{odwo³anie siê} do pola spoza zakresu
@emph{nie} zmienia warto¶ci ani @code{$0} ani @code{NF}.  Odwo³anie do pola
spoza zakresu jedynie daje pusty ³añcuch.  Na przyk³ad:

@example
if ($(NF+1) != "")
    print "nie mo¿e wyst±piæ"
else
    print "wszystko normalnie"
@end example

@noindent
powinno wypisaæ @samp{wszystko normalnie}, poniewa¿ @code{NF+1} z pewno¶ci±
bêdzie poza zakresem.  (@xref{Instrukcja if, ,Instrukcja @code{if}-@code{else}},
gdzie znajduje siê wiêcej informacji o @code{if-else} w @code{awk}.
@xref{Typy i porównania, ,Typy zmiennych i wyra¿enia porównania},
gdzie znale¼æ mo¿na wiêcej szczegó³ów o operatorze @samp{!=}.)

Warto zapamiêtaæ, ¿e wykonanie przypisania do istniej±cego pola
zmieni warto¶æ @code{$0}, ale nie zmieni warto¶ci @code{NF}, nawet je¶li
polu przypiszemy ³añcuch pusty.  Na przyk³ad:

@example
@group
$ echo a b c d | awk '@{ OFS = ":"; $2 = ""
>                       print $0; print NF @}'
@print{} a::c:d
@print{} 4
@end group
@end example

@noindent
Pole wci±¿ tu jest -- ma po prostu pust± warto¶æ.  Mo¿na to rozpoznaæ po
obecno¶ci dwóch s±siaduj±cych ze sob± dwukropków.

Ten przyk³ad pokazuje, co siê dzieje, gdy tworzymy nowe pole.

@example
$ echo a b c d | awk '@{ OFS = ":"; $2 = ""; $6 = "nowe"
>                       print $0; print NF @}'
@print{} a::c:d::nowe
@print{} 6
@end example

@noindent
Wtr±cone pole, @code{$5} utworzone jest z pust± warto¶ci± (wskazan± przez
druga parê s±siaduj±cych dwukropków).  @code{NF} jest zaktualizowane
warto¶ci± sze¶æ.

Na koniec, pomniejszenie @code{NF} spowoduje utratê warto¶ci pól po
przeliczeniu nowych warto¶ci @code{NF} i @code{$0}.  Oto przyk³ad:

@example
$ echo a b c d e f | ../gawk '@{ print "NF =", NF;
>                               NF = 3; print $0 @}'
@print{} NF = 6
@print{} a b c
@end example

@node Separatory pól, Sta³y rozmiar, Zmiana pól, Czytanie plików
@section Jak rozdzielaæ pola

Ta sekcja jest do¶æ d³uga; opisuje jedn± z najbardziej fundamentalnych
w @code{awk} operacji.

@menu
* Podstawy podzia³u na pola::   W jaki sposób pola dzielone s± przez
                                pojedyncze znaki lub proste ³añcuchy.
* Regexp w podziale na pola::   Stosowanie wyra¿eñ regularnych do podzia³u
                                na pola.
* Pola jednoznakowe::           Jak z ka¿dego znaku zrobiæ osobne pole.
* Separator pól w wierszu poleceñ:: Ustalanie @code{FS} z wiersza poleceñ.
* Podsumowanie podzia³u na pola:: Kwestie koñcowe i tablica podsumowuj±ca.
@end menu

@node Podstawy podzia³u na pola, Regexp w podziale na pola, Separatory pól, Separatory pól
@subsection Podstawy podzia³u na pola
@vindex FS
@cindex pola, oddzielanie
@cindex separator pól, @code{FS}

@dfn{separator pól} (field separator), bêd±cy albo pojedynczym znakiem albo
wyra¿eniem regularnym, odpowiada za sposób, w jaki @code{awk} dzieli rekord
wej¶ciowy na pola.  @code{awk} przegl±da rekord wej¶ciowy szukaj±c ci±gów
znaków pasuj±cych do separatora; same pola s± tekstem pomiêdzy
dopasowaniami.

W poni¿szych przyk³adach pos³ugujemy siê symbolem wyliczenia ``@bullet{}''
do przedstawienia spacji w wyj¶ciu.

Je¿eli separatorem pól jest @samp{oo}, to poni¿szy wiersz:

@example
moo goo gai pan
@end example

@noindent
zostanie podzielony na trzy pola: @samp{m}, @samp{@bullet{}g}
i @samp{@bullet{}gai@bullet{}pan}.
Zwróæ uwagê na pocz±tkowe spacje w warto¶ciach drugiego i trzeciego pola.

@cindex czêste pomy³ki
@cindex pomy³ki, czêste
@cindex b³êdy, czêste
Separator pól reprezentowany jest przez zmienn± wbudowan± @code{FS}.
Uwaga programuj±cy w pow³oce!  @code{awk} @emph{nie} u¿ywa nazwy @code{IFS}
wykorzystywanej przez pow³oki zgodne z POSIX-em (jak pow³oka Bourne'a,
@code{sh}, czy GNU Bourne-Again Shell, Bash).

Warto¶æ @code{FS} w programie @code{awk} zmieniamy za pomoc± operatora
przypisania, @samp{=} (@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).
Czêsto odpowiednim do tego momentem jest pocz±tek wykonywania programu,
przed przetwarzaniem wej¶cia, tak by ju¿ pierwszy rekord zosta³ odczytany
z w³a¶ciwym separatorem.  Robimy to wykorzystuj±c wzorzec specjalny
@code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}).
Na przyk³ad tutaj nadajemy zmiennej @code{FS} warto¶æ @code{","}:

@example
awk 'BEGIN @{ FS = "," @} ; @{ print $2 @}'
@end example

@noindent
Przy wierszu wej¶ciowym,

@example
John Q. Smith, 29 Oak St., Walamazoo, MI 42139
@end example

@noindent
program ten wydobywa i wypisuje ³añcuch
@samp{@bullet{}29@bullet{}Oak@bullet{}St.}.

@cindex separator pól, wybór
@cindex wyra¿enia regularne jako separatory pól
Czasem dane wej¶ciowe zawieraæ bêd± znaki separuj±ce, które nie rozdzielaj±
pól w sposób, jakiego by¶my siê spodziewali.  Dajmy na to, imiê i nazwisko
osoby w ostatnio u¿ytym przyk³adzie mo¿e mieæ do³±czony tytu³ czy
inny przyrostek, jak @samp{John Q. Smith, LXIX}.  Z wej¶cia zawieraj±cego
takie dane osobowe:

@example
John Q. Smith, LXIX, 29 Oak St., Walamazoo, MI 42139
@end example

@noindent
@c careful of an overfull hbox here!
powy¿szy program wydzieli³by @samp{@bullet{}LXIX}, zamiast
@samp{@bullet{}29@bullet{}Oak@bullet{}St.}.
Je¿eli spodziewali¶my siê, ¿e program wypisze adres, bêdziemy zaskoczeni.
Mora³: nale¿y ostro¿nie dobieraæ uk³ad danych i znaki separuj±ce, by
zapobiec takim k³opotom.

@iftex
Jak ju¿ wiemy, normalnie
@end iftex
@ifinfo
Normalnie,
@end ifinfo
pola separowane s± sekwencjami bia³ych znaków (spacji, tabulacji i znaków
nowej linii), nie przez pojedyncze spacje: dwie kolejne spacje nie
rozgraniczaj± pustego pola.  Domy¶ln± warto¶ci± separatora pól @code{FS}
jest ³añcuch zawieraj±cy pojedyncz± spacjê, @w{@code{" "}}.  Gdyby ta
warto¶æ by³a interpretowana w zwyk³y sposób, to ka¿dy znak spacji
rozdziela³by pola, zatem dwie s±siednie spacje tworzy³yby puste pole pomiêdzy
nimi.  Powodem, dla którego siê tak nie dzieje, jest to, ¿e pojedyncza
spacja jako warto¶æ @code{FS} jest przypadkiem specjalnym: traktowana jest
jako okre¶lenie domy¶lnego sposobu rozgraniczania pól.

Je¿eli @code{FS} jest jakim¶ innym pojedynczym znakiem, to ka¿de wyst±pienie
tego znaku oddziela od siebie dwa pola.  Dwa s±siaduj±ce wyst±pienia
ograniczaj± pole puste.  Je¶li znak ten pojawia siê na pocz±tku lub koñcu
wiersza, to równie¿ oddziela puste pole.  Znak spacji jest jedynym
pojedynczym znakiem nie przestrzegaj±cym tych zasad.

@node Regexp w podziale na pola, Pola jednoznakowe, Podstawy podzia³u na pola, Separatory pól
@subsection Stosowanie wyra¿eñ regularnych do podzia³u na pola

Poprzednia podsekcja omawia³a
stosowanie jako warto¶ci @code{FS} pojedynczych znaków lub zwyk³ych ³añcuchów.
Ogólniej, warto¶ci± @code{FS} mo¿e byæ ³añcuch zawieraj±cy dowolne wyra¿enie
regularne.  W takim przypadku, ka¿de dopasowanie tego wyra¿enia w rekordzie
separuje pola.  Na przyk³ad, przypisanie:

@example
FS = ", \t"
@end example

@noindent
czyni ogranicznikiem ka¿dy obszar rekordu wej¶ciowego sk³adaj±cy siê
z przecinka z umieszczon± po nim spacj± i tabulacj±.  (@samp{\t} jest
@dfn{sekwencj± specjaln±} oznaczaj±c± tabulacjê;
@pxref{Sekwencje specjalne},
gdzie znajduje siê pe³na lista podobnych sekwencji specjalnych.)

Jako mniej banalny przyk³ad z wyra¿eniem regularnym, za³ó¿my, ¿e
chcieliby¶my, by pojedyncze spacje rozdziela³y pola w taki sam sposób,
jak powy¿ej u¿yli¶my przecinków.  Mo¿emy nadaæ @code{FS} warto¶æ
@w{@code{"[@ ]"}} (lewy nawias kwadratowy, spacja, prawy nawias kwadratowy).
To wyra¿enie regularne dopasowuje pojedyncz± spacjê i nic wiêcej
(@pxref{Regexp, ,Regular Expressions}).

Pomiêdzy dwoma przypadkami: @samp{FS = @w{" "}} (pojedyncza spacja)
a @samp{FS = @w{"[ \t\n]+"}} (lewy nawias kwadratowy, spacja, odwrotny
uko¶nik, ``t'', odwrotny uko¶nik, ``n'', prawy nawias kwadratowy, co tworzy
wyra¿enie regularne dopasowuj±ce jeden lub wiêcej znaków spacji, tabulacji
lub nowej linii), istnieje istotna ró¿nica.  Przy obu warto¶ciach @code{FS}
pola rozdzielane s± ci±gami spacji, tabulacji i/lub znaków nowej linii.
Je¿eli jednak warto¶ci± @code{FS} jest @w{@code{" "}}, to @code{awk} bêdzie
usuwa³ z rekordu pocz±tkowe i koñcowe bia³e znaki, a dopiero nastêpnie
decydowa³, gdzie znajduj± siê pola.

Na przyk³ad, poni¿szy potok wypisuje @samp{b}:

@example
@group
$ echo ' a b c d ' | awk '@{ print $2 @}'
@print{} b
@end group
@end example

@noindent
Jednak ten potok wypisze @samp{a} (zwróæ uwagê na dodatkowe spacje wokó³
ka¿dej z liter):

@example
$ echo ' a  b  c  d ' | awk 'BEGIN @{ FS = "[ \t]+" @}
>                                  @{ print $2 @}'
@print{} a
@end example

@noindent
@cindex ³añcuch pusty
@cindex ³añcuch zerowy
W tym przypadku, pierwsze pole jest @dfn{puste}, czyli jest ³añcuchem
zerowym, pustym.

Obcinanie pocz±tkowych i koñcowych bia³ych znaków odbywa siê tak¿e
podczas przeliczania warto¶ci @code{$0}.  Na przyk³ad, przeanalizujmy taki
potok:

@example
$ echo '   a b c d' | awk '@{ print; $2 = $2; print @}'
@print{}    a b c d
@print{} a b c d
@end example

@noindent
Pierwsza instrukcja @code{print} wypisuje rekord tak, jak zosta³ odczytany,
z nienaruszonym pocz±tkowym bia³ym znakiem.  Przypisanie do @code{$2}
przebudowuje @code{$0} przez z³±czenie razem @code{$1} do @code{$NF},
rozdzielonych warto¶ci± @code{OFS}.  Poniewa¿ przy wykrywaniu @code{$1}
zignorowany zosta³ pocz±tkowy bia³y znak, nie sta³ siê on czê¶ci± nowego
@code{$0}.  Ostatecznie, ostatnia instrukcja @code{print} wypisuje nowe
@code{$0}.

@node Pola jednoznakowe, Separator pól w wierszu poleceñ, Regexp w podziale na pola, Separatory pól
@subsection Jak z ka¿dego znaku zrobiæ osobne pole

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex pola jednoznakowe
Zdarza siê, ¿e chcemy badaæ ka¿dy znak rekordu z osobna.  W @code{gawk} jest
to ³atwe, po prostu przypisujemy pusty ³añcuch (@code{""}) do @code{FS}.
W tym przypadku, ka¿dy pojedynczy znak rekordu stanie siê odrêbnym polem.
Oto przyk³ad:

@example
@group
$ echo a b | gawk 'BEGIN @{ FS = "" @}
>                  @{
>                      for (i = 1; i <= NF; i = i + 1)
>                          print "W polu", i, "jest", $i
>                  @}'
@print{} W polu 1 jest a
@print{} W polu 2 jest
@print{} W polu 3 jest b
@end group
@end example

@cindex ciemny k±t
Tradycyjnie, zachowanie siê programu przy @code{FS} równym @code{""} nie
by³o zdefiniowane.  W takim przypadku uniksowy @code{awk} traktowa³by ca³y
rekord jako maj±cy tylko jedno pole (c.k.).  W trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}),
@code{gawk} tak¿e bêdzie siê zachowywaæ siê w ten sposób, je¶li @code{FS}
bêdzie ³añcuchem pustym.

@node Separator pól w wierszu poleceñ, Podsumowanie podzia³u na pola, Pola jednoznakowe, Separatory pól
@subsection Ustalanie @code{FS} z wiersza poleceñ
@cindex @code{-F} opcja
@cindex separator pól, w wierszu poleceñ
@cindex wiersz poleceñ, nadawanie warto¶ci @code{FS}

Zmiennej @code{FS} mo¿na nadaæ warto¶æ w wierszu poleceñ.  Wykorzystujemy do
tego opcjê @samp{-F}.  Na przyk³ad:

@example
awk -F, '@var{program}' @var{pliki-wej¶ciowe}
@end example

@noindent
powoduje, ¿e @code{FS} bêdzie znakiem @samp{,}.  Zauwa¿, ¿e opcja ta
u¿ywa du¿ej litery @samp{F}.  W przeciwieñstwie do niej, ma³e @samp{-f}
okre¶la plik zawieraj±cy program @code{awk}.  W opcjach wiersza poleceñ
wielko¶æ liter jest istotna: opcje @samp{-F} i @samp{-f} nie maj± ze sob±
nic wspólnego.  Mo¿na stosowaæ obie równocze¶nie, do nadania warto¶ci
zmiennej @code{FS} @emph{i} pobrania programu @code{awk} z pliku.

Warto¶æ u¿yta jako argument opcji @samp{-F} przetwarzana jest w dok³adnie
taki sam sposób, jak przypisania do zmiennej wbudowanej @code{FS}.  To
znaczy, ¿e je¿eli separator pól zawiera znaki specjalne, to musz± one byæ
we w³a¶ciwy sposób cytowane.  Na przyk³ad, chc±c jako separator pól
zastosowaæ @samp{\}, musieliby¶my wpisaæ:

@example
# to samo, co FS = "\\"
awk -F\\\\ '@dots{}' pliki @dots{}
@end example

@noindent
Poniewa¿ @samp{\} s³u¿y w pow³oce do cytowania znaków, @code{awk} zobaczy
@samp{-F\\}.  Nastêpnie @code{awk} przetwarza @samp{\\} u¿ywaj±c znaków
specjalnych (@pxref{Sekwencje specjalne}), ostatecznie daj±c pojedynczy
@samp{\} stosowany jako separator rekordów.

@cindex cechy historyczne
Przypadkiem specjalnym jest to, ¿e w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}), je¿eli argumentem @samp{-F}
jest @samp{t}, to @code{FS} otrzymuje warto¶æ znaku tabulacji.  Jest to
spowodowane tym, ¿e je¶li wpiszemy w pow³oce @samp{-F\t}, bez
¿adnych cudzys³owów, to @samp{\} zostanie usuniêty, wiêc @code{awk}
stwierdza, ¿e naprawdê chcieli¶my, by pola by³y rozdzielane
tabulacjami, a nie literami @samp{t}.  Je¿eli rzeczywi¶cie chcemy rozdzielaæ
pola literami @samp{t}, to w wierszu poleceñ powinni¶my u¿yæ @samp{-v FS="t"}
(@pxref{Opcje, ,Opcje wiersza poleceñ}).

Na przyk³ad, skorzystajmy z pliku programu @code{awk} o nazwie
@file{baud.awk}, zawieraj±cego wzorzec @code{/300/} i akcjê @samp{print $1}.
Oto ten program:

@example
/300/   @{ print $1 @}
@end example

Ustalimy te¿ warto¶æ @code{FS} na znak @samp{-}, i uruchomimy program
z plikiem danych @file{BBS-list}.  Poni¿sze polecenie wypisuje nazwy
BBS-ów, które dzia³aj± z prêdko¶ci± 300 baud, z pierwszymi trzema cyframi
numerów telefonów:

@c tweaked to make the tex output look better in @smallbook
@example
@group
$ awk -F- -f baud.awk BBS-list
@print{} aardvark     555
@print{} alpo
@print{} barfly       555
@dots{}
@end group
@ignore
@print{} bites        555
@print{} camelot      555
@print{} core         555
@print{} fooey        555
@print{} foot         555
@print{} macfoo       555
@print{} sdace        555
@print{} sabafoo      555
@end ignore
@end example

@noindent
Zwróæ uwagê na pierwszy wiersz wynikowy.  W pierwotnym pliku
(@pxref{Przyk³adowe pliki danych, , Pliki danych do przyk³adów}), drugi wiersz
wygl±da tak:

@example
alpo-net     555-3412     2400/1200/300     A
@end example

Zamiast @samp{-} w numerze telefonu, jak to by³o zamierzone, jako separator
rekordów zosta³ zastosowany znak @samp{-} bêd±cy czê¶ci± nazwy systemu.
Pokazuje to, dlaczego powinni¶my byæ rozwa¿ni przy wyborze separatorów
pól i rekordów.

Na wielu systemach uniksowych ka¿dy z u¿ytkowników ma osobny wpis
w pliku hase³, po jednym wierszu na u¿ytkownika.  Dane w tych wierszach s±
rozdzielane dwukropkami.  Pierwsze pole jest nazw± zg³oszeniow± u¿ytkownika
(login), a drugie jego zaszyfrowanym has³em.  Pozycja w pliku hase³ mo¿e
wygl±daæ tak:

@example
arnold:xyzzy:2076:10:Arnold Robbins:/home/arnold:/bin/sh
@end example

Poni¿szy program przeszukuje systemowy plik hase³ i wypisuje pozycje
u¿ytkowników nie maj±cych hase³:

@example
awk -F: '$2 == ""' /etc/passwd
@end example

@node Podsumowanie podzia³u na pola,  , Separator pól w wierszu poleceñ, Separatory pól
@subsection Podsumowanie podzia³u na pola

@cindex @code{awk} jêzyk, wersja POSIX
@cindex POSIX @code{awk}
Zgodnie ze standardem POSIX, @code{awk} powinien zachowywaæ siê tak, jakby
ka¿dy rekord by³ dzielony na pola w momencie jego odczytu.  W szczególno¶ci
oznacza to, ¿e mo¿emy zmieniæ warto¶æ @code{FS} po przeczytaniu rekordu,
a warto¶ci pól (tj.@: sposób, w jaki s± podzielone) powinny odzwierciedlaæ
star± warto¶æ @code{FS}, a nie now±.

@cindex ciemny k±t
@cindex @code{sed}, narzêdzie
@cindex narzêdzie @code{sed}
@cindex edytor strumieniowy
Jednak wiele implementacji @code{awk} nie dzia³a w ten sposób.  Zamiast
tego, odk³adaj± podzia³ na pola do momentu, gdy wyst±pi faktyczne
odwo³anie siê pola.  Pola zostan± rozdzielone przy zastosowaniu
@emph{bie¿±cej} warto¶ci @code{FS}! (c.k.)  Zachowanie takie mo¿e byæ trudne
do rozpoznania.  Poni¿szy przyk³ad ilustruje ró¿nicê pomiêdzy tymi dwoma
metodami.  (Polecenie @code{sed}@footnote{Narzêdzie @code{sed} jest
``edytorem strumieniowym''. Jego zachowanie siê jest równie¿ zdefiniowane
standardem POSIX.} wypisuje tylko pierwszy wiersz @file{/etc/passwd}.)

@example
sed 1q /etc/passwd | awk '@{ FS = ":" ; print $1 @}'
@end example

@noindent
zwykle wypisze

@example
root
@end example

@noindent
w niepoprawnej implementacji @code{awk}, podczas gdy @code{gawk} wypisze
co¶ w rodzaju

@example
root:nSijPlPhZZwgE:0:0:Root:/:
@end example

Poni¿sza tabela podsumowuje sposoby podzia³u na pola, w zale¿no¶ci od
warto¶ci @code{FS}.  (@samp{==} oznacza ``jest równe''.)

@c @cartouche
@table @code
@item FS == " "
Pola oddzielane s± ci±gami bia³ych znaków.  Pocz±tkowe i koñcowe bia³e znaki
s± ignorowane.  Jest to ustawienie domy¶lne.

@item FS == @var{inny pojedynczy znak}
Pola rozdzielane s± ka¿dym wyst±pieniem zadanego znaku.  Wielokrotne
s±siednie wyst±pienia rozgraniczaj± puste pola, tak samo jak wyst±pienia
na pocz±tku i na koñcu rekordu.  Znak separuj±cy mo¿e byæ nawet metaznakiem
wyra¿eñ regularnych; nie musi byæ cytowany.

@item FS == @var{regexp}
Pola oddzielane s± wyst±pieniami znaków pasuj±cych do @var{regexp}.
Pocz±tkowe i koñcowe dopasowania @var{regexp} rozdzielaj± puste pola.

@item FS == ""
Ka¿dy poszczególny znak rekordu staje siê pojedynczym polem.
@end table
@c @end cartouche

@node Sta³y rozmiar, Wiele wierszy, Separatory pól, Czytanie plików
@section Czytanie danych o sta³ej szeroko¶ci

(Niniejsza sekcja opisuje cechê rozszerzon±, eksperymentaln±.  Pocz±tkuj±cy
u¿ytkownicy @code{awk} mog± j± pomin±æ przy pierwszym czytaniu.)

W wersji 2.13 @code{gawk} wprowadzono now± funkcjê do obs³ugi pól o sta³ych
szeroko¶ciach, bez wyró¿nialnego separatora pól.
Dane tego rodzaju pojawiaj± siê, na przyk³ad, jako wej¶cie starych programów
w FORTRAN-ie, gdzie liczby nastêpuj± bezpo¶rednio po sobie; albo jako
wyj¶cie programów nie przewiduj±cych zastosowania go jako wej¶cia dla innych
programów.

Przyk³adem tego ostatniego jest tabela, gdzie wszystkie kolumny wyrównano
za pomoc± zmiennej liczby spacji a @emph{puste pola s± po prostu
spacjami}.  Jasne jest, ¿e w tym przypadku normalny podzia³ na pola oparty
na @code{FS} nie zadzia³a dobrze.  Mimo, ¿e przeno¶ny program @code{awk}
mo¿e stosowaæ serie wywo³añ @code{substr} w odniesieniu do @code{$0}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}),
jest to niewygodne i nieefektywne przy wiêkszej liczbie pól.

Podzia³ rekordu wej¶ciowego na pola o sta³ej szeroko¶ci wyszczególniany jest
przez przypisanie zmiennej wbudowanej @code{FIELDWIDTHS} ³añcucha
zawieraj±cego rozdzielone spacjami liczby.  Ka¿da z nich okre¶la szeroko¶æ
pola @emph{³±cznie} z kolumnami pomiêdzy polami.  Chc±c pomin±æ kolumny
pomiêdzy polami, podajemy ich szeroko¶ci jako odrêbne pola, pó¼niej
ignorowane.

Poni¿sze dane s± wyj¶ciem z uniksowego narzêdzia @code{w}.
Przydadz± siê jako ilustracja zastosowania @code{FIELDWIDTHS}.

@example
@group
 10:06pm  up 21 days, 14:04,  23 users
User     tty       login@  idle   JCPU   PCPU  what
hzuo     ttyV0     8:58pm            9      5  vi p24.tex
hzang    ttyV3     6:37pm    50                -csh
eklye    ttyV5     9:53pm            7      1  em thes.tex
dportein ttyV6     8:17pm  1:47                -csh
gierd    ttyD3    10:00pm     1                elm
dave     ttyD4     9:47pm            4      4  w
brent    ttyp0    26Jun91  4:46  26:46   4:41  bash
dave     ttyq4    26Jun9115days     46     46  wnewmail
@end group
@end example

Pokazany ni¿ej program pobiera powy¿sze wej¶cie, przekszta³ca czas
nieaktywno¶ci (iddle time) na liczbê sekund i wypisuje pierwsze dwa pola
oraz wyliczony czas nieaktywno¶ci.  (Program wykorzystuje kilka cech
@code{awk}, o których jeszcze nie mówiono.)

@example

BEGIN  @{ FIELDWIDTHS = "9 6 10 6 7 7 35" @}
NR > 2 @{
    idle = $4
    sub(/^  */, "", idle)   # obcina pocz±tkowe spacje
    if (idle == "")
        idle = 0
@group
    if (idle ~ /:/) @{
        split(idle, t, ":")
        idle = t[1] * 60 + t[2]
    @}
@end group
@group
    if (idle ~ /days/)
        idle *= 24 * 60 * 60

    print $1, $2, idle
@}
@end group
@end example

Oto wyniki dzia³ania programu z naszymi danymi:

@example
hzuo      ttyV0  0
hzang     ttyV3  50
eklye     ttyV5  0
dportein  ttyV6  107
gierd     ttyD3  1
dave      ttyD4  0
brent     ttyp0  286
dave      ttyq4  1296000
@end example

Innym (zapewne bardziej praktycznym) przyk³adem danych wej¶ciowych o sta³ej
szeroko¶ci by³oby wej¶cie ze sterty kart do g³osowania.
W niektórych czê¶ciach Stanów Zjednoczonych g³osuj±cy zaznaczaj± swój wybór
robi±c dziurki w kartach komputerowych.  Nastêpnie karty s± przetwarzane,
w celu zliczenia g³osów na konkretnego kandydata czy jak±¶ sporn± kwestiê.
Poniewa¿ uprawniony mo¿e zdecydowaæ o nieoddaniu g³osu w jakiej¶ sprawie,
ka¿da kolumna karty mo¿e byæ pusta.  Program @code{awk} do przetwarzania
takich danych móg³by wykorzystaæ funkcjê @code{FIELDWIDTHS} do uproszczenia
czytania.  (Oczywi¶cie, znalezienie @code{gawk} dzia³aj±cego na systemie
z czytnikami kart jest osobn± spraw±!)

@ignore
Exercise: Write a ballot card reading program
@end ignore

Przypisanie warto¶ci do @code{FS} powoduje, ¿e @code{gawk} powraca do
stosowania @code{FS} do podzia³u na pola.  By to spowodowaæ wystarczy u¿yæ
@samp{FS = FS}, bez potrzeby znajomo¶ci aktualnej warto¶ci @code{FS}.

Funkcja ta jest wci±¿ eksperymentalna i mo¿e siê z czasem zmieniaæ.
Zauwa¿, ¿e w szczególno¶ci, @code{gawk} nie usi³uje zweryfikowaæ
poprawno¶ci warto¶ci u¿ytych w @code{FIELDWIDTHS}.

@node Wiele wierszy, Getline, Sta³y rozmiar, Czytanie plików
@section Rekordy wielowierszowe

@cindex rekordy wielowierszowe
@cindex wej¶cie, rekordy wielowierszowe
@cindex odczyt plików, rekordy wielowierszowe
@cindex rekordy, rekordy wielowierszowe
W niektórych bazach danych pojedynczy wiersz nie mo¿e w wygodny sposób
przechowaæ ca³o¶ci informacji o jednej pozycji.  W takich przypadkach
mo¿emy  u¿yæ rekordów wielowierszowych.

Pierwszym krokiem do tego jest wybór formatu danych:  skoro rekordy nie s±
zdefiniowane jako pojedyncze wiersze, to jak chcemy je zdefiniowaæ?
Co powinno rozdzielaæ rekordy?

Jedn± z technik jest u¿ycie do rozdzielania rekordów jakiego¶ niecodziennego
znaku czy ³añcucha.  Na przyk³ad, mo¿emy wykorzystaæ do tego znak wysuwu
strony (w @code{awk}, podobnie jak w C, zapisywany jako @samp{\f}),
robi±c rekordem ka¿d± stronê pliku.  Równie dobrze mo¿e byæ zastosowany
ka¿dy inny znak, pod warunkiem, ¿e nie bêdzie on czê¶ci± danych rekordu.

Inn± technik± jest rozdzielanie rekordów pustymi wierszami.  Na zasadzie
specjalnego wyj±tku pusty
³añcuch jako warto¶æ @code{RS} wskazuje, ¿e rekordy s± oddzielane jednym lub
wieloma pustymi wierszami.  Nastêpny rekord za¶ nie rozpoczyna siê a¿ do
napotkania pierwszego po nich niepustego wiersza -- bez wzglêdu na to, ile
wyst±pi kolejnych pustych wierszy, s± one uwa¿ane za jeden separator
rekordu.

@cindex lewe najd³u¿sze dopasowanie
@cindex dopasowanie, lewe najd³u¿sze
Ten sam efekt, co przy @samp{RS = ""}, mo¿na osi±gn±æ przypisuj±c @code{RS}
warto¶æ @code{"\n\n+"}.  To wyra¿enie regularne dopasowuje znak nowej linii
na koñcu rekordu, i jednej lub wiêcej pustych wierszy po rekordzie.
Dodatkowo, wyra¿enia regularne, je¶li jest wybór, zawsze dopasowuj± pierwsz±
z lewej najd³u¿sz± sekwencjê
(@pxref{Lewe najd³u¿sze, ,Jak bardzo pasuje tekst?}).
Zatem nastêpny rekord nie rozpocznie siê a¿ do napotkania wystêpuj±cego
po bie¿±cym niepustego wiersza -- bez wzglêdu na to, ile wyst±pi kolejnych
pustych wierszy, s± one uwa¿ane za jeden separator rekordu.

@cindex ciemny k±t
Istnieje istotna ró¿nica pomiêdzy @samp{RS = ""} a @samp{RS = "\n\n+"}.
W pierwszym przypadku, pocz±tkowe znaki nowej linii z pliku wej¶ciowego s±
ignorowane, a je¶li plik koñczy siê dodatkowymi pustymi wierszami po
ostatnim rekordzie, to ostatni znak nowej linii jest z rekordu usuwany.
W drugim przypadku, to specjalne przetwarzanie nie jest wykonywane (c.k.).

Teraz, gdy wej¶cie jest ju¿ podzielone na rekordy, drugim krokiem jest
rozdzielenie pól rekordu.  Jedn± z metod jest podzia³ ka¿dego z wierszy
na pola w zwyk³y sposób.  Dzieje siê tak domy¶lnie w wyniku specjalnej
cechy: gdy @code{RS} jest ³añcuchem pustym, znak nowej linii @emph{zawsze}
dzia³a jako separator pól.  Jest to wykonywane dodatkowo oprócz
podzia³ów na pola wynikaj±cych z @code{FS}.

Pierwotnym powodem tego specjalnego wyj±tku by³o prawdopodobnie zapewnienie
przydatnego zachowania siê programu w przypadku domy¶lnym (tj.@: @code{FS}
jest równe @w{@code{" "}}).  Cecha ta mo¿e byæ k³opotliwa, je¿eli faktycznie
nie chcemy rozdzielania rekordów przez znak nowej linii, gdy¿ nie ma sposobu
by tego unikn±æ.  Jednak mo¿na to obej¶æ wykorzystuj±c funkcjê @code{split}
do rêcznego podzia³u rekordu
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

Inn± metod± podzia³u na pola jest umieszczenie ka¿dego pola w osobnym
wierszu: do jej wykorzystania wystarczy przypisaæ zmiennej @code{FS} ³añcuch
@code{"\n"}.  (To proste wyra¿enie regularne dopasowuje pojedynczy znak
nowej linii.)

Praktycznym przyk³adem pliku danych zorganizowanego w ten sposób mo¿e byæ
lista adresowa, gdzie ka¿da pozycja oddzielona jest pustymi wierszami.
Za³ó¿my, ¿e mamy tak± listê w pliku @file{addresses}:

@c POTRZEBNE
@page
@example
Jane Doe
123 Main Street
Anywhere, SE 12345-6789

John Smith
456 Tree-lined Avenue
Smallville, MW 98765-4321
@dots{}
@end example

@noindent
Prosty program do przetwarzania tych danych mo¿e byæ taki:

@example
@group
# addrs.awk --- prosty program listy adresowej

# Rekordy oddzielone s± pustymi wierszami
# ka¿dy wiersz jest jednym polem.
BEGIN @{ RS = "" ; FS = "\n" @}

@{
      print "Name is:", $1
      print "Address is:", $2
      print "City and State are:", $3
      print ""
@}
@end group
@end example

Uruchomienie programu daje nastêpuj±ce wyj¶cie:

@example
@group
$ awk -f addrs.awk addresses
@print{} Name is: Jane Doe
@print{} Address is: 123 Main Street
@print{} City and State are: Anywhere, SE 12345-6789
@print{}
@end group
@group
@print{} Name is: John Smith
@print{} Address is: 456 Tree-lined Avenue
@print{} City and State are: Smallville, MW 98765-4321
@print{}
@dots{}
@end group
@end example

@xref{Program labels, ,Wypisywanie etykiet adresowych}, gdzie umieszczono
bardziej realistyczny program zajmuj±cy siê listami adresowymi.

Poni¿sza tabela podsumowuje sposoby podzia³u na rekordy, w zale¿no¶ci
od warto¶ci @code{RS}. (@samp{==} oznacza ``jest równe''.)

@c @cartouche
@table @code
@item RS == "\n"
Rekordy rozdzielane s± znakiem nowej linii (@samp{\n}).  W wyniku tego,
ka¿dy wiersz pliku danych, tak¿e pusty, jest osobnym rekordem.  Jest
to ustawienie domy¶lne.

@item RS == @var{inny pojedynczy znak}
Rekordy s± oddzielane ka¿dym wyst±pieniem zadanego znaku. Wielokrotne
s±siednie wyst±pienia rozgraniczaj± puste rekordy.

@item RS == ""
Rekordy s± rozdzielane ci±gami pustych wierszy.  Znak nowej linii zawsze
s³u¿y jako separator rekordu, dodatkowo, oprócz warto¶ci @code{FS}.
Pocz±tkowe i koñcowe znaki nowej linii w pliku s± ignorowane.

@item RS == @var{regexp}
Rekordy rozdzielane s± wyst±pieniami znaków pasuj±cych do @var{regexp}.
Pocz±tkowe i koñcowe dopasowania @var{regexp} oddzielaj± puste rekordy.
@end table
@c @end cartouche

@vindex RT
We wszystkich przypadkach @code{gawk} przypisuje zmiennej @code{RT} tekst
wej¶ciowy, jaki pasowa³ do warto¶ci podanej przez @code{RS}.

@node Getline, , Wiele wierszy, Czytanie plików
@section Odczyt bezpo¶redni przez @code{getline}

@findex getline
@cindex wej¶cie, bezpo¶rednie
@cindex bezpo¶rednie wej¶cie
@cindex wej¶cie, polecenie @code{getline}
@cindex odczyt plików, polecenie @code{getline}
Do tej pory pobierali¶my dane wej¶ciowe z g³ównego strumienia wej¶ciowego
@code{awk} -- albo standardowego wej¶cia (zwykle terminala, czasami
wyj¶cia innego programu) albo z plików wyszczególnionych w wierszu poleceñ.
Jêzyk @code{awk} ma specjalne polecenie wbudowane o nazwie
@code{getline}, które stosuje siê czytania wej¶cia pod bezpo¶redni± kontrol±
programisty.

@menu
* Wstêp do getline::            Wprowadzenie do funkcji @code{getline}.
* Zwyk³e getline::              U¿ycie @code{getline} bez argumentów.
* Getline/Zmienna::             U¿ycie @code{getline} do zmiennej.
* Getline/Plik::                U¿ycie @code{getline} z pliku.
* Getline/Zmienna/Plik::        U¿ycie @code{getline} z pliku do zmiennej.
* Getline/Potok::               U¿ycie @code{getline} z potoku.
* Getline/Zmienna/Potok::       U¿ycie @code{getline} z potoku do zmiennej.
* Podsumowanie getline::        Podsumowanie wariantów @code{getline}.
@end menu

@node Wstêp do getline, Zwyk³e getline, Getline, Getline
@subsection Wprowadzenie do @code{getline}

Polecenie to stosowane jest na kilka ró¿nych sposobów i @emph{nie} powinno
byæ u¿ywane przez pocz±tkuj±cych.  Jest opisane tutaj, gdy¿ rozdzia³
traktuje o wej¶ciu.  Przyk³ady wystêpuj±ce po obja¶nieniu polecenia
@code{getline} zawieraj± jeszcze nie omawiany materia³.  Z tego powodu,
powiniene¶ powróciæ do tej czê¶ci i przestudiowaæ polecenie @code{getline}
@emph{po} przegl±dniêciu reszty ksi±¿ki i nabraniu dobrej znajomo¶ci
sposobu dzia³ania @code{awk}.

@vindex ERRNO
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex @code{getline}, zwracane warto¶ci
@code{getline} zwraca jeden je¶li znajdzie rekord, a zero je¶li napotkano
koniec pliku.  Je¿eli podczas pobierania rekordu pojawi siê b³±d, jak wtedy,
gdy plik nie mo¿e zostaæ otwarty, to @code{getline} zwraca @minus{}1.
W tym przypadku @code{gawk} przypisuje zmiennej @code{ERRNO} ³añcuch
opisuj±cy zaistnia³y b³±d.

W kolejnych przyk³adach, @var{polecenie} oznacza warto¶æ ³añcuchow±
reprezentuj±c± polecenie pow³oki.

@node Zwyk³e getline, Getline/Zmienna, Wstêp do getline, Getline
@subsection U¿ycie @code{getline} bez argumentów

Polecenie @code{getline} bez argumentów s³u¿y do czytania wej¶cia
z bie¿±cego pliku wej¶ciowego.  W tym przypadku odczytuje ono tylko kolejny
rekord wej¶ciowy i rozbija go na pola.  Przydatne, gdy zakoñczyli¶my
przetwarzanie bie¿±cego rekordu, ale chcemy @emph{od razu} wykonaæ
specjalne przetwarzanie nastêpnego.  Oto przyk³ad:

@example
@group
awk '@{
     if ((t = index($0, "/*")) != 0) @{
          # warto¶ci± bêdzie "" je¶li t jest 1
          tmp = substr($0, 1, t - 1)
          u = index(substr($0, t + 2), "*/")
          while (u == 0) @{
               if (getline <= 0) @{
                    m = "unexpected EOF or error"
                    m = (m ": " ERRNO)
                    print m > "/dev/stderr"
                    exit
               @}
               t = -1
               u = index($0, "*/")
          @}
@end group
@group
          # wyra¿enie bêdzie równe "" je¶li */
          # pojawi³o siê na koñcu wiersza
          $0 = tmp substr($0, t + u + 3)
     @}
     print $0
@}'
@end group
@end example

Ten program @code{awk} usuwa z wej¶cia wszystkie komentarze typu u¿ywanego
w C, @samp{/* @dots{} */}.  Zastêpuj±c @samp{print $0} innymi instrukcjami,
mo¿na wykonywaæ bardziej skomplikowane przetwarzanie odkomentowanego
wej¶cia, na przyk³ad, wyszukiwanie dopasowañ wyra¿enia regularnego.
Program ma drobny feler -- nie dzia³a je¶li w tym samym wierszu koñczy
siê jeden z komentarzy a zaczyna inny.

@ignore
Exercise,
write a program that does handle multiple comments on the line.
@end ignore

Taka postaæ polecenia @code{getline} ustala nowe warto¶ci @code{NF}
(liczba pól; @pxref{Pola, ,Badanie pól}),
@code{NR} (liczba dotychczas odczytanych
rekordów; @pxref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}),
@code{FNR} (liczba rekordów przeczytanych z tego pliku wej¶ciowego)
oraz @code{$0}.

@cindex ciemny k±t
@strong{Zauwa¿:} nowa warto¶æ @code{$0} jest u¿ywana przy sprawdzaniu
wzorców ewentualnych kolejnych regu³.  Pierwotna warto¶æ @code{$0}, jaka
wywo³a³a regu³ê, w której wykonano @code{getline} jest tracona (c.k.).
Natomiast instrukcja @code{next} postêpuje inaczej: czyta nowy rekord, lecz
natychmiast rozpoczyna jego normalne przetwarzanie, poczynaj±c od pierwszej
regu³y programu.
@xref{Instrukcja next, ,Instrukcja @code{next}}.

@node Getline/Zmienna, Getline/Plik, Zwyk³e getline, Getline
@subsection U¿ycie @code{getline} do zmiennej

Konstrukcjê @samp{getline @var{zmn}} wykorzystujemy do wczytania nastêpnego
rekordu z wej¶cia @code{awk} do zmiennej @var{zmn}. Nie jest dokonywane
¿adne inne przetwarzanie.

Za³ó¿my na przyk³ad, ¿e nastêpny wiersz jest komentarzem lub ³añcuchem
specjalnym, i chcemy go przeczytaæ bez wyzwalania ¿adnej z regu³.  Ta postaæ
@code{getline} pozwala na odczyt wiersza i zachowanie go w zmiennej, tak ¿e
g³ówna pêtla @code{awk}, czytaj-wiersz-i-sprawd¼-ka¿d±-regu³ê, nigdy go nie
zauwa¿y.

Poni¿szy przyk³ad zamienia miejscami ka¿de dwa wiersze wej¶cia. Na
przyk³ad, przy podanych:

@example
wan
tew
free
phore
@end example

@noindent
wypisuje:

@example
tew
wan
phore
free
@end example

@noindent
Oto program:

@example
@group
awk '@{
     if ((getline tmp) > 0) @{
          print tmp
          print $0
     @} else
          print $0
@}'
@end group
@end example

Polecenie @code{getline} u¿yte w ten sposób nadaje jedynie warto¶ci
zmiennym @code{NR} i @code{FNR} (i oczywi¶cie, @var{zmn}).  Rekord nie
jest dzielony na pola, wiêc warto¶ci pól (³±cznie z @code{$0}) i warto¶æ
@code{NF} nie zmieniaj± siê.

@node Getline/Plik, Getline/Zmienna/Plik, Getline/Zmienna, Getline
@subsection U¿ycie @code{getline} z pliku

@cindex przekierowanie wej¶cia
@cindex wej¶cie, przekierowanie
Konstrukcjê @samp{getline < @var{plik}} stosujemy do odczytu nastêpnego
rekordu z pliku @var{plik}.  @var{plik} jest tu okre¶laj±cym nazwê pliku
wyra¿eniem o warto¶ci ³añcuchowej.  @samp{< @var{plik}} jest zwane
@dfn{przekierowaniem}, gdy¿ skierowuje wej¶cie tak, by pochodzi³o z innego
miejsca.

Na przyk³ad, poni¿szy program napotkaj±c pierwsze pole o warto¶ci 10
w bie¿±cym pliku wej¶ciowym czyta rekord wej¶ciowy z pliku
@file{secondary.input}.

@example
@group
awk '@{
    if ($1 == 10) @{
         getline < "secondary.input"
         print
    @} else
         print
@}'
@end group
@end example

Poniewa¿ nie jest u¿ywany g³ówny strumieñ wej¶ciowy, warto¶ci @code{NR}
i @code{FNR} pozostaj± bez zmian.  Rekord jest jednak dzielony na pola
w normalny sposób, wiêc zmieniaj± siê warto¶ci @code{$0} i pozosta³ych pól.
Tak¿e warto¶æ @code{NF}.

@c Thanks to Paul Eggert for initial wording here
Zgodnie ze standardem POSIX, @samp{getline < @var{wyra¿enie}} jest
niejednoznaczne je¶li @var{wyra¿enie} zawiera nieujête w nawiasy operatory
inne ni¿ @samp{$}.  Na przyk³ad, @samp{getline < katalog "/" plik} jest
niejednoznaczne, bo operator konkatenacji nie zosta³ umieszczony
w nawiasach, i powinno byæ zapisane jako @samp{getline < (katalog "/"
plik)} je¶li chcemy, by program by³ przeno¶ny na inne implementacje
@code{awk}.

@node Getline/Zmienna/Plik, Getline/Potok, Getline/Plik, Getline
@subsection U¿ycie @code{getline} z pliku do zmiennej

Konstrukcja @samp{getline @var{zmn} < @var{plik}} s³u¿y do odczytu wej¶cia
z pliku @var{plik} i umieszczenia go w zmiennej @var{zmn}.  Jak powy¿ej,
@var{plik} jest wyra¿eniem o warto¶ci ³añcuchowej okre¶laj±cym nazwê pliku,
z którego ma nast±piæ czytanie.

W tej wersji @code{getline}, nie jest zmieniana ¿adna ze zmiennych
wbudowanych, a rekord nie jest dzielony na pola.  Jedyn± zmienian± zmienn±
jest @var{zmn}.

@ifinfo
@c Thanks to Paul Eggert for initial wording here
Zgodnie ze standardem POSIX, @samp{getline @var{zmn} < @var{wyra¿enie}} jest
niejednoznaczne je¶li @var{wyra¿enie} zawiera nieujête w nawiasy operatory
inne ni¿ @samp{$}.  Na przyk³ad, @samp{getline @var{zmn} < katalog "/" plik}
jest niejednoznaczne, bo operator konkatenacji nie zosta³ umieszczony
w nawiasach, i powinno byæ zapisane jako
@samp{getline @var{zmn} < (katalog "/" plik)} je¶li chcemy, by program by³
przeno¶ny na inne implementacje @code{awk}.
@end ifinfo

Na przyk³ad, poni¿szy program kopiuje wszystkie pliki wej¶ciowe na wyj¶cie,
z wyj±tkiem rekordów zawieraj±cych @w{@samp{@@include @var{nazwapliku}}}.
Taki rekord zastêpowany jest zawarto¶ci± pliku @var{nazwapliku}.

@example
@group
awk '@{
     if (NF == 2 && $1 == "@@include") @{
          while ((getline line < $2) > 0)
               print line
          close($2)
     @} else
          print
@}'
@end group
@end example

Zauwa¿ tu, ¿e nazwa dodatkowego pliku wej¶cia nie jest wbudowana
w program.  Brana jest wprost z danych, z drugiego pola wiersza
@samp{@@include}.

Funkcja @code{close} wywo³ywana jest w celu zagwarantowania, ¿e je¿eli
w wej¶ciu pojawi± siê dwa identyczne wiersze @samp{@@include}, to ca³y
wyszczególniony przez nie plik bêdzie w³±czony dwukrotnie.
@xref{Zamykanie plików i potoków, ,Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych}.

Jednym z braków tego programu jest to, ¿e nie przetwarza on
zagnie¿d¿onych instrukcji @samp{@@include} (instrukcji @samp{@@include}
w do³±czanych plikach), jak robi³by to prawdziwy preprocesor makr.
@xref{Program igawk, ,£atwa metoda korzystania z funkcji bibliotecznych}, gdzie podano
program obs³uguj±cy zagnie¿d¿one instrukcje @samp{@@include}.

@node Getline/Potok, Getline/Zmienna/Potok, Getline/Zmienna/Plik, Getline
@subsection U¿ycie @code{getline} z potoku

@cindex potok wej¶ciowy
@cindex wej¶cie, potok
Do @code{getline} mo¿na przekazaæ potokiem wyj¶cie dowolnego polecenia,
korzystaj±c ze sk³adni @samp{@var{polecenie} | getline}.  W takim przypadku,
³añcuch @var{polecenie} uruchamiany jest jako polecenie pow³oki, a jego
wyj¶cie przekazywane jest potokiem do @code{awk}, gdzie bêdzie u¿yte jako
wej¶cie.  Ta postaæ @code{getline} czyta z potoku po jednym rekordzie
naraz.

Na przyk³ad, poni¿szy program kopiuje swoje wej¶cie na wyj¶cie, z wyj±tkiem
wierszy rozpoczynaj±cych siê od @samp{@@execute}, które s± zastêpowane
wyj¶ciem utworzonym przez uruchomienie pozosta³ej czê¶ci wiersza jako
polecenia pow³oki:

@example
@group
awk '@{
     if ($1 == "@@execute") @{
          tmp = substr($0, 10)
          while ((tmp | getline) > 0)
               print
          close(tmp)
     @} else
          print
@}'
@end group
@end example

@noindent
Funkcja @code{close} jest wywo³ywana w celu zagwarantowania, ¿e je¶li
w wej¶ciu pojawi± siê dwa identyczne wiersze @samp{@@execute}, to polecenie
zostanie wykonane dla ka¿dego z nich.
@xref{Zamykanie plików i potoków, ,Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych}.
@c Exercise!!
@c This example is unrealistic, since you could just use system

Przy podanym wej¶ciu:

@example
@group
foo
bar
baz
@@execute who
bletch
@end group
@end example

@noindent
program ten mo¿e utworzyæ:

@example
@group
foo
bar
baz
arnold     ttyv0   Jul 13 14:22
miriam     ttyp0   Jul 13 14:23     (murphy:0)
bill       ttyp1   Jul 13 14:23     (murphy:0)
bletch
@end group
@end example

@noindent
Zwróæ uwagê, ¿e program uruchomi³ polecenie @code{who} i wypisa³ wynik.
(Je¶li wypróbujesz go we w³asnym systemie, otrzymasz oczywi¶cie inne
rezultat, pokazuj±cy, kto jest zalogowany w twoim systemie.)

Ta odmiana @code{getline} dokonuje podzia³u rekordu na pola, nadaje
warto¶æ @code{NF} i przelicza warto¶æ @code{$0}.  Warto¶ci @code{NR}
i @code{FNR} nie s± zmieniane.

@c Thanks to Paul Eggert for initial wording here
Zgodnie ze standardem POSIX, @samp{@var{wyra¿enie} | getline} jest
niejednoznaczne je¶li @var{wyra¿enie} zawiera nieujête w nawiasy operatory
inne ni¿ @samp{$}.  Na przyk³ad, @samp{"echo " "date" | getline}
jest niejednoznaczne, bo operator konkatenacji nie zosta³ umieszczony
w nawiasach, i powinno byæ zapisane jako
@samp{("echo " "date") | getline} je¶li chcemy, by program by³
przeno¶ny na inne implementacje @code{awk}.
(Zdarza siê, ¿e @code{gawk} pojmuje to prawid³owo, ale nie powiniene¶
na tym polegaæ.  Tak czy owak, nawiasy u³atwiaj± czytanie.)

@node Getline/Zmienna/Potok, Podsumowanie getline, Getline/Potok, Getline
@subsection U¿ycie @code{getline} z potoku do zmiennej

Gdy u¿yjemy @samp{@var{polecenie} | getline @var{zmn}}, wyj¶cie polecenia
@var{polecenie} przekazywane jest potokiem do @code{getline} i w zmienn±
@var{zmn}.  Na przyk³ad, poni¿szy program, wykorzystuj±c narzêdzie
@code{date}, czyta bie¿±c± datê i czas do zmiennej @code{current_time}
a nastêpnie j± wypisuje.

@example
@group
awk 'BEGIN @{
     "date" | getline current_time
     close("date")
     print "Raport utworzono: " current_time
@}'
@end group
@end example

W tej wersji @code{getline}, nie jest zmieniana ¿adna ze zmiennych
wbudowanych.  Rekord nie jest dzielony na pola.

@ifinfo
@c Thanks to Paul Eggert for initial wording here
Zgodnie ze standardem POSIX, @samp{@var{wyra¿enie} | getline @var{zmn}} jest
niejednoznaczne je¶li @var{wyra¿enie} zawiera nieujête w nawiasy operatory
inne ni¿ @samp{$}.  Na przyk³ad, @samp{"echo " "date" | getline @var{zmn}}
jest niejednoznaczne, bo operator konkatenacji nie zosta³ umieszczony
w nawiasach, i powinno byæ zapisane jako
@samp{("echo " "date") | getline @var{zmn}} je¶li chcemy, by program by³
przeno¶ny na inne implementacje @code{awk}.
(Zdarza siê, ¿e @code{gawk} pojmuje to prawid³owo, ale nie powiniene¶
na tym polegaæ.  Tak czy owak, nawiasy u³atwiaj± czytanie.)
@end ifinfo

@node Podsumowanie getline,  , Getline/Zmienna/Potok, Getline
@subsection Podsumowanie wariantów @code{getline}

We wszystkich postaciach @code{getline}, nawet tych, gdzie mo¿e byæ
aktualizowane @code{$0} i @code{NF}, rekord nie bêdzie sprawdzany ze
wszystkimi wzorcami programu @code{awk}, tak jak dzia³oby siê to,
gdyby by³ on normalnie czytany przez g³ówn± pêtlê przetwarzania @code{awk}.
Jednak¿e nowy rekord jest sprawdzany z ewentualnymi nastêpnymi
regu³ami.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex ograniczenia
@cindex implementacje, ograniczenia
Wiele z implementacji @code{awk} ogranicza ilo¶æ potoków, jakie program
@code{awk} mo¿e mieæ otwarte, do tylko jednego!  W @code{gawk} nie ma
takiego ograniczenia.  Mo¿na otworzyæ tyle potoków, na ile zezwoli
stosowany system operacyjny.

@vindex FILENAME
@cindex ciemny k±t
@cindex @code{getline}, nadawanie warto¶ci @code{FILENAME}
@cindex @code{FILENAME}, ustawiane przez @code{getline}
Przy korzystaniu z @code{getline} (bez przekierowania) wewn±trz regu³y
@code{BEGIN} pojawia siê interesuj±cy efekt uboczny.  Poniewa¿
nieprzekierowane @code{getline} czyta z plików wiersza poleceñ, pierwsze
polecenie @code{getline} powoduje, ¿e @code{awk} nadaje warto¶æ zmiennej
@code{FILENAME}.  Normalnie @code{FILENAME} nie posiada warto¶ci
wewn±trz regu³ @code{BEGIN}, poniewa¿ nie rozpoczêli¶my jeszcze
przetwarzania plików z wiersza poleceñ (c.k.).
(@xref{BEGIN/END, , Wzorce specjalne @code{BEGIN} i @code{END}},
równie¿ @pxref{Auto-ustalane, , Zmienne wbudowane nios±ce informacje}.)

Poni¿sza tabela podsumowuje sze¶æ wariantów @code{getline},
podaj±c, które zmienne wbudowane ka¿dy z nich zmienia.

@c @cartouche
@table @code
@item getline
Nadaje warto¶æ @code{$0}, @code{NF}, @code{FNR} i @code{NR}.

@item getline @var{zmn}
Nadaje warto¶æ @var{zmn}, @code{FNR} i @code{NR}.

@item getline < @var{plik}
Nadaje warto¶æ @code{$0} i @code{NF}.

@item getline @var{zmn} < @var{plik}
Nadaje warto¶æ @var{zmn}.

@item @var{polecenie} | getline
Nadaje warto¶æ @code{$0} i @code{NF}.

@item @var{polecenie} | getline @var{zmn}
Nadaje warto¶æ @var{zmn}.
@end table
@c @end cartouche

@node Wypisywanie, Wyra¿enia, Czytanie plików, Top
@chapter Wypisywanie wyj¶cia

@cindex drukowanie
@cindex wypisywanie
@cindex wyj¶cie
@cindex wyniki
Jedn± z najczêstszych akcji jest @dfn{wypisanie}, wydruk (print) czê¶ci
lub ca³o¶ci danych wej¶ciowych.  Do zrobienia prostego wydruku (wyj¶cia)
u¿ywamy instrukcji @code{print}.  Instrukcja @code{printf} daje mo¿liwo¶æ
bardziej wyszukanego formatowania.  Obie opisano w tym rozdziale.

@menu
* Print::                       Instrukcja @code{print}.
* Przyk³ady print::             Proste przyk³ady instrukcji @code{print}.
* Separatory wyj¶cia::          Separatory wyj¶cia. Jak je zmieniaæ.
* OFMT::                        Sterowanie wyj¶ciem numerycznym przez @code{print}.
* Printf::                      Instrukcja @code{printf}.
* Przekierowanie::              Jak przekierowywaæ wyj¶cie do wielu plików
                                czy potoków.
* Pliki specjalne::             Interpretacja nazw plików przez @code{gawk}.
                                @code{gawk} pozwala na dostêp
                                do odziedziczonych deskryptorów plików.
* Zamykanie plików i potoków::  Zamykanie potoków oraz plików wej¶ciowych
                                i wyj¶ciowych.
@end menu

@node Print, Przyk³ady print, Wypisywanie, Wypisywanie
@section Instrukcja @code{print}
@cindex @code{print}, instrukcja

Instrukcja @code{print} wykonuje wydruk za pomoc± prostego,
standaryzowanego formatowania.  Okre¶lamy tylko, w postaci listy separowanej
przecinkami, ³añcuchy lub liczby do wypisania.  Przy drukowaniu s±
one rozdzielane pojedynczymi spacjami, a na koñcu do³±czany jest znak nowej
linii.  Instrukcja ta wygl±da tak:

@example
print @var{elem1}, @var{elem2}, @dots{}
@end example

@noindent
Ca³o¶æ listy elementów mo¿e opcjonalnie byæ ujêta w nawiasy.  Nawiasy s±
niezbêdne je¶li który¶ z elementów jest wyra¿eniem z operatorem
relacyjnym.  Inaczej mog³oby ono byæ pomylone z przekierowaniem
(@pxref{Przekierowanie, ,Przekierowanie wyj¶cia @code{print} i @code{printf}}).

Elementy do wypisania mog± byæ sta³ymi ³añcuchami lub liczbami, polami
bie¿±cego rekordu (jak @code{$1}), zmiennymi, czy wreszcie dowolnymi
wyra¿eniami @code{awk}.  Warto¶ci numeryczne s± przekszta³cane na ³añcuchy,
a nastêpnie wypisywane.

Instrukcja @code{print} jest ca³kowicie ogólna, je¶li chodzi o to,
@emph{jakie} warto¶ci wypisaæ.  Jednak, z dwoma wyj±tkami, nie mo¿na
wyszczególniæ @emph{jak} maj± one zostaæ wypisane -- w ilu kolumnach, czy
stosowaæ notacjê wyk³adnicz± czy nie, i tak dalej.
(Opis wyj±tków, @pxref{Separatory wyj¶cia}
i @ref{OFMT, ,Sterowanie wyj¶ciem numerycznym przez @code{print}}.)
W tym celu potrzebujemy instrukcji @code{printf}
(@pxref{Printf, ,Using @code{printf} Statements for Fancier Printing}).

Zwyk³e polecenie @samp{print}, bez ¿adnych elementów, jest równowa¿nikiem
@samp{print $0}: wypisuje ca³y bie¿±cy rekord.
Do wypisania pustego wiersza stosujemy @samp{print ""}, gdzie @code{""}
jest ³añcuchem pustym.

Do wypisania sta³ego kawa³ka tekstu stosujemy sta³± ³añcuchow±, jak np.
@w{@code{"Nie panikuj"}}, jako jeden element.  Je¿eli zapomnimy o znakach
cudzys³owu, to tekst zostanie potraktowany jako wyra¿enie @code{awk}
i prawdopodobnie otrzymamy b³±d.  Nale¿y pamiêtaæ, ¿e pomiêdzy ka¿dymi
dwoma elementami wypisywana jest spacja.

Ka¿da z instrukcji @code{print} generuje co najmniej jeden wiersz wyj¶cia.
Ale nie jest ograniczona do jednego wiersza.  Je¿eli warto¶ci± którego¶ z
³añcuchów jest ³añcuch zawieraj±cy znak nowej linii, to znak ten jest
wypisywany razem z reszt± ³añcucha.  Pojedyncze @code{print} mo¿e w ten
sposób stworzyæ dowoln± liczbê wierszy.

@node Przyk³ady print, Separatory wyj¶cia, Print, Wypisywanie
@section Przyk³ady instrukcji @code{print}

Oto przyk³ad wypisywania ³añcucha, który zawiera wbudowane znaki nowej
linii (@samp{\n} jest sekwencj± specjaln±, s³u¿±c± do przedstawiania znaku
nowej linii, @pxref{Sekwencje specjalne}):

@example
@group
$ awk 'BEGIN @{ print "wiersz jeden\wiersz dwa\nwiersz trzy" @}'
@print{} wiersz jeden
@print{} wiersz dwa
@print{} wiersz trzy
@end group
@end example

Oto przyk³ad wypisuj±cy pierwsze dwa pola ka¿dego rekordu wej¶ciowego,
ze spacj± miêdzy nimi:

@example
@group
$ awk '@{ print $1, $2 @}' inventory-shipped
@print{} Jan 13
@print{} Feb 15
@print{} Mar 15
@dots{}
@end group
@end example

@cindex czêste pomy³ki
@cindex pomy³ki, czêste
@cindex b³êdy, czêste
Typow± pomy³k± przy stosowaniu instrukcji @code{print} jest pominiêcie
przecinka miêdzy dwoma elementami.  Czêsto w wyniku na wyj¶ciu elementy s±
zestawione razem, bez spacji.  Przyczyn± jest to, ¿e
postawienie obok siebie dwu wyra¿eñ ³añcuchowych oznacza w @code{awk}
ich konkatenacjê.  Oto ten sam program bez przecinka:

@example
@group
$ awk '@{ print $1 $2 @}' inventory-shipped
@print{} Jan13
@print{} Feb15
@print{} Mar15
@dots{}
@end group
@end example

Dla osoby nie znaj±cej pliku @file{inventory-shipped}, ¿aden z powy¿szych
przyk³adów wyj¶cia nie ma zbyt du¿ego sensu.  Wiersz nag³ówka na
pocz±tku nada³by mu jasno¶ci.  Dodajmy nag³ówek do naszej tabeli miesiêcy
(@code{$1}) i wys³anych zielonych paczek (@code{$2}).  Zrobimy to
wykorzystuj±c wzorzec @code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}) do
wymuszenia jednokrotnego wypisania nag³ówka:

@example
awk 'BEGIN @{  print "Mies. Paczki"
              print "----- ------" @}
           @{  print $1, $2 @}' inventory-shipped
@end example

@noindent
Odgad³e¶ ju¿, co siê stanie?  Po uruchomieniu program wypisze:

@example
@group
Mies. Paczki
----- ------
Jan 13
Feb 15
Mar 15
@dots{}
@end group
@end example

@noindent
Nag³ówki i dane tabeli nie s± wyrównane!  Mo¿emy to poprawiæ wypisuj±c
trochê spacji miêdzy naszymi dwoma polami:

@example
awk 'BEGIN @{ print "Mies. Paczki"
             print "----- ------" @}
           @{ print $1, "     ", $2 @}' inventory-shipped
@end example

Mo¿na sobie wyobraziæ, ¿e taka metoda wyrównywania kolumn mo¿e staæ siê do¶æ
skomplikowana, je¶li do poprawienia mamy wiele kolumn.  Zliczanie spacji dla
dwóch czy trzech kolumn mo¿e byæ proste, lecz przy wiêkszej liczbie ³atwo
siê pogubiæ.  Z tego powodu stworzono instrukcjê @code{printf}
(@pxref{Printf, ,Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}});
jedn± z jej specjalno¶ci jest wyrównywanie kolumn danych.

@cindex kontynuacja linii
@cindex linia, kontynuacja
Nawiasem mówi±c, mo¿na kontynuowaæ instrukcjê @code{print} czy
@code{printf} po prostu stawiaj±c znak nowej linii po przecinku
(@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}).

@node Separatory wyj¶cia, OFMT, Przyk³ady print, Wypisywanie
@section Separatory wyj¶cia

@cindex separator pól wyj¶ciowych, @code{OFS}
@cindex separator rekordów wyj¶ciowych, @code{ORS}
@vindex OFS
@vindex ORS
Jak uprzednio wspomniano, instrukcja @code{print} zawiera listê
rozdzielonych przecinkami elementów.  Na wyj¶ciu elementy te s± normalnie
oddzielane spacjami.  Tak jednak byæ nie musi -- pojedyncza spacja jest
tylko domy¶lna.  Mo¿na podaæ dowolny ³añcuch znaków, który bêdzie
stosowany jako @dfn{separator pól wyj¶ciowych} (output field separator).
Robi siê to przez przypisanie go zmiennej wbudowanej @code{OFS}.
Pocz±tkow± jej warto¶ci± jest ³añcuch @w{@code{" "}}, czyli pojedyncza
spacja.

Wyj¶cie z ca³ej instrukcji @code{print} nazywamy @dfn{rekordem wyj¶ciowym}
(output record). Ka¿da instrukcja @code{print} wypisuje jeden rekord
wyj¶ciowy a nastêpnie ³añcuch zwany @dfn{separatorem rekordów wyj¶ciowych}
(output record separator).  £añcuch ten jest okre¶lany przez zmienn±
wbudowan± @code{ORS}.  Pocz±tkow± warto¶ci± @code{ORS} jest ³añcuch
@code{"\n"}, tj. znak nowej linii. Zatem, normalnie, ka¿da zwyk³a instrukcja
@code{print} tworzy osobny wiersz.

Sposób, w jaki rozdzielane s± pola i rekordy wyj¶ciowe, mo¿e byæ zmieniany
przez przypisanie nowych warto¶ci zmiennym @code{OFS} i/lub @code{ORS}.
Zwyczajowym miejscem takiego przypisania jest wnêtrze regu³y @code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}), tak
by odby³o siê ono przed przetworzeniem czegokolwiek z wej¶cia.  Mo¿na to
równie¿ zrobiæ za pomoc± przypisañ w wierszu poleceñ, przed nazwami
plików wej¶ciowych, lub stosuj±c opcjê @samp{-v} wiersza poleceñ
(@pxref{Opcje, ,Opcje wiersza poleceñ}).

@ignore
Exercise,
Napisz na nowo program
@example
awk 'BEGIN @{ print "Mies. Paczki"
             print "----- ------" @}
           @{ print $1, "     ", $2 @}' inventory-shipped
@end example
stosuj±c now± warto¶æ @code{OFS}.
@end ignore

Poni¿szy przyk³ad wypisuje pierwsze i ostatnie pole ka¿dego rekordu
wej¶ciowego, rozdzielaj±c je ¶rednikami, z pustym wierszem dodanym po ka¿dym
wierszu:

@example
@group
$ awk 'BEGIN @{ OFS = ";"; ORS = "\n\n" @}
>            @{ print $1, $2 @}' BBS-list
@print{} aardvark;555-5553
@print{}
@print{} alpo-net;555-3412
@print{}
@print{} barfly;555-7685
@dots{}
@end group
@end example

Je¿eli warto¶æ @code{ORS} nie zawiera znaku nowej linii, to ca³o¶æ wyj¶cia
programu bêdzie po³±czona w jednym wierszu, chyba ¿e wyemitujemy znaki nowej
linii w jaki¶ inny sposób.

@node OFMT, Printf, Separatory wyj¶cia, Wypisywanie
@section Sterowanie wyj¶ciem numerycznym przez @code{print}
@vindex OFMT
@cindex numeryczny format wyj¶cia
@cindex format, wyj¶cie numeryczne
@cindex specyfikator formatu wyj¶ciowego, @code{OFMT}
Gdy stosujemy instrukcjê @code{print} to wypisania warto¶ci numerycznych,
@code{awk} wewnêtrznie przekszta³ca liczbê na ³añcuch znaków i wypisuje
ten ³añcuch.  Do wykonania tej konwersji @code{awk} wykorzystuje funkcjê
@code{sprintf}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Na razie wystarczy powiedzieæ, i¿ funkcja @code{sprintf} akceptuje
@dfn{specyfikacjê formatu}, która mówi jej jak formatowaæ liczby (lub
³añcuchy), i ¿e istnieje wiele ró¿nych sposobów, na jakie mo¿na
formatowaæ liczby.  Rozmaite specyfikacje formatu omawiane s± pe³niej
w @ref{Litery steruj±ce, , Litery steruj±ce formatem}.

Zmienna wbudowana @code{OFMT} zawiera domy¶ln± specyfikacjê formatu, który
@code{print} u¿ywa z @code{sprintf} gdy chce przekszta³ciæ liczbê na
³añcuch do wypisania.  Domy¶ln± warto¶ci± @code{OFMT} jest @code{"%.6g"}.
Podaj±c jako warto¶æ @code{OFMT} inne specyfikatory formatu zmieniamy
sposób, w jaki @code{print} bêdzie wypisywa³ liczby.  Jako krótki przyk³ad:

@example
@group
$ awk 'BEGIN @{
>   OFMT = "%.0f"  # wypisz liczby jako ca³kowite (zaokr±gla)
>   print 17.23 @}'
@print{} 17
@end group
@end example

@noindent
@cindex ciemny k±t
@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
Zgodnie ze standardem POSIX, zachowanie siê @code{awk} bêdzie
niezdefiniowane, je¶li @code{OFMT} zawiera co¶ innego ni¿ specyfikacjê
konwersji zmiennoprzecinkowej (c.k.).

@node Printf, Przekierowanie, OFMT, Wypisywanie
@section Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}
@cindex formatowane wyj¶cie
@cindex sformatowane wyj¶cie
@cindex wyj¶cie, sformatowane

Je¿eli potrzebujemy dok³adniejszej kontroli nad formatem wyj¶ciowym ni¿ to
daje @code{print}, wykorzystajmy @code{printf}.  Za pomoc± @code{printf}
mo¿na okre¶laæ szeroko¶æ, jak± ma mieæ ka¿da z pozycji, i rozmaite opcje
formatowania liczb (jak podstawa do stosowania, liczba cyfr do wypisania po
kropce dziesiêtnej).  Robi siê to podaj±c ³añcuch, zwany @dfn{³añcuchem
formatu}, który steruje sposobem i miejscem wypisania pozosta³ych
argumentów.

@menu
* Podstawy printf::             Sk³adnia instrukcji @code{printf}.
* Litery steruj±ce::            Litery steruj±ce formatem.
* Modyfikatory formatu::        Modyfikatory w specyfikacji formatu.
* Przyk³ady printf::            Kilka przyk³adów.
@end menu

@node Podstawy printf, Litery steruj±ce, Printf, Printf
@subsection Wprowadzenie do instrukcji @code{printf}

@cindex instrukcja @code{printf}, sk³adnia
@cindex @code{printf} instrukcja, sk³adnia
Instrukcja @code{printf} wygl±da tak:

@example
printf @var{format}, @var{elem1}, @var{elem2}, @dots{}
@end example

@noindent
Ca³o¶æ listy argumentów mo¿e byæ opcjonalnie ujêta w nawiasy.  Nawiasy s±
konieczne je¶li który¶ z elementów jest wyra¿eniem u¿ywa operatora
relacyjnego @samp{>}.  W przeciwnym razie mog³oby ono zostaæ
pomylone z przekierowaniem
(@pxref{Przekierowanie, ,Przekierowanie wyj¶cia @code{print} i @code{printf}}).

@cindex ³añcuch formatu
Ró¿nicê pomiêdzy @code{printf} a @code{print} stanowi argument @var{format}.
Jest to wyra¿enie, którego warto¶æ jest brana jako ³añcuch; okre¶la w jaki
sposób wypisaæ ka¿dy z pozosta³ych argumentów.  Nazywa siê je
@dfn{³añcuchem formatu}.

£añcuch formatu jest bardzo podobny do stosowanego w funkcji bibliotecznej
ANSI C @code{printf}.  Wiêkszo¶æ @var{formatu} to tekst, jaki ma byæ
wypisany dos³ownie.  W tek¶cie rozsiane s± @dfn{specyfikatory formatu}, po
jednym na element.  Ka¿dy specyfikator formatu okre¶la sposób wypisania
argumentu maj±cego tê sam± pozycjê na li¶cie argumentów, co specyfikator
w ³añcuchu formatu.

Instrukcja @code{printf} nie do³±cza samoczynnie znaku nowej linii
do tworzonego wyj¶cia.  Wypisuje tylko to, co wyszczególnia ³añcuch formatu.
Zatem, je¿eli chcemy znaku nowej linii, to musimy go zawrzeæ w ³añcuchu
formatu.  Zmienne separatorów wyj¶cia @code{OFS} and @code{ORS} nie maj±
wp³ywu na instrukcje @code{printf}.  Na przyk³ad:

@example
@group
BEGIN @{
   ORS = "\nAU!\n"; OFS = "!"
   msg = "Nie panikuj!"; printf "%s\n", msg
@}
@end group
@end example

Ten program nadal wypisuje przyjazny komunikat @samp{Nie panikuj!}.

@node Litery steruj±ce, Modyfikatory formatu, Podstawy printf, Printf
@subsection Litery steruj±ce formatem
@cindex @code{printf}, znaki steruj±ce formatem
@cindex specyfikator formatu

Specyfikator formatu rozpoczyna siê znakiem @samp{%} a koñczy
@dfn{liter± steruj±ca formatem}; mówi ona instrukcji @code{printf}, jak
powinien zostaæ wypisany pojedynczy element.  (Chc±c faktycznie uzyskaæ
wypisanie znaku @samp{%}, piszemy @samp{%%}.)  Litera steruj±ca formatem
okre¶la, jaki rodzaj warto¶ci wypisaæ.  Reszta specyfikatora formatu
zbudowana jest z opcjonalnych @dfn{modyfikatorów}, bêd±cych parametrami,
jakie maj± zostaæ u¿yte, jak np. szeroko¶æ pola.

Oto lista liter steruj±cych formatem:

@table @code
@item c
Wypisuje liczbê jako znak ASCII.  Zatem, @samp{printf "%c", 65}
wypisuje literê @samp{A}.  Dla warto¶ci ³añcuchowej wypisywany jest
pierwszy znak ³añcucha.

@item d
@itemx i
S± sobie równowa¿ne.  Obie wypisuj± dziesiêtn± liczbê ca³kowit±.
Specyfikacja @samp{%i} istnieje dla zgodno¶ci z ANSI C.

@item e
@itemx E
Wypisuje liczbê w notacji naukowej (wyk³adniczej).
Na przyk³ad,

@example
printf "%4.3e\n", 1950
@end example

@noindent
wypisze @samp{1.950e+03}, o ogó³em czterech cyfrach znacz±cych, z których
trzy s± po kropce dziesiêtnej.  The @samp{4.3} s± modyfikatorami, omówionymi
poni¿ej.  @samp{%E} u¿ywa @samp{E} zamiast @samp{e} w wyj¶ciu.

@item f
Wypisuje liczbê w notacji zmiennoprzecinkowej.
Na przyk³ad,

@example
printf "%4.3f", 1950
@end example

@noindent
wypisze @samp{1950.000}, z czterema cyfrach znacz±cych, z których
trzy s± po kropce dziesiêtnej.  The @samp{4.3} s± modyfikatorami, omówionymi
poni¿ej.

@item g
@itemx G
Wypisuje liczbê albo w notacji naukowej albo zmiennoprzecinkowej, zale¿nie
od tego, która zu¿yje mniej znaków.  Je¶li wynik wypisywany jest w notacji
naukowej, to @samp{%G} stosuje @samp{E} zamiast @samp{e}.

@item o
Wypisuje ósemkow± liczbê ca³kowit± bez znaku (unsigned octal integer).
(W notacji ósemkowej, o podstawie osiem, cyfry biegn± od @samp{0}
do @samp{7}; dziesiêtna liczba osiem jest reprezentowana jako @samp{10}
ósemkowo.)

@item s
Wypisuje ³añcuch.

@item u
Wypisuje liczbê dziesiêtn± bez znaku (unsigned decimal).
(Format ten ma znaczenie marginalne, gdy¿ wszystkie liczby w @code{awk}
s± zmiennoprzecinkowe.  Obs³ugiwany g³ównie dla zgodno¶ci z C.)

@item x
@itemx X
Wypisuje szesnastkow± liczbê ca³kowit± bez znaku (unsigned hexadecimal
integer).
W zapisie szesnastkowym (heksadecymalnym), o podstawie 16, cyframi s±
@samp{0} do @samp{9} oraz @samp{a} do @samp{f}.  Szesnastkowa cyfra @samp{f}
reprezentuje dziesiêtn± liczbê 15.)   @samp{%X} stosuje litery @samp{A}
do @samp{F} zamiast @samp{a} do @samp{f}.

@item %
Nie jest to faktycznie litera steruj±ca formatem, ale ma znaczenie u¿yta
po @samp{%}: sekwencja @samp{%%} wypisuje pojedynczy @samp{%}.  Nie
pobiera argumentu i ignoruje wszelkie modyfikatory.
@end table

@cindex ciemny k±t
Przy stosowaniu liter steruj±cych formatem liczb ca³kowitych do warto¶ci
spoza zakresu d³ugich ca³kowitych w C (@code{long} integer), @code{gawk}
prze³±czy siê na specyfikator formatu @samp{%g}.  Inne wersje @code{awk}
mog± wypisywaæ niepoprawne warto¶ci lub robiæ co¶ ca³kiem innego (c.k.).

@node Modyfikatory formatu, Przyk³ady printf, Litery steruj±ce, Printf
@subsection Modyfikatory formatu w @code{printf}

@cindex @code{printf}, modyfikatory
@cindex modyfikatory (w specyfikatorach formatu)
Specyfikacja formatu mo¿e zawieraæ tak¿e @dfn{modyfikatory}, decyduj±ce o
tym, jaka czê¶æ warto¶ci elementu bêdzie wypisana i ile miejsca zajmie.
Modyfikatory mog± wyst±piæ pomiêdzy znakiem @samp{%} a liter± steruj±c±
formatem.  W przyk³adach ni¿ej zastosowano symbol wyliczenia ``@bullet{}''
do przedstawienia spacji w wyj¶ciu.  Oto mo¿liwe modyfikatory, w kolejno¶ci,
w jakiej mog± siê pojawiæ:

@table @code
@item -
Znak minus, u¿yty przed modyfikatorem szeroko¶ci (patrz ni¿ej) nakazuje,
by argument wyrównaæ do lewej na podanej szeroko¶ci.  Normalnie argument
jest wypisywany w zadanej szeroko¶ci z wyrównaniem do prawej.  Zatem,

@example
printf "%-4s", "foo"
@end example

@noindent
wypisuje @samp{foo@bullet{}}.

@item @var{spacja}
W konwersjach numerycznych, poprzedza warto¶ci dodatnie spacj±, a ujemne
znakiem minus.

@item +
Znak plus, u¿ywany przed modyfikatorem szeroko¶ci (patrz ni¿ej)
stanowi, by przy konwersjach numerycznych zawsze podany by³ znak, nawet
je¶li dane do sformatowania s± dodatnie.  @samp{+} przes³ania modyfikator
spacji.

@item #
Stosuje ``alternatywn± postaæ'' dla niektórych liter steruj±cych.
Przy @samp{%o}, zapewnia pocz±tkowe zero.
Przy @samp{%x} i @samp{%X} zapewnia pocz±tkowe @samp{0x} lub @samp{0X} dla
wyniku niezerowego.
Przy @samp{%e}, @samp{%E} i @samp{%f} wynik bêdzie zawsze zawiera³ kropkê
dziesiêtn±.
Przy @samp{%g} i @samp{%G}, koñcowe zera nie s± usuwane z wyniku.

@cindex ciemny k±t
@item 0
Pocz±tkowe @samp{0} (zero) dzia³a jak flaga, wskazuj±ca, ¿e wyj¶cie
powinno byæ dope³nione zerami zamiast spacjami.  Odnosi siê to tak¿e do
nienumerycznych formatów wyj¶ciowych (c.k.).  Flaga ta ma znaczenie tylko
gdy pole jest szersze ni¿ warto¶æ do wypisania.

@item @var{szer}
Jest to liczba okre¶laj±ca po¿±dan± minimaln± szeroko¶æ pola.  Wstawienie
dowolnej liczby pomiêdzy znak @samp{%} a znak steruj±cy formatem wymusza
rozszerzenie pola na tak± d³ugo¶æ.  Domy¶ln± metod± poszerzenia jest
dope³nienie spacjami po lewej.  Na przyk³ad,

@example
printf "%4s", "foo"
@end example

@noindent
wypisuje @samp{@bullet{}foo}.

Warto¶æ @var{szer} jest szeroko¶ci± minimaln±, nie maksymaln±.  Je¿eli
warto¶æ elementu wymaga wiêcej ni¿ @var{szer} znaków, mo¿e byæ tak
szeroka, jak to jest niezbêdne.  Zatem,

@example
printf "%4s", "foobar"
@end example

@noindent
wypisuje @samp{foobar}.

Poprzedzenie @var{szer} znakiem minus powoduje, ¿e wyj¶cie bêdzie dope³niane
spacjami z prawej, zamiast z lewej.

@item .@var{dok³}
Jest to liczba okre¶laj±ca dok³adno¶æ, jaka ma byæ u¿yta zastosowana
przy wypisywaniu.  Przy formatach @samp{e}, @samp{E} i @samp{f} podaje
liczbê cyfr, jakie maj± byæ wypisane na prawo od kropki dziesiêtnej. Przy
formatach @samp{g} i @samp{G}, okre¶la maksymaln± ilo¶æ cyfr znacz±cych.
Przy formatach @samp{d}, @samp{o}, @samp{i}, @samp{u}, @samp{x} i @samp{X}
okre¶la minimaln± liczbê cyfr do wypisania.  Dla ³añcucha podaje maksymaln±
liczbê znaków ³añcucha, jakie winny zostaæ wypisane.  St±d,

@example
printf "%.4s", "foobar"
@end example

@noindent
wypisuje @samp{foob}.
@end table

Obs³ugiwana jest mo¿liwo¶æ dynamicznych @var{szer} i @var{dok³} (na przyk³ad,
@code{"%*.*s"}) zapewniana przez @code{printf} z biblioteki C.  Zamiast
podawania w ³añcuchu formatu warto¶ci @var{szer} i/lub @var{dok³} wprost,
mo¿na je przekazaæ w li¶cie argumentów.  Na przyk³ad:

@example
w = 5
p = 3
s = "abcdefg"
printf "%*.*s\n", w, p, s
@end example

@noindent
jest ¶ci¶le równowa¿ne temu:

@example
s = "abcdefg"
printf "%5.3s\n", s
@end example

@noindent
Oba programy wypisuj± @samp{@w{@bullet{}@bullet{}abc}}.

Wcze¶niejsze wersje @code{awk} nie obs³uguj± powy¿szej w³asno¶ci.
Je¿eli musimy u¿yæ takiej wersji, mo¿na zasymulowaæ tê cechê wykorzystuj±c
do budowy ³añcucha formatu konkatenacjê, jak tu:

@example
w = 5
p = 3
s = "abcdefg"
printf "%" w "." p "s\n", s
@end example

@noindent
Nie jest do szczególne ³atwe w czytaniu, ale dzia³a.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
Programi¶ci C mog± byæ przyzwyczajeni do u¿ywania dodatkowych flag
@samp{l} i @samp{h} w ³añcuchach formatu @code{printf}.  Nie s± one poprawne
w @code{awk}.  Wiêkszo¶æ implementacji @code{awk} milcz±co ignoruje te
flagi.  Je¿eli w wierszu poleceñ podano @samp{--lint}
(@pxref{Opcje, ,Opcje wiersza poleceñ}), @code{gawk} bêdzie ostrzega³ o ich
u¿yciu.  Je¿eli podano @samp{--posix}, ich u¿ycie jest b³êdem krytycznym.

@node Przyk³ady printf,  , Modyfikatory formatu, Printf
@subsection Przyk³ady u¿ycia @code{printf}

A oto, w jaki sposób wykorzystaæ @code{printf} do utworzenia wyrównanej
tabeli:

@example
awk '@{ printf "%-10s %s\n", $1, $2 @}' BBS-list
@end example

@noindent
powy¿sze wypisuje nazwy BBS-ów (@code{$1}) z pliku @file{BBS-list} w postaci
³añcucha 10 znaków, wyrównanego do lewej.  Za nimi, w tym samym
wierszu, wypisuje te¿ numery telefonów (@code{$2}).  Tworzy to wyrównan±
dwukolumnow± tabelê nazw i numerów telefonicznych:

@example
@group
$ awk '@{ printf "%-10s %s\n", $1, $2 @}' BBS-list
@print{} aardvark   555-5553
@print{} alpo-net   555-3412
@print{} barfly     555-7685
@print{} bites      555-1675
@print{} camelot    555-0542
@print{} core       555-2912
@print{} fooey      555-1234
@print{} foot       555-6699
@print{} macfoo     555-6480
@print{} sdace      555-3430
@print{} sabafoo    555-2127
@end group
@end example

Zauwa¿y³e¶, ¿e nie okre¶lili¶my, ¿e numery telefonów maj± byæ wypisane jako
liczby?  Musia³y byæ wypisane jako ³añcuchy, gdy¿ s± rozdzielane kresk±.
Je¶li spróbowaliby¶my wypisaæ je jako liczby, to wszystkim, co by¶my
otrzymali, by³yby pierwsze trzy cyfry, @samp{555}.  Wprowadzi³oby to
niez³e zamieszanie.

Nie podawali¶my szeroko¶ci numerów telefonicznych, poniewa¿ wystêpuj±
jako ostatnie w wierszach. Nie musimy po nich stawiaæ spacji.

Mo¿na by nawet upiêkszyæ nasz± tabelê dodaj±c nag³ówki nad kolumnami.
Zastosujemy do tego wzorzec @code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}),
wymuszaj±c tylko jednorazowe wypisanie nag³ówka, na pocz±tku programu
@code{awk}:

@example
@group
awk 'BEGIN @{ print "Nazwa     Numer"
             print "-----     -----" @}
     @{ printf "%-10s %s\n", $1, $2 @}' BBS-list
@end group
@end example

Zauwa¿y³e¶, ¿e w powy¿szym przyk³adzie wymieszali¶my instrukcje @code{print}
i @code{printf}?  Mogli¶my u¿yæ wy³±cznie instrukcji @code{printf}
do uzyskania tych samych rezultatów:

@example
@group
awk 'BEGIN @{ printf "%-10s %s\n", "Nazwa", "Numer"
             printf "%-10s %s\n", "-----", "-----" @}
     @{ printf "%-10s %s\n", $1, $2 @}' BBS-list
@end group
@end example

@noindent
Wypisuj±c nag³ówek ka¿dej z kolumn za pomoc± takiej samej specyfikacji
formatu, co zastosowana dla elementów tej kolumny, upewnili¶my siê, ¿e
nag³ówki zostan± wyrównane dok³adnie tak samo jak kolumny.

Fakt, i¿ ta sama specyfikacja formatu jest u¿ywana trzykrotnie, mo¿na
uwypukliæ przechowuj±c j± w zmiennej, w ten sposób:

@example
@group
awk 'BEGIN @{ format = "%-10s %s\n"
             printf format, "Nazwa", "Numer"
             printf format, "-----", "-----" @}
     @{ printf format, $1, $2 @}' BBS-list
@end group
@end example

@c !!! exercise
Sprawd¼, czy potrafisz u¿yæ instrukcji @code{printf} do wyrównania nag³ówków
i danych tabeli dla naszego przyk³adu z plikiem @file{inventory-shipped},
omawianego wcze¶niej w sekcji o instrukcji @code{print}
(@pxref{Print, ,Instrukcja @code{print}}).

@node Przekierowanie, Pliki specjalne, Printf, Wypisywanie
@section Przekierowanie wyj¶cia @code{print} i @code{printf}

@cindex wyj¶cie, przekierowanie
@cindex przekierowanie wyj¶cia
Do tej pory zajmowali¶my siê tylko wyj¶ciem pisz±cym na standardowe wyj¶cie,
zwykle terminal.  Zarówno @code{print} jak i @code{printf} potrafi± równie¿
wysy³aæ swoje wyj¶cie w inne miejsca.  Nazywamy to @dfn{przekierowaniem}
(redirection).

Przekierowanie wystêpuje po instrukcji @code{print} lub @code{printf} .
Przekierowania w @code{awk} zapisywane s± tak samo jak w poleceniach
pow³oki, z wyj±tkiem tego, ¿e s± zapisane wewn±trz programu @code{awk}.

Mamy trzy postacie przekierowania wyj¶cia: wyj¶cie do pliku,
wyj¶cie dopisywane do pliku i wyj¶cie poprzez potok do innego polecenia.
Wszystkie pokazano dla instrukcji @code{print}, ale dzia³aj± identycznie
dla @code{printf}.

@table @code
@item print @var{elementy} > @var{plik-wyj}
Ten rodzaj przekierowania wypisuje elementy do pliku wyj¶ciowego
@var{plik-wyj}.  Nazwa pliku @var{plik-wyj} mo¿e byæ dowolnym wyra¿eniem.
Jego warto¶æ jest zmieniana na ³añcuch a nastêpnie u¿ywana jako nazwa pliku
(@pxref{Wyra¿enia}).

Przy stosowaniu tego rodzaju przekierowania, @var{plik-wyj} jest wymazywany
przed zapisaniem do niego pierwszego elementu wyj¶cia.  Kolejne zapisy
do tego samego @var{pliku-wyj} nie wymazuj± go, lecz s± do niego do³±czane.
Je¿eli @var{plik-wyj} nie istnieje, to jest tworzony.

Na przyk³ad, oto jak program @code{awk} mo¿e zapisaæ listê BBS-ów do pliku
@file{name-list} a listê numerów telefonów do pliku @file{phone-list}.
Oba pliki wyj¶ciowe zawieraj± po jednej nazwie lub numerze na wiersz.

@example
@group
$ awk '@{ print $2 > "phone-list"
>        print $1 > "name-list" @}' BBS-list
@end group
@group
$ cat phone-list
@print{} 555-5553
@print{} 555-3412
@dots{}
@end group
@group
$ cat name-list
@print{} aardvark
@print{} alpo-net
@dots{}
@end group
@end example

@item print @var{elementy} >> @var{plik-wyj}
Ten rodzaj przekierowania wpisuje elementy do wcze¶niej istniej±cego pliku
wynikowego @var{plik-wyj}.   Ró¿nica pomiêdzy tym przekierowaniem a
przekierowaniem z pojedynczym @samp{>} jest taka, ¿e stara zawarto¶æ (je¶li
istnieje) @var{pliku-wyj} nie jest wymazywana.  Zamiast tego wyj¶cie
@code{awk} jest do³±czane na koniec pliku.
Je¿eli @var{plik-wyj} nie istnieje, to jest tworzony.

@cindex potoki dla wyj¶cia
@cindex wyj¶cie, potokowanie
@item print @var{elementy} | @var{polecenie}
Mo¿liwe jest tak¿e wys³anie wyj¶cia do innego programu przez potok
zamiast do pliku.  Ten typ przekierowania otwiera potok do @var{polecenia}
i wpisuje @var{elementy} przez ten potok, do innego procesu utworzonego
w celu wykonania @var{polecenia}.

Argument @var{polecenie} przekierowania jest faktycznie wyra¿eniem
@code{awk}.  Jego warto¶æ jest przekszta³cana na ³añcuch, którego zawarto¶æ
daje polecenie pow³oki, jakie ma byæ uruchomione.

Na przyk³ad, poni¿sze tworzy dwa pliki, listê niesortowanych nazw BBS-ów i
listê posortowan± w odwrotnym porz±dku alfabetycznym:

@example
awk '@{ print $1 > "names.unsorted"
       command = "sort -r > names.sorted"
       print $1 | command @}' BBS-list
@end example

Tutaj lista niesortowana jest zapisywana zwyk³ym przekierowaniem, podczas
gdy lista posortowana zapisywana jest za pomoc± potokowania przez
narzêdzie @code{sort}.

Kolejny przyk³ad korzysta z przekierowania do wys³ania wiadomo¶ci na listê
pocztow± @samp{bug-system}.  Mo¿e to byæ przydatne gdy w pojawi³y siê
k³opoty w skrypcie @code{awk} uruchamianym okresowo do konserwacji systemu.

@example
report = "mail bug-system"
print "Awk script failed:", $0 | report
m = ("at record number " FNR " of " FILENAME)
print m | report
close(report)
@end example

Wiadomo¶æ budowana jest za pomoc± konkatenacji (z³±czenia ³añcuchów)
i zapisywana w zmiennej @code{m}.  Nastêpnie jest wysy³ana potokiem do
programu @code{mail}.

Wywo³ujemy tu funkcjê @code{close}, gdy¿ dobrym nawykiem jest zamykaæ potok
zaraz po przes³aniu do niego zamierzonego wyj¶cia.
@xref{Zamykanie plików i potoków, ,Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych},
gdzie jest o tym wiêcej napisane.  Ten przyk³ad ilustruje równie¿
zastosowanie zmiennej do reprezentacji @var{pliku} lub @var{polecenia}:
nie jest konieczne u¿ywanie zawsze sta³ej ³añcuchowej.  Stosowanie zmiennej
jest na ogó³ dobrym rozwi±zaniem, poniewa¿ @code{awk} wymaga, by warto¶æ
³añcucha by³a za ka¿dym razem zapisana tak samo.
@end table

Przekierowanie wyj¶cia przy u¿yciu @samp{>}, @samp{>>} lub @samp{|} prosi
system o otwarcie pliku lub potoku tylko je¶li do konkretnego @var{pliku}
lub @var{polecenia}, które podali¶my, nasz program jeszcze nie pisa³, albo
je¶li je zamkniêto po ostatnim zapisie.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex ograniczenia
@cindex ograniczenia implementacji
@iftex
Jak wspomniano wcze¶niej
(@pxref{Podsumowanie getline,  , Podsumowanie wariantów @code{getline}}),
wiele
@end iftex
@ifinfo
Wiele
@end ifinfo
implementacji @code{awk} ogranicza ilo¶æ potoków, jakie program
@code{awk} mo¿e mieæ otwarte, do tylko jednego!  W @code{gawk} nie ma
takiego ograniczenia.  Mo¿na otworzyæ tyle potoków, na ile zezwoli
stosowany system operacyjny.

@node Pliki specjalne, Zamykanie plików i potoków, Przekierowanie, Wypisywanie
@section Specjalne nazwy plików w @code{gawk}
@cindex standardowe wej¶cie
@cindex standardowe wyj¶cie
@cindex standardowe wyj¶cie b³êdów
@cindex standardowe wyj¶cie diagnostyczne
@cindex pliki, deskryptory
@cindex deskryptory plików

Zgodnie z konwencj±, pracuj±ce programy maj± trzy strumienie
wej¶cia/wyj¶cia ju¿ dostêpne dla nich do odczytu i zapisu.  S± one znane
jako @dfn{standardowe wej¶cie}, @dfn{standardowe wyj¶cie} i @dfn{standardowe
wyj¶cie b³êdów}.  Strumienie te domy¶lnie s± po³±czone z naszym terminalem,
ale czêsto s± przekierowywane za pomoc± pow³oki, poprzez operatory
@samp{<}, @samp{<<}, @samp{>}, @samp{>>}, @samp{>&} i @samp{|}.
Standardowe wyj¶cie b³êdów jest na ogó³ u¿ywane do zapisywania komunikatów
o b³êdach.  Powodem, dla którego mamy dwa odrêbne strumienie, standardowe
wyj¶cie i standardowe wyj¶cie b³êdów, jest to, ¿e mo¿na je wówczas osobno
przekierowywaæ.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
W innych implementacjach @code{awk}, jedyn± metod± zapisania komunikatu
o b³êdzie na standardowym wyj¶ciu b³êdów w programie @code{awk} jest:

@example
print "Wykryto powa¿ny b³±d!" | "cat 1>&2"
@end example

@noindent
Dzia³a to dziêki otwarciu potoku do polecenia pow³oki, które ma
dostêp do standardowego strumienia b³êdów, jaki dziedziczy po procesie
@code{awk}.  Jest to wysoce nieeleganckie. Jest te¿ nieefektywne, gdy¿
wymaga odrêbnego procesu.  Ludzie pisz±cy programy @code{awk} czêsto
tego nie robi±.
Zamiast tego, wysy³aj± komunikaty o b³êdach na terminal, tak:

@example
@group
print "Wykryto powa¿ny b³±d!" > "/dev/tty"
@end group
@end example

@noindent
Zwykle na to ten sam efekt, ale nie zawsze: chocia¿ standardowym strumieniem
b³êdów jest na ogó³ terminal, to mo¿e ono zostaæ przekierowane, i gdy siê
tak dzieje, pisanie na terminal nie jest poprawne.  W rzeczywisto¶ci, je¿eli
@code{awk} uruchamiany jest z zadania tle, mo¿emy w ogóle nie mieæ
terminala.  Wówczas otwarcie @file{/dev/tty} siê nie powiedzie.

@code{gawk} udostêpnia specjalne nazwy plików do dostêpu do trzech
standardowych strumieni.  Przy przekierowaniu wej¶cia lub wyj¶cia
w @code{gawk} je¶li nazwa pliku pasuje do jednej z tych nazw specjalnych,
to @code{gawk} u¿ywa wprost strumienia, który ona oznacza.

@cindex @file{/dev/stdin}
@cindex @file{/dev/stdout}
@cindex @file{/dev/stderr}
@cindex @file{/dev/fd}
@c @cartouche
@table @file
@item /dev/stdin
Standardowe wej¶cie (deskryptor pliku 0).

@item /dev/stdout
Standardowe wyj¶cie (deskryptor pliku 1).

@item /dev/stderr
Standardowe wej¶cie b³êdów (deskryptor pliku 2).

@item /dev/fd/@var{N}
Plik skojarzony z deskryptorem pliku @var{N}.  Plik taki musi byæ otwarty
przez program inicjuj±cy wykonanie @code{awk} (na ogó³ pow³okê).
Dopóki nie podejmujemy specjalnych starañ w pow³oce, z której wo³amy
@code{awk}, dostêpne s± tylko deskryptory 0, 1 i 2.
@end table
@c @end cartouche

Nazwy plików @file{/dev/stdin}, @file{/dev/stdout} i @file{/dev/stderr}
s± synonimami (aliasami) dla, odpowiednio,  @file{/dev/fd/0},
@file{/dev/fd/1} i @file{/dev/fd/2}, ale s± bardziej zrozumia³e.
@c self-explanatory.

Prawid³owym sposobem wypisywania komunikatów o b³êdach w programie
@code{gawk} jest u¿ycie @file{/dev/stderr}, jak tu:

@example
print "Wykryto powa¿ny b³±d!" > "/dev/stderr"
@end example

@code{gawk} udostêpnia te¿ specjalne nazwy plików daj±ce dostêp do
informacji o pracuj±cym procesie @code{gawk}.  Ka¿dy z tych ``plików''
udostêpnia jeden rekord danych.  Chc±c odczytaæ je wiêcej ni¿ raz, musimy
je zamkn±æ funkcj± @code{close}
(@pxref{Zamykanie plików i potoków, ,Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych}).
Tymi nazwami s±:

@cindex informacje o procesie
@cindex proces, informacje
@cindex @file{/dev/pid}
@cindex @file{/dev/pgrpid}
@cindex @file{/dev/ppid}
@cindex @file{/dev/user}
@c @cartouche
@table @file
@item /dev/pid
Odczyt tego pliku zwraca identyfikator (ID) procesu dla
bie¿±cego procesu, dziesiêtnie, zakoñczony znakiem nowej linii.

@item  /dev/ppid
Odczyt tego pliku zwraca identyfikator procesu macierzystego dla bie¿±cego
procesu, dziesiêtnie, zakoñczony znakiem nowej linii.

@item  /dev/pgrpid
Odczyt tego pliku zwraca identyfikator grupy procesu dla bie¿±cego procesu,
dziesiêtnie, zakoñczony znakiem nowej linii.

@item /dev/user
Odczyt tego pliku zwraca pojedynczy rekord zakoñczony znakiem nowej linii.
Pola rozdzielone s± spacjami.  Pola reprezentuj± nastêpuj±ce informacje:

@table @code
@item $1
Warto¶æ zwrócona przez funkcjê systemow± @code{getuid} (rzeczywisty
identyfikator numeryczny u¿ytkownika).

@item $2
Warto¶æ zwrócona przez funkcjê systemow± @code{geteuid} (efektywny
identyfikator numeryczny u¿ytkownika).

@item $3
Warto¶æ zwrócona przez funkcjê systemow± @code{getgid} (rzeczywisty
identyfikator numeryczny grupy).

@item $4
Warto¶æ zwrócona przez funkcjê systemow± @code{getegid} (efektywny
identyfikator numeryczny grupy).
@end table

Je¶li istniej± jakie¶ dodatkowe pola, to s± one identyfikatorami grup
zwróconymi przez funkcjê systemow± @code{getgroups}.
(Nie wszystkie systemy obs³uguj± przynale¿no¶æ do wielu grup.)
@end table
@c @end cartouche

Powy¿sze specjalne nazwy plików mog± byæ stosowane w wierszu poleceñ jako
pliki danych, jak i do przekierowañ wej¶cia/wyj¶cia w programie @code{awk}.
Nie mo¿na ich stosowaæ jako plików ¼ród³owych opcji @samp{-f}.

Rozpoznawanie powy¿szych specjalnych nazw plików jest wy³±czone je¶li
@code{gawk} jest w trybie zgodno¶ci (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@strong{Uwaga!}:  Interpretacja tych nazw plików wykonywana jest przez
sam @code{gawk}, chyba ¿e nasz system faktycznie posiada katalog
@file{/dev/fd} (lub dowolny inny z podanych wy¿ej specjalnych plików).
Na przyk³ad, zastosowanie @samp{/dev/fd/4} jako wyj¶cia w rzeczywisto¶ci
bêdzie pisaæ do pliku o deskryptorze 4, a nie do nowego deskryptora pliku,
który zosta³ zduplikowany (przez @code{dup}) z deskryptora 4.  W wiêkszo¶ci
przypadków nie ma to znaczenia; jednak, istotne jest by @emph{nie} zamykaæ
plików zwi±zanych z deskryptorami 0, 1 i 2.  Je¿eli zamkniemy jeden z nich,
spowoduje to nieprzewidywalne zachowanie.

Pliki specjalne daj±ce dostêp do informacji zwi±zanej z procesem znikn±
w przysz³ych wersjach @code{gawk}.
@xref{Przysz³e rozszerzenia, ,Prawdopodobne przysz³e rozszerzenia}.

@node Zamykanie plików i potoków, , Pliki specjalne, Wypisywanie
@section Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych
@cindex zamykanie plików wej¶ciowych i potoków
@cindex zamykanie plików wyj¶ciowych i potoków
@findex close

Je¶li podczas wykonania programu @code{awk} ta sama nazwa pliku lub
polecenia pow³oki u¿yta jest
z @code{getline} (@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}})
wiêcej ni¿ raz, plik jest otwierany (lub polecenie wykonywane) tylko
za pierwszym razem.  W tym momencie z pliku czy polecenia czytany jest
pierwszy rekord wej¶cia.  Przy nastêpnym u¿yciu tego samego pliku lub
polecenia z @code{getline}, czytany jest z niego kolejny rekord, i tak dalej.

Podobnie, gdy plik lub potok jest otwierany do wyprowadzenia wyników,
nazwa z nim skojarzona jest zapamiêtywana przez @code{awk}, a kolejne zapisy
do tego samego pliku czy polecenia s± do³±czane do poprzednich.  Plik lub
potok pozostaje otwarty a¿ do zakoñczenia pracy @code{awk}.

Wynika st±d, ¿e je¶li chcemy zacz±æ czytanie tego samego pliku od pocz±tku
albo powtórnie uruchomiæ polecenie pow³oki (zamiast czytania dalszego ci±gu
jego wyj¶cia), to musimy podj±æ specjalne kroki.
To, co musimy zrobiæ, to u¿ycie funkcji @code{close}, jak ni¿ej:

@example
close(@var{nazwapliku})
@end example

@noindent
lub

@example
close(@var{polecenie})
@end example

Argumentem @var{nazwapliku} lub @var{polecenie} mo¿e byæ dowolne wyra¿enie.
Jego warto¶æ musi @emph{dok³adnie} odpowiadaæ ³añcuchowi, jaki by³ u¿yty
do otwarcia pliku lub uruchomienia polecenia (³±cznie ze spacjami i innymi
``nieistotnymi'' znakami).  Na przyk³ad, je¿eli otwieramy potok za pomoc±:

@example
"sort -r names" | getline foo
@end example

@noindent
to musimy go zamkn±æ tak:

@example
close("sort -r names")
@end example

Po wykonaniu wywo³ania tej funkcji nastêpne @code{getline} z tego pliku czy
polecenia, albo nastêpne @code{print} lub @code{printf} do tego pliku czy
polecenia, ponownie otworzy plik lub uruchomi polecenie.

Poniewa¿ wyra¿enie u¿yte do zamkniêcia pliku lub potoku musi dok³adnie
odpowiadaæ wyra¿eniu u¿ytemu do jego otwarcia (uruchomienia), dobr± praktyk±
jest stosowanie zmiennej do przechowania nazwy pliku (polecenia).
Poprzedni przyk³ad mia³by postaæ

@example
sortcom = "sort -r names"
sortcom | getline foo
@dots{}
close(sortcom)
@end example

@noindent
Pomaga to unikn±æ trudnych do znalezienia b³êdów typograficznych
w programach @code{awk}.

Oto kilka powodów, dla których mo¿e zachodziæ potrzeba zamkniêcia pliku
wyj¶ciowego:

@itemize @bullet
@item
Do pisania do pliku i pó¼niejszego czytania go w tym samym programie
@code{awk}.  Zamknij plik gdy tylko skoñczysz do niego pisaæ; nastêpnie
mo¿esz zacz±æ odczyt za pomoc± @code{getline}.

@item
Do zapisu wielu plików, kolejno, w tym samym programie @code{awk}.
Je¿eli nie zamkniemy plików, mo¿emy ostatecznie wyczerpaæ systemowy limit
plików otwartych w jednym procesie.  Zatem zamknij ka¿dy z nich gdy
skoñczysz do niego pisaæ.

@item
Do zakoñczenia polecenia.  Przy przekierowaniu wyj¶cia przez potok polecenie
czytaj±ce z potoku normalnie kontynuuje próby czytania wej¶cia tak d³ugo,
jak d³ugo potok jest otwarty.  Czêsto znaczy to, ¿e polecenie nie mo¿e
faktycznie wykonaæ swojego zadania póki potok nie zostanie zamkniêty.
Na przyk³ad, je¶li przekierujemy wyj¶cie do programu @code{mail},
komunikat nie jest faktycznie wysy³any a¿ do zamkniêcia potoku.

@c NEEDED
@page
@item
Do uruchomienia tego samego programu po raz drugi, z tymi samymi
argumentami.  To nie jest to samo, co podanie kolejnych danych
wej¶ciu pierwszego uruchomienia!

Na przyk³ad, za³ó¿my, ¿e potokujemy wyj¶cie do programu @code{mail}.
Je¶li wypiszemy kilka wierszy przekierowanych do tego potoku bez jego
zamykania, utworz± pojedyncz± wiadomo¶æ z kilku wierszy.  Natomiast je¶li
zamkniemy potok po ka¿dym wierszu wyj¶cia, to ka¿dy wiersz bêdzie tworzy³
odrêbn± wiadomo¶æ.
@end itemize

@vindex ERRNO
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@code{close} zwraca warto¶æ zerow± je¶li zamkniêcie siê powiod³o.
W przeciwnym razie warto¶æ jest niezerowa.  W tym przypadku @code{gawk}
przypisuje zmiennej @code{ERRNO} ³añcuch opisuj±cy b³±d, jaki wyst±pi³.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex przeno¶no¶æ
Je¶li u¿ywamy wiêcej plików ni¿ system pozwala na posiadanie otwartych,
@code{gawk} bêdzie usi³owa³ multipleksowaæ dostêpne otwarte pliki
miêdzy nasze pliki danych.  Jego zdolno¶æ do wykonania tego zadania zale¿y
od udogodnieñ systemu operacyjnego: mo¿e nie zawsze dzia³aæ.  Z tego powodu
dobra praktyka i dobra przeno¶no¶æ doradzaj±, by zawsze stosowaæ
@code{close} w stosunku do plików, z którymi skoñczono pracê.

@node Wyra¿enia, Wzorce i akcje, Wypisywanie, Top
@chapter Wyra¿enia
@cindex wyra¿enie

Wyra¿enia s± podstawowymi elementami konstrukcyjnymi wzorców i akcji
@code{awk}.  Wyra¿enie rozwija siê w warto¶æ, któr± mo¿na wypisaæ,
porównywaæ, przechowaæ w zmiennej czy przes³aæ do funkcji.  Dodatkowo,
wyra¿enie, za pomoc± operatora przypisania, mo¿e przypisaæ now± warto¶æ
zmiennej lub polu.

Wyra¿enie mo¿e s³u¿yæ jako samodzielny wzorzec lub instrukcja akcji.
Wiêkszo¶æ pozosta³ych rodzajów instrukcji zawiera jedno lub wiêcej wyra¿eñ,
okre¶laj±cych dane na których maj± dzia³aæ.  Jak w innych jêzykach,
wyra¿enia w @code{awk} zawieraj± zmienne, odwo³ania do tablic, sta³e
i wywo³ania funkcji, jak równie¿ ich kombinacje z rozmaitymi operatorami.

@menu
* Sta³e::                       Sta³e ³añcuchowe, numeryczne i regexp.
* U¿ywanie sta³ych regexp::     Kiedy i stosowaæ sta³e regexp.
* Zmienne::                     Zmienne daj± nazwy warto¶ciom do pó¼niejszego
* Konwersja::                   Przekszta³canie ³añcuchów na liczby
                                i odwrotnie.
* Operatory arytmetyczne::      Operacje arytmetyczne (@samp{+}, @samp{-}, itd.)
* Konkatenacja::                Sklejanie ³añcuchów.
* Operatory przypisania::       Zmienianie warto¶ci zmiennej lub pola.
* Operatory inkrementacji::     Zwiêkszanie numerycznej warto¶ci zmiennej.
* Warto¶ci prawdy::             Co jest ``prawdziwe'' a co ``fa³szywe''.
* Typy i porównania::           Jak zmienne otrzymuj± typy. Jak to wp³ywa na
                                porównania liczb i ³añcuchów przez @samp{<},
                                itd.
* Operatory logiczne::          £±cznie wyra¿eñ porównania za pomoc±
                                operatorów logicznych @samp{||} (``or''),
                                @samp{&&} (``and'') i @samp{!} (``not'').
* Wyra¿enia warunkowe::         Wyra¿enia warunkowe wybieraj± miêdzy dwoma
                                podwyra¿eniami pod kontrol± trzeciego.
* Wywo³ania funkcji::           Wywo³anie funkcji jest wyra¿eniem.
* Priorytet::                   Jak ³±cz± siê ró¿ne operatory.
@end menu

@node Sta³e, U¿ywanie sta³ych regexp, Wyra¿enia, Wyra¿enia
@section Wyra¿enia sta³e
@cindex sta³e, typy
@cindex sta³e ³añcuchowe
@cindex ³añcuchy, sta³e

Najprostszym rodzajem wyra¿enia jest  @dfn{sta³a}, która ma zawsze tê sam±
warto¶æ.  S± trzy typy sta³ych: sta³e numeryczne (liczbowe), sta³e
³añcuchowe i sta³e wyra¿enia regularne.

@menu
* Sta³e skalarne::              Sta³e numeryczne i ³añcuchowe.
* Sta³e regexp::                Wyra¿enia regularne sta³e.
@end menu

@node Sta³e skalarne, Sta³e regexp, Sta³e, Sta³e
@subsection Sta³e numeryczne i ³añcuchowe

@cindex sta³a numeryczna
@cindex warto¶æ numeryczna
@dfn{Sta³a numeryczna} oznacza liczbê.  Mo¿e to byæ liczba ca³kowita,
u³amek dziesiêtny lub liczba w notacji naukowej
(wyk³adniczej).@footnote{Wewnêtrzna reprezentacja stosuje liczby
zmiennoprzecinkowe o podwójnej precyzji.  Nie przejmuj siê je¿eli nie wiesz,
co to znaczy.} Oto kilka przyk³adów sta³ych numerycznych, wszystkich
o tej samej warto¶ci:

@example
105
1.05e+2
1050e-1
@end example

Sta³a ³añcuchowa sk³ada siê z ci±gu znaków ujêtego w cudzys³owy.
Na przyk³ad:

@example
"papuga"
@end example

@noindent
@cindex ró¿nica miêdzy @code{gawk} a @code{awk}
reprezentuje ³añcuch, którego zawarto¶ci± jest @samp{papuga}.  £añcuchy
w @code{gawk} mog± mieæ dowoln± d³ugo¶æ i mog± zawieraæ dowolny z mo¿liwych
o¶miobitowych znaków ASCII, ³±cznie z ASCII NUL (znak o kodzie zero).
Inne implementacje @code{awk} mog± mieæ pewne trudno¶ci z niektórymi kodami
znaków.

@node Sta³e regexp,  , Sta³e skalarne, Sta³e
@subsection Sta³e regexp

@cindex @code{~} operator
@cindex @code{!~} operator
Sta³e wyra¿enie regularne (sta³a regexp) jest opisem wyra¿enia regularnego
ujêtym miêdzy uko¶niki, jak @code{@w{/^pocz±tek i koniec$/}}.  Wiêkszo¶æ
wyra¿eñ regularnych wykorzystywanych w programach @code{awk} jest sta³ymi,
ale operatory dopasowania @samp{~} i @samp{!~} mog± te¿ dopasowywaæ
wyliczane lub ``dynamiczne'' wyra¿enia regularne (które s± po prostu
zwyk³ymi ³añcuchami czy zmiennymi, zawieraj±cymi wyra¿enie regularne).

@node U¿ywanie sta³ych regexp, Zmienne, Sta³e, Wyra¿enia
@section U¿ywanie sta³ych regexp

U¿yte po prawej stronie operatorów @samp{~} lub @samp{!~} wyra¿enie regularne
sta³e oznacza po prostu wyra¿enie regularne jakie ma zostaæ dopasowane.

@cindex ciemny k±t
Sta³e wyra¿enia regularne (jak @code{/foo/}) mog± byæ stosowane jako
wyra¿enia proste.
Gdy pojawia siê samo wyra¿enie regularne sta³e, ma ono to samo znaczenie
jakby pojawi³o siê we wzorcu, tj.@: @samp{($0 ~ /foo/)}
(c.k.)
(@pxref{Wyra¿enia wzorcami, ,Wyra¿enia jako wzorce}).
Oznacza to, ¿e te dwa fragmenty kodu,

@example
if ($0 ~ /barfly/ || $0 ~ /camelot/)
    print "znaleziono"
@end example

@noindent
i

@example
if (/barfly/ || /camelot/)
    print "znaleziono"
@end example

@noindent
s± dok³adnie równowa¿ne.

Pewn± do¶æ dziwaczn± konsekwencj± tej zasady jest to, ¿e poni¿sze wyra¿enie
logiczne jest poprawne, choæ nie robi tego, co prawdopodobnie mia³ na my¶li
u¿ytkownik:

@example
# zauwa¿, ¿e /foo/ jest po lewej stronie ~
if (/foo/ ~ $1) print "znaleziono foo"
@end example

@noindent
Ten kod ``oczywi¶cie'' sprawdza, czy @code{$1} pasuje do wyra¿enia
regularnego @code{/foo/}.  W rzeczywisto¶ci jednak, wyra¿enie
@samp{/foo/ ~ $1} oznacza faktycznie @samp{($0 ~ /foo/) ~ $1}.
Inaczej mówi±c, najpierw dopasowuje rekord wej¶ciowy do wyra¿enia regularnego
@code{/foo/}.  Wynikiem bêdzie albo zero albo jeden, zale¿nie od powodzenia
lub pora¿ki dopasowania.  Nastêpnie zostanie wykonane dopasowanie tego wyniku
do pierwszego pola rekordu.

Poniewa¿ jest ma³o prawdopodobne, by¶my kiedykolwiek chcieli robiæ taki
rodzaj sprawdzenia, @code{gawk} wy¶le ostrze¿enie widz±c tak± konstrukcjê
w programie.

Inn± konsekwencj± omawianej zasady jest to, ¿e instrukcja przypisania

@example
pasuje = /foo/
@end example

@noindent
nada zmiennej @code{pasuje} warto¶æ zero albo jeden, zale¿nie od zawarto¶ci
bie¿±cego rekordu wej¶ciowego.

Ta cecha jêzyka nie by³a nigdy dobrze udokumentowana a¿ do specyfikacji POSIX.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex ciemny k±t
Wyra¿enia regularne sta³e s± te¿ wykorzystywane jako pierwszy argument funkcji
@code{gensub}, @code{sub} i @code{gsub}, i jako drugi argument
funkcji @code{match}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Wspó³czesne implementacje @code{awk}, ³±cznie z @code{gawk}, pozwalaj±, by
trzecim argumentem @code{split} by³o sta³e wyra¿enie regularne, podczas gdy
niektóre starsze implementacje na to nie pozwalaj± (c.k.).

Próba u¿ycia sta³ego wyra¿enia regularnego jako argumentu funkcji
zdefiniowanej przez u¿ytkownika mo¿e prowadziæ do zamieszania.
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).
Na przyk³ad:

@example
@group
function mysub(pat, repl, str, global)
@{
    if (global)
        gsub(pat, repl, str)
    else
        sub(pat, repl, str)
    return str
@}
@end group

@group
@{
    @dots{}
    tekst = "cze¶æ! cze¶æ do siebie!"
    mysub(/cze¶æ/, "sie ma", tekst, 1)
    @dots{}
@}
@end group
@end example

W tym przyk³adzie programista chce przekazaæ sta³e wyra¿enie regularne
do funkcji u¿ytkownika @code{mysub}, która z kolei prze¶le je @code{sub}
lub @code{gsub}. Jednak faktycznie parametr @code{pat} bêdzie albo jedynk±
albo zerem, w zale¿no¶ci od tego czy @code{$0} pasuje do @code{/cze¶æ/}
czy nie.

Poniewa¿ to nieprawdopodobne, by¶my kiedykolwiek chcieli przekazaæ warto¶æ
prawdy w ten sposób, @code{gawk} widz±c sta³e wyra¿enie regularne u¿yte jako
parametr funkcji u¿ytkownika wy¶le ostrze¿enia.

@node Zmienne, Konwersja, U¿ywanie sta³ych regexp, Wyra¿enia
@section Zmienne

Zmienne stanowi± metodê przechowywania warto¶ci w pewnym punkcie programu
do pó¼niejszego u¿ytku w innym miejscu programu.  Mo¿na nimi manipulowaæ
wewn±trz ca³ego tekstu programu, mo¿na im te¿ przypisaæ warto¶ci w wierszu
poleceñ @code{awk}.

@menu
* U¿ywanie zmiennych::          Stosowanie zmiennych we w³asnych programach.
* Opcje przypisywania::         Nadawanie warto¶ci zmiennym w wierszu
                                poleceñ. Podsumowanie sk³adni wiersza
                                poleceñ. To zaawansowana metoda wprowadzania.
@end menu

@node U¿ywanie zmiennych, Opcje przypisywania, Zmienne, Zmienne
@subsection U¿ywanie zmiennych w programie

@cindex zmienne, definiowane przez u¿ytkownika
Zmienne umo¿liwiaj± nadanie nazw warto¶ciom i pó¼niejsze siê do nich
odwo³ywanie.  Widzieli¶my je ju¿ w wielu przyk³adach.  Nazwa zmiennej musi
byæ ci±giem liter, cyfr i znaków podkre¶lenia, ale nie mo¿e zaczynaæ siê
od cyfry.  W nazwach zmiennych wielko¶æ liter jest znacz±ca:  @code{a}
i @code{A} to ró¿ne zmienne.

Sama nazwa zmiennej jest poprawnym wyra¿eniem.  Reprezentuje aktualn± warto¶æ
zmiennej.  Nowa warto¶ci nadawane s± zmiennym za pomoc± @dfn{operatorów
przypisania}, @dfn{operatorów inkrementacji} i @dfn{operatorów dekrementacji}.
@xref{Operatory przypisania, ,Wyra¿enia przypisania}.

Kilka zmiennych ma specjalne, wbudowane znaczenie, tak jak @code{FS}, separator
pól, czy @code{NF}, liczba pól w bie¿±cym rekordzie wej¶ciowym.
@xref{Zmienne wbudowane}, gdzie podano ich listê.  Zmienne wbudowane mog± byæ
u¿ywane jak wszystkie inne zmienne, i jak innym zmiennym mo¿na im przypisywaæ
warto¶ci.  Jednak warto¶ci tych zmiennych s± tak¿e wykorzystywane i zmieniane
automatycznie przez @code{awk}.  Nazwy wszystkich zmiennych wbudowanych s±
w ca³o¶ci zbudowane z du¿ych liter.

Zmiennym mo¿na przypisywaæ warto¶ci numeryczne lub ³añcuchowe.
Domy¶lnie, zmienne inicjowane s± ³añcuchem pustym, który po konwersji
na liczbê jest zerem.  W @code{awk} nie ma potrzeby jawnego ``inicjowania''
ka¿dej ze zmiennych, w sposób, jaki robi siê to w C i wiêkszo¶ci innych
tradycyjnych jêzyków.

@node Opcje przypisywania,  , U¿ywanie zmiennych, Zmienne
@subsection Przypisywanie zmiennych w wierszu poleceñ

Zmiennej mo¿na nadaæ warto¶æ do³±czaj±c przy wywo³ywaniu @code{awk}
@dfn{przypisanie zmiennej} do argumentów wiersza poleceñ.
(@pxref{Inne argumenty, ,Inne argumenty wiersza poleceñ}).  Takie przypisanie
ma nastêpuj±c± postaæ:

@example
@var{zmienna}=@var{tekst}
@end example

@noindent
W ten sposób mo¿na nadaæ warto¶æ zmiennej albo na pocz±tku pracy @code{awk}
albo pomiêdzy plikami wej¶ciowymi.

Przypisanie mo¿na poprzedziæ opcj± @samp{-v}, w ten sposób:

@example
-v @var{zmienna}=@var{tekst}
@end example

@noindent
wówczas zmienna ma nadawan± warto¶æ na samym pocz±tku, nawet przed
wykonaniem regu³ @code{BEGIN}.  Opcja @samp{-v} i jej przypisanie musz±
poprzedzaæ zarówno wszystkie argumenty podaj±ce nazwy plików jak i tekst
programu.
(@xref{Opcje, ,Opcje wiersza poleceñ}, gdzie jest wiêcej o opcji
@samp{-v}.)

W przeciwnym razie, przypisanie do zmiennej wykonywane jest w momencie
okre¶lonym jego pozycj± w¶ród argumentów plików wej¶ciowych: po przetworzeniu
pliku wej¶ciowego bêd±cego poprzednim argumentem.  Na przyk³ad:

@example
awk '@{ print $n @}' n=4 inventory-shipped n=2 BBS-list
@end example

@noindent
wypisuje warto¶æ pola numer @code{n} dla wszystkich rekordów wej¶ciowych.
Przed odczytem pierwszego pliku wiersz poleceñ nadaje zmiennej @code{n}
warto¶æ cztery.  Powoduje to, ¿e z ka¿dego wiersza pliku
@file{inventory-shipped} wypisane bêdzie czwarte pole.  Po zakoñczeniu
pierwszego pliku, ale przed rozpoczêciem drugiego, @code{n} jest przypisywane
dwa, wiêc z wierszy @file{BBS-list} jest wypisywane drugie pole.

@example
@group
$ awk '@{ print $n @}' n=4 inventory-shipped n=2 BBS-list
@print{} 15
@print{} 24
@dots{}
@print{} 555-5553
@print{} 555-3412
@dots{}
@end group
@end example

Argumenty wiersza poleceñ s± w tablicy o nazwie @code{ARGV} udostêpniane
programowi @code{awk} do bezpo¶redniego zbadania
(@pxref{ARGC i ARGV, ,U¿ywanie @code{ARGC} i @code{ARGV}}).

@cindex ciemny k±t
@code{awk} przetwarza warto¶ci przypisañ z wiersza poleceñ wykorzystuj±c
sekwencje specjalne (c.k.) (@pxref{Sekwencje specjalne}).

@node Konwersja, Operatory arytmetyczne, Zmienne, Wyra¿enia
@section Konwersja ³añcuchów i liczb

@cindex konwersja ³añcuchów i liczb
Je¿eli kontekst programu @code{awk} tego wymaga, ³añcuchy s± przekszta³cane
na liczby, a liczby na ³añcuchy.  Na przyk³ad, je¿eli oka¿e siê, ¿e
w wyra¿eniu @samp{foo + bar} warto¶æ @samp{foo} lub @samp{bar} jest ³añcuchem,
to przed wykonaniem dodawania bêdzie ona konwertowana na liczbê.  Je¶li
w konkatenacji ³añcuchów pojawi± siê liczby, to zostan± przekszta³cone
na ³añcuchy.  Rozwa¿my poni¿sze:

@example
dwa = 2; trzy = 3
print (dwa trzy) + 4
@end example

@noindent
Wypisze to warto¶æ (numeryczn±) 27.  Liczbowe warto¶ci zmiennych @code{dwa}
i @code{trzy} s± przekszta³cane na ³añcuchy i sklejane, a ³añcuch wynikowy
przekszta³cany z powrotem na liczbê (23), do której jest nastêpnie dodawane
cztery.

@cindex ³añcuch pusty
@cindex ³añcuch zerowy
@cindex konwersja typów
Je¿eli z jakiego¶ powodu trzeba wymusiæ konwersjê liczby na ³añcuch,
sklejamy z ni± pusty ³añcuch, @code{""}.  W celu wymuszenia konwersji ³añcucha
na liczbê, dodajemy do niego zero.

£añcuch jest przekszta³cany na liczbê przez interpretacjê jego ewentualnego
numerycznego przedrostka jako liczby:
@code{"2.5"} konwertowane jest na 2.5, @code{"1e3"} na 1000, a @code{"25fix"}
ma numeryczn± warto¶æ 25.
£añcuchy, których nie mog± byæ zinterpretowane jako poprawne liczby s±
konwertowane na zero.

@vindex CONVFMT
Dok³adny sposób, w jaki liczby przekszta³cane s± na ³añcuchy zale¿y od
zmiennej wbudowanej @code{awk} o nazwie @code{CONVFMT}
(@pxref{Zmienne wbudowane}).
Liczby konwertowane s± za pomoc± funkcji @code{sprintf}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach})
z @code{CONVFMT} jako specyfikatorem formatu.

Domy¶ln± warto¶ci± @code{CONVFMT} jest @code{"%.6g"}, co wypisuje warto¶æ
z co najmniej sze¶cioma cyframi znacz±cymi.  W niektórych zastosowaniach
zechcemy j± zmieniæ, by okre¶liæ wiêksz± dok³adno¶æ.  Na wiêkszo¶ci
wspó³czesnych maszyn trzeba wypisaæ 17 cyfr by uchwyciæ dok³adnie warto¶æ
liczby podwójnej precyzji.

Je¿eli @code{CONVFMT} przypiszemy ³añcuch nie mówi±cy @code{sprintf} jak
w u¿yteczny sposób sformatowaæ liczby zmiennoprzecinkowe, to mog± pojawiæ
siê dziwne wyniki.  Na przyk³ad, je¿eli zapomnimy znaku @samp{%} w formacie,
to wszystkie liczby bêd± konwertowane na ten sam sta³y ³añcuch.

@cindex ciemny k±t
Jako przypadek szczególny, je¶li liczba jest ca³kowit±, to wynik jej
przekszta³cenia na ³añcuch jest @emph{zawsze} ca³kowit±, bez wzglêdu na to,
jaka jest warto¶æ @code{CONVFMT}.  Przy poni¿szym fragmencie kodu:

@example
CONVFMT = "%2.2f"
a = 12
b = a ""
@end example

@noindent
@code{b} ma warto¶æ @code{"12"}, nie @code{"12.00"} (c.k.).

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@vindex OFMT
Przed standardem POSIX, @code{awk} podawa³, ¿e do konwersji liczb na ³añcuchy
jest wykorzystywana warto¶æ @code{OFMT}.  @code{OFMT} okre¶la format wyj¶ciowy
stosowany przy wypisywaniu liczb za pomoc± @code{print}.
W celu oddzielenia semantyki konwersji od semantyki wypisywania wprowadzono
zmienn± @code{CONVFMT}.  @code{CONVFMT} i @code{OFMT} maj± tê sam± warto¶æ
domy¶ln±: @code{"%.6g"}.  W ogromnej wiêkszo¶ci przypadków stare programy
@code{awk} nie zmieni± swego zachowania.
Jednak takie zastosowanie @code{OFMT} jest czym¶, o czym warto pamiêtaæ, je¶li
chcemy przenosiæ programy na inne implementacje @code{awk}.  Zalecamy, by
zamiast zmieniaæ w³asne programy, po prostu przenie¶æ sam @code{gawk}!
@xref{Print, ,Instrukcja @code{print}},
gdzie jest wiêcej o instrukcji @code{print}.

@node Operatory arytmetyczne, Konkatenacja, Konwersja, Wyra¿enia
@section Operatory arytmetyczne
@cindex operatory arytmetyczne
@cindex arytmetyczne, operatory
@cindex dodawanie
@cindex odejmowanie
@cindex mno¿enie
@cindex dzielenie
@cindex reszta z dzielenia
@cindex iloraz
@cindex potêgowanie

Jêzyk @code{awk} przy obliczaniu wyra¿eñ stosuje standardowe operatory
arytmetyczne.  Wszystkie z nich podlegaj± normalnym regu³om priorytetu
i dzia³aj± tak, jak jakby¶my tego oczekiwali.
Operacje arytmetyczne wykonywane s± z wykorzystaniem zmiennopozycyjnej
podwójnej precyzji, co rodzi zwyk³e k³opoty z niedok³adno¶ci±
i wyj±tkami.@footnote{David Goldberg,
@uref{http://www.validgh.com/goldberg/paper.ps, @cite{What Every Computer Scientist Should Know About Floating-point Arithmetic}},
@cite{ACM Computing Surveys} @strong{23}, 1 (1991-03), 5-48.}

Oto plik @file{grades} zawieraj±cy listê nazw studentów i ich wyniki z trzech
testów (to ma³a klasa):

@example
Pat   100 97 58
Sandy  84 72 93
Chris  72 92 89
@end example

@noindent
Ten program bierze plik @file{grades} i wypisuje ¶redni± punktów.

@example
$ awk '@{ sum = $2 + $3 + $4 ; avg = sum / 3
>        print $1, avg @}' grades
@print{} Pat 85
@print{} Sandy 83
@print{} Chris 84.3333
@end example

Poni¿sza tabela wyszczególnia operatory arytmetyczne w jêzyku @code{awk},
od najwy¿szego do najni¿szego priorytetu:

@c @cartouche
@table @code
@item - @var{x}
Negacja.

@item + @var{x}
Jednoargumentowy plus.  Wyra¿enie jest konwertowane na liczbê.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@item @var{x} ^ @var{y}
@itemx @var{x} ** @var{y}
Potêgowanie: @var{x} podniesione do potêgi @var{y}.  @samp{2 ^ 3} ma warto¶æ
osiem.  Ci±g znaków @samp{**} jest równowa¿ny @samp{^}.  (Standard POSIX
dla potêgowania podaje tylko u¿ywanie @samp{^}.)

@item @var{x} * @var{y}
Mno¿enie.

@item @var{x} / @var{y}
Dzielenie.  Poniewa¿ wszystkie liczby w @code{awk} s± liczbami
zmiennoprzecinkowymi,
wynik nie jest zaokr±glany do ca³kowitej: @samp{3 / 4} ma warto¶æ 0.75.

@item @var{x} % @var{y}
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Reszta z dzielenia.  Iloraz jest zaokr±glany w dó³ do ca³kowitej, mno¿ony
przez @var{y} i ten wynik jest odejmowany od @var{x}.  Operacja ta jest czasem
nazywana ``obciêcie-modulo''.  Poni¿sza relacja jest zawsze zachowana:

@example
b * int(a / b) + (a % b) == a
@end example

Pewnym, byæ mo¿e niepo¿±danym, efektem tej definicji reszty z dzielenia jest
to, ¿e @code{@var{x} % @var{y}} jest ujemne je¶li @var{x} jest ujemne.  Zatem,

@example
-17 % 8 = -1
@end example

W innych implementacjach @code{awk}, uzyskiwany znak reszty z dzielenia mo¿e
byæ zale¿ny od architektury komputera.
@c !!! what does posix say?

@item @var{x} + @var{y}
Dodawanie.

@item @var{x} - @var{y}
Odejmowanie.
@end table
@c @end cartouche

W celu zachowania maksymalnej przeno¶no¶ci, nie nale¿y stosowaæ
operatora @samp{**}.

Jednoargumentowy plus i minus maj± ten sam priorytet, operatory multiplikatywne
maj± wszystkie ten sam priorytet, dodawanie i odejmowanie maj± ten sam
priorytet.

@node Konkatenacja, Operatory przypisania, Operatory arytmetyczne, Wyra¿enia
@section Konkatenacja ³añcuchów
@cindex Kernighan, Brian
@display
@i{Wtedy wygl±da³o to na dobry pomys³.}
Brian Kernighan
@end display
@sp 1

@cindex operatory ³añcuchowe
@cindex ³añcuchy, operatory
@cindex konkatenacja
Istnieje tylko jedna operacja ³añcuchowa: konkatenacja (z³±czenie).
Nie ma ona ¿adnego konkretnego operatora, który by j± reprezentowa³.
Zamiast tego, sklejanie ³añcuchów wykonywane jest przez zapisanie jednego
wyra¿enia obok drugiego, bez ¿adnego operatora.  Na przyk³ad:

@example
@group
$ awk '@{ print "Pole numer jeden: " $1 @}' BBS-list
@print{} Pole numer jeden: aardvark
@print{} Pole numer jeden: alpo-net
@dots{}
@end group
@end example

Bez spacji po @samp{:} w sta³ej ³añcuchowej, sk³adowe wiersza nie
by³yby rozdzielone.  Na przyk³ad:

@example
@group
$ awk '@{ print "Pole numer jeden::" $1 @}' BBS-list
@print{} Pole numer jeden::aardvark
@print{} Pole numer jeden::alpo-net
@dots{}
@end group
@end example

Poniewa¿ konkatenacja ³añcuchów nie ma jawnego operatora, czêsto konieczne
jest upewnienie siê, ¿e dzieje siê to czego chcemy.  Mo¿na je uzyskaæ
otaczaj±c z³±czane elementy nawiasami.  Na przyk³ad, poni¿szy fragment kodu
nie zlepia @code{file} i @code{name} jak mogliby¶my siê spodziewaæ:

@example
@group
file = "file"
name = "name"
print "co¶ istotnego" > file name
@end group
@end example

@noindent
Konieczne jest wykorzystanie poni¿szego:

@example
print "co¶ istotnego" > (file name)
@end example

Zalecamy u¿ycie nawiasów wokó³ konkatenacji we wszystkich kontekstach
oprócz najpowszechniejszych (jak po prawej stronie @samp{=}).

@node Operatory przypisania, Operatory inkrementacji, Konkatenacja, Wyra¿enia
@section Wyra¿enia przypisania
@cindex operatory przypisania
@cindex przypisanie, operatory
@cindex wyra¿enie, przypisanie

@dfn{Przypisanie} jest wyra¿eniem, które zapisuje w zmiennej now± warto¶æ.
Na przyk³ad, przypiszmy zmiennej @code{z} warto¶æ jeden:

@example
z = 1
@end example

Po wykonaniu tego wyra¿enia zmienna @code{z} ma warto¶æ jeden.  Jakakolwiek
by³a stara warto¶æ zmiennej @code{z} przed przypisaniem, jest ona
zapominana.

Przypisania sk³aduj± te¿ warto¶ci ³añcuchowe.
Na przyk³ad to zapamiêta warto¶æ @code{"this food is good"} w zmiennej
@code{message}:

@example
thing = "food"
predicate = "good"
message = "this " thing " is " predicate
@end example

@noindent
(Ilustruje to równie¿ konkatenacjê ³añcuchów.)

Znak @samp{=} nazywamy @dfn{operatorem przypisania}.  Jest to najprostszy
operator przypisania, gdy¿ warto¶æ operandu po prawej stronie jest
sk³adowana bez zmian.

@cindex skutek uboczny
Wiêkszo¶æ operatorów (dodawanie, konkatenacja, i tak dalej) nie daje ¿adnych
skutków poza obliczeniem warto¶ci.  Je¿eli zignorujemy tê warto¶æ, to równie
dobrze mogliby¶my nie stosowaæ operatora.  Operator przypisania jest inny:
tworzy warto¶æ, lecz nawet  je¶li j± ignorujemy, to przypisanie nadal
daje znaæ o sobie zmieniaj±c zawarto¶æ zmiennej.
Nazywamy to @dfn{skutkiem ubocznym}.

@cindex lwarto¶æ
@cindex rwarto¶æ
Lewostronny operand przypisania nie musi byæ zmienn±
(@pxref{Zmienne}); mo¿e byæ równie¿ polem
(@pxref{Zmiana pól, ,Zmiana zawarto¶ci pól}) lub
elementem tablicy (@pxref{Tablice, ,Tablice w @code{awk}}).
Wszystkie one zwane s± @dfn{lwarto¶ciami}, co znaczy ¿e mog± pojawiæ siê po
lewej stronie operatora przypisania.
Operand prawostronny mo¿e byæ dowolnym wyra¿eniem.  Tworzy ono now± warto¶æ,
któr± przypisanie zapamiêtuje w zadanej zmiennej, polu czy elemencie
tablicy.  (Warto¶ci takie s± zwane @dfn{rwarto¶ciami},
od ang.``right-hand'', prawostronny.)

@cindex typy zmiennych
Nale¿y pamiêtaæ, ¿e zmienne @emph{nie} maj± sta³ego typu.
Typ zmiennej jest po prostu typem warto¶ci, jak± ona w danej chwili akurat
przechowuje.  W poni¿szym fragmencie programu zmienna @code{foo} ma
najpierw warto¶æ numeryczn±, a potem ³añcuchow±:

@example
@group
foo = 1
print foo
foo = "bar"
print foo
@end group
@end example

@noindent
W chwili, gdy drugie przypisanie nadaje @code{foo} warto¶æ ³añcuchow±,
to, ¿e uprzednio mia³a ona warto¶æ numeryczn± jest zapominane.

Warto¶ci ³añcuchowe nierozpoczynaj±ce siê cyfr± maj± numeryczn± warto¶æ
zero.  Po wykonaniu tego kodu, warto¶ci± @code{foo} jest piêæ:

@example
foo = "a string"
foo = foo + 5
@end example

@noindent
(Zwróæ uwagê, ¿e u¿ywanie zmiennej jako liczby a pó¼niej jako ³añcucha
jest myl±ce i ¶wiadczy o kiepskim stylu programowania.  Powy¿sze przyk³ady
pokazuj± jak dzia³a @code{awk}, a @emph{nie} jak powinno siê pisaæ
programy!)

Przypisanie jest wyra¿eniem, zatem posiada warto¶æ: tê sam± warto¶æ, która
jest przypisywana.  St±d te¿, @samp{z = 1} jako wyra¿enie ma warto¶æ
jeden.  Skutkiem tego jest fakt, ¿e mo¿na zapisaæ razem kilka przypisañ:

@example
x = y = z = 0
@end example

@noindent
zapamiêtuje warto¶æ zero we wszystkich trzech zmiennych.  Dzieje siê tak
dlatego, ¿e warto¶æ @samp{z = 0}, która jest zerem, jest zapamiêtywana
w @code{y}, a nastêpnie warto¶æ @samp{y = z = 0}, która jest zerem,
zapamiêtywana jest w @code{x}.

Przypisania mo¿na u¿yæ w ka¿dym miejscu, gdzie oczekiwane jest wyra¿enie.
Na przyk³ad, poprawne jest napisanie @samp{x != (y = 1)} w celu nadania
@code{y} warto¶ci jeden i sprawdzenia czy @code{x} jest równe jeden.
Ten styl prowadzi jednak do tego, ¿e programy s± trudne do czytania.
Nie powinno siê u¿ywaæ takich zagnie¿d¿onych przypisañ, poza programami
do jednorazowego wykorzystania.

Oprócz @samp{=}, istnieje kilka innych operatorów przypisania,
wykonuj±cych dzia³ania arytmetyczne na starej warto¶ci zmiennej.
Na przyk³ad, operator @samp{+=} oblicza now± warto¶æ przez dodanie
prawostronnej warto¶ci do starej warto¶ci zmiennej.  Poni¿sze przypisanie,
zatem, dodaje piêæ do warto¶ci @code{foo}:

@example
foo += 5
@end example

@noindent
Jest to równowa¿ne poni¿szemu:

@example
foo = foo + 5
@end example

@noindent
Stosujemy to rozwi±zanie, przy którym sens programu jest klarowniejszy.

Istniej± sytuacje, w których stosowanie @samp{+=} (lub innego operatora
przypisania) @emph{nie} jest tym samym, co zwyk³e powtórzenie lewego
operandu w wyra¿eniu prawostronnym.  Na przyk³ad:

@cindex Rankin, Pat
@example
@group
# Dziêki Pat Rankin za przyk³ad
BEGIN  @{
    foo[rand()] += 5
    for (x in foo)
       print x, foo[x]

    bar[rand()] = bar[rand()] + 5
    for (x in bar)
       print x, bar[x]
@}
@end group
@end example

@noindent
Indeksy @code{bar} s± na pewno ró¿ne, poniewa¿ @code{rand} zwróci ró¿ne
warto¶ci przy ka¿dym jej wywo³aniu.  (Tablice i funkcja @code{rand}
nie by³y jeszcze omawiane.  @xref{Tablice, ,Tablice w @code{awk}}, i
zobacz @ref{Funkcje numeryczne, ,Wbudowane funkcje numeryczne}).  Ten przyk³ad
ilustruje wa¿ny fakt dotycz±cy operatorów przypisania:  lewostronne
wyra¿enie jest wyliczane tylko @emph{raz}.

To, czy obliczane jest najpierw wyra¿enie lewostronne czy te¿ prawostronne,
zale¿y od implementacji.  Rozwa¿my przyk³ad:

@example
i = 1
a[i += 2] = i + 1
@end example

@noindent
Warto¶ci± @code{a[3]} mo¿e byæ albo dwa albo cztery.

Oto tabela operatorów przypisania arytmetycznego.  W ka¿dym przypadku
prawostronny operand jest wyra¿eniem, którego warto¶æ jest przekszta³cana
na liczbê:

@c @cartouche
@table @code
@item @var{lwarto¶æ} += @var{inkrement}
Dodaje @var{inkrement} do warto¶ci @var{lwarto¶ci} tworz±c now± warto¶æ
@var{lwarto¶ci}.

@item @var{lwarto¶æ} -= @var{dekrement}
Odejmuje @var{dekrement} od warto¶ci @var{lwarto¶ci}.

@item @var{lwarto¶æ} *= @var{wspó³czynnik}
Mno¿y warto¶æ @var{lwarto¶ci} przez @var{wspó³czynnik}.

@item @var{lwarto¶æ} /= @var{dzielnik}
Dzieli warto¶æ @var{lwarto¶ci} przez @var{dzielnik}.

@item @var{lwarto¶æ} %= @var{wspó³czynnik}
Przypisuje @var{lwarto¶ci} resztê z dzielenia jej przez @var{wspó³czynnik}.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@item @var{lwarto¶æ} ^= @var{potêga}
@itemx @var{lwarto¶æ} **= @var{potêga}
Podnosi @var{lwarto¶æ} do potêgi @var{potêga}.
(POSIX podaje tylko operator @samp{^=}.)
@end table
@c @end cartouche

W celu zachowania maksymalnej przeno¶no¶ci nie nale¿y stosowaæ
operatora @samp{**=}.

@node Operatory inkrementacji, Warto¶ci prawdy, Operatory przypisania, Wyra¿enia
@section Operatory inkrementacji i dekrementacji

@cindex operatory, inkrementacja
@cindex inkrementacja, operator
@dfn{Operatory inkrementacji} i @dfn{dekrementacji} powiêkszaj± lub
pomniejszaj± warto¶æ zmiennej o jeden.  Mo¿na zrobiæ to samo wykorzystuj±c
operator przypisania, wiêc operatory inkrementacji nie dodaj± jêzykowi
@code{awk} ¿adnej dodatkowej zdolno¶ci.  S± jednak wygodnymi skrótami dla
bardzo typowych operacji.

Operator dodaj±cy jeden zapisujemy @samp{++}.  Mo¿e s³u¿yæ do powiêkszania
warto¶ci zmiennej zarówno przed jak i po pobraniu jej warto¶ci.

Powiêkszenie warto¶ci zmiennej @var{v} przed zwróceniem wyniku
(pre-inkrementacjê) zapisujemy @samp{++@var{v}}.  Dodaje to jeden do
warto¶ci @var{v} i ta nowa warto¶æ jest równocze¶nie warto¶ci± wyra¿enia.
Przypisanie @samp{@var{v} += 1} jest ca³kowicie równowa¿ne.

Zapis @samp{++} po zmiennej okre¶la post-inkrementacjê.  Powiêksza ona tak
samo warto¶æ zmiennej; ró¿nic± jest to, ¿e warto¶ci± samego wyra¿enia
inkrementacji jest @emph{stara} warto¶æ zmiennej.
Zatem, je¶li @code{foo} ma warto¶æ cztery, to wyra¿enie @samp{foo++} ma
warto¶æ cztery, ale zmienia ono warto¶æ @code{foo} na piêæ.

Post-inkrementacja @samp{foo++} jest prawie równowa¿na zapisowi
@samp{(foo += 1) - 1}.  Nie jest dok³adnie równowa¿na, gdy¿ wszystkie
liczby w @code{awk} s± zmiennoprzecinkowe: w arytmetyce zmiennoprzecinkowej
@samp{foo + 1 - 1} niekoniecznie równa siê @code{foo}.  Ró¿nica jest jednak
znikoma dopóki ograniczamy siê do liczb, które s± do¶æ ma³e (mniejsze
ni¿ 10e12).

Inkrementowana mo¿e byæ dowolna lwarto¶æ.  Pola i elementy tablic s±
inkrementowane tak samo jak zmienne.  (Je¿eli chcemy równocze¶nie odwo³aæ
siê do pola i powiêkszyæ zmienn±, mo¿emy zastosowaæ @samp{$(i++)}.  Nawiasy
s± niezbêdne z powodu priorytetu operatora wskazania pola, @samp{$}.)

@cindex operatory dekrementacji
@cindex dekrementacja, operatory
Operator dekrementacji @samp{--} dzia³a tak samo jak @samp{++}, z wyj±tkiem
tego, ¿e odejmuje jeden zamiast dodawaæ.  Podobnie jak @samp{++}, mo¿e byæ
stosowany przed lwarto¶ci± do pre-dekrementacji lub po niej do
post-dekrementacji.

A oto podsumowanie wyra¿eñ inkrementacji i dekrementacji.

@c @cartouche
@table @code
@item ++@var{lwarto¶æ}
To wyra¿enie inkrementuje @var{lwarto¶æ} a nowa warto¶æ staje siê warto¶ci±
wyra¿enia.

@item @var{lwarto¶æ}++
To wyra¿enie inkrementuje @var{lwarto¶æ}, lecz warto¶ci± wyra¿enia jest
@emph{stara} warto¶æ @var{lwarto¶ci}.

@item --@var{lwarto¶æ}
Podobne do @samp{++@var{lwarto¶æ}}, ale zamiast dodawania, odejmuje.
Dekrementuje @var{lwarto¶æ} i jako wynik dostarcza uzyskan± warto¶æ.

@item @var{lwarto¶æ}--
Podobne do @samp{@var{lwarto¶æ}++}, ale zamiast dodawania, odejmuje.
Dekrementuje @var{lwarto¶æ}.  Warto¶ci± wyra¿enia jest @emph{stara}
warto¶æ @var{lwarto¶ci}.
@end table
@c @end cartouche

@node Warto¶ci prawdy, Typy i porównania, Operatory inkrementacji, Wyra¿enia
@section Prawda i fa³sz w @code{awk}
@cindex warto¶ci prawdziwe
@cindex logiczna prawda
@cindex logiczny fa³sz

Wiele jêzyków programowania ma specjaln± reprezentacjê pojêæ ``prawdy''
i ``fa³szu''.  Jêzyki takie korzystaj± zwykle ze specjalnych sta³ych
@code{true} i @code{false}, lub, byæ mo¿e, ich równowa¿ników pisanych du¿ymi
literami.

@cindex ³añcuch zerowy
@cindex ³añcuch pusty
@code{awk} jest inny.  Zapo¿ycza z C bardzo prost± koncepcjê warto¶ci prawdy
i fa³szu.  W @code{awk}, dowolna niezerowa warto¶æ numeryczna, @emph{lub}
niepusty ³añcuch s± prawdziwe.  Ka¿da inna warto¶æ (zero lub ³añcuch zerowej
d³ugo¶ci, @code{""}) jest fa³szywa.  Poni¿szy program wypisze trzykrotnie
@samp{Dziwna warto¶æ prawdziwa}:

@example
@group
BEGIN @{
   if (3.1415927)
       print "Dziwna warto¶æ prawdziwa"
   if ("Four Score And Seven Years Ago")
       print "Dziwna warto¶æ prawdziwa"
   if (j = 57)
       print "Dziwna warto¶æ prawdziwa"
@}
@end group
@end example

@cindex ciemny k±t
Zaskakuj±ca jest konsekwencja regu³y ``niezerowe lub niepuste'':
sta³a ³añcuchowa @code{"0"} jest w rzeczywisto¶ci prawdziwa, bo jest
niepusta (c.k.).

@node Typy i porównania, Operatory logiczne, Warto¶ci prawdy, Wyra¿enia
@section Typy zmiennych i wyra¿enia porównania
@cindex wyra¿enia porównania
@cindex wyra¿enia, porównywanie
@cindex wyra¿enia, dopasowywanie
@cindex relacje, operatory
@cindex operatory relacji
@cindex operatory dopasowania/niedopasowania wyra¿eñ regularnych
@cindex kontrola typów zmiennych
@cindex typy zmiennych
@c 2e: consider splitting this section into subsections
@display
@i{Ten przewodnik jest rozstrzygaj±cy. Rzeczywisto¶æ czêsto jest nie¶cis³a.}
@c {The Guide is definitive. Reality is frequently inaccurate.}
Autostopem przez Galaktykê
@end display
@sp 1

Inaczej ni¿ w innych jêzykach programowania, zmienne @code{awk} nie
maj± sta³ego typu.  Mog±, zamiast tego, byæ liczb± albo ³añcuchem,
zale¿nie od warto¶ci, jaka jest do nich przypisana.

@cindex ³añcuch liczbowy
Standard POSIX z roku 1992 wprowadzi³ pojêcie @dfn{³añcucha liczbowego},
który jest po prostu ³añcuchem wygl±daj±cym jak liczba, na przyk³ad,
@code{@w{" +2"}}.  Pojêcie to jest wykorzystywane do wyznaczania typu
zmiennej.

Typ zmiennej jest istotny, gdy¿ typy dwu zmiennych decyduj± o sposobie,
w jaki s± one porównywane.

W @code{gawk} kontrola typu zmiennej nastêpuje wed³ug poni¿szych regu³.

@enumerate 1
@item
Litera³ numeryczny lub wynik operacji numerycznej ma atrybut @var{numeryczny}.

@item
Litera³ ³añcuchowy lub wynik operacji ³añcuchowej ma atrybut
@var{³añcuchowy}.

@item
Pola, wej¶cie @code{getline}, @code{FILENAME}, elementy @code{ARGV},
elementy @code{ENVIRON} oraz elementy tablicy utworzonej przez @code{split},
które s± ³añcuchami liczbowymi maj± atrybut @var{³añcucha liczbowego}
(strnum).  W przeciwnym przypadku maj± atrybut @var{³añcuchowy}.
Niezainicjowane zmienne maj± równie¿ atrybut @var{³añcucha liczbowego}.

@item
Atrybuty przenosz± siê poprzez przypisania, ale nie s± zmieniane
przez ¿adne u¿ycie.
@c  (Although a use may cause the entity to acquire an additional
@c value such that it has both a numeric and string value -- this leaves the
@c attribute unchanged.)
@c This is important but not relevant
@end enumerate

Ostatnia regu³a jest szczególnie wa¿na.  W poni¿szym programie, @code{a}
ma typ numeryczny, nawet mimo tego, ¿e jest pó¼niej u¿ywana w operacji
³añcuchowej.

@example
BEGIN @{
         a = 12.345
         b = a " jest ³adn± liczb±"
         print b
@}
@end example

Przy porównywaniu dwu argumentów mo¿e byæ u¿yte albo porównanie ³añcuchowe
albo numeryczne, zale¿nie od ich typu.  Wykonywane jest ono zgodnie
z poni¿sz±, symetryczn± macierz±:

@c thanks to Karl Berry, kb@cs.umb.edu, for major help with TeX tables
@tex
\centerline{
\vbox{\bigskip % space above the table (about 1 linespace)
% Because we have vertical rules, we can't let TeX insert interline space
% in its usual way.
\offinterlineskip
%
% Define the table template. & separates columns, and \cr ends the
% template (and each row). # is replaced by the text of that entry on
% each row. The template for the first column breaks down like this:
%   \strut -- a way to make each line have the height and depth
%             of a normal line of type, since we turned off interline spacing.
%   \hfil -- infinite glue; has the effect of right-justifying in this case.
%   #     -- replaced by the text (for instance, `STRNUM', in the last row).
%   \quad -- about the width of an `M'. Just separates the columns.
%
% The second column (\vrule#) is what generates the vertical rule that
% spans table rows.
%
% The doubled && before the next entry means `repeat the following
% template as many times as necessary on each line' -- in our case, twice.
%
% The template itself, \quad#\hfil, left-justifies with a little space before.
%
\halign{\strut\hfil#\quad&\vrule#&&\quad#\hfil\cr
	&&STRING	&NUMERIC	&STRNUM\cr
% The \omit tells TeX to skip inserting the template for this column on
% this particular row. In this case, we only want a little extra space
% to separate the heading row from the rule below it.  the depth 2pt --
% `\vrule depth 2pt' is that little space.
\omit	&depth 2pt\cr
% This is the horizontal rule below the heading. Since it has nothing to
% do with the columns of the table, we use \noalign to get it in there.
\noalign{\hrule}
% Like above, this time a little more space.
\omit	&depth 4pt\cr
% The remaining rows have nothing special about them.
STRING	&&string	&string		&string\cr
NUMERIC	&&string	&numeric	&numeric\cr
STRNUM  &&string        &numeric        &numeric\cr
}}}
@end tex
@ifinfo
@display
	+----------------------------------------------
	|	STRING		NUMERIC		STRNUM
--------+----------------------------------------------
	|
STRING	|	string		string		string
	|
NUMERIC	|	string		numeric		numeric
	|
STRNUM	|	string		numeric		numeric
--------+----------------------------------------------
@end display
@end ifinfo

Najpro¶ciej rzecz bior±c, wej¶cie u¿ytkownika wygl±daj±ce na numeryczne,
i @emph{tylko} wej¶cie, powinno byæ traktowane jako numeryczne, nawet je¶li
faktycznie jest zbudowane ze znaków, i z tego powodu jest te¿ ³añcuchem.

@dfn{Wyra¿enia porównania} porównuj± ³añcuchy lub liczby co do relacji
miêdzy nimi, jak np. równo¶æ.
S± one zapisywane przy u¿yciu @dfn{operatorów relacji}, bêd±cych
nadzbiorem analogicznych operatorów wystêpuj±cych w C.  Oto ich tabela:

@cindex operatory relacji
@cindex relacje, operatory
@cindex @code{<} operator
@cindex @code{<=} operator
@cindex @code{>} operator
@cindex @code{>=} operator
@cindex @code{==} operator
@cindex @code{!=} operator
@cindex @code{~} operator
@cindex @code{!~} operator
@cindex @code{in} operator
@c @cartouche
@table @code
@item @var{x} < @var{y}
Prawda je¶li @var{x} jest mniejsze od @var{y}.

@item @var{x} <= @var{y}
Prawda je¶li @var{x} jest mniejsze lub równe @var{y}.

@item @var{x} > @var{y}
Prawda je¶li @var{x} jest wiêksze od @var{y}.

@item @var{x} >= @var{y}
Prawda je¶li @var{x} jest wiêksze lub równe @var{y}.

@item @var{x} == @var{y}
Prawda je¶li @var{x} jest równe @var{y}.

@item @var{x} != @var{y}
Prawda je¶li @var{x} jest nie jest równe @var{y}.

@item @var{x} ~ @var{y}
Prawda je¶li ³añcuch @var{x} pasuje do wyra¿enia regularnego oznaczanego
przez @var{y}.

@item @var{x} !~ @var{y}
Prawda je¶li ³añcuch @var{x} nie pasuje do wyra¿enia regularnego oznaczanego
przez @var{y}.

@item @var{indeks} in @var{tabl}
Prawda je¶li tablica @var{tabl} posiada element o indeksie @var{indeks}.
@end table
@c @end cartouche

Wyra¿enia porównania maj± warto¶æ jeden je¶li daj± prawdê i zero je¶li
fa³sz.

Przy porównywaniu operandów ró¿nych typów operandy numeryczne przekszta³cane
s± na ³añcuchy przy wykorzystaniu warto¶ci @code{CONVFMT}
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}).

£añcuchy porównywane s± przez porównanie pierwszego znaku ka¿dego z nich,
nastêpnie drugiego znaku w ka¿dym i tak dalej.  Zatem @code{"10"} jest
mniejsze ni¿ @code{"9"}.  Je¿eli mamy dwa ³añcuchy, z których jeden jest
przedrostkiem drugiego, to krótszy jest mniejszy od d³u¿szego. St±d te¿,
@code{"abc"} jest mniejsze ni¿ @code{"abcd"}.

@cindex czêste pomy³ki
@cindex pomy³ki, czêste
@cindex b³êdy, czêste
Bardzo ³atwo jest przypadkowo b³êdnie napisaæ operator @samp{==}, i omin±æ
jeden ze znaków równo¶ci @samp{=}.  Wynik jest nadal poprawnym kodem
@code{awk}, ale program nie bêdzie robi³ tego, co mieli¶my na my¶li:

@example
if (a = b)   # oops! powinno byæ a == b
   @dots{}
else
   @dots{}
@end example

@noindent
Test @code{if} powiedzie siê zawsze, chyba ¿e @code{b} bêdzie akurat zerem
lub ³añcuchem pustym. Poniewa¿ oba operatory s± podobne, ten rodzaj
b³êdu jest bardzo trudny do zauwa¿enia przy sprawdzaniu kodu ¼ród³owego.

Poka¿emy kilka przyk³adowych wyra¿eñ, jak @code{awk} je porównuje, i jaki
jest wynik porównania.

@table @code
@item 1.5 <= 2.0
porównanie numeryczne (prawda)

@item "abc" >= "xyz"
porównanie ³añcuchowe (fa³sz)

@item 1.5 != " +2"
porównanie ³añcuchowe (prawda)

@item "1e2" < "3"
porównanie ³añcuchowe (prawda)

@item a = 2; b = "2"
@itemx a == b
porównanie ³añcuchowe (prawda)

@item a = 2; b = " +2"
@itemx a == b
porównanie ³añcuchowe (fa³sz)
@end table

W tym przyk³adzie,

@example
@group
$ echo 1e2 3 | awk '@{ print ($1 < $2) ? "prawda" : "fa³sz" @}'
@print{} fa³sz
@end group
@end example

@noindent
wynikiem jest @samp{fa³sz}, poniewa¿ @code{$1} i @code{$2} s± ³añcuchami
liczbowymi, a zatem oba maj± atrybut @var{strnum}, narzucaj±cy porównanie
numeryczne.

Celem regu³ porównywania i stosowania ³añcuchów liczbowych jest próba
uzyskania zachowania, które bêdzie ``najmniej zaskakuj±ce'', w dalszym ci±gu
jednak ``robi±ce poprawnie to, o co chodzi''.

@cindex porównania, ³añcuch a wyra¿enie regularne
@cindex porównanie ³añcuchowe a porównanie wyra¿eñ regularnych
@cindex porównanie wyra¿eñ regularnych a porównanie ³añcuchowe
Porównania ³añcuchów i porównania wyra¿eñ regularnych s± ca³kiem odmienne.
Na przyk³ad,

@example
x == "foo"
@end example

@noindent
ma warto¶æ jeden (jest prawdziwe) je¶li zmienna @code{x} równa siê
dok³adnie @samp{foo}.  W przeciwieñstwie do tego

@example
x ~ /foo/
@end example

@noindent
ma warto¶æ jeden je¶li @code{x} zawiera @samp{foo}, jak np.
@code{"Oh, what a fool am I!"}.

Prawostronny operand operatorów @samp{~} i @samp{!~} mo¿e byæ albo
wyra¿eniem regularnym sta³ym (@code{/@dots{}/}), albo zwyk³ym wyra¿eniem,
wówczas warto¶æ tego wyra¿enia jako ³añcucha jest u¿ywana jako dynamiczne
wyra¿enie regularne (@pxref{U¿ywanie regexp, , Jak stosowaæ wyra¿enia regularne};
tak¿e @pxref{Regexp obliczane, ,Stosowanie dynamicznych wyra¿eñ regularnych}).

@cindex wyra¿enie regularne jako wyra¿enie
W ostatnich implementacjach @code{awk}, wyra¿enie regularne sta³e w
uko¶nikach jest samo równie¿ wyra¿eniem (zwyk³ym).  Wyra¿enie regularne
@code{/@var{regexp}/} stanowi skrót dla tego wyra¿enia porównuj±cego:

@example
$0 ~ /@var{regexp}/
@end example

Istnieje specjalne miejsce, w którym @code{/foo/} @emph{nie} stanowi skrótu
dla @samp{$0 ~ /foo/}: wówczas, gdy jest ono prawostronnym  operandem
operatora @samp{~} lub @samp{!~}!
@xref{U¿ywanie sta³ych regexp,  ,U¿ywanie sta³ych regexp},
gdzie omówiono szczegó³y.

@c This paragraph has been here since day 1, and has always bothered
@c me, especially since the expression doesn't really make a lot of
@c sense. So, just take it out.
@ignore
In some contexts it may be necessary to write parentheses around the
regexp to avoid confusing the @code{gawk} parser.  For example,
@samp{(/x/ - /y/) > threshold} is not allowed, but @samp{((/x/) - (/y/))
> threshold} parses properly.
@end ignore

@node Operatory logiczne, Wyra¿enia warunkowe, Typy i porównania, Wyra¿enia
@section Wyra¿enia logiczne
@cindex wyra¿enie logiczne
@cindex logiczne wyra¿enie
@cindex boole'owskie wyra¿enie
@cindex operatory, boolowskie
@cindex operatory, logiczne
@cindex logiczne operatory
@cindex boole'owskie operatory
@cindex operacje, logiczne
@cindex operatory skrócone
@cindex and operator
@cindex or operator
@cindex not operator
@cindex @code{&&} operator
@cindex @code{||} operator
@cindex @code{!} operator

@dfn{Wyra¿enie logiczne} jest po³±czeniem wyra¿eñ porównania
lub wyra¿eñ dopasowania, przy u¿yciu operatorów logicznych ``or''
(@samp{||}), ``and'' (@samp{&&}) i ``not'' (@samp{!}), razem z
nawiasami do sterowania zagnie¿d¿aniem.  Prawdziwo¶æ wyra¿enia
logicznego jest obliczana jako kombinacja prawdziwo¶ci wyra¿eñ
sk³adowych.  Wyra¿enia logiczne s± te¿ nazywane
@dfn{wyra¿eniami boole'owskimi}.  Oba terminy s± równowa¿ne.

Wyra¿enia logiczne mog± byæ u¿ywane wszêdzie tam, gdzie wyra¿enia
porównania lub dopasowania.  Wykorzystuje siê je w instrukcjach @code{if},
@code{while}, @code{do} i @code{for}
(@pxref{Instrukcje, ,Instrukcje steruj±ce w akcjach}).  Posiadaj± warto¶ci
numeryczne (jeden je¶li prawda, zero je¶li fa³sz), co ma znaczenie przy
przypisywaniu wyniku wyra¿enia logicznego zmiennej lub przy
wykorzystywaniu go w dzia³aniach arytmetycznych.

Dodatkowo, ka¿de wyra¿enie logiczne jest tak¿e poprawnym wzorcem, wiêc mo¿na
go u¿yæ jako wzorca do sterowania wykonaniem regu³.

Oto opis, z przyk³adami, trzech operatorów logicznych.

@c @cartouche
@table @code
@item @var{logiczne1} && @var{logiczne2}
Prawda, je¶li zarówno @var{logiczna1} jak i @var{logiczna2} s± prawdziwe.
Na przyk³ad, poni¿sza instrukcja wypisuje bie¿±cy rekord wej¶ciowy je¶li
zawiera on zarówno @samp{2400} jak i @samp{foo}.

@example
if ($0 ~ /2400/ && $0 ~ /foo/) print
@end example

Podwyra¿enie @var{logiczne2} jest obliczane tylko wtedy, gdy @var{logiczne1}
jest prawdziwe.  Mo¿e to mieæ znaczenie gdy @var{logiczne2} zawiera wyra¿enia
daj±ce skutki uboczne: w przypadku @samp{$0 ~ /foo/ && ($2 == bar++)},
je¶li w rekordzie nie ma @samp{foo}, to zmienna @code{bar} nie jest
inkrementowana.

@item @var{logiczne1} || @var{logiczne2}
Prawda je¶li co najmniej jedno z wyra¿eñ @var{logiczne1} lub
@var{logiczne2} jest prawdziwe.  Na przyk³ad, poni¿sza instrukcja wypisuje
wszystkie rekordy wej¶cia zawieraj±ce @emph{albo} @samp{2400} albo
@samp{foo}, lub oba.

@example
if ($0 ~ /2400/ || $0 ~ /foo/) print
@end example

Podwyra¿enie @var{logiczne2} jest obliczane tylko wtedy, gdy @var{logiczne1}
jest fa³szywe.   Mo¿e to mieæ znaczenie gdy @var{logiczne2} zawiera wyra¿enia
daj±ce skutki uboczne.

@item ! @var{logiczne}
Prawda je¶li @var{logiczne} jest fa³szywe.  Na przyk³ad, poni¿szy program
wypisuje wszystkie rekordy pliku wej¶ciowego @file{BBS-list}, które
@emph{nie} zawieraj± ³añcucha @samp{foo}.

@c A better example would be `if (! (subscript in array)) ...' but we
@c haven't done anything with arrays or `in' yet. Sigh.
@example
awk '@{ if (! ($0 ~ /foo/)) print @}' BBS-list
@end example
@end table
@c @end cartouche

Operatory @samp{&&} i @samp{||} z powodu sposobu, w jaki dzia³aj±, nazywane
s± operatorami @dfn{skróconymi} (short-circuit).
Obliczenia pe³nego wyra¿enia s± ``skracane'', przerywane, je¿eli wynik mo¿na
okre¶liæ ju¿ po obliczeniu czê¶ci wyra¿enia.

@cindex kontynuacja linii
Instrukcjê wykorzystuj±c± @samp{&&} lub @samp{||} kontynuujemy po prostu
stawiaj±c po nich znak nowej linii.  Nie mo¿na jednak stawiaæ znaku nowej
linii przed tymi operatorami bez u¿ycia kontynuacji odwróconym uko¶nikiem.
(@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}).

Faktyczn± warto¶ci± wyra¿enia wykorzystuj±cego operator @samp{!} bêdzie jeden
lub zero, w zale¿no¶ci od prawdziwo¶ci wyra¿enia, do którego go zastosowano.

Operator @samp{!} przydaje siê czêsto do zmiany stanu zmiennej flagowej z
fa³szu na prawdê i z powrotem.  Na przyk³ad, poni¿szy program jest jednym
ze sposobów wypisania wierszy umieszczonych miêdzy specjalnymi wierszami
grupuj±cymi:

@example
$1 == "START"   @{ interested = ! interested @}
interested == 1 @{ print @}
$1 == "END"     @{ interested = ! interested @}
@end example

@noindent
Zmienna @code{interested}, jak wszystkie zmienne @code{awk}, startuje
zainicjowana na zero, które jest równie¿ fa³szem.  Gdy zostanie spostrze¿ony
wiersz, którego pierwszym polem jest @samp{START}, warto¶æ @code{interested}
za pomoc± @samp{!} prze³±czana jest na prawdê.  Nastêpna regu³a wypisuje
wiersze dopóki @code{interested} jest prawdziwe.  Gdy zostanie spostrze¿ony
wiersz, którego pierwszym polem jest @samp{END}, @code{interested}
prze³±czane jest z powrotem na fa³sz.
@ignore
We should discuss using `next' in the two rules that toggle the
variable, to avoid printing the bracketing lines, but that's more
distraction than really needed.
@end ignore

@node Wyra¿enia warunkowe, Wywo³ania funkcji, Operatory logiczne, Wyra¿enia
@section Wyra¿enia warunkowe
@cindex wyra¿enie warunkowe

@dfn{Wyra¿enie warunkowe} jest specjalnym rodzajem wyra¿enia z trzema
operandami.  Pozwala na wykorzystanie warto¶ci jednego z wyra¿eñ do wyboru
jednego z dwu pozosta³ych wyra¿eñ.

Wyra¿enie warunkowe jest takie samo jak w jêzyku C:

@example
@var{selektor} ? @var{wyr-je¶li-prawda} : @var{wyr-je¶li-fa³sz}
@end example

@noindent
Mamy tu trzy podwyra¿enia.  Pierwsze, @var{selektor}, jest zawsze obliczane
jako pierwsze.  Je¿eli jest ono ``prawdziwe'' (nie zero i nie puste), to
nastêpnie obliczane jest @var{wyr-je¶li-prawda} a jego warto¶æ staje siê
warto¶ci± ca³ego wyra¿enia.  W przeciwnym razie, jako nastêpne jest obliczane
@var{wyr-je¶li-fa³sz} a jego warto¶æ staje siê warto¶ci± ca³ego wyra¿enia.

Na przyk³ad, to wyra¿enie tworzy warto¶æ bezwzglêdn± @code{x}:

@example
x > 0 ? x : -x
@end example

Przy ka¿dym wyliczaniu wyra¿enia warunkowego u¿ywane jest dok³adnie
jedno z @var{wyr-je¶li-prawda} i @var{wyr-je¶li-fa³sz}; drugie jest
ignorowane.  Jest to istotne gdy wyra¿enia maj± skutki uboczne.
Na przyk³ad, to wyra¿enie warunkowe bada element @code{i} albo tablicy
@code{a} albo tablicy @code{b}, i inkrementuje @code{i}.

@example
x == y ? a[i++] : b[i++]
@end example

@noindent
Jest pewne, ¿e inkrementacja @code{i} nast±pi dok³adnie raz, gdy¿
zawsze wykonywane jest tylko jedno z dwu wyra¿eñ inkrementuj±cych,
drugie nie.  @xref{Tablice, ,Tablice w @code{awk}}, gdzie napisano
wiêcej o tablicach.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@cindex kontynuacja linii
Drobnym rozszerzeniem w @code{gawk} jest mo¿liwo¶æ kontynuacji instrukcji
wykorzystuj±cej @samp{?:} przez zwyk³e postawienie znaku nowej linii po
jednym z tych znaków.  Nie mo¿na jednak stawiaæ znaku nowej linii przed
którym¶ z nich bez zastosowania kontynuacji odwrotnym uko¶nikiem
(@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}).  Je¿eli
podano opcjê @samp{--posix} (@pxref{Opcje, , Opcje wiersza poleceñ}),
to rozszerzenie to jest wy³±czane.

@node Wywo³ania funkcji, Priorytet, Wyra¿enia warunkowe, Wyra¿enia
@section Wywo³ania funkcji
@cindex wywo³anie funkcji
@cindex funkcja, wywo³anie

@dfn{Funkcja} jest nazw± nadan± konkretnym obliczeniom.  Poniewa¿ maj± one
nazwê, mo¿na ich za¿±daæ w dowolnym miejscu programu pos³uguj±c siê t±
nazw±.  Na przyk³ad, funkcja @code{sqrt} oblicza pierwiastek kwadratowy
z liczby.

Istnieje sta³y zestaw funkcji @dfn{wbudowanych}, co znaczy, ¿e s± one
dostêpne w ka¿dym programie @code{awk}.  Funkcja @code{sqrt} jest
jedn± z nich.
@xref{Wbudowane, ,Funkcje wbudowane}, gdzie znajduje siê lista funkcji
wbudowanych i ich opisy.  Dodatkowo, mo¿na definiowaæ w³asne funkcje, do
wykorzystania w swoim programie.
@xref{U¿ytkownika, ,Funkcje u¿ytkownika}, gdzie opisano, jak to
zrobiæ.

@cindex argumenty w wywo³aniu funkcji
Funkcje wykorzystuje siê za pomoc± wyra¿enia @dfn{wywo³ania funkcji},
sk³adaj±cego siê z nazwy funkcji, bezpo¶rednio po której nastêpuje lista
@dfn{argumentów} w nawiasach.  Argumenty s± wyra¿eniami dostarczaj±cymi
surowców do obliczeñ przeprowadzanych przez funkcjê.  Je¿eli wystêpuje wiêcej
ni¿ jeden argument, to s± one oddzielane przecinkami.  Je¿eli brak
argumentów, po nazwie funkcji piszemy same nawiasy @samp{()}.
Oto kilka przyk³adów:

@example
sqrt(x^2 + y^2)        @i{jeden argument}
atan2(y, x)            @i{dwa argumenty}
rand()                 @i{bez argumentów}
@end example

@strong{Nie nale¿y stawiaæ spacji miêdzy nazw± funkcji a nawiasem
otwieraj±cym!}  Nazwa funkcji zdefiniowanej przez u¿ytkownika wygl±da tak
jak nazwa zmiennej, i spacja spowodowa³aby, ¿e ca³e wyra¿enie wygl±da³oby
jak konkatenacja zmiennej z wyra¿eniem wewn±trz nawiasów.  Spacja przed
nawiasami jest nieszkodliwa przy funkcjach wbudowanych, ale najlepiej nie
nabieraæ nawyku wtr±cania spacji, by unikn±æ pomy³ek przy funkcjach
definiowanych przez u¿ytkownika.

Ka¿da funkcja oczekuje konkretnej liczby argumentów.  Na przyk³ad,
funkcja @code{sqrt} musi byæ wywo³ana z pojedynczym argumentem, liczb±,
z której ma wyci±gn±æ pierwiastek:

@example
sqrt(@var{argument})
@end example

Niektóre z funkcji wbudowanych pozwalaj± na pominiêcie ostatniego argumentu.
Je¶li tak post±pimy, to u¿yj± rozs±dnej warto¶ci domy¶lnej.
@xref{Wbudowane, ,Funkcje wbudowane}, gdzie podano szczegó³y.
Je¿eli pominiêto argumenty w wywo³aniu funkcji definiowanej przez
u¿ytkownika, to s± one traktowane jak zmienne lokalne, inicjowane ³añcuchem
pustym
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).

Jak ka¿de inne wyra¿enie, wywo³anie funkcji posiada warto¶æ, obliczan±
przez funkcjê w oparciu o przekazane jej przez nas argumenty.  W tym
przyk³adzie, warto¶ci± @samp{sqrt(@var{argument})} jest pierwiastek
kwadratowy @var{argumentu}.  Funkcja mo¿e te¿ mieæ skutki uboczne, takie
jak np. przypisanie warto¶ci do pewnych zmiennych czy wykonanie operacji
wej¶cia/wyj¶cia.

Oto polecenie do czytania liczb, po jednej w wierszu, i wypisywania
pierwiastka kwadratowego ka¿dej z nich:

@example
@group
$ awk '@{ print "Pierwiastkiem kwadratowym z", $1, "jest", sqrt($1) @}'
1
@print{} Pierwiastkiem kwadratowym z 1 jest 1
3
@print{} Pierwiastkiem kwadratowym z 3 jest 1.73205
5
@print{} Pierwiastkiem kwadratowym z 5 jest 2.23607
@kbd{Control-d}
@end group
@end example

@node Priorytet,  , Wywo³ania funkcji, Wyra¿enia
@section Priorytet operatorów (Jak ³±cz± siê ró¿ne operatory)
@cindex priorytet operatorów
@cindex operatory, priorytet

@dfn{Priorytet operatorów} okre¶la sposób, w jaki s± grupowane operatory
gdy pojawiaj± siê tu¿ obok siebie w jednym wyra¿eniu.  Na przyk³ad, @samp{*}
ma wy¿szy priorytet ni¿ @samp{+}; zatem, @samp{a + b * c} oznacza
przemno¿enie @code{b} i @code{c}, a nastêpnie dodanie @code{a} do iloczynu
(tj.@:  @samp{a + (b * c)}).

Nad priorytetem operatorów nadrzêdna jest kolejno¶æ narzucona zastosowanymi
nawiasami.  Mo¿na my¶leæ o regu³ach priorytetów tak, jakby stwierdza³y one,
gdzie przyjête zostanie po³o¿enie nawiasów, je¿eli sami ich nie postawimy.
W rzeczywisto¶ci, rozs±dnie jest przy nietypowej kombinacji operatorów
zawsze stosowaæ nawiasy, gdy¿ inni czytaj±cy program mog± nie pamiêtaæ, jaki
jest priorytet w tym przypadku.  Mo¿emy o tym równie¿ zapomnieæ sami lub
te¿ pope³niæ pomy³kê.  Jawne nawiasy pomog± unikn±æ podobnych b³êdów.

Kiedy operatory o równym priorytecie s± u¿yte razem, to jako pierwszy
grupuje operator wystêpuj±cy po lewej, z wyj±tkiem przypisania,
operatorów warunkowych i potêgowania, gdzie grupowanie odbywa siê
w odwrotnej kolejno¶ci.  Zatem, @samp{a - b + c} grupuje jak
@samp{(a - b) + c}, a @samp{a = b = c} grupuje jak @samp{a = (b = c)}.

Priorytet jednoargumentowych operatorów przedrostkowych nie ma znaczenia
póki zaanga¿owane s± tylko operatory jednoargumentowe, gdy¿ jest tylko jeden
sposób ich interpretacji -- poczynaj±c od najbardziej wewnêtrznego.
Zatem, @samp{$++i} oznacza @samp{$(++i)} a @samp{++$x} znaczy @samp{++($x)}.
Je¿eli jednak po operandzie wystêpuje inny operator, to priorytet operatorów
jednoargumentowych mo¿e mieæ znaczenie.  Zatem, @samp{$x^2} oznacza
@samp{($x)^2}, ale @samp{-x^2} oznacza @samp{-(x^2)}, gdy¿ @samp{-}
ma ni¿szy priorytet ni¿ @samp{^}, podczas gdy @samp{$} ma wy¿szy.

Oto tabela operatorów wystêpuj±cych w @code{awk}, w kolejno¶ci
od najwy¿szego priorytetu do najni¿szego:

@c use @code in the items, looks better in TeX w/o all the quotes
@table @code
@item (@dots{})
Grupowanie.

@item $
Pole.

@item ++ --
Inkrementacja, dekrementacja.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@item ^ **
Potêgowanie. Operatory te grupuj± od prawej do lewej.
(POSIX nie wymienia operatora @samp{**}.)

@item + - !
Jednoargumentowy plus, minus, negacja logiczna (``not'').

@item * / %
Mno¿enie, dzielenie, reszta z dzielenia (modulo).

@item + -
Dodawanie, odejmowanie.

@item @r{Konkatenacja}
Do wskazania konkatenacji nie jest wykorzystywany ¿aden specjalny znacznik.
Operandy s± po prostu zapisywane jeden obok drugiego.

@item < <= == !=
@itemx > >= >> |
Relacje i przekierowania.
Operatory relacji i przekierowania maj± ten sam poziom priorytetu.  Znaki
takie jak @samp{>} s³u¿± zarówno do zapisu relacji jak i przekierowañ.
Oba znaczenia s± odró¿niane po kontek¶cie.

Zwróæ uwagê, ¿e operatory przekierowania wej¶cia/wyj¶cia w instrukcjach
@code{print} i @code{printf} nale¿± do poziomu instrukcji, nie do wyra¿eñ.
Przekierowanie nie tworzy wyra¿enia, które mog³oby byæ operandem innego
operatora.  Wskutek tego, nie ma sensu stosowanie operatora przekierowania
w pobli¿u innego operatora o ni¿szym priorytecie, bez u¿ycia nawiasów.
Takie kombinacje, na przyk³ad @samp{print foo > a ? b : c}, powoduj± b³êdy
sk³adniowe.  Poprawnym sposobem zapisania tej instrukcji jest
@samp{print foo > (a ? b : c)}.

@item ~ !~
Dopasowanie, nie-dopasowanie.

@item in
Przynale¿no¶æ do tablicy.

@item &&
Koniunkcja logiczna (``and'').

@item ||
Alternatywa logiczna (``or'').

@item ?:
Operator warunkowy.  Grupuje od prawej do lewej.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@item = += -= *=
@itemx /= %= ^= **=
Przypisanie.  Te operatory grupuj± od prawej do lewej.
(POSIX nie wymienia operatora @samp{**}.)
@end table

@node Wzorce i akcje, Instrukcje, Wyra¿enia, Top
@chapter Wzorce i akcje
@cindex wzorzec, definicja

Jak ju¿ widzieli¶my, ka¿da instrukcja @code{awk} sk³ada siê ze wzorca
i skojarzonej z nim akcji.  W tym rozdziale opisano w jaki sposób
konstruuje siê wzorce i akcje.

@menu
* Przegl±d wzorców::            Co wchodzi w sk³ad wzorca.
* Przegl±d akcji::              Co wchodzi w sk³ad akcji.
@end menu

@node Przegl±d wzorców, Przegl±d akcji, Wzorce i akcje, Wzorce i akcje
@section Elementy wzorców

Wzorce w @code{awk} steruj± wykonywaniem regu³: regu³a jest wykonywana
gdy jej wzorzec pasuje do bie¿±cego rekordu wej¶ciowego.  W tej sekcji
zajmujemy siê tym, jak pisaæ wzorce.

@menu
* Rodzaje wzorców::             Lista wszystkich rodzajów wzorców.
* Wzorce regexp::               U¿ywanie wyra¿eñ regularnych jako wzorców.
* Wyra¿enia wzorcami::          Jako wzorzec mo¿e byæ u¿yte dowolne wyra¿enie.
* Zakresy::                     Para wzorców okre¶la zakres rekordów.
* BEGIN/END::                   Podawanie regu³ inicjuj±cych i koñcz±cych.
* Pusty::                       Pusty wzorzec, który dopasowuje ka¿dy rekord.
@end menu

@node Rodzaje wzorców, Wzorce regexp, Przegl±d wzorców, Przegl±d wzorców
@subsection Rodzaje wzorców
@cindex wzorce, typy

Oto podsumowanie typów wzorców obs³ugiwanych w @code{awk}.

@table @code
@item /@var{wyra¿enie regularne}/
Wyra¿enie regularne jako wzorzec.  Pasuje gdy tekst bie¿±cego rekordu
wej¶ciowego pasuje do wyra¿enia regularnego.
(@xref{Regexp, ,Regular Expressions}.)

@item @var{wyra¿enie}
Pojedyncze wyra¿enie.  Pasuje gdy jego warto¶æ jest niezerowa (je¶li to
liczba) lub niepusta (je¶li ³añcuch).
(@xref{Wyra¿enia wzorcami, ,Wyra¿enia jako wzorce}.)

@item @var{wz1}, @var{wz2}
Para wzorców rozdzielona przecinkiem, okre¶laj±ca zakres rekordów.  Zakres
zawiera zarówno rekord pocz±tkowy, który pasuje do @var{wz1}, jak i rekord
koñcowy, pasuj±cy do @var{wz2}.
(@xref{Zakresy, ,Okre¶lanie zakresów rekordów za pomoc± wzorców}.)

@item BEGIN
@itemx END
Wzorce specjalne umo¿liwiaj±ce podanie akcji pocz±tkowych, wykonywanych
przy rozpoczêciu pracy programu @code{awk}, lub koñcowych,
porz±dkowych przed jej zakoñczeniem.
(@xref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}.)

@item @var{pusty}
Wzorzec pusty. Pasuje do niego ka¿dy rekord wej¶ciowy.
(@xref{Pusty, ,Wzorzec pusty}.)
@end table

@node Wzorce regexp, Wyra¿enia wzorcami, Rodzaje wzorców, Przegl±d wzorców
@subsection Wyra¿enia regularne jako wzorce

Ju¿ od pierwszych przyk³adów u¿ywali¶my wyra¿eñ regularnych jako wzorców.
Ten rodzaj wzorca jest po prostu sta³ym wyra¿eniem regularnym w czê¶ci
regu³y opisuj±cej wzorzec.  Znaczy ono @samp{$0 ~ /@var{wzorzec}/}.
Taki wzorzec pasuje gdy rekord wej¶ciowy pasuje do wyra¿enia regularnego.
Na przyk³ad:

@example
/foo|bar|baz/  @{ belkot++ @}
END            @{ print "Wy³apano", belkot, "s³ów tech-be³kotu" @}
@end example

@node Wyra¿enia wzorcami, Zakresy, Wzorce regexp, Przegl±d wzorców
@subsection Wyra¿enia jako wzorce

Dowolne wyra¿enie @code{awk} jest poprawnym wzorcem.
Wzorzec ten pasuje je¶li warto¶æ wyra¿enia jest niezerowa (je¶li to liczba)
lub niepusta (je¶li ³añcuch).

Wyra¿enie jest przeliczane przy ka¿dorazowym testowaniu regu³y z nowym
rekordem wej¶ciowym.  Je¿eli wykorzystuje ono pola, jak np. @code{$1}, to
jego warto¶æ zale¿y wprost od tekstu nowego rekordu.  W przeciwnym razie,
zale¿y tylko od tego, co zdarzy³o siê do tej pory podczas wykonywania
programu @code{awk}, lecz nadal mo¿e byæ u¿yteczne.

Bardzo czêsto wystêpuj±cym rodzajem wyra¿enia stosowanym jako wzorzec jest
wyra¿enie porównania, korzystaj±ce z operatorów porównania opisanych w
@ref{Typy i porównania, ,Typy zmiennych i wyra¿enia porównania}.

Bardzo czêsto stosowanymi wyra¿eniami s± tak¿e dopasowanie i nie-dopasowanie
wyra¿enia regularnego.  Lewym operandem operatorów @samp{~} i @samp{!~} jest
³añcuch.  Prawy operand jest albo sta³ym wyra¿eniem regularnym ujêtym
w uko¶niki (@code{/@var{regexp}/}) albo dowolnym innym wyra¿eniem, którego
warto¶æ ³añcuchowa wykorzystywana jest jako dynamiczne wyra¿enie regularne
(@pxref{Regexp obliczane, , Stosowanie dynamicznych wyra¿eñ regularnych}).

Poni¿szy przyk³ad wypisuje drugie pole ka¿dego rekordu wej¶ciowego, którego
pierwszym polem jest dok³adnie @samp{foo}.

@example
$ awk '$1 == "foo" @{ print $2 @}' BBS-list
@end example

@noindent
(Nie otrzymamy ¿adnego wyj¶cia, poniewa¿ nie ma BBS-u o nazwie ``foo''.)
Inaczej bêdzie przy poni¿szym dopasowaniu wyra¿enia regularnego, które
akceptuje dowolny rekord z pierwszym polem zawieraj±cym @samp{foo}:

@example
@group
$ awk '$1 ~ /foo/ @{ print $2 @}' BBS-list
@print{} 555-1234
@print{} 555-6699
@print{} 555-6480
@print{} 555-2127
@end group
@end example

Jako wzorce s± równie¿ powszechnie wykorzystywane wyra¿enia logiczne.
To, czy rekord pasuje do wzorca, zale¿y od dopasowania jego podwyra¿eñ.

Na przyk³ad, poni¿sze polecenie wypisuje wszystkie rekordy z
@file{BBS-list}, które zawieraj± zarówno @samp{2400} jak i @samp{foo}.

@example
$ awk '/2400/ && /foo/' BBS-list
@print{} fooey        555-1234     2400/1200/300     B
@end example

Poni¿sze polecenie wypisuje wszystkie rekordy z @file{BBS-list}, które
zawieraj± @samp{2400} @emph{lub} @samp{foo}, lub oba.

@example
@group
$ awk '/2400/ || /foo/' BBS-list
@print{} alpo-net     555-3412     2400/1200/300     A
@print{} bites        555-1675     2400/1200/300     A
@print{} fooey        555-1234     2400/1200/300     B
@print{} foot         555-6699     1200/300          B
@print{} macfoo       555-6480     1200/300          A
@print{} sdace        555-3430     2400/1200/300     A
@print{} sabafoo      555-2127     1200/300          C
@end group
@end example

Poni¿sze polecenie wypisuje wszystkie rekordy z @file{BBS-list}, które
@emph{nie} zawieraj± ³añcucha @samp{foo}.

@example
@group
$ awk '! /foo/' BBS-list
@print{} aardvark     555-5553     1200/300          B
@print{} alpo-net     555-3412     2400/1200/300     A
@print{} barfly       555-7685     1200/300          A
@print{} bites        555-1675     2400/1200/300     A
@print{} camelot      555-0542     300               C
@print{} core         555-2912     1200/300          C
@print{} sdace        555-3430     2400/1200/300     A
@end group
@end example

Podwyra¿enia operatora logicznego we wzorcu mog± byæ wyra¿eniami
regularnymi, porównaniami, czy dowolnymi innymi wyra¿eniami @code{awk}.
Wzorce zakresu nie s± wyra¿eniami, wiêc nie mog± pojawiæ siê wewn±trz
wzorców logicznych.  Podobnie, nie s± wyra¿eniami i nie mog± pojawiæ siê
wewn±trz wzorców logicznych wzorce specjalne @code{BEGIN} i @code{END},
które nigdy nie dopasowuj± ¿adnego rekordu wej¶ciowego.

Specjalnym przypadkiem wyra¿enia bêd±cego wzorcem wzorca jest te¿ sta³e
wyra¿enie regularne.  @code{/foo/} jako wyra¿enie ma warto¶æ jeden je¶li w
rekordzie wej¶ciowym pojawia siê @samp{foo}.  Zatem, jako wzorzec,
@code{/foo/} dopasowuje dowolny rekord zawieraj±cy @samp{foo}.

@node Zakresy, BEGIN/END, Wyra¿enia wzorcami, Przegl±d wzorców
@subsection Okre¶lanie zakresów rekordów za pomoc± wzorców

@cindex zakres, wzorzec
@cindex wzorzec, zakresu
@cindex dopasowanie zakresu wierszy
@dfn{Wzorzec zakresu} tworz± dwa wzorce rozdzielone przecinkiem:
ma on postaæ @samp{@var{wzpocz}, @var{wzkoñc}}.  Dopasowuje zakres kolejnych
wierszy wej¶ciowych.  Pierwszy wzorzec, @var{wzpocz}, decyduje o tym, gdzie
zaczyna siê zakres, a drugi,  @var{wzkoñc}, gdzie siê on koñczy.
Na przyk³ad,

@example
awk '$1 == "on", $1 == "off"'
@end example

@noindent
wypisuje ka¿dy rekord wej¶ciowy pomiêdzy parami @samp{on}/@samp{off},
z nimi w³±cznie.

Wzorzec zakresu zaczyna pracê od dopasowywania do @var{wzpocz} ka¿dego
rekordu wej¶ciowego.  Kiedy rekord pasuje do @var{wzpocz}, zakres rekordów
staje siê @dfn{w³±czony}.  Ten rekord pasuje do zakresu rekordów.
Dopóki zakres pozostaje w³±czony, automatycznie pasuje do niego ka¿dy
przeczytany rekord wej¶ciowy.  Równocze¶nie ka¿dy z nich jest dopasowywany
do @var{wzkoñc}; gdy dopasowanie siê powiedzie, wzorzec zakresu jest
ponownie wy³±czany przed nastêpnym rekordem.  Nastêpnie powraca do
sprawdzania ka¿dego rekordu z @var{wzpocz}.

Zarówno rekord, który w³±czy³ wzorzec, jak i rekord, który go wy³±czy³
pasuj± do wzorca zakresu.  Je¿eli nie chcemy dzia³aæ na tych rekordach,
mo¿emy w akcji danej regu³y napisaæ instrukcje @code{if}, odró¿niaj±ce
je od rekordów, którymi jeste¶my zainteresowani.

Mo¿liwe jest, ¿e wzorzec zostanie w³±czony i wy³±czony przez ten sam
rekord, je¿eli spe³nia on oba warunki.  Wówczas skojarzona ze wzorcem akcja
wykonywana jest tylko dla tego rekordu.

Na przyk³ad, za³ó¿my, ¿e mamy tekst miêdzy dwoma identycznymi znacznikami
(powiedzmy, symbolami @samp{%}), który chcemy zignorowaæ.  Mo¿na usi³owaæ
po³±czyæ wzorzec zakresu, opisuj±cy ograniczany tekst, z instrukcj±
@code{next} (jeszcze nie omawian±,
@pxref{Instrukcja next, , Instrukcja @code{next}}),
co spowoduje, ¿e @code{awk} pominie dalsze przetwarzanie bie¿±cego rekordu
i rozpocznie od nowa z nowym rekordem wej¶ciowym.  Program taki móg³by
wygl±daæ tak:

@example
/^%$/,/^%$/    @{ next @}
               @{ print @}
@end example

@noindent
@cindex pomijanie wierszy miêdzy znacznikami
Ten program nie dzia³a poprawnie, gdy¿ wzorzec zakresu jest zarówno w³±czany
jak i wy³±czany przez pierwszy wiersz z samym znakiem @samp{%}.
Do realizacji naszego zadania musimy napisaæ program w taki sposób,
korzystaj±c z flagi:

@example
/^%$/     @{ skok = ! skok; next @}
skok == 1 @{ next @} # przeskocz wiersze gdy ustawiony `skok'
@end example

Zauwa¿, ¿e przecinek @samp{,} we wzorcu zakresu ma najni¿szy priorytet
(jest obliczany ostatni) ze wszystkich operatorów.  Zatem, na przyk³ad,
poni¿szy program usi³uje po³±czyæ wzorzec zakresu z innym, prostszym testem.

@example
echo Tak | awk '/1/,/2/ || /Tak/'
@end example

Autor programu chcia³, by znaczy³o to @samp{(/1/,/2/) || /Tak/}.
Jednak @code{awk} interpretuje je jako @samp{/1/, (/2/ || /Tak/)}.
Zachowania tego nie mo¿na zmieniæ lub obej¶æ; wzorce zakresu nie ³±cz± siê
z innymi wzorcami.

@node BEGIN/END, Pusty, Zakresy, Przegl±d wzorców
@subsection Wzorce specjalne @code{BEGIN} i @code{END}

@cindex @code{BEGIN}, wzorzec specjalny
@cindex wzorzec, @code{BEGIN}
@cindex @code{END}, wzorzec specjalny
@cindex wzorzec, @code{END}
@code{BEGIN} i @code{END} s± wzorcami specjalnymi.  Nie s± u¿ywane do
dopasowania rekordów wej¶ciowych.  Zamiast tego, umo¿liwiaj± podanie
akcji startowych lub koñcowych dla w³asnego skryptu @code{awk}.

@menu
* U¿ywanie BEGIN/END::          Jak i dlaczego korzystaæ z regu³ BEGIN/END.
* I/O i BEGIN/END::             Kwestie I/O w regu³ach BEGIN/END.
@end menu

@node U¿ywanie BEGIN/END, I/O i BEGIN/END, BEGIN/END, BEGIN/END
@subsubsection Akcje pocz±tkowe i koñcowe

Regu³a @code{BEGIN} wykonywana jest, jednokrotnie, przed odczytaniem
pierwszego rekordu wej¶ciowego.  Regu³a @code{END} wykonywana jest,
jednokrotnie, po przeczytaniu ca³o¶ci wej¶cia.  Na przyk³ad:

@example
@group
$ awk '
> BEGIN @{ print "Analiza \"foo\"" @}
> /foo/ @{ ++n @}
> END   @{ print "\"foo\" wystêpuje " n " razy." @}' BBS-list
@print{} Analiza "foo"
@print{} "foo" wystêpuje 4 razy.
@end group
@end example

Ten program znajduje liczbê rekordów pliku wej¶ciowego @file{BBS-list}
zawieraj±cych ³añcuch @samp{foo}.  Regu³a @code{BEGIN} wypisuje tytu³
raportu. Nie ma potrzeby wykorzystywania regu³y @code{BEGIN} do inicjowania
licznika @code{n} na zero, gdy¿ @code{awk} robi to automatycznie
(@pxref{Zmienne}).

Druga regu³a zwiêksza zmienn± @code{n} za ka¿dym razem, gdy zostanie
przeczytany rekord zawieraj±cy wzorzec @samp{foo}.  Regu³a @code{END}
na koniec pracy programu wypisuje warto¶æ @code{n}.

Wzorce specjalne @code{BEGIN} i @code{END} nie mog± byæ stosowane
w zakresach ani z operatorami logicznymi (faktycznie nie mog± byæ u¿ywane
z ¿adnymi operatorami).

Program @code{awk} mo¿e mieæ wiele regu³ @code{BEGIN} i/lub @code{END}.
S± one wykonywane w kolejno¶ci wystêpowania, wszystkie regu³y @code{BEGIN}
przy rozpoczêciu pracy a wszystkie regu³y @code{END} przy zakoñczeniu.
Regu³y @code{BEGIN} i @code{END} mog± byæ przeplatane z innymi regu³ami.
W³asno¶æ tê dodano w @code{awk} w wersji z roku 1987 i jest zawarta
w standardzie POSIX.  Pierwotna wersja @code{awk} (z 1978 roku) wymaga³a
umieszczania regu³y @code{BEGIN} na samym pocz±tku programu a @code{END}
na koñcu i zezwala³a tylko na jedn± regu³± @code{BEGIN} i jedn± @code{END}.
Nie jest to ju¿ wymagane, ale jest dobrym rozwi±zaniem je¶li chodzi o
organizacjê programu i jego czytelno¶æ.

Wielokrotne regu³y @code{BEGIN} i @code{END} s± przydatne przy pisaniu
funkcji bibliotecznych, gdy¿ ka¿dy plik biblioteczny mo¿e mieæ swoj±
w³asn± regu³ê @code{BEGIN} i/lub @code{END} do wykonania w³asnej
inicjalizacji i/lub porz±dkowania.  Warto zauwa¿yæ, ¿e kolejno¶æ, w jakiej
wymieniane s± funkcje biblioteczne w wierszu poleceñ wyznacza kolejno¶æ,
w jakiej zostan± wykonane ich regu³y @code{BEGIN} i @code{END}.  Z tego
powodu regu³y te w plikach bibliotecznych musz± byæ pisane tak, by kolejno¶æ
ich wykonywania nie mia³a znaczenia.
@xref{Opcje, ,Opcje wiersza poleceñ}, gdzie jest wiêcej o stosowaniu
funkcji bibliotecznych.
@xref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}}, o wielu
przydatnych funkcjach bibliotecznych.

@cindex ciemny k±t
Je¿eli program @code{awk} ma tylko jedn± regu³ê @code{BEGIN}
i ¿adnych innych regu³, to program koñczy pracê po wykonaniu regu³y
@code{BEGIN}.  (Pierwotna wersja @code{awk} kontynuowa³a czytanie
i ignorowanie wej¶cia a¿ do osi±gniêcia koñca pliku.)  Je¶li jednak istnieje
regu³a @code{END}, to wej¶cie bêdzie czytane, nawet je¿eli w programie nie
ma ¿adnych innych regu³.  Jest to konieczne na wypadek, gdyby regu³a
@code{END} sprawdza³a zmienne @code{FNR} i @code{NR} (c.k.).

Regu³y @code{BEGIN} i @code{END} musz± mieæ akcje.  Nie istnieje dla
nich ¿adna akcja domy¶lna, gdy¿ podczas ich pracy nie ma ¿adnego rekordu
bie¿±cego.

@node I/O i BEGIN/END, , U¿ywanie BEGIN/END, BEGIN/END
@subsubsection Wej¶cie/wyj¶cie z regu³ @code{BEGIN} i @code{END}

@cindex I/O z @code{BEGIN} i @code{END}
@cindex wej¶cie/wyj¶cie z @code{BEGIN} i @code{END}
Istnieje kilka (czasem trudno uchwytnych) kwestii zwi±zanych z wykonywaniem
operacji wej¶cia/wyj¶cia w regule @code{BEGIN} lub @code{END}.

Pierwsza ma zwi±zek z warto¶ci± @code{$0} w regule @code{BEGIN}.  Poniewa¿
regu³y @code{BEGIN} s± wykonywane przed odczytem jakiegokolwiek wej¶cia,
to podczas ich wykonywania po prostu ma ¿adnego rekordu wej¶ciowego,
a wiêc i ¿adnych pól.  Odwo³ania do @code{$0} i pól zwracaj± ³añcuch pusty
lub zero, zale¿nie od kontekstu.  Jedn± z metod nadania @code{$0}
rzeczywistej warto¶ci jest wykonanie polecenia @code{getline} bez zmiennej
(@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).  Inn± metod± jest
po prostu przypisanie jej warto¶ci.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Druga istotna sprawa jest zbli¿ona do pierwszej, tylko dotyczy
odwrotnego kierunku.  Jakie s± warto¶ci @code{$0} i @code{NF} wewn±trz
regu³y @code{END}?  Tradycyjnie, z powodu g³ównie kwestii implementacyjnych,
@code{$0} i @code{NF} wewn±trz regu³y @code{END} by³y
@emph{niezdefiniowane}.  Standard POSIX okre¶li³, ¿e @code{NF} jest dostêpne
w regule @code{END}, i zawiera liczbê pól z ostatniego rekordu wej¶ciowego.
Najprawdopodobniej wskutek przeoczenia, standard nie mówi, ¿e zachowywane
jest równie¿ @code{$0}, choæ logicznie my¶l±c tak powinno byæ.
Faktycznie, @code{gawk} zachowuje warto¶æ @code{$0} do wykorzystania
w regu³ach @code{END}.  Nale¿y jednak byæ ¶wiadomym, ¿e uniksowy @code{awk},
i byæ mo¿e inne implementacje, tego nie robi±.

Trzecia kwestia wynika z dwu pierwszych. Jak nale¿y rozumieæ @samp{print}
wewn±trz regu³y @code{BEGIN} lub @code{END}?  Znaczy ono zawsze to samo,
@samp{print $0}.  Je¿eli @code{$0} jest ³añcuchem pustym, to wypisze pusty
wiersz.  Wielu z dawna pisz±cych w @code{awk} programistów stosuje
@samp{print} w regu³ach @code{BEGIN} i @code{END} w znaczeniu
@samp{@w{print ""}}, polegaj±c na tym, ¿e @code{$0} jest puste.
Mimo, ¿e ogólnie mo¿na tego unikn±æ w regu³ach @code{BEGIN}, przynajmniej
w @code{gawk}, to jest to bardzo z³ym rozwi±zaniem w regu³ach @code{END}.
¦wiadczy te¿ o kiepskim stylu programowania, poniewa¿ je¿eli chcemy
pustego wiersza na wyj¶ciu, powinni¶my w programie zapisaæ to wprost.

@node Pusty,  , BEGIN/END, Przegl±d wzorców
@subsection Wzorzec pusty

@cindex pusty wzorzec
@cindex wzorzec pusty
Pusty (tj.@: nieistniej±cy) wzorzec jest uwa¿any za dopasowuj±cy
@emph{ka¿dy} rekord wej¶ciowy.  Na przyk³ad, program:

@example
awk '@{ print $1 @}' BBS-list
@end example

@noindent
wypisuje pierwsze pole ka¿dego rekordu.

@node Przegl±d akcji,  , Przegl±d wzorców, Wzorce i akcje
@section Przegl±d akcji
@cindex akcja, definicja
@cindex nawiasy klamrowe
@cindex akcja, nawiasy klamrowe
@cindex akcja, oddzielanie instrukcji

Program lub skrypt @code{awk} sk³ada siê z szeregu przeplecionych regu³
i definicji funkcji.
(Funkcje s± opisane dalej.  @xref{U¿ytkownika, ,Funkcje u¿ytkownika}.)

Regu³a zawiera wzorzec i akcjê, z których ka¿de (ale nie oba równocze¶nie)
mo¿e byæ pominiête.  Celem @dfn{akcji} jest przekazanie @code{awk}, co ma
zrobiæ po znalezieniu dopasowania do wzorca.  Zatem, w zarysie, program
@code{awk} ogólnie wygl±da tak:

@example
@r{[}@var{wzorzec}@r{]} @r{[}@{ @var{akcja} @}@r{]}
@r{[}@var{wzorzec}@r{]} @r{[}@{ @var{akcja} @}@r{]}
@dots{}
function @var{nazwa}(@var{argumenty}) @{ @dots{} @}
@dots{}
@end example

Akcja sk³ada siê z jednej lub wiêcej @dfn{instrukcji} @code{awk}, zawartych
w nawiasach klamrowych (@samp{@{} i @samp{@}}).  Ka¿da instrukcja okre¶la
jedn± rzecz do wykonania.  Instrukcje oddzielane s± znakami nowej linii
lub ¶rednikami.

Nawiasy klamrowe wokó³ akcji musz± byæ u¿yte nawet je¶li akcja zawiera
tylko jedn± instrukcjê, a nawet je¶li w ogóle nie zawiera instrukcji.
Jednak, je¿eli ca³kowicie pomijamy akcjê, nale¿y równie¿ pomin±æ
nawiasy klamrowe.  Pominiêta akcja jest równowa¿na @samp{@{ print $0 @}}.

@example
/foo/  @{ @}  # dopasowuje foo, nic nie robi - akcja pusta
/foo/       # dopasowuje foo, wypisuje rekord - pominiêta akcja
@end example

A oto rodzaje instrukcji obs³ugiwane przez @code{awk}:

@itemize @bullet
@item
Wyra¿enia, które mog± wywo³ywaæ funkcje lub przypisywaæ warto¶ci zmiennym
(@pxref{Wyra¿enia}).  Wykonanie tego rodzaju instrukcji oblicza po prostu
warto¶æ wyra¿enia.
Przydatne gdy wyra¿enie ma skutki uboczne.
(@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).

@item
Instrukcje steruj±ce, okre¶laj±ce przebieg sterowania programów @code{awk}.
Jêzyk @code{awk} udostêpnia konstrukty C-podobne
(@code{if}, @code{for}, @code{while} i @code{do}), jak i kilka specjalnych
(@pxref{Instrukcje, ,Instrukcje steruj±ce w akcjach}).

@item
Instrukcje z³o¿one, sk³adaj±ce siê z jednej lub wiêcej instrukcji ujêtych
w nawiasy klamrowe.  Instrukcjê z³o¿on± stosuje siê w celu umieszczenia
w ciele instrukcji @code{if}, @code{while}, @code{do} lub @code{for}
kilku instrukcji razem.

@item
Instrukcje wej¶cia, korzystaj±ce z polecenia
@code{getline} (@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}),
instrukcji @code{next} (@pxref{Instrukcja next, ,Instrukcja @code{next}}),
i instrukcji
@code{nextfile} (@pxref{Instrukcja nextfile, ,Instrukcja @code{nextfile}}).

@item
Instrukcje wyj¶cia, @code{print} i @code{printf}.
@xref{Wypisywanie, ,Wypisywanie wyników}.

@item
Instrukcje usuwania, do usuwania elementów tablic.
@xref{Delete, ,Instrukcja @code{delete}}.
@end itemize

@iftex
Nastêpny rozdzia³ omawia szczegó³owo instrukcje steruj±ce.
@end iftex

@node Instrukcje, Zmienne wbudowane, Wzorce i akcje, Top
@chapter Instrukcje steruj±ce w akcjach
@cindex instrukcja steruj±ca

@dfn{Instrukcje steruj±ce} jak @code{if}, @code{while}, i tak dalej steruj±
przebiegiem wykonania programów @code{awk}.  Wiêkszo¶æ instrukcji
steruj±cych w @code{awk} wzorowana jest na podobnych instrukcjach z C.

Wszystkie instrukcje steruj±ce zaczynaj± siê specjalnym s³owem kluczowym,
jak np. @code{if} czy @code{while}, które odró¿nia je od wyra¿eñ prostych.

@cindex instrukcja z³o¿ona
@cindex z³o¿ona, instrukcja
Wiele instrukcji steruj±cych zawiera inne instrukcje. Na przyk³ad,
instrukcja @code{if} zawiera inn± instrukcjê, która mo¿e byæ wykonana
b±d¼ nie.  Taka zawarta instrukcja zwana jest @dfn{cia³em} (body) instrukcji
steruj±cej.  Je¿eli w ciele instrukcji steruj±cej chcemy zawrzeæ wiêcej
ni¿ jedn± instrukcjê, to grupujemy je, za pomoc± nawiasów klamrowych,
w pojedyncz± @dfn{instrukcjê z³o¿on±}, oddzielaj±c je od siebie znakami
nowej linii lub ¶rednikami.

@menu
* Instrukcja if::               Warunkowe wykonanie pewnych instrukcji @code{awk}.
* Instrukcja while::            Pêtla dopóki jest spe³niony warunek.
* Instrukcja do::               Wykonywanie w pêtli zadanej akcji a¿ do
                                spe³nienia pewnego warunku.
* Instrukcja for::              Inna instrukcja pêtli, która zapewnia
                                klauzule inicjalizacji i inkrementacji.
* Instrukcja break::            Natychmiastowe opuszczenie najbardziej
                                wewnêtrznej obejmuj±cej pêtli.
* Instrukcja continue::         Skok na koniec najbardziej wewnêtrznej
                                obejmuj±cej pêtli.
* Instrukcja next::             Zakoñczenie przetwarzania bie¿±cego
                                rekordu wej¶ciowego.
* Instrukcja nextfile::         Zakoñczenie przetwarzania bie¿±cego pliku.
* Instrukcja exit::             Zakoñczenie wykonywania @code{awk}.
@end menu

@node Instrukcja if, Instrukcja while, Instrukcje, Instrukcje
@section Instrukcja @code{if}-@code{else}

@cindex @code{if}-@code{else} instrukcja
Instrukcja @code{if}-@code{else} jest w @code{awk} instrukcj± ``podejmowania
decyzji''. Wygl±da tak:

@example
if (@var{warunek}) @var{cia³o-if} @r{[}else @var{cia³o-else}@r{]}
@end example

@noindent
@var{Warunek} jest wyra¿eniem, które decyduje o tym, co zrobi reszta
instrukcji.  Je¿eli @var{warunek} jest prawdziwy, to wykonywane jest
@var{cia³o-if}; w przeciwnym razie, wykonywane jest @var{cia³o-else}.
Czê¶æ @code{else} instrukcji jest opcjonalna.  Warunek jest uwa¿any za
fa³szywy je¶li jego warto¶ci± jest zero lub ³añcuch pusty, w przeciwnym
wypadku za prawdziwy.

Oto przyk³ad:

@example
if (x % 2 == 0)
    print "x jest parzyste"
else
    print "x jest nieparzyste"
@end example

W tym przyk³adzie, je¶li wyra¿enie @samp{x % 2 == 0} jest prawdziwe (to
jest, warto¶æ @code{x} dzieli siê przez dwa bez reszty), to wykonywana jest
pierwsza instrukcja @code{print}, w przeciwnym razie wykonywana jest druga
instrukcja @code{print}.

Je¶li @code{else} pojawia siê w tym samym wierszu, co @var{cia³o-if},
a @var{cia³o-if} nie jest instrukcj± z³o¿on± (tj.@: nie jest otoczone
nawiasami klamrowymi), to @var{cia³o-if} musi byæ oddzielone od @code{else}
¶rednikiem.  Dla ilustracji, napiszmy na nowo poprzedni przyk³ad:

@example
if (x % 2 == 0) print "x jest parzyste"; else
        print "x jest nieparzyste"
@end example

@noindent
Je¿eli zapomnimy ¶rednika @samp{;}, to @code{awk} nie bêdzie w stanie
zinterpretowaæ instrukcji i otrzymamy b³±d sk³adniowy.

W rzeczywisto¶ci powy¿szego przyk³adu nie napisaliby¶my w ten sposób,
gdy¿ czytelnik móg³by nie zauwa¿yæ @code{else} gdyby nie by³o pierwsz±
rzecz± w wierszu.

@node Instrukcja while, Instrukcja do, Instrukcja if, Instrukcje
@section Instrukcja @code{while}
@cindex @code{while} instrukcja
@cindex pêtla
@cindex cia³o pêtli

W programowaniu s³owo @dfn{pêtla} (loop) oznacza czê¶æ programu, która mo¿e
byæ wykonana kolejno dwa lub wiêcej razy z rzêdu.

Instrukcja @code{while} jest najprostsz± instrukcj± pêtli w @code{awk}.
Powtarza wykonywanie instrukcji dopóki warunek jest prawdziwy.  Wygl±da tak:

@example
while (@var{warunek})
  @var{cia³o}
@end example

@noindent
gdzie @var{cia³o} jest instrukcj±, któr± nazywamy @dfn{cia³em} pêtli, za¶
@var{warunek} jest wyra¿eniem decyduj±cym o tym, jak d³ugo ma dzia³aæ pêtla.

Pierwsz± rzecz±, jak± robi instrukcja @code{while} jest sprawdzenie
@var{warunku}.  Je¿eli jest prawdziwy, to wykonuje ona instrukcjê
@var{cia³o}.
@ifinfo
(@var{Warunek} jest prawdziwy gdy ma warto¶æ niezerow± i nie jest ³añcuchem
pustym.)
@end ifinfo
Po wykonaniu @var{cia³a} pêtli @var{warunek} jest testowany ponownie
i je¿eli nadal jest prawdziwy, powtórnie wykonywane jest @var{cia³o}.
Proces ten powtarza siê a¿ @var{warunek} przestanie byæ prawdziwy.
Je¿eli @var{warunek} jest pocz±tkowo fa³szywy, to cia³o funkcji nie
jest nigdy wykonywane, a @code{awk} kontynuuje pracê u¿ywaj±c kolejnej
po pêtli instrukcji.

Ten przyk³ad wypisuje pierwsze trzy pola ka¿dego rekordu, po jednym
w wierszu.

@example
awk '@{ i = 1
       while (i <= 3) @{
           print $i
           i++
       @}
@}' inventory-shipped
@end example

@noindent
Tu cia³em pêtli jest ujêta w nawiasy klamrowe instrukcja z³o¿ona,
zawieraj±ca dwie instrukcje.

Nasza pêtla dzia³a tak: najpierw do @code{i} przypisywane jest jeden.
Nastêpnie, @code{while} sprawdza, czy @code{i} jest mniejsze lub równe trzy.
Jest to prawd± gdy @code{i} równa siê jeden, wiêc wypisywane jest @code{i}-te
pole.  Potem @samp{i++} zwiêksza warto¶æ @code{i} o jeden i pêtla siê
powtarza.  Pêtla koñczy pracê, gdy @code{i} dojdzie do czterech.

Jak widaæ, pomiêdzy warunkiem a cia³em nie jest wymagany znak nowej linii,
ale zastosowanie go czyni program czytelniejszym,
chyba ¿e cia³o jest instrukcj± z³o¿on± lub jest bardzo proste.  Znak nowej
linii po otwieraj±cym nawiasie klamrowym, który rozpoczyna instrukcjê
z³o¿on±, tak¿e nie jest konieczny, ale bez niego program by³by trudniejszy
do czytania.

@node Instrukcja do, Instrukcja for, Instrukcja while, Instrukcje
@section Instrukcja @code{do}-@code{while}

Pêtla @code{do} jest odmian± instrukcji pêtli @code{while}.
Instrukcja @code{do} wykonuje jednokrotnie @var{cia³o}, a nastêpnie
powtarza jego wykonywanie dopóki @var{warunek} jest prawdziwy. Wygl±da tak:

@example
@group
do
  @var{cia³o}
while (@var{warunek})
@end group
@end example

Nawet je¿eli @var{warunek} jest fa³szywy na starcie, @var{cia³o} zostanie
wykonane co najmniej raz (i tylko raz, chyba ¿e wykonanie go spowoduje, ¿e
@var{warunek} stanie siê prawdziwy).  Inaczej jest z odpowiedni± instrukcj±
@code{while}:

@example
while (@var{warunek})
  @var{cia³o}
@end example

@noindent
Ta instrukcja nie wykona @var{cia³a} ani razu je¶li @var{warunek}, z którym
rozpoczyna jest fa³szywy.

Oto przyk³ad instrukcji @code{do}:

@example
awk '@{ i = 1
       do @{
          print $0
          i++
       @} while (i <= 10)
@}'
@end example

@noindent
Ten program wypisuje ka¿dy rekord dziesiêæ razy.  Nie jest to zbyt
realistyczny przyk³ad, gdy¿ w tym przypadku równie dobrze wystarczy³oby
zwyk³e @code{while}.
Odzwierciedla to rzeczywist± praktykê: faktyczna potrzeba u¿ycia
@code{do} wystêpuje tylko sporadycznie.

@node Instrukcja for, Instrukcja break, Instrukcja do, Instrukcje
@section Instrukcja @code{for}
@cindex @code{for} instrukcja

Instrukcja @code{for} u³atwia zliczanie iteracji pêtli.  Ogólna postaæ
instrukcji @code{for} wygl±da tak:

@example
for (@var{inicjalizacja}; @var{warunek}; @var{inkrement})
  @var{cia³o}
@end example

@noindent
Czê¶ci @var{inicjalizacja}, @var{warunek} i @var{inkrement} s± dowolnymi
wyra¿eniami @code{awk}, za¶ @var{cia³o} oznacza dowoln± instrukcjê
@code{awk}.

Instrukcja @code{for} zaczyna pracê od wykonania @var{inicjalizacji}.
Nastêpnie, dopóki @var{warunek} jest prawdziwy, powtarza wykonywanie
@var{cia³a} a potem @var{inkrementu}.  Typowo @var{inicjalizacja} nadaje
pewnej zmiennej warto¶æ zero lub jeden,  @var{inkrement} dodaje do niej
jeden, a @var{warunek} porównuje j± z po¿±dan± liczb± iteracji.

Oto przyk³ad instrukcji @code{for}:

@example
@group
awk '@{ for (i = 1; i <= 3; i++)
          print $i
@}' inventory-shipped
@end group
@end example

@noindent
Wypisuje on pierwsze trzy pola ka¿dego rekordu wej¶ciowego, po jednym polu
w wierszu.

W czê¶ci @var{inicjalizacja} nie mo¿na nadaæ warto¶ci wiêcej ni¿ jednej
zmiennej, chyba ¿e pos³u¿ymy siê przypisaniem wielokrotnym, jak np.
@samp{x = y = 0}, które jest mo¿liwe tylko gdy wszystkie warto¶ci
pocz±tkowe s± równe.  (Mo¿na jednak zainicjowaæ dodatkowe zmienne pisz±c
przypisania do nich jako osobne instrukcje przed pêtl± @code{for}.)

Obowi±zuje to tak¿e dla czê¶ci @var{inkrement}; chc±c zwiêkszaæ dodatkowe
zmienne, musimy napisaæ osobne instrukcje na koñcu pêtli.  W tym kontek¶cie
przydatne by³oby wyra¿enie z³o¿one z C, u¿ywaj±ce separatora przecinkowego,
ale nie jest ono rozpoznawane w @code{awk}.

Najczê¶ciej @var{inkrement} jest wyra¿eniem inkrementuj±cym, jak w
przyk³adzie powy¿ej.  Nie jest to jednak wymagane; mo¿e to byæ jakiekolwiek
wyra¿enie dowolnego typu.  Na przyk³ad, ta instrukcja wypisuje wszystkie
potêgi dwójki miêdzy jeden a 100:

@example
for (i = 1; i <= 100; i *= 2)
  print i
@end example

Mo¿na pomin±æ dowolne z trzech wyra¿eñ wystêpuj±cych w nawiasach
po @code{for} je¶li ma ono nic nie robiæ.  Zatem, @w{@samp{for (; x > 0;)}}
jest równowa¿ne @w{@samp{while (x > 0)}}.  Je¿eli pominiêto @var{warunek},
jest on traktowany jak @var{prawda} (true), w rezultacie powoduj±c
@dfn{nieskoñczon± pêtlê} (tj.@: pêtlê, która nigdy nie zakoñczy pracy).

W wiêkszo¶ci przypadków pêtla @code{for} jest skrótem pêtli @code{while},
jak pokazano tutaj:

@example
@var{inicjalizacja}
while (@var{warunek}) @{
  @var{cia³o}
  @var{inkrement}
@}
@end example

@noindent
Jedyny wyj±tek stanowi sytuacja, gdy wewn±trz pêtli zastosowano instrukcjê
@code{continue}
(@pxref{Instrukcja continue, ,Instrukcja @code{continue}}).
Zmiana w podany sposób instrukcji @code{for} na @code{while} mo¿e
zmieniæ skutki instrukcji @code{continue} wewn±trz pêtli.

Istnieje alternatywna wersja pêtli @code{loop} przeznaczona do przechodzenia
kolejno po wszystkich indeksach tablicy:

@example
for (i in tablica)
    @var{zrób co¶ z} tablica[i]
@end example

@noindent
@xref{Przegl±danie tablic, ,Przegl±danie wszystkich elementów tablicy},
gdzie jest wiêcej o tej wersji pêtli @code{for}.

Jêzyk @code{awk} oprócz instrukcji @code{while} ma instrukcjê
@code{for}, poniewa¿ czêsto pêtla @code{for} jest mniej pracoch³onna przy
wpisywaniu i bardziej naturalna w my¶leniu o niej.
W pêtlach zliczanie liczby iteracji jest bardzo czêste.  £atwiej jest
my¶leæ o zliczaniu jako o czê¶ci pêtli ni¿ jako o czym¶, co ma byæ zrobione
wewn±trz niej.

Nastêpna sekcja zawiera bardziej skomplikowane przyk³ady pêtli @code{for}.

@node Instrukcja break, Instrukcja continue, Instrukcja for, Instrukcje
@section Instrukcja @code{break}
@cindex @code{break} instrukcja
@cindex pêtle, wychodzenie z

Instrukcja @code{break} wyskakuje z najbardziej wewnêtrznej obejmuj±cej j±
pêtli @code{for}, @code{while} lub @code{do}.  Poni¿szy program znajduje
najmniejszy dzielnik liczby ca³kowitej, rozpoznaje te¿ liczby pierwsze:

@example
awk '# znajd¼ najmniejszy dzielnik liczby num
     @{ num = $1
@group
       for (div = 2; div*div <= num; div++)
         if (num % div == 0)
           break
@end group
       if (num % div == 0)
         printf "Najmniejszym dzielnikiem %d jest %d\n", num, div
       else
         printf "%d jest liczb± pierwsz±\n", num
     @}'
@end example

Gdy reszt± z dzielenia w pierwszej instrukcji @code{if} jest zero,
@code{awk} natychmiast @dfn{przerywa} (breaks out) dzia³anie
zawieraj±cej j± pêtli @code{for}.  Oznacza to, ¿e @code{awk} przechodzi
bezzw³ocznie do instrukcji nastêpuj±cej po pêtli i kontynuuje przetwarzanie.
(Jest to ca³kiem inne ni¿ instrukcja @code{exit}, która zatrzymuje ca³y
program @code{awk}.
@xref{Instrukcja exit, ,Instrukcja @code{exit}}.)

Oto inny program równowa¿ny poprzedniemu.  Ilustruje sposób, w jaki
@code{warunek} pêtli @code{for} lub @code{while} mo¿e byæ równie dobrze
zast±piony przez @code{break} wewn±trz @code{if}:

@example
@group
awk '# znajd¼ najmniejszy dzielnik liczby num
     @{ num = $1
       for (div = 2; ; div++) @{
         if (num % div == 0) @{
           printf "Najmniejszym dzielnikiem %d jest %d\n", num, div
           break
         @}
         if (div*div > num) @{
           printf "%d jest liczb± pierwsz±\n", num
           break
         @}
       @}
@}'
@end group
@end example

@cindex @code{break}, poza pêtlami
@cindex cechy historyczne
@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@cindex ciemny k±t
Jak opisano powy¿ej, instrukcja @code{break} nie ma ¿adnego znaczenia, je¶li
u¿yta jest poza cia³em pêtli. Jednak, mimo i¿ nigdy tego nie
udokumentowano, historyczne implementacje @code{awk} traktowa³y @code{break}
poza pêtl± tak, jakby by³a to instrukcja @code{next}
(@pxref{Instrukcja next, ,Instrukcja @code{next}}).
Najnowsze wersje uniksowego @code{awk} nie pozwalaj± ju¿ na taki sposób
u¿ycia.  @code{gawk} obs³uguje takie u¿ycie @code{break} tylko je¶li
w wierszu poleceñ podano opcjê @samp{--traditional}
(@pxref{Opcje, ,Opcje wiersza poleceñ}).
W przeciwnym wypadku, zostanie ono potraktowane jako b³±d, gdy¿ standard
POSIX okre¶la, ¿e @code{break} powinno byæ stosowane wy³±cznie wewn±trz
cia³a pêtli (c.k.).

@node Instrukcja continue, Instrukcja next, Instrukcja break, Instrukcje
@section Instrukcja @code{continue}

@cindex @code{continue} instrukcja
Instrukcja @code{continue}, podobnie jak @code{break}, u¿ywana jest tylko
wewn±trz pêtli @code{for}, @code{while} i @code{do}.  Pomija ona resztê
cia³a pêtli, powoduj±c natychmiastowe rozpoczêcie kolejnego cyklu pêtli.
Zwróæ uwagê na ró¿nicê w stosunku do @code{break}, które ca³kowicie
wyskakuje z pêtli.

@c The point of this program was to illustrate the use of continue with
@c a while loop. But Karl Berry points out that that is done adequately
@c below, and that this example is very un-awk-like. So for now, we'll
@c omit it.
@ignore
In Texinfo source files, text that the author wishes to ignore can be
enclosed between lines that start with @samp{@@ignore} and end with
@samp{@atend ignore}.  Here is a program that strips out lines between
@samp{@@ignore} and @samp{@atend ignore} pairs.

@example
BEGIN @{
    while (getline > 0) @{
       if (/^@@ignore/)
           ignoring = 1
       else if (/^@@end[ \t]+ignore/) @{
           ignoring = 0
           continue
       @}
       if (ignoring)
           continue
       print
    @}
@}
@end example

When an @samp{@@ignore} is seen, the @code{ignoring} flag is set to one (true).
When @samp{@atend ignore} is seen, the flag is reset to zero (false). As long
as the flag is true, the input record is not printed, because the
@code{continue} restarts the @code{while} loop, skipping over the @code{print}
statement.

@c Exercise!!!
@c How could this program be written to make better use of the awk language?
@end ignore

Instrukcja @code{continue} w pêtli @code{for} nakazuje @code{awk}
przeskoczenie reszty cia³a pêtli i wznowienie jej wykonywania od
wyra¿enia inkrementacji instrukcji @code{for}.
Ten fakt ilustruje poni¿szy program:

@example
awk 'BEGIN @{
     for (x = 0; x <= 20; x++) @{
         if (x == 5)
             continue
         printf "%d ", x
     @}
     print ""
@}'
@end example

@noindent
Program wypisuje wszystkie liczby od zera do 20, z wyj±tkiem pi±tki,
dla której @code{printf} jest pomijane.  Poniewa¿ nie jest pomijany
inkrement @samp{x++}, @code{x} nie pozostanie zaklinowane na piêciu.
Inaczej ni¿ w pêtli @code{loop} powy¿ej jest w tej pêtli @code{while}:

@example
awk 'BEGIN @{
     x = 0
     while (x <= 20) @{
         if (x == 5)
             continue
         printf "%d ", x
         x++
     @}
     print ""
@}'
@end example

@noindent
Ten program od momentu, gdy @code{x} otrzyma warto¶æ piêæ, bêdzie wykonywa³
wieczn± pêtlê.

@cindex @code{continue}, poza pêtlami
@cindex cechy historyczne
@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@cindex ciemny k±t
Jak opisano powy¿ej, instrukcja @code{continue} nie ma ¿adnego znaczenia,
je¶li u¿yta jest poza cia³em pêtli. Jednak, mimo i¿ nigdy tego nie
udokumentowano, historyczne implementacje @code{awk} traktowa³y
@code{continue} poza pêtl± tak, jakby by³a to instrukcja @code{next}
(@pxref{Instrukcja next, ,Instrukcja @code{next}}).
Najnowsze wersje uniksowego @code{awk} nie pozwalaj± ju¿ na taki sposób
u¿ycia.  @code{gawk} obs³uguje takie u¿ycie @code{continue} tylko je¶li
w wierszu poleceñ podano opcjê @samp{--traditional}
(@pxref{Opcje, ,Opcje wiersza poleceñ}).
W przeciwnym wypadku, zostanie ono potraktowane jako b³±d, gdy¿ standard
POSIX okre¶la, ¿e @code{continue} powinno byæ stosowane wy³±cznie wewn±trz
cia³a pêtli (c.k.).

@node Instrukcja next, Instrukcja nextfile, Instrukcja continue, Instrukcje
@section Instrukcja @code{next}
@cindex @code{next} instrukcja

Instrukcja @code{next} wymusza na @code{awk} natychmiastowe przerwanie
przetwarzania bie¿±cego rekordu i przej¶cie do nastêpnego.  Znaczy to, ¿e
dla bie¿±cego rekordu nie bêd± wykonywane ¿adne dalsze regu³y.
Nie bêdzie te¿ wykonywana reszta akcji aktualnej regu³y.

Ró¿ni siê to od skutków funkcji @code{getline}
(@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).
@code{getline} równie¿ powoduje, ¿e @code{awk} odczytuje natychmiast kolejny
rekord, ale nie zmienia w ¿aden sposób przebiegu sterowania.  Tak wiêc,
z nowym rekordem wej¶ciowym wykonywana jest dalsza czê¶æ bie¿±cej akcji.

Na najwy¿szym poziomie wykonanie programu @code{awk} jest pêtl±, która
czyta rekord wej¶ciowy i sprawdza go ze wzorcem ka¿dej regu³y.
Je¶li my¶limy o tej pêtli jak o instrukcji @code{for}, której cia³o zawiera
regu³y, to instrukcja @code{next} jest analogiczna do @code{continue}:
przeskakuje na koniec cia³a tej niejawnej pêtli i wykonuje inkrementacjê
(która czyta kolejny rekord).

Na przyk³ad, je¿eli program @code{awk} dzia³a tylko na rekordach
o czterech polach, i nie chcemy by pracowa³ b³êdnie gdy otrzyma z³e
wej¶cie, mo¿emy wykorzystaæ tak± regu³ê blisko pocz±tku programu:

@example
@group
NF != 4 @{
  err = sprintf("%s:%d: pominiêty: NF != 4\n", FILENAME, FNR)
  print err > "/dev/stderr"
  next
@}
@end group
@end example

@noindent
tak, ¿e kolejne regu³y nie otrzymaj± nieprawid³owego rekordu.  Komunikat o
b³êdzie przekierowywany jest do standardowego strumienia b³êdów,
tak jak powinny byæ kierowane komunikaty o b³êdach.
@xref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
Zgodnie ze standardem POSIX, je¶li instrukcja @code{next} jest u¿yta
w regule @code{BEGIN} lub @code{END} to zachowanie siê programu jest
niezdefiniowane.
@code{gawk} bêdzie traktowa³ tak± sytuacjê jako b³±d sk³adniowy.
Mimo, ¿e POSIX na to zezwala, niektóre inne implementacje @code{awk}
nie pozwalaj± na umieszczanie instrukcji @code{next} wewn±trz cia³a funkcji
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).
Tak jak ka¿da inna instrukcja @code{next},  @code{next} we wnêtrzu
cia³a funkcji czyta nastêpny rekord i rozpoczyna jego przetwarzanie
za pomoc± pierwszej regu³y programu.

Je¿eli instrukcja @code{next} spowoduje osi±gniêcie koñca wej¶cia,
to zostanie wykonany kod z ewentualnych regu³ @code{END}.
@xref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}.

@cindex @code{next}, wewn±trz funkcji definiowanych przez u¿ytkownika
@strong{Uwaga!} Niektóre implementacje @code{awk} generuj± b³±d
wykonania je¶li u¿yjemy instrukcji @code{next} wewn±trz funkcji
zdefiniowanej przez u¿ytkownika
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).
@code{gawk} nie ma takiego problemu.

@node Instrukcja nextfile, Instrukcja exit, Instrukcja next, Instrukcje
@section Instrukcja @code{nextfile}
@cindex @code{nextfile} instrukcja
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}

@code{gawk} udostêpnia instrukcjê @code{nextfile}, która jest zbli¿ona do
instrukcji @code{next}.  Jednak, zamiast zaprzestania przetwarzania bie¿±cego
rekordu, instrukcja @code{nextfile} rozkazuje @code{gawk} przerwanie
przetwarzania bie¿±cego pliku danych.

Podczas wykonania instrukcji @code{nextfile}, @code{FILENAME} aktualizowane
jest nazw± nastêpnego podanego w wierszu poleceñ pliku danych, @code{FNR}
ponownie otrzymuje pocz±tkow± warto¶æ jeden, zwiêkszane jest @code{ARGIND},
a przetwarzanie rozpoczyna siê od nowa od pierwszej regu³y programu.
@xref{Zmienne wbudowane}.

Je¿eli @code{nextfile} spowoduje osi±gniêcie koñca wej¶cia,
to zostanie wykonany kod ewentualnych regu³ @code{END}.
@xref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}.

Instrukcja @code{nextfile} jest rozszerzeniem @code{gawk}; nie jest ona
(obecnie) dostêpna w ¿adnej innej implementacji @code{awk}.
@xref{Funkcja nextfile, ,Implementacja @code{nextfile} jako funkcji},
gdzie podano funkcjê definiowan± przez u¿ytkownika, jak± mo¿na wykorzystaæ
do symulacji instrukcji @code{nextfile}.

Instrukcja @code{nextfile} mo¿e byæ u¿yteczna je¶li mamy do przetworzenia
wiele plików danych, a spodziewamy siê, ¿e nie bêdziemy chcieæ
przetwarzaæ ka¿dego rekordu w ka¿dym pliku.  Normalnie, w celu przej¶cia do
nastêpnego pliku danych, musieliby¶my kontynuowaæ przegl±danie niepo¿±danych
rekordów.  Instrukcja @code{nextfile} realizuje to znacznie efektywniej.

@cindex @code{next file} instrukcja
@strong{Uwaga!}  Wersje @code{gawk} wcze¶niejsze ni¿ 3.0 u¿ywa³y dwu
s³ów (@samp{next file}) do zapisania instrukcji @code{nextfile}.
W wersji 3.0 zmieniono to na jedno s³owo, gdy¿ traktowanie s³owa @samp{file}
by³o niespójne.  Gdy pojawia³o siê po @code{next}, by³o s³owem kluczowym.
W przeciwnym razie, by³o zwyk³ym identyfikatorem.  Stara sk³adnia jest nadal
akceptowana.  @code{gawk} wygeneruje jednak komunikat ostrzegawczy,
a obs³uga @code{next file} ostatecznie przestanie byæ kontynuowana
w przysz³ych wersjach @code{awk}.

@node Instrukcja exit,  , Instrukcja nextfile, Instrukcje
@section Instrukcja @code{exit}

@cindex @code{exit} instrukcja
Instrukcja @code{exit} powoduje, ¿e @code{awk} natychmiast przestaje
wykonywaæ bie¿±c± regu³ê i przestaje przetwarzaæ dane wej¶ciowe; wszelkie
pozosta³e wej¶cie jest ignorowane.  Wygl±da tak:

@example
exit @r{[}@var{kod powrotu}@r{]}
@end example

Je¶li instrukcja @code{exit} zostanie wykonana z regu³y @code{BEGIN},
to program natychmiast wstrzymuje wszelkie przetwarzanie.  Nie s± czytane
¿adne rekordy wej¶ciowe.  Jednak, je¶li istnieje regu³a @code{END},
to jest ona wykonywana.
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}).

Je¿eli @code{exit} u¿yte jest jako czê¶æ regu³y @code{END}, powoduje
natychmiastowe zatrzymanie programu.

Instrukcja @code{exit} nie bêd±ca czê¶ci± ani regu³y @code{BEGIN} ani
@code{END} wstrzymuje wykonywanie ewentualnych dalszych automatycznych
regu³ dla bie¿±cego rekordu, pomija odczyt pozosta³ych rekordów wej¶ciowych,
i wykonuje regu³ê @code{END}, je¶li taka istnieje.

Je¿eli nie chcemy, by w takim przypadku regu³a @code{END} wykona³a swe
zadanie, mo¿emy przed instrukcj± @code{exit} przypisaæ jakiej¶ zmiennej
warto¶æ niezerow± i sprawdziæ tê zmienn± w regule @code{END}.
@xref{Funkcja assert, ,Asercje}, gdzie jest przyk³ad, który to robi.

@cindex ciemny k±t
Je¿eli podano argument instrukcji @code{exit}, to jego warto¶æ jest
wykorzystywana jako kod zakoñczenia procesu @code{awk}.  Je¶li nie podano
argumentu, @code{exit} zwraca kod zero (powodzenie).  W przypadku, gdy
podano argument pierwszej instrukcji @code{exit}, a nastêpnie wywo³ano
@code{exit} po raz drugi bez argumentu, u¿ywana jest poprzednio podana
warto¶æ zakoñczenia (c.k.).

Na przyk³ad, powiedzmy, ¿e wykryli¶my warunek wyst±pienia b³êdu, który
naprawdê nie wiemy jak obs³u¿yæ.  Zwyczajowo programy zg³aszaj±
tak± sytuacjê koñcz±c pracê z niezerowym kodem.  Nasz program @code{awk}
mo¿e to robiæ korzystaj±c z instrukcji @code{exit} z niezerowym argumentem.
Oto przyk³ad:

@example
@group
BEGIN @{
       if (("date" | getline date_now) <= 0) @{
         print "Nie mogê pobraæ daty systemowej" > "/dev/stderr"
         exit 1
       @}
       print "bie¿±ca data to", date_now
       close("date")
@}
@end group
@end example

@node Zmienne wbudowane, Tablice, Instrukcje, Top
@chapter Zmienne wbudowane
@cindex zmienne wbudowane

Wiêkszo¶æ zmiennych @code{awk} mo¿emy wykorzystywaæ do w³asnych
celów.  Nie s± one nigdy zmieniane, poza sytuacjami, gdy nasz program
przypisuje im warto¶ci, i nigdy na nic nie wp³ywaj±, poza sytuacjami
gdy bada je nasz program.  Jednak kilka zmiennych w @code{awk} ma specjalne,
wbudowane znaczenie.  Niektóre z nich @code{awk} sprawdza automatycznie,
wiêc umo¿liwiaj± nam wskazanie @code{awk} jak ma wykonywaæ pewne rzeczy.
Inne s± automatycznie przypisywane przez @code{awk}, wiêc dostarczaj±
naszemu programowi informacje o wewnêtrznych dzia³aniach @code{awk}.

Niniejszy rozdzia³ dokumentuje wszystkie zmienne wbudowane @code{gawk}.
Wiêkszo¶æ z nich jest tak¿e omówiona w rozdzia³ach opisuj±cych ich zakresy
dzia³ania.

@menu
* Modyfikowalne::               Zmienne wbudowane, którymi sterujemy
                                prac± @code{awk}.
* Auto-ustalane::               Zmienne wbudowane, w których @code{awk}
                                udostêpnia ró¿ne informacje.
* ARGC i ARGV::                 Metody korzystania z @code{ARGC} i @code{ARGV}.
@end menu

@node Modyfikowalne, Auto-ustalane, Zmienne wbudowane, Zmienne wbudowane
@section Zmienne wbudowane steruj±ce prac± @code{awk}
@cindex zmienne wbudowane, modyfikowalne przez u¿ytkownika

Poni¿ej podano alfabetyczn± listê zmiennych, które mo¿na zmieniaæ
steruj±c w ten sposób metodami wykonywania przez @code{awk} ró¿nych
rzeczy.  Zmienne specyficzne dla @code{gawk} oznaczono gwiazdk±, @samp{*}.

@table @code
@vindex CONVFMT
@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
@item CONVFMT
Ten ³añcuch steruje konwersj± liczb na ³añcuchy
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}).
W praktyce, dzia³a dziêki temu, ¿e jest przekazywany jako pierwszy argument
funkcji @code{sprintf}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Jego domy¶ln± warto¶ci± jest @code{"%.6g"}.
@code{CONVFMT} zosta³o wprowadzone przez standard POSIX.

@vindex FIELDWIDTHS
@item FIELDWIDTHS *
Jest to lista rozdzielonych spacjami kolumn, mówi±ca @code{gawk} jak
podzieliæ wej¶cie o sta³ych, kolumnowych granicach pól.  Jest to cecha
eksperymentalna.  Przypisanie do @code{FIELDWIDTHS} przes³ania u¿ycie
do podzia³u na pola zmiennej @code{FS}.
@xref{Sta³y rozmiar, ,Czytanie danych o sta³ej szeroko¶ci}, gdzie opisano j± szerzej.

Je¿eli @code{gawk} jest w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}), to @code{FIELDWIDTHS} nie ma
znaczenia specjalnego, a operacje podzia³u na pola s± wykonywane wy³±cznie
w oparciu o warto¶æ @code{FS}.

@vindex FS
@item FS
@code{FS} jest separatorem pól wej¶ciowych
(@pxref{Separatory pól, ,Jak rozdzielaæ pola}).
Jego warto¶æ jest jednoznakowym ³añcuchem lub wieloznakowym wyra¿eniem
regularnym dopasowuj±cym oddzielenia miêdzy polami rekordu wej¶ciowego.
Je¿eli warto¶ci± jest ³añcuch pusty (@code{""}), to ka¿dy znak rekordu
staje siê osobnym polem.

Domy¶ln± warto¶ci± jest @w{@code{" "}}, ³añcuch sk³adaj±cy siê z pojedynczej
spacji.  Jako specjalny wyj±tek, warto¶æ ta oznacza, ¿e jednym separatorem
jest dowolny ci±g spacji, tabulacji i/lub znaków nowej linii. @footnote{W
POSIX-owym @code{awk}, znak nowej linii nie jest uwa¿any za bia³y znak.}
Powoduje ona równie¿, ¿e bêd± ignorowane wszelkie spacje, tabulacje i znaki
nowej linii na pocz±tku i koñcu rekordu.

@code{FS} mo¿na nadaæ warto¶æ w wierszu poleceñ stosuj±c opcjê @samp{-F}:

@example
awk -F, '@var{program}' @var{pliki-wej¶ciowe}
@end example

Je¶li @code{gawk} do podzia³u na pola wykorzystuje @code{FIELDWIDTHS},
przypisanie warto¶ci do @code{FS} spowoduje, ¿e powróci on do zwyk³ego,
opartego na @code{FS}, podzia³u na pola.  Mo¿na to ³atwo zrobiæ pisz±c
po prostu @samp{FS = FS}, byæ mo¿e z komentarzem obja¶niaj±cym.

@vindex IGNORECASE
@item IGNORECASE *
Je¿eli @code{IGNORECASE} jest niezerowe lub niepuste, to wszystkie
porównania ³añcuchów i dopasowania wyra¿eñ regularnych s± niewra¿liwe
na wielko¶æ liter.  Zatem, wszystkie wyra¿enia regularne z @samp{~}
i @samp{!~}, funkcje @code{gensub}, @code{gsub}, @code{index}, @code{match},
@code{split} i @code{sub}, zakoñczenia rekordów za pomoc± @code{RS}
oraz podzia³ na pola przez @code{FS} ignoruj± wielko¶æ liter przy
wykonywaniu odpowiednich dzia³añ na wyra¿eniach regularnych.
Warto¶æ @code{IGNORECASE} @emph{nie} wp³ywa na indeksowanie tablic.
@xref{Wielko¶æ liter, ,Wielko¶æ liter w dopasowaniach}.
Je¿eli @code{gawk} pracuje w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}),
to @code{IGNORECASE} nie posiada ¿adnego szczególnego znaczenia,
a dzia³ania na ³añcuchach i wyra¿eniach regularnych zawsze rozró¿niaj± ma³e
i du¿e litery.

@vindex OFMT
@item OFMT
£añcuch ten steruje konwersj± liczb na ³añcuchy
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}) przy
wypisywaniu ich za pomoc± instrukcji @code{print}.
W praktyce, dzia³a dziêki temu, ¿e jest przekazywany jako pierwszy argument
funkcji @code{sprintf}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Jego domy¶ln± warto¶ci± jest @code{"%.6g"}.  Wcze¶niejsze wersje @code{awk}
wykorzystywa³y te¿ @code{OFMT} do okre¶lenia uniwersalnego formatu konwersji
liczb na ³añcuchy we wszelkich wyra¿eniach.  Obecnie jest to wykonywane
przez @code{CONVFMT}.

@vindex OFS
@item OFS
Jest to separator pól wyj¶ciowych (@pxref{Separatory wyj¶cia}),
wypisywany pomiêdzy polami wypisywanymi przez instrukcjê @code{print}.
Jego warto¶æ domy¶lna to @w{@code{" "}}, ³añcuch sk³adaj±cy siê
z pojedynczej spacji.

@vindex ORS
@item ORS
Jest to separator rekordów wyj¶ciowych, wypisywany na koñcu ka¿dej
instrukcji @code{print}.  Jego warto¶ci± domy¶ln± jest @code{"\n"}.
(@xref{Separatory wyj¶cia}.)

@vindex RS
@item RS
W @code{awk} jest separatorem rekordów wej¶ciowych.  Jego warto¶ci± domy¶ln±
jest ³añcuch zawieraj±cy pojedynczy znak nowej linii, co znaczy, ¿e rekordy
wej¶ciowe sk³adaj± siê z pojedynczego wiersza tekstu.  Mo¿e byæ te¿
³añcuchem pustym, wówczas rekordy rozdzielane s± ci±gami pustych wierszy,
albo wyra¿eniem regularnym, wówczas rekordy rozdzielane s± dopasowaniami
tego wyra¿enia w tek¶cie wej¶ciowym.
(@xref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}.)

@vindex SUBSEP
@item SUBSEP
@code{SUBSEP} jest separatorem indeksów.  Ma warto¶æ domy¶ln± @code{"\034"}
i jest wykorzystywany do podzia³u na czê¶ci indeksów tablicy wielowymiarowej.
Zatem, wyra¿enie @code{@w{foo["A", "B"]}} odwo³uje siê do
@code{foo["A\034B"]} (@pxref{Wielowymiarowe, ,Tablice wielowymiarowe}).
@end table

@node Auto-ustalane, ARGC i ARGV, Modyfikowalne, Zmienne wbudowane
@section Zmienne wbudowane nios±ce informacje
@cindex zmienne wbudowane, nios±ce informacje

Ni¿ej podano alfabetyczn± listê zmiennych, którym w ró¿nych okoliczno¶ciach
@code{awk} automatycznie nadaje warto¶æ w celu dostarczenia informacji
programowi u¿ytkownika.
Zmienne specyficzne dla @code{gawk} oznaczono gwiazdk±, @samp{*}.

@table @code
@vindex ARGC
@vindex ARGV
@item ARGC
@itemx ARGV
Argumenty wiersza poleceñ dostêpne dla programów @code{awk} przechowywane
s± w tablicy o nazwie @code{ARGV}.  @code{ARGC} jest liczb± argumentów
obecnych w wierszu poleceñ.
@xref{Inne argumenty, ,Inne argumenty wiersza poleceñ}.
Inaczej ni¿ wiêkszo¶æ tablic @code{awk}, @code{ARGV} jest indeksowana
od zera do @code{ARGC} @minus{} 1.  Na przyk³ad:

@example
@group
$ awk 'BEGIN @{
>        for (i = 0; i < ARGC; i++)
>            print ARGV[i]
>      @}' inventory-shipped BBS-list
@print{} awk
@print{} inventory-shipped
@print{} BBS-list
@end group
@end example

@noindent
W tym przyk³adzie @code{ARGV[0]} zawiera @code{"awk"}, @code{ARGV[1]}
zawiera @code{"inventory-shipped"}, za¶ @code{ARGV[2]} zawiera
@code{"BBS-list"}.  Warto¶æ @code{ARGC} wynosi trzy, o jeden wiêcej ni¿
indeks ostatniego elementu w @code{ARGV}, gdy¿ elementy s± numerowane
od zera.

Nazwy @code{ARGC} i @code{ARGV}, jak i konwencja indeksowania tablicy od
zera do @code{ARGC} @minus{} 1, pochodz± od metody dostêpu do argumentów
wiersza poleceñ wystêpuj±cej w jêzyku C.
@xref{ARGC i ARGV, , U¿ywanie @code{ARGC} i @code{ARGV}}, gdzie opisano,
jak @code{awk} u¿ywa tych zmiennych.

@vindex ARGIND
@item ARGIND *
Indeks w @code{ARGV} aktualnie przetwarzanego pliku.  Za ka¿dym razem, gdy
@code{gawk} otwiera do przetworzenia nowy plik danych, przypisuje
@code{ARGIND} indeks wskazuj±cy na nazwê pliku w @code{ARGV}.  Podczas
przetwarzania przez @code{gawk} plików wej¶ciowych, zawsze prawdziwe
jest @samp{FILENAME == ARGV[ARGIND]}.

Zmienna przydaje siê przy przetwarzaniu plików wej¶ciowych.  Umo¿liwia
stwierdzenie, jak daleko na li¶cie plików danych jeste¶my, i rozró¿nienie
kolejnych wyst±pieñ tej samej nazwy pliku w wierszu poleceñ.

Mimo, i¿ warto¶æ @code{ARGIND} wewn±trz programu mo¿na zmieniaæ, to
@code{gawk} automatycznie nada jej now± warto¶æ przy otwieraniu
nastêpnego pliku.

Zmienna ta jest rozszerzeniem @code{gawk}.  W innych implementacjach
@code{awk}, lub gdy @code{gawk} dzia³a w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}), nie jest specjalna.

@vindex ENVIRON
@item ENVIRON
Tablica asocjacyjna (przyporz±dkowuj±ca) zawieraj±ca warto¶ci ¶rodowiska.
Indeksy tablicy s± nazwami zmiennych ¶rodowiska, warto¶ci s± warto¶ciami
odpowiednich zmiennych ¶rodowiska.  Na przyk³ad, @code{ENVIRON["HOME"]} mo¿e
zawieraæ @file{/home/arnold}.  Zmiana tej tablicy nie wp³ywa na ¶rodowisko
przekazywane programom, które @code{awk} wywo³uje za po¶rednictwem
przekierowañ czy funkcji @code{system}.  (W przysz³ych wersjach
@code{gawk} mo¿e to robiæ.)

Niektóre systemy operacyjne mog± nie mieæ zmiennych ¶rodowiska.
Na takich systemach tablica @code{ENVIRON} jest pusta (z wyj±tkiem
@w{@code{ENVIRON["AWKPATH"]}}).

@vindex ERRNO
@item ERRNO *
Je¿eli podczas wykonywania przekierowania @code{getline}, odczytu
@code{getline}, czy dzia³ania @code{close} pojawi siê b³±d systemu,
to @code{ERRNO} bêdzie zawieraæ ³añcuch opisuj±cy ten b³±d.

Zmienna ta jest rozszerzeniem @code{gawk}.  W innych implementacjach
@code{awk}, lub je¶li @code{gawk} dzia³a w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}), nie jest specjalna.

@cindex ciemny k±t
@vindex FILENAME
@item FILENAME
To jest nazwa pliku aktualnie czytanego przez @code{awk}.  Je¿eli
w wierszu poleceñ nie podano ¿adnych plików danych, @code{awk} czyta
ze standardowego wej¶cia, a @code{FILENAME} otrzymuje warto¶æ @code{"-"}.
Za ka¿dym razem, gdy czytany jest nowy plik, zmienia siê @code{FILENAME}
(@pxref{Czytanie plików, ,Czytanie plików wej¶ciowych}).
Wewn±trz regu³y @code{BEGIN} @code{FILENAME} ma warto¶æ @code{""}, gdy¿
nie ma jeszcze ¿adnych plików w trakcie przetwarzania.@footnote{Niektóre
wczesne uniksowe implementacje @code{awk} inicjowa³y @code{FILENAME} na
@code{"-"}, nawet je¶li istnia³y pliki danych do przetworzenia.
Zachowanie to by³o nieprawid³owe i nie powinno siê na nim polegaæ w
swoich programach.} (c.k.)

@vindex FNR
@item FNR
@code{FNR} jest numerem bie¿±cego rekordu w bie¿±cym pliku. Ka¿dorazowo
gdy czytany jest nowy rekord @code{FNR} zwiêksza siê o jeden
(@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).
Jest ponownie inicjowane zerem przy ka¿dym rozpoczêciu nowego pliku.

@vindex NF
@item NF
@code{NF} jest liczb± pól bie¿±cego rekordu wej¶ciowego.  Warto¶æ @code{NF}
nadawana jest przy ka¿dym odczycie nowego rekordu, tworzeniu nowego
pola lub zmianie @code{$0} (@pxref{Pola, ,Badanie pól}).

@vindex NR
@item NR
To jest liczba rekordów wej¶ciowych, które przetworzy³ @code{awk} od momentu
rozpoczêcia wykonywania programu
(@pxref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}).
@code{NR} zmieniane jest ka¿dorazowo przy odczycie nowego rekordu.

@vindex RLENGTH
@item RLENGTH
@code{RLENGTH} jest d³ugo¶ci± pod³añcucha dopasowanego funkcj± @code{match}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Warto¶æ @code{RLENGTH} przypisywana jest przez wywo³anie funkcji
@code{match}.  Jest to d³ugo¶æ dopasowanego ³añcucha, lub @minus{}1 je¿eli
nie znaleziono dopasowania.

@vindex RSTART
@item RSTART
@code{RSTART} jest pocz±tkowym indeksem, w znakach, pod³añcucha dopasowanego
funkcj± @code{match}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Warto¶æ @code{RLENGTH} przypisywana jest przez wywo³anie funkcji
@code{match}.  Jest to pozycja ³añcucha, od której rozpoczyna siê dopasowany
pod³añcuch, lub zero je¿eli nie znaleziono dopasowania.

@vindex RT
@item RT *
@code{RT} ustalane jest za ka¿dym razem, gdy czytany jest rekord.
Zawiera tekst wej¶ciowy, który pasowa³ do tekstu wyznaczonego przez
@code{RS}, separator rekordów.

Zmienna ta jest rozszerzeniem @code{gawk}.  W innych implementacjach
@code{awk} lub je¶li @code{gawk} dzia³a w trybie zgodno¶ci
(@pxref{Opcje, ,Opcje wiersza poleceñ}), nie jest specjalna.
@end table

@cindex ciemny k±t
Dygresja na temat @code{NR} i @code{FNR}.
@code{awk} zamiast nadawaæ im bezwzglêdne warto¶ci liczby przeczytanych
rekordów, za ka¿dym razem, gdy czyta rekord po prostu zwiêksza warto¶ci
obu tych zmiennych.
Oznacza to, ¿e nasz program mo¿e zmieniæ te zmienne, a dla ka¿dego nowego
rekordu bêd± zwiêkszane ich nowe warto¶ci (c.k.).  Na przyk³ad:

@example
@group
$ echo '1
> 2
> 3
> 4' | awk 'NR == 2 @{ NR = 17 @}
> @{ print NR @}'
@print{} 1
@print{} 17
@print{} 18
@print{} 19
@end group
@end example

@noindent
Zanim do jêzyka @code{awk} dodano @code{FNR}
(@pxref{V7/SVR3.1, ,G³ówne ró¿nice miêdzy V7 a SVR3.1}),
wiele programów @code{awk} wykorzystywa³o te w³asno¶æ do ¶ledzenia liczby
rekordów w pliku przez zerowanie @code{NR} przy zmianie @code{FILENAME}.

@node ARGC i ARGV, , Auto-ustalane, Zmienne wbudowane
@section U¿ywanie @code{ARGC} i @code{ARGV}

W @ref{Auto-ustalane,  , Zmienne wbudowane nios±ce informacje},
widzieli¶my program opisuj±cy informacje zawarte w @code{ARGC} i @code{ARGV}:

@example
@group
$ awk 'BEGIN @{
>        for (i = 0; i < ARGC; i++)
>            print ARGV[i]
>      @}' inventory-shipped BBS-list
@print{} awk
@print{} inventory-shipped
@print{} BBS-list
@end group
@end example

@noindent
W tym przyk³adzie @code{ARGV[0]} zawiera @code{"awk"}, @code{ARGV[1]}
zawiera @code{"inventory-shipped"}, za¶ @code{ARGV[2]} zawiera
@code{"BBS-list"}.

Zwróæ uwagê, ¿e program @code{awk} nie jest wpisany w @code{ARGV}.
Do @code{ARGV} nie s± te¿ wprowadzone specjalne opcje wiersza poleceñ
i ich argumenty.  Obejmuje to przypisania zmiennych wykonane za pomoc± opcji
@samp{-v} (@pxref{Opcje, ,Opcje wiersza poleceñ}).  Zwyk³e przypisania
zmiennych w wierszu poleceñ @emph{s±} traktowane jak argumenty i pojawiaj±
siê w tablicy @code{ARGV}.

@example
$ cat showargs.awk
@print{} BEGIN @{
@print{}     printf "A=%d, B=%d\n", A, B
@print{}     for (i = 0; i < ARGC; i++)
@print{}         printf "\tARGV[%d] = %s\n", i, ARGV[i]
@print{} @}
@print{} END   @{ printf "A=%d, B=%d\n", A, B @}
$ awk -v A=1 -f showargs.awk B=2 /dev/null
@print{} A=1, B=0
@print{} 	ARGV[0] = awk
@print{} 	ARGV[1] = B=2
@print{} 	ARGV[2] = /dev/null
@print{} A=1, B=2
@end example

Programy mog± zmieniaæ @code{ARGC} i elementy @code{ARGV}.
Za ka¿dym razem, gdy @code{awk} osi±ga koniec pliku wej¶ciowego, u¿ywa
nastêpnego elementu @code{ARGV} jako nazwy nastêpnego pliku wej¶ciowego.
Sk³aduj±c w nim inny ³añcuch nasz program zmienia listê wyznaczaj±c±,
jakie pliki maj± byæ czytane.  Do okre¶lenia standardowego wej¶cia
u¿ywa siê @code{"-"}.  Wpisuj±c dodatkowe elementy i zwiêkszaj±c
@code{ARGC} spowodujemy odczyt dodatkowych plików.

Zmniejszenie warto¶ci @code{ARGC} usuwa pliki wej¶ciowe z koñca listy.
Zapisuj±c w innym miejscu stare warto¶ci @code{ARGC}, program mo¿e
traktowaæ usuniête argumenty jako co¶ innego ni¿ nazwy plików.

W celu usuniêcia pliku ze ¶rodka listy nale¿y zamiast jego nazwy
w @code{ARGV} umie¶ciæ ³añcuch pusty (@code{""}).  Cech± specjaln±
@code{awk} jest ignorowanie nazw plików zast±pionych ³añcuchem pustym.
Do usuniêcia elementów z @code{ARGV} mo¿na te¿ wykorzystaæ instrukcjê
@code{delete} (@pxref{Delete, ,Instrukcja @code{delete}}).

Wszystkie powy¿sze dzia³ania zwykle wykonuje siê w regule @code{BEGIN},
przed rozpoczêciem przetwarzania wej¶cia.
@xref{Program split, ,Dzielenie du¿ego pliku na kawa³ki}, i zob.
@ref{Program tee, ,Powielanie wyj¶cia do wielu plików}, gdzie jest
przyk³ad ka¿dej z metod usuwania elementów z @code{ARGV}.

Poni¿szy fragment przetwarza @code{ARGV} w celu przeanalizowania,
a nastêpnie usuniêcia opcji wiersza poleceñ.

@example
@group
BEGIN @{
    for (i = 1; i < ARGC; i++) @{
        if (ARGV[i] == "-v")
            verbose = 1
        else if (ARGV[i] == "-d")
            debug = 1
@end group
@group
        else if (ARGV[i] ~ /^-?/) @{
            e = sprintf("%s: nierozpoznana opcja -- %c",
                    ARGV[0], substr(ARGV[i], 1, ,1))
            print e > "/dev/stderr"
        @} else
            break
        delete ARGV[i]
    @}
@}
@end group
@end example

Aby faktycznie pobraæ opcje do programu @code{awk}, musimy zakoñczyæ
opcje @code{awk} za pomoc± @samp{--}, a nastêpnie podaæ w³asne opcje,
jak tu:

@example
awk -f myprog -- -v -d file1 file2 @dots{}
@end example

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
W @code{gawk} nie jest to konieczne: je¶li nie podano opcji @samp{--posix},
@code{gawk} milcz±co umieszcza wszystkie nierozpoznane opcje w @code{ARGV},
by móg³ siê nimi zaj±æ program @code{awk}.

W momencie zauwa¿enia nieznanej opcji @code{gawk} przestaje szukaæ innych
opcji, które w przeciwnym przypadku móg³by rozpoznaæ.  Powy¿szy program
napisany dla @code{gawk} móg³by wygl±daæ tak:

@example
gawk -f myprog -d -v file1 file2 @dots{}
@end example

@noindent
Poniewa¿ @samp{-d} nie jest poprawn± opcj± @code{gawk}, wystêpuj±ce po niej
@samp{-v} jest przekazywane do programu @code{awk}.

@node Tablice, Wbudowane, Zmienne wbudowane, Top
@chapter Tablice w @code{awk}

@dfn{Tablica} (array) jest tabel± warto¶ci, zwanych @dfn{elementami}.
Elementy tablicy rozró¿niane s± poprzez swoje indeksy.  @dfn{Indeksy} mog±
byæ liczbami lub ³añcuchami.  @code{awk} przechowuje jeden zbiór nazw,
które mog± byæ wykorzystywane przy nazywaniu zmiennych, tablic i funkcji
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).  Zatem, w jednym
programie @code{awk} nie mo¿na mieæ zmiennej i tablicy o tej samej nazwie.

@menu
* Wprowadzenie do tablic::      Wprowadzenie do tablic.
* Odwo³ania do elementów::      Jak zbadaæ pojedynczy element tablicy.
* Przypisania do elementów::    Jak zmieniæ element tablicy.
* Przyk³ad tablicy::            Prosty przyk³ad tablicy.
* Przegl±danie tablic::         Odmiana instrukcji @code{for}. Wykonuje
                                pêtlê po indeksach elementów tablicy.
* Delete::                      Instrukcja @code{delete} usuwa element z tablicy.
* Numeryczne indeksy tablic::   Jak w @code{awk} wykorzystywaæ liczby
                                jako indeksy.
* Niezainicjowane indeksy::     Stosowanie niezainicjowanych zmiennych
                                jako indeksów.
* Wielowymiarowe::              Emulacja tablic wielowymiarowych w @code{awk}.
* Przegl±danie wielowymiarowych:: Przegl±danie tablic wielowymiarowych.
* Efektywno¶æ tablic::          Specjalne wskazówki dotycz±ce @code{gawk}.
@end menu

@node Wprowadzenie do tablic, Odwo³ania do elementów, Tablice, Tablice
@section Wprowadzenie do tablic

@cindex tablice
Jêzyk @code{awk} do przechowywania grup powi±zanych ze sob± ³añcuchów czy
liczb zapewnia jednowymiarowe @dfn{tablice}.

Ka¿da tablica w @code{awk} musi mieæ nazwê.  Nazwy tablic maj± tê sam±
sk³adniê, co nazwy zmiennych; ka¿da poprawna nazwa zmiennej by³aby tak¿e
poprawn± nazw± tablicy.  Nie mo¿na jednak w jednym programie @code{awk}
stosowaæ jednej nazwy na oba sposoby (jako tablicy i jako zmiennej).

Tablice w @code{awk} pozornie przypominaj± tablice w innych jêzykach
programowania.  Istniej± jednak zasadnicze ró¿nice.  W @code{awk} nie ma
konieczno¶ci podawania rozmiaru tablicy przed rozpoczêciem korzystania z
niej.  Dodatkowo, jako indeks tablicy mo¿e byæ wykorzystana dowolna liczba
czy ³añcuch, a nie wy³±cznie kolejne liczby ca³kowite.

W wiêkszo¶ci innych jêzyków istnieje obowi±zek @dfn{zadeklarowania} tablicy
i okre¶lenia, ile zawiera ona elementów czy sk³adowych.  W takich jêzykach
deklaracja powoduje zaalokowanie ci±g³ego bloku pamiêci dla wskazanej liczby
elementów.  Indeks tablicy zwykle musi byæ dodatni± liczb± ca³kowit±, na
przyk³ad, indeks zero okre¶la pierwszy element tablicy, który faktycznie
jest przechowywany na samym pocz±tku bloku pamiêci.  Indeks jeden okre¶la
drugi element, przechowywany w pamiêci zaraz za pierwszym, i tak dalej.
Dodanie kolejnych elementów do tablicy jest niemo¿liwe gdy¿ ma ona
miejsce tylko na tyle elementów, ile zadeklarowano.  (Niektóre jêzyki
zezwalaj± na dowolne indeksy pocz±tkowe i koñcowe, np. @samp{15 .. 27},
ale rozmiar tablicy jest nadal wyznaczany na sta³e przy jej deklaracji.)

Ci±g³a tablica czterech elementów mog³aby, pojêciowo, wygl±daæ jak ni¿ej,
je¶li warto¶ciami elementów s± osiem, @code{"foo"}, @code{""} i 30:

@iftex
@c from Karl Berry, much thanks for the help.
@tex
\bigskip % space above the table (about 1 linespace)
\offinterlineskip
\newdimen\width \width = 1.5cm
\newdimen\hwidth \hwidth = 4\width \advance\hwidth by 2pt % 5 * 0.4pt
\centerline{\vbox{
\halign{\strut\hfil\ignorespaces#&&\vrule#&\hbox to\width{\hfil#\unskip\hfil}\cr
\noalign{\hrule width\hwidth}
        &&{\tt 8} &&{\tt "foo"} &&{\tt ""} &&{\tt 30} &&\quad warto¶æ\cr
\noalign{\hrule width\hwidth}
\noalign{\smallskip}
        &\omit&0&\omit &1   &\omit&2 &\omit&3 &\omit&\quad indeks\cr
}
}}
@end tex
@end iftex
@ifinfo
@example
+---------+---------+--------+---------+
|    8    |  "foo"  |   ""   |    30   |    @r{warto¶æ}
+---------+---------+--------+---------+
     0         1         2         3        @r{indeks}
@end example
@end ifinfo

@noindent
Przechowywane s± tylko warto¶ci, indeksy wynikaj± z kolejno¶ci tych warto¶ci.
Osiem jest warto¶ci± o indeksie zero, gdy¿ osiem stoi na pozycji,
przed któr± jest zero elementów.

@cindex tablice, definicja
@cindex tablice asocjacyjne
@cindex asocjacyjne, tablice
Tablice w @code{awk} s± inne: s± one @dfn{asocjacyjne} (przyporz±dkowuj±ce).
Oznacza to, ¿e ka¿da tablica jest zbiorem par: indeks, i odpowiadaj±ca mu
warto¶æ elementu tablicy:

@example
@r{Element} 4     @r{Warto¶æ} 30
@r{Element} 2     @r{Warto¶æ} "foo"
@r{Element} 1     @r{Warto¶æ} 8
@r{Element} 3     @r{Warto¶æ} ""
@end example

@noindent
Pokazali¶my pary w wymieszanej kolejno¶ci, gdy¿ ich kolejno¶æ jest
nieistotna.

Jedn± z zalet tablic asocjacyjnych jest to, ¿e w dowolnym momencie mo¿na
dodawaæ nowe pary.  Na przyk³ad, za³ó¿my, ¿e do powy¿szej tablicy dodamy
dziesi±ty element, o warto¶ci @w{@code{"numer dziesiêæ"}}.  Wynikiem jest:

@example
@r{Element} 10    @r{Warto¶æ} "numer dziesiêæ"
@r{Element} 4     @r{Warto¶æ} 30
@r{Element} 2     @r{Warto¶æ} "foo"
@r{Element} 1     @r{Warto¶æ} 8
@r{Element} 3     @r{Warto¶æ} ""
@end example

@noindent
@cindex tablice rzadkie
@cindex rzadkie, tablice
Teraz tablica jest @dfn{rzadka} (sparse), co oznacza po prostu, ¿e brakuje
niektórych indeksów: ma elementy 1--4 i 10, ale nie ma elementów
5, 6, 7, 8, czy 9.
@c ok, I should spell out the above, but ...

Innym skutkiem tablic asocjacyjnych jest fakt, ¿e indeksy nie musz± byæ
dodatnimi liczbami ca³kowitymi.  Indeksem mo¿e byæ dowolna liczba, a nawet
³añcuch.  Na przyk³ad, oto tablica t³umacz±ca s³owa z polskiego na
angielski:

@example
@r{Element} "pies"  @r{Warto¶æ} "dog"
@r{Element} "kot"   @r{Warto¶æ} "cat"
@r{Element} "jeden" @r{Warto¶æ} "one"
@r{Element} 1       @r{Warto¶æ} "one"
@end example

@noindent
Zdecydowali¶my siê tu t³umaczyæ liczbê jeden zarówno napisan± s³ownie jak
i w postaci numerycznej -- pokazuj±c w ten sposób, ¿e pojedyncza tablica
mo¿e zawieraæ jako indeksy jednocze¶nie liczby i ³añcuchy.
(W rzeczywisto¶ci indeksy tablicy s± zawsze ³añcuchami; omówiono to
szczegó³owo w
@ref{Numeryczne indeksy tablic, ,Stosowanie liczb do indeksowania tablic}.)

@cindex tablice, indeksy a @code{IGNORECASE}
@cindex indeksy tablic a @code{IGNORECASE}
@cindex @code{IGNORECASE} a indeksy tablic
@vindex IGNORECASE
Warto¶æ @code{IGNORECASE} nie wp³ywa na indeksowanie tablic.  Do pobrania
elementu tablicy musimy u¿yæ dok³adnie tej samej warto¶ci ³añcuchowej, która
pos³u¿y³a do jego zapamiêtania.

Gdy tablicê tworzy dla nas sam @code{awk}, np. funkcj± wbudowan±
@code{split}, to jej indeksy s± kolejnymi liczbami ca³kowitymi poczynaj±c
od jeden.
(@xref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}.)

@node Odwo³ania do elementów, Przypisania do elementów, Wprowadzenie do tablic, Tablice
@section Odwo³ywanie siê do elementów tablicy
@cindex tablice, odwo³anie do
@cindex element tablicy
@cindex odwo³anie do tablicy

G³ównym sposobem korzystania z tablic jest odwo³ywanie siê do którego¶ z jej
elementów.  Odwo³anie do tablicy jest wyra¿eniem wygl±daj±cym tak:

@example
@var{tablica}[@var{indeks}]
@end example

@noindent
Gdzie @var{tablica} jest nazw± tablicy.  Wyra¿enie @var{indeks} jest
indeksem elementu tablicy, o który nam chodzi.

Warto¶ci± odwo³ania do tablicy jest bie¿±ca warto¶æ tego elementu tablicy.
Na przyk³ad, @code{foo[4.3]} jest wyra¿eniem dla elementu tablicy @code{foo}
o indeksie @samp{4.3}.

Je¿eli odwo³amy siê do elementu tablicy, który nie ma wpisanej warto¶ci,
to warto¶ci± odwo³ania bêdzie @code{""}, ³añcuch pusty.  Dotyczy to
elementów, którym jeszcze nie przypisano warto¶ci, jak i elementów, które
zosta³y usuniête (@pxref{Delete, ,Instrukcja @code{delete}}).  Odwo³anie
takie automatycznie tworzy element tablicy, z ³añcuchem pustym jako jego
warto¶ci±.  (W niektórych przypadkach nie jest to zbyt szczê¶liwe, gdy¿
mo¿e marnowaæ pamiêæ wewn±trz @code{awk}.)

@cindex tablice, istnienie elementów
@cindex tablice, operator @code{in}
Czy w tablicy istnieje element o danym indeksie mo¿na sprawdziæ za pomoc±
wyra¿enia:

@example
@var{indeks} in @var{tablica}
@end example

@noindent
Powy¿sze wyra¿enie testuje czy istnieje konkretny indeks, czy nie, bez skutku
ubocznego w postaci tworzenia elementu je¶li ma indeksu.
Ma ono warto¶æ jeden (prawda) je¶li @code{@var{tablica}[@var{indeks}]}
istnieje, a zero (fa³sz) je¶li nie istnieje.

Na przyk³ad, do sprawdzenia czy tablica @code{czestosci} zawiera indeks
@samp{2}, mogliby¶my napisaæ tê instrukcjê:

@example
if (2 in czestosci)
    print "Indeks 2 istnieje."
@end example

Zwróæ uwagê, ¿e powy¿sze @emph{nie} sprawdza, czy tablica
@code{czestosci} zawiera element, którego @emph{warto¶ci±} jest dwa.
(Nie ma innej metody, by to zrobiæ, ni¿ zbadanie wszystkich elementów.)
@emph{Nie} tworzy to tak¿e @code{czestosci[2]}, choæ poni¿sza (niepoprawna)
alternatywa by to robi³a:

@example
if (czestosci[2] != "")
    print "Indeks 2 istnieje."
@end example

@node Przypisania do elementów, Przyk³ad tablicy, Odwo³ania do elementów, Tablice
@section Przypisanie do elementów tablicy
@cindex przypisanie do tablicy
@cindex przypisanie do elementu
@cindex tablice, przypisanie
@cindex elementy, przypisanie

Elementy tablic s± lwarto¶ciami: mo¿na im przypisywaæ warto¶ci dok³adnie
tak samo jak zmiennym @code{awk}:

@example
@var{tablica}[@var{indeks}] = @var{warto¶æ}
@end example

@noindent
Gdzie @var{tablica} jest nazw± naszej tablicy.  Wyra¿enie @var{indeks} jest
indeksem elementu tablicy, do któremu chcemy przypisaæ warto¶æ. Wyra¿enie
@var{warto¶æ} jest warto¶ci±, któr± przypisujemy temu elementowi tablicy.

@node Przyk³ad tablicy, Przegl±danie tablic, Przypisania do elementów, Tablice
@section Prosty przyk³ad tablicy

Poni¿szy program pobiera listê wierszy, ka¿dy zaczynaj±cy siê numerem
wiersza, i wypisuje je w kolejno¶ci tych numerów.  Numery wierszy nie s±
jednak uporz±dkowane podczas odczytu -- s± wymieszane.  Program sortuje
wiersze tworz±c tablicê z wykorzystuj±c± numery wierszy jako indeksy.
Nastêpnie wypisuje wiersze w kolejno¶ci ich posortowanych numerów.
To bardzo prosty program, i wprawia go w zak³opotanie napotkanie
powtórzonych numerów, luk, czy wierszy, które nie rozpoczynaj± siê numerem.

@example
@group
@c file eg/misc/arraymax.awk
@{
  if ($1 > max)
    max = $1
  arr[$1] = $0
@}
@end group

END @{
  for (x = 1; x <= max; x++)
    print arr[x]
@}
@c endfile
@end example

Pierwsza regu³a ¶ledzi najwiêkszy numer wiersza, jaki do tej pory napotkano.
Zapisuje te¿ ka¿dy wiersz do tablicy @code{arr}, pod indeksem bêd±cym
numerem wiersza.

Druga regu³a pracuje po przeczytaniu ca³o¶ci wej¶cia, wypisuj±c wszystkie
wiersze.

Gdy uruchomimy ten program z poni¿szymi danymi wej¶ciowymi:

@example
@group
@c file eg/misc/arraymax.data
5  I am the Five man
2  Who are you?  The new number two!
4  . . . And four on the floor
1  Who is number one?
3  I three you.
@c endfile
@end group
@end example

@noindent
jego wyj¶ciem bêdzie:

@example
1  Who is number one?
2  Who are you?  The new number two!
3  I three you.
4  . . . And four on the floor
5  I am the Five man
@end example

Je¶li jaki¶ numer wiersza powtarza siê, to ostatni wiersz z tym numerem
zastêpuje poprzednie.

Luki w numerach wierszy mo¿na ³atwo obs³u¿yæ usprawnieniem regu³y @code{END}:

@example
END @{
  for (x = 1; x <= max; x++)
    if (x in arr)
      print arr[x]
@}
@end example

@node Przegl±danie tablic, Delete, Przyk³ad tablicy, Tablice
@section Przegl±danie wszystkich elementów tablicy
@cindex @code{for (x in @dots{})}
@cindex tablice, specjalna instrukcja @code{for}
@cindex przegl±danie tablicy

W programach u¿ywaj±cym tablic czêsto potrzebujemy pêtli, która wykonuje
siê po jednym razie dla ka¿dego elementu tablicy.  W innych jêzykach,
gdzie tablice s± ci±g³e a indeksy ograniczone do dodatnich liczb
ca³kowitych, jest to ³atwe: Mo¿na znale¼æ wszystkie poprawne indeksy
zliczaj±c od najni¿szego indeksu do najwy¿szego.  Ta technika nie
sprawdzi siê w @code{awk}, gdy¿ indeksem tablicy mo¿e byæ dowolna liczba lub
³añcuch.  St±d te¿ @code{awk} posiada specjalny rodzaj instrukcji @code{for}
s³u¿±cy do przegl±dania tablic:

@example
for (@var{zmn} in @var{tablica})
  @var{cia³o}
@end example

@noindent
Pêtla ta wykonuje @var{cia³o} jeden raz dla ka¿dego indeksu @var{tablicy},
któr± uprzednio stworzy³ program, z przypisaniem tego indeksu do zmiennej
@var{zmn}.

Oto program korzystaj±cy z tej postaci instrukcji @code{for}.  Pierwsza jego
regu³a bada rekordy wej¶ciowe i odnotowuje, jakie s³owa (co najmniej jedno)
pojawi³y siê w wej¶ciu, zapisuj±c jedynkê w tablicy @code{used} z danym
s³owem jako indeksem.  Druga regu³a przeszukuje elementy tablicy
@code{used}, w celu znalezienia wszystkich ró¿nych s³ów, jakie pojawi³y siê
w danych wej¶ciowych.  Wypisuje ka¿de s³owo d³u¿sze ni¿ 10 znaków, wypisuje
te¿ liczbê takich s³ów.
@xref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach},
gdzie szerzej opisano funkcjê wbudowan± @code{length}.

@example
# zapisz 1 dla ka¿dego choæ raz u¿ytego s³owa.
@{
    for (i = 1; i <= NF; i++)
        used[$i] = 1
@}

# znajd¼ liczbê ró¿nych s³ów d³u¿szych ni¿ 10 znaków.
END @{
    for (x in used)
        if (length(x) > 10) @{
            ++num_long_words
            print x
        @}
    print num_long_words, "s³ów d³u¿szych ni¿ 10 znaków"
@}
@end example

@noindent
@xref{Sortowanie wyrazów, ,Tworzenie statystyk u¿ycia wyrazów},
gdzie podano bardziej szczegó³owy przyk³ad tego typu.

Kolejno¶æ, w jakiej instrukcja @code{for} siêga do elementów tablicy,
wyznaczona jest
wewnêtrznym uk³adem tych elementów w @code{awk} i nie daje siê sterowaæ czy
zmieniaæ.  Mo¿e to prowadziæ do k³opotów je¶li instrukcje w ciele pêtli
dodadz± do @var{tablicy} nowe elementy.  Nie da siê przewidzieæ, czy pêtla
@code{for} siêgnie po nie, czy te¿ nie.  Podobnie, zmiana @var{zmn} wewn±trz
pêtli mo¿e daæ dziwne skutki.  Najlepiej unikaæ takich rzeczy.

@node Delete, Numeryczne indeksy tablic, Przegl±danie tablic, Tablice
@section Instrukcja @code{delete}
@cindex @code{delete} instrukcja
@cindex usuwanie elementów tablicy
@cindex kasowanie elementów tablicy
@cindex tablice, usuwanie elementu

Pojedynczy element tablicy usuwa siê instrukcj± @code{delete}:

@example
delete @var{tablica}[@var{indeks}]
@end example

Po usuniêciu elementu tablicy, nie mo¿na ju¿ otrzymaæ warto¶ci, jak± mia³
on uprzednio.  Jest tak, jakby nigdy nie odwo³ywano siê do tego elementu
i nigdy nie nadawano mu ¿adnej warto¶ci.

Oto przyk³ad usuwania elementów tablicy:

@example
for (i in czestosci)
  delete czestosci[i]
@end example

@noindent
Ten przyk³ad usuwa wszystkie elementy z tablicy @code{czestosci}.

Je¶li usuniemy element, to nastêpuj±ca potem instrukcja @code{for}
przegl±daj±ca tablicê nie zg³osi go, a operator @code{in} sprawdzaj±cy
istnienie tego elementu zwróci zero (tj.@: fa³sz):

@example
delete foo[4]
if (4 in foo)
    print "To nigdy nie zostanie wypisane"
@end example

Nale¿y pamiêtaæ, ¿e usuniêcie elementu @emph{nie} jest tym samym, co
przypisanie mu pustej warto¶ci (³añcucha pustego, @code{""}).

@example
foo[4] = ""
if (4 in foo)
  print "To jest wypisane, mimo ¿e foo[4] jest puste"
@end example

Nie jest b³êdem usuwanie elementu, który nie istnieje.

@cindex tablice, usuwanie ca³ej zawarto¶ci
@cindex usuwanie ca³ych tablic
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Mo¿na usun±æ wszystkie elementy tablicy jedn± instrukcj±, pomijaj±c indeks
w instrukcji @code{delete}.

@example
delete @var{tablica}
@end example

Mo¿liwo¶æ ta stanowi rozszerzenie @code{gawk}.  Nie jest dostêpna w trybie
zgodno¶ci (@pxref{Opcje, ,Opcje wiersza poleceñ}).

Stosowanie tej wersji instrukcji @code{delete} jest oko³o trzech razy
bardziej efektywne ni¿ równowa¿na jej pêtla usuwaj±ca po jednym
elemencie naraz.

@cindex przeno¶no¶æ
Poni¿sza instrukcja zapewnia przeno¶n±, ale nie oczywist± metodê
wyczyszczenia tablicy.

@cindex Brennan, Michael
@example
@group
# dziêki Michaelowi Brennananowi za wskazanie tego
split("", tablica)
@end group
@end example

Funkcja @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach})
czy¶ci najpierw tablicê docelow±.  Wywo³anie to ¿±da od niej rozbicia
na czê¶ci ³añcucha pustego.  Poniewa¿ brak jest danych do podzia³u, funkcja
po prostu czy¶ci tablicê a nastêpnie wraca.

@strong{Uwaga!} Usuniêcie tablicy nie zmienia jej typu; nie mo¿na
usun±æ tablicy a nastêpnie wykorzystaæ jej nazwy jako skalara.
Na przyk³ad, to nie zadzia³a:

@example
a[1] = 3; delete a; a = 3
@end example

@node Numeryczne indeksy tablic, Niezainicjowane indeksy, Delete, Tablice
@section Stosowanie liczb do indeksowania tablic

Istotnym aspektem tablic, o którym nale¿y pamiêtaæ, jest to, ¿e
@emph{indeksy tablicy s± zawsze ³añcuchami}.  Je¶li jako indeks zastosujemy
warto¶æ numeryczn±, zostanie ona przekszta³cona na warto¶æ ³añcuchow±
przed wykorzystaniem do indeksowania
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}).

@cindex konwersje, podczas indeksowania
@cindex liczby, u¿yte jako indeksy
@vindex CONVFMT
Oznacza to, ¿e warto¶æ zmiennej wbudowanej @code{CONVFMT} mo¿e
potencjalnie wp³ywaæ na sposób, w jaki program siêga do elementów tablicy.
Na przyk³ad:

@example
xyz = 12.153
dane[xyz] = 1
CONVFMT = "%2.2f"
@group
if (xyz in dane)
    printf "%s jest w tabl. dane\n", xyz
else
    printf "%s nie ma w tabl. dane\n", xyz
@end group
@end example

@noindent
Powy¿sze wypisze @samp{12.15 nie ma w tabl. dane}.  Pierwsza instrukcja
nadaje @code{xyz} warto¶æ numeryczn±.  Przypisanie do @code{dane[xyz]}
indeksuje @code{dane} warto¶ci± ³añcuchow± @code{"12.153"} (wykorzystuj±c
domy¶ln± warto¶æ konwersji @code{CONVFMT}, @code{"%.6g"}), i nadaje
@code{data["12.153"]} warto¶æ jeden.  Nastêpnie program zmienia warto¶æ
@code{CONVFMT}.  Test @samp{(xyz in dane)} tworzy now± warto¶æ ³añcuchow±
z @code{xyz}, tym razem @code{"12.15"}, gdy¿ warto¶æ @code{CONVFMT} pozwala
tylko na dwie cyfry znacz±ce.  Test zwraca pora¿kê, gdy¿ @code{"12.15"} jest
³añcuchem ró¿nym od @code{"12.153"}.

Zgodnie z regu³ami konwersji
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}), warto¶ci ca³kowite
s± zawsze przekszta³cane na ³añcuchy jako ca³kowite, bez wzglêdu na to, jaka
jest warto¶æ @code{CONVFMT}.  Zatem zwyczajny przypadek:

@example
for (i = 1; i <= maxind; i++)
    @i{zrób co¶ z} tablica[i]
@end example

@noindent
bêdzie dzia³a³, bez wzglêdu na warto¶æ @code{CONVFMT}.

Jak wiele rzeczy w @code{awk}, przewa¿nie rzeczy dzia³aj± tak, jak siê tego
spodziewamy.  Przydaje siê jednak dok³adna wiedzê o faktycznych
zasadach, gdy¿ mog± one czasem mieæ trudno uchwytny wp³yw na nasze programy.

@node Niezainicjowane indeksy, Wielowymiarowe, Numeryczne indeksy tablic, Tablice
@section Stosowanie niezainicjowanych zmiennych jako indeksów

@cindex niezainicjowane zmienne, jako indeksy tablicy
@cindex indeksy tablicy, niezainicjowane zmienne
@cindex tablice, niezainicjowane zmienne jako indeksy
Za³ó¿my, ¿e chcemy wypisaæ jakie¶ dane wej¶ciowe w odwróconej kolejno¶ci.
Sensowny program próbny, który by to robi³ (na pewnych danych testowych)
wygl±da tak:

@example
@group
$ echo 'wiersz 1
> wiersz 2
> wiersz 3' | awk '@{ w[wiersze] = $0; ++wiersze @}
> END @{
>     for (i = wiersze-1; i >= 0; --i)
>        print w[i]
> @}'
@print{} wiersz 3
@print{} wiersz 2
@end group
@end example

Niestety, pierwszy wiersz danych wej¶ciowych nie pojawi³ siê na wyj¶ciu!

Na pierwszy rzut oka, program powinien dzia³aæ.  Zmienna @code{wiersze} jest
niezainicjowana, a niezainicjowane zmienne maj± numeryczn± warto¶æ zero.
Zatem, @code{awk} powinien wypisaæ warto¶æ elementu @code{w[0]}.

Problemem jest tu fakt, ¿e indeksy tablic @code{awk} s± @strong{zawsze}
³añcuchami.  A niezainicjowane zmienne, u¿yte jako ³añcuchy, maj±
warto¶æ @code{""}, a nie zero.  Zatem, @samp{wiersz 1} zosta³ ostatecznie
zapisany w @code{w[""]}.

Poni¿sza wersja programu dzia³a poprawnie:

@example
@{ w[wiersze++] = $0 @}
END @{
    for (i = wiersze - 1; i >= 0; --i)
       print w[i]
@}
@end example

Tutaj, @samp{++} wymusza, by @code{wiersze} by³o numeryczne, w ten sposób
czyni±c ``star± warto¶æ'' numerycznym zerem, które z kolei jest
przekszta³cane na @code{"0"} jako indeks tablicy.

@cindex ³añcuch pusty, jako indeks tablicy
@cindex ciemny k±t
Jak w³a¶nie widzieli¶my, mimo tego, ¿e jest to nieco niezwyk³e, ³añcuch
pusty (@code{""}) jest poprawnym indeksem tablicy (c.k.).  Je¶li w wierszu
poleceñ podano opcjê @samp{--lint}
(@pxref{Opcje, ,Opcje wiersza poleceñ}), @code{gawk} bêdzie ostrzega³
o  u¿yciu ³añcucha pustego jako indeksu.

@node Wielowymiarowe, Przegl±danie wielowymiarowych, Niezainicjowane indeksy, Tablice
@section Tablice wielowymiarowe

@cindex indeksy tablic
@cindex tablice, indeksy wielowymiarowe
@cindex wielowymiarowe indeksy
Tablica wielowymiarowa jest tablic±, w której element jest identyfikowany
przez ci±g indeksów, a nie przez pojedynczy indeks.  Na przyk³ad, tablica
dwuwymiarowa wymaga dwu indeksów.  Zwyczajowym sposobem (w wiêkszo¶ci
jêzyków, ³±cznie z @code{awk}) odwo³ywania siê do elementu tablicy
dwuwymiarowej o nazwie @code{siatka} jest @code{siatka[@var{x},@var{y}]}.

@vindex SUBSEP
Tablice wielowymiarowe obs³ugiwane s± w @code{awk} dziêki konkatenacji
indeksów w jeden ³añcuch.  Dzia³a to tak, ¿e @code{awk} przekszta³ca indeksy
na ³añcuchy
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}) i skleja je razem,
z separatorem miêdzy nimi.  Tworzy to pojedynczy ³añcuch opisuj±cy warto¶ci
poszczególnych indeksów.  Po³±czony ³añcuch s³u¿y jako pojedynczy indeks
zwyk³ej, jednowymiarowej tablicy.  Wykorzystywanym separatorem jest warto¶æ
zmiennej wbudowanej @code{SUBSEP}.

Na przyk³ad, za³ó¿my, ¿e obliczamy wyra¿enie @samp{foo[5,12] = "warto¶æ"}
gdy warto¶ci± @code{SUBSEP} jest @code{"@@"}.  Liczby piêæ i 12 s±
przekszta³cane na ³añcuchy i ³±czone ze sob± z @samp{@@} miêdzy nimi,
daj±c @code{"5@@12"}.  Zatem, element @code{foo["5@@12"]} otrzymuje warto¶æ
@code{"warto¶æ"}.

Po zapamiêtaniu warto¶ci elementu @code{awk} nie ma ¿adnego zapisu o tym,
czy by³ on zapamiêtany z pojedynczym indeksem, czy ci±giem indeksów.
Wyra¿enia @samp{foo[5,12]} i @w{@samp{foo[5 SUBSEP 12]}} s± zawsze
równowa¿ne.

Domy¶ln± warto¶ci± @code{SUBSEP} jest ³añcuch @code{"\034"},
zawieraj±cy znak niedrukowalny, którego pojawienie siê w programie
@code{awk} lub wiêkszo¶ci danych wej¶ciowych jest ma³o prawdopodobne.

U¿yteczno¶æ wyboru nieprawdopodobnego znaku pochodzi st±d, i¿ warto¶ci
indeksów zawieraj±ce ³añcuch pasuj±cy do @code{SUBSEP} prowadz± do ³±czonych
³añcuchów, które s± niejednoznaczne.  Za³ó¿my, ¿e @code{SUBSEP} by³oby
@code{"@@"}. Wówczas @w{@samp{foo["a@@b", "c"]}}
i @w{@samp{foo["a", "b@@c"]}} by³yby nieodró¿nialne, gdy¿ oba zosta³y by
w rzeczywisto¶ci zapamiêtane jako @samp{foo["a@@b@@c"]}.

Mo¿emy sprawdzaæ czy w tablicy ``wielowymiarowej'' istnieje konkretna
sekwencja-indeksów za pomoc± tego samego operatora @samp{in}, u¿ywanego dla
tablic jednowymiarowych.  Zamiast pojedynczego indeksu jako
lewostronnego operatora, piszemy w nawiasach ca³y ci±g indeksów
rozdzielonych przecinkami:

@example
(@var{indeks1}, @var{indeks2}, @dots{}) in @var{tablica}
@end example

Poni¿szy przyk³ad traktuje swoje wej¶cie jak dwuwymiarow± tablicê pól.
Obraca tê tablicê o 90 stopni zgodnie z ruchem wskazówek zegara i wypisuje
wynik.  Zak³ada, ¿e wszystkie wiersze maj± tê sam± ilo¶æ elementów.

@example
@group
awk '@{
     if (max_nf < NF)
          max_nf = NF
     max_nr = NR
     for (x = 1; x <= NF; x++)
          wektor[x, NR] = $x
@}
@end group

@group
END @{
     for (x = 1; x <= max_nf; x++) @{
          for (y = max_nr; y >= 1; --y)
               printf("%s ", wektor[x, y])
          printf("\n")
     @}
@}'
@end group
@end example

@noindent
Przy podaniu mu jako wej¶cia:

@example
@group
1 2 3 4 5 6
2 3 4 5 6 1
3 4 5 6 1 2
4 5 6 1 2 3
@end group
@end example

@noindent
daje:

@example
@group
4 3 2 1
5 4 3 2
6 5 4 3
1 6 5 4
2 1 6 5
3 2 1 6
@end group
@end example

@node Przegl±danie wielowymiarowych, Efektywno¶æ tablic, Wielowymiarowe, Tablice
@section Przegl±danie tablic wielowymiarowych

Nie istnieje ¿adna specjalna instrukcja @code{for} do przegl±dania tablic
``wielowymiarowych''.  Nie mo¿e istnieæ, gdy¿ naprawdê nie ma
wielowymiarowych tablic czy elementów.  Jest tylko wielowymiarowa
@emph{metoda dostêpu} do tablicy.

Je¶li jednak w naszym programie jest tablica, do której zawsze odwo³ujemy
siê wielowymiarowo, mo¿na uzyskaæ efekt jej przegl±dania dziêki po³±czeniu
instrukcji @code{for}
(@pxref{Przegl±danie tablic, ,Przegl±danie wszystkich elementów tablicy})
z funkcj± wbudowan± @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).
Dzia³a to tak:

@example
for (laczony in tablica) @{
  split(laczony, poszczegolne, SUBSEP)
  @dots{}
@}
@end example

@noindent
Nadaje to zmiennej @code{laczony} kolejne warto¶ci skonkatenowanych,
po³±czonych indeksów tablicy, i dzieli j± na poszczególne indeksy
przez ciêcia w miejscach, gdzie wystêpuje warto¶æ @code{SUBSEP}.
Powsta³e z podzia³u indeksy staj± siê elementami tablicy @code{poszczegolne}.

Zatem za³ó¿my, ¿e w @code{tablica[1, "foo"]} mamy uprzednio zapamiêtan±
warto¶æ.  Wówczas w tablicy @code{array} istnieje element o indeksie
@code{"1\034foo"}.  (Przypominamy, ¿e domy¶ln± warto¶ci± @code{SUBSEP} jest
znak o kodzie 034.)  Wcze¶niej czy pó¼niej instrukcja @code{for} znajdzie
ten indeks i wykona iteracjê ze zmienn± @code{laczony} o nadanej
warto¶ci @code{"1\034foo"}.  Nastêpnie wywo³ywana jest funkcja @code{split}
jak ni¿ej:

@example
split("1\034foo", poszczegolne, "\034")
@end example

@noindent
Wynikiem jest przypisanie @code{poszczegolne[1]} warto¶ci @code{"1"}, a
@code{poszczegolne[2]} warto¶ci @code{"foo"}.  Presto, zosta³a odtworzona
pierwotna sekwencja indeksów.

@node Efektywno¶æ tablic, , Przegl±danie wielowymiarowych, Tablice
@section Efektywne wykorzystywanie tablic

Ta sekcja odnosi siê tylko do @code{gawk}.

Czêsto przydaje siê stosowaæ tê sam± dan± jako indeks w wielu tablicach.
Z powodu metody implementacji tablic asocjacyjnych przez
@code{gawk}, gdy potrzebujemy u¿yæ danych wej¶ciowych jako indeksu w wielu
tablicach, znacznie efektywniej jest przypisaæ pole wej¶ciowe do osobnej
zmiennej, a nastêpnie zastosowaæ jako indeks tê zmienn±.

@example
@{
      imie = $1
      skladka = $2
      ndz = $3
      @dots{}
      starsi[imie]++       # lepiej ni¿ starsi[$1]++
      dzieci[imie] = ndz   # lepiej ni¿ dzieci[$1] = ndz
@}
@end example

W ka¿dym razie, stosowanie do pól wej¶ciowych odrêbnych zmiennych
o mnemonicznych nazwach czyni program czytelniejszym. Ostatecznym
celem jest uzyskanie mo¿liwie du¿ej efektywno¶ci indeksowania tablic
@code{gawk}, bez wzglêdu na ¼ród³o warto¶ci indeksu.

@node Wbudowane, U¿ytkownika, Tablice, Top
@chapter Funkcje wbudowane

@c 2e: USE TEXINFO-2 FUNCTION DEFINITION STUFF!!!!!!!!!!!!!
@cindex funkcje wbudowane
Funkcje @dfn{wbudowane} to funkcje, które s± zawsze dostêpne do wywo³ania w
programie @code{awk}.  Ten rozdzia³ opisuje wszystkie funkcje wbudowane
wystêpuj±ce w @code{awk}.  O niektórych z nich wspomniano w innych sekcjach,
ale tu dla wygody zestawiono je wszystkie.
(Mo¿liwe jest te¿ samodzielne definiowanie nowych funkcji.
@xref{U¿ytkownika, ,Funkcje u¿ytkownika}.)

@menu
* Wywo³ywanie wbudowanych::     Jak wywo³ywaæ funkcje wbudowane.
* Funkcje numeryczne::          Funkcje dzia³aj±ce na liczbach, m.in.
                                @code{int}, @code{sin} i @code{rand}.
* Funkcje ³añcuchowe::          Funkcje do dzia³añ na ³añcuchach, jak
                                @code{split}, @code{match} i @code{sprintf}.
* Funkcje I/O::                 Funkcje obs³ugi plików i poleceñ pow³oki.
* Funkcje czasu::               Funkcje do pracy ze znacznikami czasu.
@end menu

@node Wywo³ywanie wbudowanych, Funkcje numeryczne, Wbudowane, Wbudowane
@section Wywo³ywanie funkcji wbudowanych

Aby wywo³aæ funkcjê wbudowan± nale¿y napisaæ nazwê funkcji, po której
w nawiasach wyst±pi± argumenty.  Na przyk³ad, @samp{atan2(y + z, 1)} jest
wywo³aniem funkcji @code{atan2}, z dwoma argumentami.

Bia³y znak miêdzy nazw± funkcji wbudowanej a nawiasem otwieraj±cym jest
ignorowany, ale zaleca siê unikanie stosowania go w tym miejscu.
Funkcje definiowane przez u¿ytkownika nie zezwalaj± na u¿ywanie w ten sposób
bia³ego znaku, a ³atwiej jest unikn±æ pomy³ek przestrzegaj±c prostej
konwencji, która zawsze dzia³a: ¿adnych bia³ych znaków po nazwie funkcji.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Ka¿da z funkcji wbudowanych przyjmuje pewn± liczbê argumentów.  W niektórych
przypadkach argumenty mog± byæ pomijane.  Domy¶lne warto¶ci pominiêtych
argumentów s± ró¿ne, w zale¿no¶ci od funkcji.  Opisano je przy omówieniach
poszczególnych funkcji.  W niektórych implementacjach @code{awk} dodatkowe
argumenty przekazywane funkcjom wbudowanym s± ignorowane.
Jednak w @code{gawk} jest to b³±d krytyczny.

Przy wywo³ywaniu funkcji wyra¿enia tworz±ce jej parametry faktyczne s±
obliczane przed wykonaniem wywo³ania.  Na przyk³ad, w tym fragmencie kodu:

@example
i = 4
j = sqrt(i++)
@end example

@noindent
zmienna @code{i} otrzymuje warto¶æ piêæ przed wywo³aniem @code{sqrt}
z warto¶ci± cztery jako jej aktualnym parametrem.

@cindex obliczenia, kolejno¶æ
@cindex kolejno¶æ obliczeñ
Kolejno¶æ obliczanie wyra¿eñ stosowanych jako argumenty funkcji jest
niezdefiniowana.  Zatem, nie powinno siê pisaæ programów, które zak³adaj±,
¿e argumenty s± obliczane od lewej do prawej czy od prawej do lewej.
Na przyk³ad,

@example
i = 5
j = atan2(i++, i *= 2)
@end example

Je¿eli kolejno¶æ obliczeñ bêdzie od lewej do prawej, to @code{i} najpierw
stanie siê równe 6, potem 12, a @code{atan2} zostanie wywo³ane z tymi dwoma
argumentami: 6 i 12.  Ale je¶li obliczenia bêd± wykonywane od prawej do
lewej, to @code{i} najpierw stanie siê równe 10, nastêpnie 11, a @code{atan2}
wywo³ane zostanie z argumentami 11 i 10.

@node Funkcje numeryczne, Funkcje ³añcuchowe, Wywo³ywanie wbudowanych, Wbudowane
@section Wbudowane funkcje numeryczne

Oto pe³na lista funkcji wbudowanych dzia³aj±cych na liczbach.  Parametry
opcjonalne umieszczono w nawiasach kwadratowych (``['' i ``]'').

@table @code
@item int(@var{x})
@findex int
Tworzy najbli¿sz± liczbê ca³kowit± w stosunku do @var{x}, po³o¿on± pomiêdzy
@var{x} a zerem, obciêt± w stronê zera.

Na przyk³ad, @code{int(3)} jest trzy, @code{int(3.9)} jest trzy,
@code{int(-3.9)} jest @minus{}3, a @code{int(-3)} jest tak¿e @minus{}3.

@item sqrt(@var{x})
@findex sqrt
Podaje pierwiastek kwadratowy z @var{x}.  Zg³asza b³±d gdy @var{x} jest
ujemne.  Zatem, @code{sqrt(4)} wynosi dwa.

@item exp(@var{x})
@findex exp
Daje potêgê naturaln± o wyk³adniku @var{x} (@code{e ^ @var{x}}), lub zg³asza
b³±d je¶li @var{x} jest poza dopuszczalnym zakresem.  Zakres warto¶ci, jakie
mo¿e przyjmowaæ @var{x} zale¿y od reprezentacji zmiennoprzecinkowej danej
architektury.

@item log(@var{x})
@findex log
Podaje logarytm naturalny z @var{x}, je¶li @var{x} jest dodatnie;
w przeciwnym razie, zg³asza b³±d.

@item sin(@var{x})
@findex sin
Daje sinus z @var{x}, gdzie @var{x} jest w radianach.

@item cos(@var{x})
@findex cos
Daje cosinus z @var{x}, gdzie @var{x} jest w radianach.

@item atan2(@var{y}, @var{x})
@findex atan2
Podaje arcus tangens z @code{@var{y} / @var{x}} w radianach.

@item rand()
@findex rand
Daje liczbê losow±.  Warto¶ci @code{rand} s± równomiernie roz³o¿one miêdzy
zerem a jeden.  Warto¶æ nigdy nie wynosi zero ani jeden.

Czêsto zamiast tego potrzebujemy losowych liczb ca³kowitych.  Oto funkcja
u¿ytkownika, która mo¿na wykorzystaæ do uzyskiwania
nieujemnych liczb ca³kowitych mniejszych ni¿ @var{n}:

@example
function randint(n) @{
     return int(n * rand())
@}
@end example

@noindent
Mno¿enie tworzy losow± liczbê wiêksz± od zera a mniejsz± od @code{n}.
Nastêpnie robimy z niej ca³kowit± (za pomoc± @code{int}) pomiêdzy
zero a @code{n} @minus{} 1, w³±cznie.

Oto przyk³ad, w którym podobn± funkcjê zastosowano do tworzenia liczb
pseudolosowych miêdzy jeden a @var{n}.  Program ten wypisuje now± liczbê
losow± dla ka¿dego rekordu wej¶ciowego.

@example
@group
awk '
# funkcja rzucaj±ca symulowan± kostk±.
function roll(n) @{ return 1 + int(rand() * n) @}
@end group

@group
# Rzuæ trzema 6-bocznymi kostkami i
# wypisz ca³kowit± liczbê punktów.
@{
      printf("%d punktów\n",
             roll(6)+roll(6)+roll(6))
@}'
@end group
@end example

@cindex ziarno dla liczb losowych
@cindex liczby losowe, ziarno
@comment MAWK uses a different seed each time.
@strong{Uwaga:} W wiêkszo¶ci implementacji @code{awk}, ³±cznie z @code{gawk},
@code{rand} zaczyna tworzenie liczb losowych od tej samej liczby
pocz±tkowej (czyli @dfn{ziarna}) przy ka¿dym uruchomieniu @code{awk}.
Zatem, dany program bêdzie przy ka¿dym uruchomieniu generowa³ te same
wyniki.  Liczby te s± losowe w pojedynczym przebiegu @code{awk}, ale
przewidywalne miêdzy uruchomieniami.  Jest to przydatne przy debugowania,
ale je¶li chcemy, by przy ka¿dym u¿yciu program robi³ inne rzeczy, musimy
zmieniæ ziarno na warto¶æ, która przy ka¿dym przebiegu bêdzie inna.
W tym celu nale¿y skorzystaæ z @code{srand}.

@item srand(@r{[}@var{x}@r{]})
@findex srand
Funkcja @code{srand} nadaje punktowi startowemu, ziarnu, tworzenia liczb
losowych warto¶æ @var{x}.

Ka¿da warto¶æ ziarna prowadzi do konkretnego ci±gu liczb
losowych.@footnote{Tworzone przez komputer liczby losowe nie s± naprawdê
losowe.  Techniczne znane s± jako ``pseudo-losowe''.  Oznacza to, ¿e
mimo, i¿ liczby w sekwencji wygl±daj± na losowe, to w rzeczywisto¶ci mo¿na
wci±¿ od nowa tworzyæ tê sam± sekwencjê liczb losowych.}
Zatem, je¿eli kolejnym razem przypiszemy ziarnu tê sam± warto¶æ,
otrzymamy ponownie ten sam ci±g liczb losowych.

Je¿eli argument @var{x} zostanie pominiêty, jak w @code{srand()}, to jako
ziarno zostan± u¿yte bie¿±ca data i czas.  Jest to sposób uzyskiwania
liczb losowych, które naprawdê s± nieprzewidywalne.

Warto¶ci± zwracan± przez @code{srand} jest poprzednie ziarno.
U³atwia to ¶ledzenie ziaren przy konsekwentnym odtwarzaniu sekwencji liczb
losowych.
@end table

@node Funkcje ³añcuchowe, Funkcje I/O, Funkcje numeryczne, Wbudowane
@section Funkcje wbudowane dzia³aj±ce na ³añcuchach

Funkcje w tej sekcji badaj± lub zmieniaj± tekst jednego lub wiêcej
³añcuchów.   Parametry opcjonalne umieszczono w nawiasach
kwadratowych (``['' i ``]'').

@table @code
@item index(@var{gdzie}, @var{co})
@findex index
Szuka w ³añcuchu @var{gdzie} pierwszego wyst±pienia ³añcucha @var{co}
i zwraca pozycjê, w znakach, na której pojawia siê w @var{gdzie} to
wyst±pienie.  Na przyk³ad:

@example
$ awk 'BEGIN @{ print index("peanut", "an") @}'
@print{} 3
@end example

@noindent
Je¿eli nie znaleziono @var{co}, to @code{index} zwraca zero.
(Nale¿y pamiêtaæ, ¿e w @code{awk} indeksy w ³añcuchach zaczynaj± siê
od jeden.)

@item length(@r{[}@var{³añcuch}@r{]})
@findex length
Podaje liczbê znaków w @var{³añcuchu}.  Je¿eli @var{³añcuch} jest liczb±,
zwracana jest d³ugo¶æ ³añcucha numerycznego reprezentuj±cego tê liczbê.
Na przyk³ad, @code{length("abcde")} wynosi piêæ.  W przeciwieñstwie do tego,
@code{length(15 * 35)} wynosi trzy.  W jaki sposób?  Có¿, 15 * 35 = 525, a
525 jest zamieniane na ³añcuch @code{"525"}, który ma trzy znaki.

Je¿eli nie podano argumentu, @code{length} zwraca d³ugo¶æ @code{$0}.

@cindex cechy historyczne
@cindex przeno¶no¶æ
@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
W starszych wersjach @code{awk}, mo¿na by³o wywo³ywaæ funkcjê @code{length}
bez ¿adnych nawiasów.  Robienie tego w standardzie POSIX oznaczono jako
``niezalecane''.  To znaczy, ¿e mimo, i¿ mo¿na tak robiæ we w³asnych
programach, jest to cecha, która ostatecznie zostanie usuniêta z przysz³ych
wersji standardu.  Z tego powodu, dla maksymalnej przeno¶no¶ci programów
@code{awk}, powinno siê zawsze podawaæ nawiasy.

@item match(@var{³añcuch}, @var{regexp})
@findex match
Funkcja @code{match} szuka w ³añcuchu @var{³añcuch} najd³u¿szego lewego
pod³añcucha pasuj±cego do wyra¿enia regularnego @var{regexp}.  Zwraca
pozycjê znaku, @dfn{indeks}, gdzie rozpoczyna siê ten pod³añcuch
(jeden, je¶li zaczyna siê na pocz±tku @var{³añcucha}).  Je¿eli nie
znaleziono dopasowania zwracane jest zero.

@vindex RSTART
@vindex RLENGTH
Funkcja @code{match} nadaje zmiennej wbudowanej @code{RSTART} warto¶æ
znalezionego indeksu.  Przypisuje te¿ zmiennej wbudowanej @code{RLENGTH}
d³ugo¶æ, w znakach, pasuj±cego pod³añcucha.  Je¿eli nie znaleziono
dopasowania, @code{RSTART} jest zerowane, a @code{RLENGTH} otrzymuje
warto¶æ @minus{}1.

Na przyk³ad:

@example
@group
@c file eg/misc/findpat.sh
awk '@{
       if ($1 == "FIND")
         regex = $2
       else @{
         gdzie = match($0, regex)
         if (gdzie != 0)
           print "Dopasowanie", regex,        \
                    "znaleziono na pozycji", \
                    gdzie, "w", $0
       @}
@}'
@c endfile
@end group
@end example

@noindent
Powy¿szy program szuka wierszy pasuj±cych do wyra¿enia regularnego
zapamiêtanego w zmiennej @code{regex}.  To wyra¿enie regularne mo¿na
zmieniæ.  Je¶li pierwszym s³owem wiersza jest @samp{FIND}, to @code{regex}
zmieniane jest na drugie s³owo tego wiersza.  St±d te¿, przy podanym:

@example
@c file eg/misc/findpat.data
FIND dzia+³a
Mój program dzia³a
ale niezbyt szybko
FIND Melvin
JF+KM
Ta linijka jest w³asno¶ci± Reality Engineering Co.
Melvin by³ tutaj.
@c endfile
@end example

@noindent
@code{awk} wypisze:

@example
Dopasowanie dzia+³a znaleziono na pozycji 12 w Mój program dzia³a
Dopasowanie Melvin znaleziono na pozycji 1 w Melvin by³ tutaj.
@end example

@item split(@var{³añcuch}, @var{tablica} @r{[}, @var{sep-pól}@r{]})
@findex split
Dzieli @var{³añcuch} na kawa³ki rozdzielane przez @var{sep-pól} i
zapamiêtuje je w @var{tablicy}.  Pierwszy z nich zapamiêtywany jest w
@code{@var{array}[1]}, drugi w @code{@var{array}[2]}, i tak dalej.
Warto¶æ ³añcuchowa trzeciego argumentu, @var{sep-pól}, jest wyra¿eniem
regularnym opisuj±cym, w którym miejscach dzieliæ @var{³añcuch}
(choæ jak @code{FS} mo¿e byæ wyra¿eniem regularnym opisuj±cym, w których
miejscach dzieliæ rekordy wej¶ciowe).  Je¿eli pominiêto @var{sep-pól},
stosowana jest warto¶æ @code{FS}.
@code{split} zwraca liczbê utworzonych elementów.

Funkcja @code{split} dzieli ³añcuchy na czê¶ci w sposób podobny do tego,
w jaki wiersze wej¶ciowe dzielone s± na pola.  Na przyk³ad:

@example
split("cul-de-sac", a, "-")
@end example

@noindent
rozbija ³añcuch @samp{cul-de-sac} na trzy pola, wykorzystuj±c @samp{-} jako
separator.  Nadaje tablicy @code{a} zawarto¶æ jak ni¿ej:

@example
a[1] = "cul"
a[2] = "de"
a[3] = "sac"
@end example

@noindent
Warto¶ci± zwracan± przez to wywo³anie @code{split} jest trzy.

Tak jak przy podziale na pola, gdy warto¶ci± @var{sep-pól} jest
@w{@code{" "}}, pocz±tkowe i koñcowe bia³e znaki s± ignorowane, a elementy
rozdzielane s± przez ci±gi bia³ych znaków.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
Równie¿ tak jak przy podziale na pola, je¿eli @var{sep-pól} jest ³añcuchem
pustym, ka¿dy z poszczególnych znaków dzielonego ³añcucha tworzy odrêbny
element tablicy.  (Jest to rozszerzenie specyficzne dla @code{gawk}.)

@cindex ciemny k±t
W ostatnich implementacjach @code{awk}, ³±cznie z @code{gawk},
trzeci argument mo¿e byæ równie dobrze ³añcuchem, jak i sta³ym wyra¿eniem
regularnym (@code{/abc/}) (c.k.).  Standard POSIX równie¿ na to pozwala.

Przed podzia³em ³añcucha @code{split} usuwa wszelkie uprzednio istniej±ce
elementy tablicy @var{tablica} (c.k).

Je¿eli @var{³añcuch} w ogóle nie zawiera dopasowania do @var{sep-pól},
@var{tablica} bêdzie mieæ jeden element.  Warto¶ci± tego elementu bêdzie
pierwotny @var{³añcuch}.

@item sprintf(@var{format}, @var{wyra¿enie1},@dots{})
@findex sprintf
Zwraca (bez wypisywania) ³añcuch jaki wypisa³aby instrukcja @code{printf}
z tymi samymi argumentami
(@pxref{Printf, ,Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}}).
Na przyk³ad:

@example
sprintf("pi = %.2f (w przybl.)", 22/7)
@end example

@noindent
zwraca ³añcuch @w{@code{"pi = 3.14 (w przybl.)"}}.

@ignore
2e: For sub, gsub, and gensub, either here or in the "how much matches"
    section, we need some explanation that it is possible to match the
    null string when using closures like *.  E.g.,

         $ echo abc | awk '{ gsub(/m*/, "X"); print }'
         @print{} XaXbXcX

    Although this makes a certain amount of sense, it can be very
    suprising.
@end ignore

@item sub(@var{regexp}, @var{zast±pienie} @r{[}, @var{cel}@r{]})
@findex sub
Funkcja @code{sub} zmienia warto¶æ @var{celu}.
Szuka w tej warto¶ci, traktowanej jako ³añcuch, lewego najd³u¿szego
pod³añcucha pasuj±cego do wyra¿enia regularnego, @var{regexp}, rozszerzaj±c
to dopasowanie, tak dalece, jak to mo¿liwe.  Nastêpnie ca³y ³añcuch jest
zmieniany poprzez zast±pienie dopasowanego tekstu przez @var{zast±pienie}.
Zmodyfikowany ³añcuch staje siê now± warto¶ci± @var{celu}.

Jest to szczególna funkcja, gdy¿ @var{cel} nie jest u¿ywane po prostu
do obliczenia warto¶ci, i nie wystarczy tu dowolne wyra¿enie: musi to byæ
zmienna, pole lub element tablicy, tak by @code{sub} mog³a w nim przechowaæ
zmienion± warto¶æ.  Je¿eli pominiêto ten argument, to domy¶lnie
wykorzystywane i zmieniane jest @code{$0}.

Na przyk³ad:

@example
str = "water, water, everywhere"
sub(/at/, "ith", str)
@end example

@noindent
Nadaje @code{str} warto¶æ @w{@code{"wither, water, everywhere"}}, dziêki
zamianie lewego najd³u¿szego wyst±pienia @samp{at} przez @samp{ith}.

Funkcja @code{sub} zwraca liczbê wykonanych zast±pieñ (albo jeden albo
zero).

Je¿eli w @var{zast±pieniu} pojawia siê znak specjalny @samp{&}, to oznacza
on ten sam pod³añcuch, który pasowa³ do @var{regexp}.  (Je¿eli do danego
wyra¿enia regularnego mo¿e pasowaæ wiêcej ni¿ jeden ³añcuch, wówczas
pasuj±cy w danym przypadku ³añcuch mo¿e byæ ró¿ny.)  Na przyk³ad:

@example
awk '@{ sub(/kandydat/, "& i jego ¿ona"); print @}'
@end example

@noindent
zmienia w ka¿dym wierszu wej¶ciowym pierwsze wyst±pienie s³owa
@samp{kandydat} na @samp{kandydat i jego ¿ona}.

Oto inny przyk³ad:

@example
awk 'BEGIN @{
        str = "daabaaa"
        sub(/a*/, "C&C", str)
        print str
@}'
@print{} dCaaCbaaa
@end example

@noindent
Pokazuje on, jak @samp{&} mo¿e reprezentowaæ ³añcuch nie bêd±cy sta³±.
Ilustruje te¿ regu³ê ``lewe, najd³u¿sze'' w dopasowaniach wyra¿eñ
regularnych.  (@pxref{Lewe najd³u¿sze, ,Jak bardzo pasuje tekst?}).

Dzia³anie tego znaku specjalnego (@samp{&}) mo¿na wy³±czyæ stawiaj±c
przed nim w ³añcuchu odwrotny uko¶nik.  Jak zwykle, w celu wstawienia
odwrotnego uko¶nika w ³añcuchu, musimy napisaæ dwa odwrotne uko¶niki.
St±d te¿, aby w argumencie @var{zast±pienie} umie¶ciæ dos³owny @samp{&},
nale¿y napisaæ @samp{\\&} w sta³ej ³añcuchowej.
Na przyk³ad, w ten sposób zastêpujemy pierwszy znak @samp{|} w ka¿dym wierszu
znakiem @samp{&}:

@example
awk '@{ sub(/\|/, "\\&"); print @}'
@end example

@cindex @code{sub}, jej trzeci argument
@cindex @code{gsub}, jej trzeci argument
@strong{Zauwa¿:} jak wspomniano wy¿ej, trzeci argument @code{sub} musi byæ
zmienn±, polem lub odwo³aniem do tablicy.  Niektóre z wersji @code{awk}
pozwalaj±, by argument ten by³ wyra¿eniem nie bêd±cym lwarto¶ci±.  W takim
przypadku, @code{sub} nadal szuka wzorca i zwraca zero lub jeden, ale wynik
podstawienia (je¶li jest takowy) zostanie odrzucony, gdy¿ nie ma miejsca,
w którym mo¿naby go umie¶ciæ.  Te wersje @code{awk} akceptuj± wyra¿enia
takie jak to:

@example
sub(/USA/, "United States", "USA i Canada")
@end example

@noindent
Z uwagi na zgodno¶æ historyczn±, @code{gawk} przyjmie b³êdny kod, jak w
powy¿szym przyk³adzie.  Jednak u¿ycie jakiegokolwiek innego nie daj±cego siê
zmieniæ obiektu jako trzeciego parametru spowoduje b³±d krytyczny, a program
nie uruchomi siê.

Na koniec, je¶li @var{regexp} nie jest sta³ym wyra¿eniem regularnym, to jest
przekszta³cane na ³añcuch. Nastêpnie warto¶æ tego ³añcucha traktowana jest
jak wyra¿enie regularne do dopasowania.

@item gsub(@var{regexp}, @var{zast±pienie} @r{[}, @var{cel}@r{]})
@findex gsub
Podobna do funkcji @code{sub}, poza tym, ¿e @code{gsub} zastêpuje
@emph{wszystkie} najd³u¿sze, lewe, @emph{nie nak³adaj±ce siê} pasuj±ce
pod³añcuchy jakie znajdzie.  Litera @samp{g} w @code{gsub} znaczy
``globalnie'', czyli zastêpowanie wszêdzie.  Na przyk³ad:

@example
awk '@{ gsub(/Britain/, "United Kingdom"); print @}'
@end example

@noindent
zastêpuje we wszystkich rekordach wej¶ciowych wszystkie wyst±pienia ³añcucha
@samp{Britain} przez @samp{United Kingdom}.

Funkcja @code{gsub} zwraca liczbê wykonanych podstawieñ.  Je¿eli pominiêto
zmienn±, jaka ma byæ przeszukana i zmieniona, @var{cel}, to u¿ywany jest
ca³y rekord wej¶ciowy, @code{$0}.

Jak w @code{sub}, znaki @samp{&} i @samp{\} maj± specjalne znaczenie,
a trzeci argument musi byæ lwarto¶ci±.
@end table

@table @code
@item gensub(@var{regexp}, @var{zast±pienie}, @var{jak} @r{[}, @var{cel}@r{]})
@findex gensub
@code{gensub} jest ogóln± funkcj± podstawiania.  Podobnie jak @code{sub}
i @code{gsub}, przegl±da ³añcuch docelowy @var{cel} szukaj±c dopasowañ
wyra¿enia regularnego @var{regexp}.  Inaczej ni¿ w @code{sub} i @code{gsub},
zmodyfikowany ³añcuch zwracany jest jako wynik dzia³ania funkcji, a pierwotny
³añcuch @emph{nie} jest zmieniany.  Je¿eli @var{jak} jest ³añcuchem
zaczynaj±cym siê liter± @samp{g} lub @samp{G}, to przez @var{zast±pienie}
zostan± zast±pione wszystkie dopasowania @var{regexp}.  W przeciwnym razie,
@var{how} jest liczb± wskazuj±c±, które wyst±pienie @var{regexp} ma zostaæ
wymienione.  Je¿eli nie podano @var{celu}, to zamiast niego wykorzystywane
jest @code{$0}.

@code{gensub} udostêpnia dodatkow± cechê, niedostêpn± w @code{sub} czy
@code{gsub}: mo¿liwo¶æ okre¶lenia sk³adowych wyra¿enia regularnego
w zastêpuj±cym tek¶cie.  Robimy to u¿ywaj±c nawiasów do wskazania
sk³adowych w dopasowywanym wyra¿eniu regularnym, a nastêpnie podanie
@samp{\@var{n}} w tek¶cie zastêpuj±cym, gdzie @var{n} jest cyfr± od
jeden do dziewiêæ.  Na przyk³ad:

@example
@group
$ gawk '
> BEGIN @{
>      a = "abc def"
>      b = gensub(/(.+) (.+)/, "\\2 \\1", "g", a)
>      print b
> @}'
@print{} def abc
@end group
@end example

@noindent
Jak opisano wy¿ej przy @code{sub}, musimy wpisaæ dwa odwrotne uko¶niki,
by w ³añcuchu uzyskaæ jeden.

W tek¶cie zastêpuj±cym sekwencja @samp{\0} reprezentuje ca³y
dopasowany tekst, tak samo jak znak @samp{&}.

Ten przyk³ad pokazuje, jak wykorzystaæ trzeci argument do wyboru
dopasowania, które ma zostaæ zmienione.

@example
$ echo a b c a b c |
> gawk '@{ print gensub(/a/, "AA", 2) @}'
@print{} a b c AA b c
@end example

W tym przypadku zastosowano @code{$0}, jako domy¶lny ³añcuch docelowy.
@code{gensub} zwraca jako wynik nowy ³añcuch, przekazywany bezpo¶rednio do
@code{print} w celu wypisania.

Je¶li argument @var{jak} jest ³añcuchem nie rozpoczynaj±cym siê od @samp{g}
lub @samp{G}, lub je¶li jest liczb± mniejsz± od zera, wykonywane jest tylko
jedno zast±pienie.

Je¿eli w @var{cel} nie ma dopasowania do @var{regexp}, warto¶ci± zwracan±
przez @code{gensub} jest pierwotna, niezmieniona warto¶æ @var{celu}.

@cindex ró¿nice miêdzy @code{gawk} a @code{awk}
@code{gensub} jest rozszerzeniem @code{gawk}; nie jest dostêpne w trybie
zgodno¶ci (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item substr(@var{³añcuch}, @var{start} @r{[}, @var{d³ugo¶æ}@r{]})
@findex substr
Zwraca @var{d³ugo¶æ}-znakowy pod³añcuch @var{³añcucha}, poczynaj±c od znaku
numer @var{start}.  Pierwszy znak ka¿dego ³añcucha jest znakiem numer
jeden.  Na przyk³ad, @code{substr("washington", 5, 3)} zwraca @code{"ing"}.

Je¿eli nie podano @var{d³ugo¶ci}, funkcja zwraca ca³± koñcówkê
@var{³añcucha} rozpoczynaj±c± siê od znaku numer @var{start}.  Na przyk³ad,
@code{substr("washington", 5)} zwraca @code{"ington"}.  Ca³a koñcówka
zwracana jest tak¿e je¶li @var{d³ugo¶æ} jest wiêksza ni¿ liczba znaków
pozosta³ych w danym ³añcuchu, licz±c od znaku numer @var{start}.

@strong{Zauwa¿:} Do ³añcucha zwracanego przez @code{substr} @emph{nie mo¿na}
wykonaæ przypisania warto¶ci.  A zatem b³êdem jest próba zmiany czê¶ci
³añcucha w ten sposób:

@example
string = "abcdef"
# próba uzyskania "abCDEf", nie zadzia³a
substr(string, 3, 3) = "CDE"
@end example

@noindent
lub u¿ycia @code{substr} jako trzeciego argumentu @code{sub} czy @code{gsub}:

@example
gsub(/xyz/, "pdq", substr($0, 5, 20))  # ¬LE
@end example

@cindex konwersja wielko¶ci liter
@cindex wielko¶æ liter, konwersja
@item tolower(@var{³añcuch})
@findex tolower
Zwraca kopiê @var{³añcucha}, w której wszystkie du¿e litery zamieniono na
odpowiadaj±ce im ma³e litery.  Znaki niealfabetyczne s± pozostawione bez
zmian.  Na przyk³ad, @code{tolower("MiEsZaNe 123")} zwraca
@code{"mieszane 123"}.

@item toupper(@var{³añcuch})
@findex toupper
Zwraca kopiê @var{³añcucha}, w której wszystkie ma³e litery zamieniono na
odpowiadaj±ce im du¿e litery.  Znaki niealfabetyczne s± pozostawione bez
zmian.  Na przyk³ad, @code{tolower("MiEsZaNe 123")} zwraca
@code{"MIESZANE 123"}.
@end table

@c fakenode --- for prepinfo
@subheading Wiêcej o @samp{\} i @samp{&} w @code{sub}, @code{gsub} i @code{gensub}

@cindex przetwarzanie znaków specjalnych, @code{sub} i in.
Przy stosowaniu @code{sub}, @code{gsub} lub @code{gensub}, i usi³owaniu
uzyskania dos³ownych znaków odwrotnego uko¶nika i ampersandu w tek¶cie
zastêpuj±cym, nale¿y pamiêtaæ o istnieniu kilku poziomów @dfn{przetwarzania
sekwencji specjalnych}, jakie zostan± wykonane.

Po pierwsze, mamy poziom @dfn{leksykalny}, wystêpuj±cy wtedy, gdy @code{awk}
czyta nasz program i tworzy jego wewnêtrzn± kopiê, nadaj±c± siê do wykonania.

Nastêpny poziom pojawia siê podczas wykonywania programu, gdy @code{awk}
rzeczywi¶cie bada ³añcuch zastêpuj±cy, by okre¶liæ, co ma utworzyæ.

Na obu tych poziomach @code{awk} szuka zdefiniowanego zestawu znaków, jakie
mog± pojawiæ siê po odwrotnym uko¶niku.  Na poziomie leksykalnym, szukane s±
sekwencje specjalne wymienione w @ref{Sekwencje specjalne}.  St±d te¿, dla
ka¿dego @samp{\}, który @code{awk} ma przetworzyæ na poziomie wykonania,
zapisujemy dwa @samp{\} na poziomie leksykalnym.  Gdy po @samp{\} wystêpuje
znak nie tworz±cy z nim poprawnej sekwencji specjalnej, zarówno uniksowy
@code{awk} jak i @code{gawk} po prostu usuwaj± taki pocz±tkowy @samp{\},
i umieszczaj± nastêpuj±cy po nim znak w ³añcuchu.  Zatem, na przyk³ad,
@code{"a\qb"} traktowane jest jak @code{"aqb"}.

Na poziomie wykonania rozmaite funkcje ró¿nie obs³uguj± sekwencje @samp{\}
i @samp{&}.  Sytuacja jest (niestety) do¶æ z³o¿ona.

Historycznie, funkcje @code{sub} i @code{gsub} traktowa³y w specjalny sposób
dwuznakow± sekwencjê @samp{\&}.  W tworzonym tek¶cie by³a ona zastêpowana
pojedynczym @samp{&}.  Wszystkie inne @samp{\} w ³añcuchu @var{zast±pienia},
które nie poprzedza³y znaku @samp{&} by³y przekazywane dalej bez zmian.
Ilustruje to tabela:

@c Thank to Karl Berry for help with the TeX stuff.
@tex
\vbox{\bigskip
% This table has lots of &'s and \'s, so unspecialize them.
\catcode`\& = \other \catcode`\\ = \other
% But then we need character for escape and tab.
@catcode`! = 4
@halign{@hfil#!@qquad@hfil#!@qquad#@hfil@cr
    Piszemy !@code{sub} widzi!@code{sub} tworzy@cr
@hrulefill!@hrulefill!@hrulefill@cr
   @code{\&}!       @code{&}!pasuj±cy tekst@cr
  @code{\\&}!      @code{\&}!dos³owny @samp{&}@cr
 @code{\\\&}!      @code{\&}!dos³owny @samp{&}@cr
@code{\\\\&}!     @code{\\&}!dos³owne @samp{\&}@cr
@code{\\\\\&}!     @code{\\&}!dos³owne @samp{\&}@cr
@code{\\\\\\&}!     @code{\\\&}!dos³owne @samp{\\&}@cr
  @code{\\q}!      @code{\q}!dos³owne @samp{\q}@cr
}
@bigskip}
@end tex
@ifinfo
@display
 Piszemy          @code{sub} widzi         @code{sub} tworzy
 -------          ---------           ---------
     @code{\&}              @code{&}            pasuj±cy tekst
    @code{\\&}             @code{\&}            dos³owny @samp{&}
   @code{\\\&}             @code{\&}            dos³owny @samp{&}
  @code{\\\\&}            @code{\\&}            dos³owne @samp{\&}
 @code{\\\\\&}            @code{\\&}            dos³owne @samp{\&}
@code{\\\\\\&}           @code{\\\&}            dos³owne @samp{\\&}
    @code{\\q}             @code{\q}            dos³owne @samp{\q}
@end display
@end ifinfo

@noindent
Tabela ta pokazuje zarówno przetwarzanie na poziomie leksykalnym, gdzie
nieparzysta liczba odwrotnych uko¶ników staje siê parzyst± liczb±
na poziomie wykonania, jak i wykonywane przez @code{sub} przetwarzanie
na poziomie wykonania.  (Dla uproszczenia, reszta tabel poni¿ej
pokazuje tylko przypadek wprowadzenia na poziomie leksykalnym parzystej
liczby odwrotnych uko¶ników @samp{\}.)

K³opot przy podej¶ciu historycznym stanowi to, ¿e nie ma sposobu
na uzyskanie dos³ownego @samp{\}, po którym nastêpuje dopasowany przez
funkcjê tekst.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
W 1992 standard POSIX usi³owa³ rozwi±zaæ ten problem.  Standard stwierdza,
¿e @code{sub} i @code{gsub} szukaj± po @samp{\} albo @samp{\} albo @samp{&}.
Je¿eli po @samp{\} wystêpuje który¶ z tych znaków, to jest on wypisywany
dos³ownie.  Interpretacja @samp{\} i @samp{&} staje siê wiêc taka:

@c thanks to Karl Berry for formatting this table
@tex
\vbox{\bigskip
% This table has lots of &'s and \'s, so unspecialize them.
\catcode`\& = \other \catcode`\\ = \other
% But then we need character for escape and tab.
@catcode`! = 4
@halign{@hfil#!@qquad@hfil#!@qquad#@hfil@cr
    Piszemy !@code{sub} widzi!@code{sub} tworzy@cr
@hrulefill!@hrulefill!@hrulefill@cr
    @code{&}!       @code{&}!dopasowany tekst@cr
  @code{\\&}!      @code{\&}!dos³owny @samp{&}@cr
@code{\\\\&}!     @code{\\&}!dos³owny @samp{\}, nastêpnie dopasowany tekst@cr
@code{\\\\\\&}!  @code{\\\&}!dos³owne @samp{\&}@cr
}
@bigskip}
@end tex
@ifinfo
@display
 Piszemy          @code{sub} widzi         @code{sub} tworzy
 -------          ---------           ---------
      @code{&}              @code{&}            dopasowany tekst
    @code{\\&}             @code{\&}            dos³owny @samp{&}
  @code{\\\\&}            @code{\\&}            dos³owny @samp{\}, nastêpnie dopasowany tekst
@code{\\\\\\&}           @code{\\\&}            dos³owne @samp{\&}
@end display
@end ifinfo

@noindent
Wygl±da³o na to, ¿e to rozwi±zuje problem.
Niestety, sposób wys³awiania siê standardu jest niecodzienny.
W rezultacie, twierdzi on, ¿e @samp{\} wy³±cza specjalne znaczenie ka¿dego
nastêpuj±cego po nim znaku, ¿e, oprócz @samp{\} i @samp{&}, takie specjalne
znaczenie jest niezdefiniowane.
Z takiego sformu³owania wynikaj± dwa problemy.

@enumerate
@item
Odwrotne uko¶niki w ³añcuchu @var{zast±pienie} musz± byæ teraz podwojone,
co psuje historyczne programy @code{awk}.

@item
Aby mieæ pewno¶æ, ¿e program @code{awk} jest przeno¶ny, @emph{ka¿dy} znak
w @var{zast±pieniu} musi byæ poprzedzony odwrotnym uko¶nikiem@footnote{Ten
skutek standardu by³ z pewno¶ci± niezamierzony.}
@c mogê to stwierdziæ, bo by³em zanga¿owany w tê zmianê
@end enumerate

Standard POSIX jest w trakcie poprawek.@footnote{Wed³ug stanu na
@value{UPDATE-MONTH}, z ostateczn± akceptacj± i publikacj± jako czê¶ci
Austin Group Standards miejmy nadziejê gdzie¶ w 2001.}
Z powodu powy¿szych k³opotów, proponowany tekst dla
skorygowanego standardu powraca do zasad ¶ci¶lej odpowiadaj±cych pierwotnie
istniej±cej praktyce.  Proponowane zasady maj± przypadki specjalne, co
umo¿liwia utworzenie @samp{\} poprzedzaj±cego dopasowany tekst.

@tex
\vbox{\bigskip
% This table has lots of &'s and \'s, so unspecialize them.
\catcode`\& = \other \catcode`\\ = \other
% But then we need character for escape and tab.
@catcode`! = 4
@halign{@hfil#!@qquad@hfil#!@qquad#@hfil@cr
    Piszemy !@code{sub} widzi!@code{sub} tworzy@cr
@hrulefill!@hrulefill!@hrulefill@cr
@code{\\\\\\&}!     @code{\\\&}!dos³owne @samp{\&}@cr
@code{\\\\&}!     @code{\\&}!dos³owny @samp{\}, po którym nastêpuje dopasowany tekst@cr
  @code{\\&}!      @code{\&}!dos³owny @samp{&}@cr
  @code{\\q}!      @code{\q}!dos³owne @samp{\q}@cr
}
@bigskip}
@end tex
@ifinfo
@display
 Piszemy          @code{sub} widzi         @code{sub} tworzy
 -------          ---------           ---------
@code{\\\\\\&}           @code{\\\&}            dos³owne @samp{\&}
  @code{\\\\&}            @code{\\&}            dos³owny @samp{\}, po którym nastêpuje dopasowany tekst
    @code{\\&}             @code{\&}            dos³owny @samp{&}
    @code{\\q}             @code{\q}            dos³owne @samp{\q}
@end display
@end ifinfo

W skrócie, na poziomie wykonania istniej± teraz trzy specjalne sekwencje
znaków: @samp{\\\&}, @samp{\\&} i @samp{\&}, podczas gdy, historycznie,
by³a tu tylko jedna.  Jednak, jak w przypadku historycznym, ka¿dy @samp{\},
który nie jest czê¶ci± jednej z tych sekwencji specjalnych, nie ma znaczenia
specjalnego i pojawia siê na wyj¶ciu dos³ownie.

@code{gawk} 3.0 przestrzega tych, proponowanych przez POSIX, zasad
dla @code{sub} i @code{gsub}.
@c As much as we think it's a lousy idea. You win some, you lose some. Sigh.
Czy zaproponowane regu³y faktycznie zostan± skodyfikowane w standardzie
w tym momencie nie wiadomo.  Nastêpne wydania @code{gawk} bêd± ¶ledziæ
standard i wdra¿aæ to, co okre¶li jego ostateczna wersja.  Niniejsza
ksi±¿ka bêdzie tak¿e aktualizowana.

Regu³y dla @code{gensub} s± znacznie prostsze. Na poziomie wykonania,
gdy @code{awk} dostrze¿e @samp{\}, je¶li nastêpnym znakiem jest cyfra,
to w tworzonym wyj¶ciu jest umieszczany tekst, który pasowa³ do
odpowiadaj±cego jej umieszczonego w nawiasach podwyra¿enia.  W przeciwnym
razie, bez wzglêdu na to, jaki znak wystêpuje po @samp{\}, znak ten pojawi
siê w utworzonym tek¶cie, a @samp{\} nie wyst±pi.

@tex
\vbox{\bigskip
% This table has lots of &'s and \'s, so unspecialize them.
\catcode`\& = \other \catcode`\\ = \other
% But then we need character for escape and tab.
@catcode`! = 4
@halign{@hfil#!@qquad@hfil#!@qquad#@hfil@cr
    Piszemy !@code{gensub} widzi!@code{gensub} tworzy@cr
@hrulefill!@hrulefill!@hrulefill@cr
      @code{&}!           @code{&}!dopasowany tekst@cr
    @code{\\&}!          @code{\&}!dos³owny @samp{&}@cr
   @code{\\\\}!          @code{\\}!dos³owny @samp{\}@cr
  @code{\\\\&}!         @code{\\&}!dos³owny @samp{\}, nastêpnie dopasowany tekst@cr
@code{\\\\\\&}!        @code{\\\&}!dos³owne @samp{\&}@cr
    @code{\\q}!          @code{\q}!dos³owne @samp{q}@cr
}
@bigskip}
@end tex
@ifinfo
@display
  Piszemy           @code{gensub} widzi        @code{gensub} tworzy
  -------           ------------          ------------
      @code{&}                    @code{&}            dopasowany tekst
    @code{\\&}                   @code{\&}            dos³owny @samp{&}
   @code{\\\\}                   @code{\\}            dos³owny @samp{\}
  @code{\\\\&}                  @code{\\&}            dos³owny @samp{\}, nastêpnie dopasowany tekst
@code{\\\\\\&}                 @code{\\\&}            dos³owne @samp{\&}
    @code{\\q}                   @code{\q}            dos³owne @samp{q}
@end display
@end ifinfo

Z powodu z³o¿ono¶ci przetwarzania na poziomie leksykalnym i wykonania
oraz przypadków specjalnych dla @code{sub} i @code{gsub}, zalecamy stosowanie
@code{gawk} i @code{gensub} w sytuacjach, gdy trzeba wykonaæ podstawienia.

@node Funkcje I/O, Funkcje czasu, Funkcje ³añcuchowe, Wbudowane
@section Wbudowane funkcje wej¶cia/wyj¶cia

Poni¿sze funkcje zwi±zane s± z wej¶ciem/wyj¶ciem (Input/Output (I/O).
Parametry opcjonalne umieszczono w nawiasach kwadratowych (``['' i ``]'').

@table @code
@item close(@var{nazwapliku})
@findex close
Zamyka plik @var{nazwapliku}, dla wej¶cia lub wyj¶cia.  Alternatywnie
argumentem mo¿e byæ polecenie pow³oki, którego u¿yto do przekierowania do
lub z potoku; wówczas zamykany jest potok.
@xref{Zamykanie plików i potoków, ,Zamykanie potoków oraz plików wej¶ciowych i wyj¶ciowych},
gdzie podano szczegó³y.

@item fflush(@r{[}@var{nazwapliku}@r{]})
@findex fflush
@cindex przeno¶no¶æ
@cindex opró¿nianie buforów
@cindex bufory, opró¿nianie
@cindex buforowanie wyj¶cia
@cindex wyj¶cie, buforowanie
Opró¿nia buforowane wyj¶cie skojarzone z @var{nazw±pliku}, bêd±c±
albo plikiem otwartym do zapisu, albo poleceniem pow³oki przekierowuj±cym
wyj¶cie do potoku.

Wiele programów narzêdziowych @dfn{buforuje} swoje wyj¶cie. Przechowuj± one
w pamiêci informacje, jakie maj± zostaæ zapisane na dysku czy terminalu,
do czasu, a¿ bêdzie ich wystarczaj±co du¿o, by warto by³o przesy³aæ dane na
urz±dzenie wyj¶ciowe.
Jest to bardziej efektywne ni¿ zapisywanie ka¿dego kawa³eczka danych od razu
gdy jest gotowy.  Czasami jednak konieczne jest wymuszenie na programie
@dfn{opró¿nienia} (wymiecenia, flush) tych buforów; to jest, zapisania
informacji w miejscu ich przeznaczenia, nawet je¶li bufor nie jest
zape³niony.  Takie jest przeznaczenie funkcji @code{fflush}.  @code{gawk}
równie¿ buforuje swoje wyj¶cie, a funkcji @code{fflush} mo¿na u¿yæ do
wymuszenia na nim, by opró¿ni³ swoje bufory.

@code{fflush} jest ¶wie¿ym (1994) dodatkiem do wersji @code{awk} z Bell Labs
research.  Nie jest ona czê¶ci± standardu POSIX i nie bêdzie dostêpna
je¶li w wierszu poleceñ podano opcjê
@samp{--posix} (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@code{gawk} poszerza funkcjê @code{fflush} na dwa sposoby.  Pierwszym jest
pozwolenie na brak argumentu.  Opró¿niany jest wówczas bufor standardowego
wyj¶cia.  Drugim jest zezwolenie na u¿ycie jako argumentu ³añcucha pustego
(@w{@code{""}}).  W tym przypadku opró¿niane s± bufory @emph{wszystkich}
otwartych plików wyj¶ciowych i potoków.

@code{fflush} zwraca zero je¶li pomy¶lnie opró¿niono bufor, a nie-zero
w przeciwnym razie.

@item system(@var{polecenie})
@findex system
@cindex interakcja, @code{awk} i innych programów
Funkcja @code{system} umo¿liwia u¿ytkownikowi wykonywanie poleceñ systemu
operacyjnego a nastêpnie powrót do programu @code{awk}.  Funkcja
@code{system} wykonuje polecenie przekazane przez ³añcuch @var{polecenie}.
Zwraca, jako swoj± warto¶æ, kod zakoñczenia polecenia, które wykona³a.

Na przyk³ad, je¶li w programie @code{awk} umie¶cimy poni¿szy fragment kodu:

@example
END @{
     system("date | mail -s 'koniec pracy awk' root")
@}
@end example

@noindent
do administratora systemu zostanie wys³ana wiadomo¶æ w momencie gdy program
@code{awk} zakoñczy przetwarzanie wej¶cia i rozpocznie przetwarzanie obs³ugi
koñca danych wej¶ciowych.

Zauwa¿, ¿e czêsto do wykonania zadania wystarczy przekierowanie
@code{print} lub @code{printf} do potoku.  Je¿eli potrzebujemy uruchomiæ
wiele poleceñ, efektywniejsze bêdzie po prostu wypisanie ich do potoku
prowadz±cego do pow³oki:

@example
while (@var{wiêcej rzeczy do zrobienia})
    print @var{polecenie} | "/bin/sh"
close("/bin/sh")
@end example

@noindent
Je¶li jednak program @code{awk} jest interaktywny, @code{system} przydaje
siê do uruchamiania
du¿ych, niezale¿nych programów, jak pow³oka czy edytor.

Niektóre systemy operacyjne nie potrafi± zaimplementowaæ funkcji
@code{system}.  Je¿eli nie jest obs³ugiwane, @code{system} powoduje b³±d
krytyczny.
@end table

@c fakenode --- for prepinfo
@subheading Buforowanie interaktywne a nieinteraktywne
@cindex buforowanie, interaktywne a nieinteraktywne
@cindex buforowanie, nieinteraktywne a interaktywne
@cindex interaktywne buforowanie a nieinteraktywne
@cindex nieinteraktywne buforowanie a interaktywne

Nawiasem mówi±c, zagadnienia buforowania mog± byæ nawet bardziej
myl±ce w zale¿no¶ci od tego czy dany program jest @dfn{interaktywny}, tj.
komunikuje siê z u¿ytkownikiem siedz±cym przy
klawiaturze.@footnote{Program jest interaktywny je¶li jego standardowe
wyj¶cie jest przy³±czone do urz±dzenia terminalowego.}

Programy interaktywne na ogó³ @dfn{buforuj± wierszami} swoje wyj¶cie;
zapisuj± na urz±dzenie wyj¶ciowe ka¿dy wiersz.  Programy nieinteraktywne
czekaj± a¿ zape³ni siê bufor, który mo¿e zawieraæ wiele wierszy wyj¶cia.

@c Thanks to Walter.Mecky@dresdnerbank.de for this example, and for
@c motivating me to write this section.
Oto przyk³ad pokazuj±cy tê ró¿nicê.

@example
$ awk '@{ print $1 + $2 @}'
1 1
@print{} 2
2 3
@print{} 5
@kbd{Control-d}
@end example

@noindent
Ka¿dy wiersz wyj¶cia jest wypisywany natychmiast.  Porównajmy to zachowanie
z poni¿szym.

@example
$ awk '@{ print $1 + $2 @}' | cat
1 1
2 3
@kbd{Control-d}
@print{} 2
@print{} 5
@end example

@noindent
Tutaj, nie s± wypisywane ¿adne wyniki a¿ do chwili, gdy zostanie
naci¶niête @kbd{Control-d}, gdy¿ ca³o¶æ wyj¶cia jest buforowana, i wysy³ana
potokiem do @code{cat} w jednym kroku.

@c fakenode --- for prepinfo
@subheading Sterowanie buforowaniem wyj¶cia za pomoc± @code{system}
@cindex opró¿nianie buforów
@cindex bufory, opró¿nianie
@cindex opró¿nianie wyj¶cia
@cindex wyj¶cie, opró¿nianie

Funkcja @code{fflush} umo¿liwia bezpo¶rednie sterowanie buforowaniem wyj¶cia
poszczególnych plików i potoków.  Jednak wywo³anie nie jest przeno¶ne do
wielu innych implementacji @code{awk}.  Alternatywn± metod± opró¿niania
buforów wyj¶ciowych jest wywo³anie @code{system} z ³añcuchem pustym jako
argumentem:

@example
system("")   # opró¿nia wyj¶cie
@end example

@noindent
@code{gawk} traktuje takie wykorzystanie funkcji @code{system} jako
przypadek specjalny, i jest wystarczaj±co sprytny, by nie uruchamiaæ pow³oki
(czy innego interpretera poleceñ) z pustym poleceniem.  Z tego powodu,
w @code{gawk} idiom ten jest nie tylko przydatny, ale i efektywny.  Mimo, ¿e
metoda ta powinna dzia³aæ z innymi implementacjami @code{awk}, niekoniecznie
uniknie wówczas zbêdnego uruchamiania pow³oki.  (Mo¿liwe, ¿e inne
implementacje opró¿ni± tylko bufor skojarzony ze standardowym wyj¶ciem,
a niekoniecznie ca³e buforowane wyj¶cie.)

Je¶li pomy¶limy o tym, czego spodziewa siê programista, to zrozumia³e
jest, ¿e @code{system} powinno opró¿niaæ ca³o¶æ oczekuj±cego wyj¶cia.
Poni¿szy program:

@example
BEGIN @{
     print "pierwszy print"
     system("echo system echo")
     print "drugi print"
@}
@end example

@noindent
musi wypisaæ

@example
pierwszy print
system echo
drugi print
@end example

@noindent
a nie

@example
system echo
pierwszy print
drugi print
@end example

Je¶liby @code{awk} nie opró¿nia³ buforów przed wywo³aniem @code{system},
zobaczyliby¶my drugie (niepo¿±dane) wyj¶cie.

@node Funkcje czasu,  , Funkcje I/O, Wbudowane
@section Funkcje obs³ugi znaczników czasu

@cindex timestamps
@cindex czas
Typowym zastosowaniem programów @code{awk} jest przetwarzanie plików
dziennikowych zawieraj±cych znaczniki czasu, wskazuj±ce kiedy zarejestrowano
konkretny wpis dziennika.  Wiele programów zapisuje znaczniki czasu
w postaci zwracanej przez funkcjê systemow± @code{time}, bêd±cej liczb±
sekund od konkretnej daty (pocz±tku Epoki, Epoch).  Na systemach
POSIX-owych jest to liczba sekund od pó³nocy 1 stycznia 1970 czasu Greenwich
(UTC).

Dla u³atwienia przetwarzania takich plików rejestracyjnych i tworzenia
przydatnych zestawieñ, @code{gawk} udostêpnia dwie funkcje przeznaczone
do pracy ze znacznikami czasu.  Obie s± rozszerzeniami @code{gawk}; nie s±
wyszczególnione w standardzie POSIX, ani nie istniej± w ¿adnej innej znanej
wersji @code{awk}.

Parametry opcjonalne umieszczono w nawiasach kwadratowych (``['' i ``]'').

@table @code
@item systime()
@findex systime
Funkcja ta zwraca bie¿±cy czas jako liczbê sekund od daty pocz±tku Epoki
danego systemu.  Na systemach POSIX-owych jest to liczba sekund od pó³nocy 1
stycznia 1970 UTC.  Na innych systemach mo¿e to byæ odmienna liczba.

@item strftime(@r{[}@var{format} @r{[}, @var{timestamp}@r{]]})
@findex strftime
Funkcja ta zwraca ³añcuch.  Jest podobna do funkcji o tej samej nazwie
wystêpuj±cej w ANSI C.  Czas okre¶lony przez @var{timestamp} wykorzystywany
jest do utworzenia ³añcucha daty w oparciu o zawarto¶æ ³añcucha @var{format}.
@var{timestamp} ma ten sam format, co warto¶æ zwracana przez funkcjê
@code{systime}.  Je¿eli nie podano argumentu @var{timestamp}, @code{gawk}
zastosuje jako znacznik czasu czas bie¿±cy.  Je¿eli nie podano argumentu
@var{format}, @code{strftime} wykorzystuje
@code{@w{"%a %b %d %H:%M:%S %Z %Y"}}.  Taki ³añcuch formatu tworzy wyj¶cie
(prawie) równowa¿ne temu, które daje narzêdzie @code{date}.  (Wersje
@code{gawk} wcze¶niejsze ni¿ 3.0 wymagaj± argumentu @var{format}.)
@end table

Funkcja @code{systime} umo¿liwia porównanie znacznika czasu z pliku
dziennika z bie¿±cym czasem.  W szczególno¶ci, ³atwo jest stwierdziæ, jak
dawno temu zarejestrowano dany wpis.  Pozwala te¿ na tworzenie wpisów
wykorzystuj±cych format ``liczby sekund od pocz±tku Epoki''.

Funkcja @code{strftime} umo¿liwia ³atwe przekszta³canie znacznika czasu
w dane czytelne dla cz³owieka.  W swej istocie podobna jest do funkcji
@code{sprintf}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}),
w tym, ¿e znaki nie tworz±ce specyfikacji formatu kopiuje do zwracanego
³añcucha dos³ownie, podczas gdy warto¶ci daty i czasu zastêpuje wed³ug
specyfikacji z ³añcucha @var{format}.

Standard ANSI C gwarantuje @code{strftime} obs³ugê nastêpuj±cych
specyfikacji formatu daty:

@table @code
@item %a
Skrócona narodowa (locale) nazwa dnia tygodnia.

@item %A
Pe³na narodowa nazwa dnia tygodnia.

@item %b
Skrócona narodowa nazwa miesi±ca.

@item %B
Pe³na narodowa nazwa miesi±ca.

@item %c
``W³a¶ciwa'' narodowa reprezentacja daty i czasu.

@item %d
Dzieñ miesi±ca jako liczba dziesiêtna (01--31).

@item %H
Godzina (zegar 24-godzinny) jako liczba dziesiêtna (00--23).

@item %I
Godzina (zegar 12-godzinny) jako liczba dziesiêtna (01--12).

@item %j
Dzieñ roku jako liczba dziesiêtna (001--366).

@item %m
Miesi±c jako liczba dziesiêtna (01--12).

@item %M
Minuta jako liczba dziesiêtna (00--59).

@item %p
Narodowy równowa¿nik oznaczeñ AM/PM zwi±zanych z zegarem 12-godzinnym.

@item %S
Sekunda jako liczba dziesiêtna (00--60).@footnote{Od czasu do czasu
wystêpuj± w roku minuty o przestêpnej sekundzie, z tego powodu sekundy
mog± doj¶æ do 60.}

@item %U
Numer tygodnia w roku (pierwsza niedziela jako pierwszy dzieñ pierwszego
tygodnia) jako liczba dziesiêtna (00--53).

@item %w
Dzieñ tygodnia jako liczba dziesiêtna (0--6).  Niedziela to dzieñ zero.

@item %W
Numer tygodnia w roku (pierwszy poniedzia³ek jako pierwszy dzieñ pierwszego
tygodnia) jako liczba dziesiêtna (00--53).

@item %x
``W³a¶ciwa'' narodowa reprezentacja daty.

@item %X
``W³a¶ciwa'' narodowa reprezentacja czasu.

@item %y
Rok bez stulecia jako liczba dziesiêtna (00--99).

@item %Y
Rok ze stuleciem jako liczba dziesiêtna (np., 1995).

@item %Z
Nazwa strefy czasowej lub jej skrót, albo brak znaków je¶li nie mo¿na
ustaliæ ¿adnej strefy.

@item %%
Dos³owny @samp{%}.
@end table

Je¿eli specyfikator konwersji nie jest jednym z powy¿szych, zachowanie jest
niezdefiniowane.@footnote{Jest tak, gdy¿ ANSI C pozostawia niezdefiniowanym
zachowanie siê @code{strftime} wersji C, za¶ @code{gawk} wykorzystuje
systemow± wersjê @code{strftime}, je¶li jest obecna.  Typowe jest albo
niepojawienie siê specyfikatora konwersji w zwracanym ³añcuchu, albo
pojawienie siê dos³owne.}

@cindex locale, definicja
@cindex ustawienia narodowe, definicja
Nieformalnie, @dfn{locale} [t³um.: oddawane w przek³adzie jako ustawienia
regionalne/narodowe] okre¶la miejsce geograficzne, w którym mamy zamiar
uruchamiaæ program.  Na przyk³ad, popularn± metod± skracania daty 4 wrze¶nia
1991 w Stanach Zjednoczonych jest ``9/4/91''.  jednak W wielu krajach Europy
zapisanoby j± ``4.9.91''.  Zatem, specyfikacja @samp{%x} w ustawieniach
narodowych @code{"US"} mo¿e dawaæ @samp{9/4/91}, podczas gdy przy ustawieniu
@code{"EUROPE"} mo¿e daæ @samp{4.9.91}.  Standard ANSI C definiuje
jako domy¶lne ustawienie regionalne @code{"C"}, bêd±ce typowym ¶rodowiskiem
jakiego u¿ywa wiêkszo¶æ programistów C.

Dla systemów, które nie s± jeszcze w pe³ni zgodne z ANSI, razem z @code{gawk}
dostarczana jest na zasadach public-domain @code{strftime} w wersji C.
Je¿eli do kompilacji
@code{gawk} (@pxref{Instalacja, ,Instalowanie @code{gawk}})
zostanie u¿yta ta w³a¶nie wersja,
to dostêpne s± nastêpuj±ce dodatkowe specyfikatory formatu:

@table @code
@item %D
Równowa¿ne podaniu @samp{%m/%d/%y}.

@item %e
Dzieñ miesi±ca, uzupe³niony spacj± je¶li jest jednocyfrowy.

@item %h
Równowa¿ne @samp{%b}, powy¿ej.

@item %n
Znak nowej linii (ASCII LF).

@item %r
Równowa¿ne podaniu @samp{%I:%M:%S %p}.

@item %R
Równowa¿ne podaniu @samp{%H:%M}.

@item %T
Równowa¿ne podaniu @samp{%H:%M:%S}.

@item %t
Znak tabulacji.

@item %k
Godzina (zegar 24-godzinny) jako liczba dziesiêtna (0-23).  Liczby
jednocyfrowe uzupe³niane s± spacj±.

@item %l
Godzina (zegar 12-godzinny) jako liczba dziesiêtna (1-12).  Liczby
jednocyfrowe uzupe³niane s± spacj±.

@item %C
Stulecie, jako liczba miêdzy 00 a 99.

@item %u
Dzieñ tygodnia jako liczba dziesiêtna [1 (poniedzia³ek)--7].

@cindex ISO 8601
@item %V
Numer tygodnia w roku (pierwszy poniedzia³ek jako pierwszy dzieñ tygodnia
numer jeden) jako liczba dziesiêtna (01--53).  Metoda wyznaczania numeru
tygodnia okre¶lona jest przez ISO 8601 (innymi s³owy: je¶li tydzieñ
zawieraj±cy dzieñ 1 stycznia ma cztery lub wiêcej dni nale¿±ce do nowego
roku, to jest on tygodniem numer jeden, w przeciwnym razie jest to tydzieñ
numer 53 roku poprzedniego a tygodniem numer jeden jest nastêpny tydzieñ).

@item %G
Rok, ze stuleciem, numeru tygodnia wg ISO, jako liczba dziesiêtna.

Na przyk³ad, 1 stycznia 1993 jest w tygodniu 53 roku 1992.  Zatem,
rokiem jego numeru ISO tygodnia jest 1992, mimo ¿e jego rokiem jest 1993.
Podobnie, 31 grudnia 1973 jest w tygodniu 1 roku 1974.  Zatem, rokiem jego
numeru ISO tygodnia jest 1974, mimo ¿e jego rokiem jest 1973.

@item %g
Rok, bez stulecia, numeru ISO tygodnia, jako liczba dziesiêtna (00--99).

@item %Ec %EC %Ex %Ey %EY %Od %Oe %OH %OI
@itemx %Om %OM %OS %Ou %OU %OV %Ow %OW %Oy
S± to ``alternatywne reprezentacje'' dla specyfikacji u¿ywaj±cych tylko
drugiej litery (@samp{%c}, @samp{%C}, i tak dalej).  S± rozpoznawane,
ale u¿ywana jest ich normalna reprezentacja.@footnote{Je¶li tego nie
rozumiesz, nie przejmuj siê; zaplanowano je, by u³atwia³y
``umiêdzynarodowienie'' programów.}
(Funkcje te zapewniaj± zgodno¶æ z POSIX-owym narzêdziem @code{date}.)

@item %v
Data w formacie VMS (np., 20-JUN-1991).

@cindex RFC-822
@cindex RFC-1036
@item %z
Przesuniêcie strefy czasowej w formacie +HHHH (np. format niezbêdny do
utworzenia nag³ówków daty RFC-822/RFC-1036).
@end table

Poni¿szy przyk³ad jest realizacj± POSIX-owego narzêdzia @code{date}
wykonan± w @code{awk}.  Normalnie @code{date} wypisuje bie¿±c± datê i czas
w dobrze znanym formacie.  Je¶li jednak podamy mu argument zaczynaj±cy siê
od @samp{+}, to @code{date} skopiuje znaki nie tworz±ce specyfikatora
formatu na standardowe wyj¶cie.  Bie¿±cy czas natomiast zinterpretuje
zgodnie ze specyfikatorami formatu zawartymi w podanym ³añcuchu.
Na przyk³ad:

@example
$ date '+Dzi¶ jest %A, %d %B %Y.'
@print{} Dzi¶ jest czwartek, 11 lipiec 1991.
@end example

[t³um.: Có¿, powinno byæ ``11 lipca'', ale warto¶ci locale nie uwzglêdniaj±
subtelno¶ci gramatyki]

Oto wykonana w @code{gawk} wersja narzêdzia @code{date}.  Posiada otoczkê
(``wrapper'') pow³oki, do obs³ugi opcji @samp{-u}, która wymaga by
@code{date} zosta³o uruchomione tak, jakby strefê czasow± ustawiono na UTC.

@example
@group
#! /bin/sh
#
# date --- przybli¿enie polecenia 'date' z P1003.2

case $1 in
-u)  TZ=GMT0     # u¿yj UTC
     export TZ
     shift ;;
esac
@end group

@group
gawk 'BEGIN  @{
    format = "%a %b %d %H:%M:%S %Z %Y"
    exitval = 0
@end group

@group
    if (ARGC > 2)
        exitval = 1
    else if (ARGC == 2) @{
        format = ARGV[1]
        if (format ~ /^\+/)
            format = substr(format, 2)   # usuñ pocz±tkowy +
    @}
    print strftime(format)
    exit exitval
@}' "$@@"
@end group
@end example

@node U¿ytkownika, Wywo³anie gawk, Wbudowane, Top
@chapter Funkcje definiowane przez u¿ytkownika

@cindex funkcje, definiowane przez u¿ytkownika
Skomplikowane programy @code{awk} mo¿na czêsto upro¶ciæ definiuj±c w³asne
funkcje.  Funkcje definiowane przez u¿ytkownika wywo³uje siê tak samo
jak wbudowane (@pxref{Wywo³ania funkcji}), ale nale¿y samodzielnie je
zdefiniowaæ by wskazaæ @code{awk}, co powinny robiæ.

@menu
* Sk³adnia definicji::          Jak pisaæ definicje i co one znacz±.
* Przyk³ad definicji::          Przyk³ad definicji funkcji i co ona robi.
* Pu³apki funkcji::             Rzeczy, na które lepiej uwa¿aæ.
* Instrukcja return::           Okre¶lanie warto¶ci, jak± zwraca funkcja.
@end menu

@node Sk³adnia definicji, Przyk³ad definicji, U¿ytkownika, U¿ytkownika
@section Sk³adnia definicji funkcji
@cindex definiowanie funkcji
@cindex funkcje, definicja

Definicje funkcji mog± wyst±piæ gdziekolwiek pomiêdzy regu³ami programu
@code{awk}.  Zatem, ogólna postaæ programu @code{awk} jest poszerzona tak,
by obejmowa³a sekwencje regu³ @emph{oraz} definicje funkcji u¿ytkownika.
W @code{awk} nie ma potrzeby umieszczania definicji funkcji przed wszystkimi
miejscami, gdzie jest wykorzystywana.  Jest to spowodowane tym, ¿e @code{awk}
czyta ca³y program zanim rozpocznie wykonywanie jakiejkolwiek jego czê¶ci.

Definicja funkcji o nazwie @var{nazwa} wygl±da tak:

@example
function @var{nazwa}(@var{lista-parametrów})
@{
     @var{cia³o-funkcji}
@}
@end example

@cindex nazwy, u¿ycie
@cindex przestrzenie nazw
@noindent
@var{nazwa} jest nazw± definiowanej funkcji.  Poprawna nazwa funkcji jest
taka jak poprawna nazwa zmiennej: ci±g liter, cyfr i znaków podkre¶lenia,
nie zaczynaj±cy siê cyfr±.  W obrêbie pojedynczego programu @code{awk} ka¿da
z poszczególnych nazw mo¿e byæ u¿yta tylko albo jako zmienna albo
tablica albo funkcja.

@var{lista-parametrów} jest list± argumentów funkcji oraz nazw zmiennych
lokalnych, oddzielonych przecinkami.  Podczas wywo³ania funkcji nazwy
argumentów u¿ywane s± do przechowywania warto¶ci podanych w wywo³aniu.
Zmienne lokalne inicjowane s± ³añcuchem pustym.  Funkcja nie mo¿e mieæ
dwu parametrów o tej samej nazwie.

@var{cia³o-funkcji} sk³ada siê z instrukcji @code{awk}.  Jest najwa¿niejsz±
czê¶ci± definicji, gdy¿ stwierdza, co faktycznie powinna @emph{robiæ}
funkcja.
Nazwy argumentów istniej±, by daæ cia³u metodê
rozmawiania o argumentach; zmienne lokalne, by zapewniæ mu miejsca
na przechowywanie tymczasowych warto¶ci.

Nazwy argumentów nie s± sk³adniowo odró¿niane od nazw zmiennych lokalnych.
Zamiast tego, liczba argumentów podanych przy wywo³aniu funkcji wyznacza
ile jest zmiennych argumentowych.  Zatem, je¶li podano trzy warto¶ci
argumentów, to pierwsze trzy nazwy z @var{listy-parametrów} s± argumentami,
a reszta jest zmiennymi lokalnymi.

W zwi±zku z tym, je¶li liczba argumentów we wszystkich wywo³aniach funkcji
nie jest taka sama, to niektóre z nazw z @var{listy-parametrów} mog±
w niektórych przypadkach byæ argumentami, a w innych zmiennymi lokalnymi.
Mo¿na te¿ uj±æ to tak, ¿e pominiête argumenty s± domy¶lnie
³añcuchami pustymi.

Zwykle pisz±c funkcjê wiemy, ile nazw zamierzamy wykorzystaæ na argumenty,
a ile jako zmienne lokalne.  Zwyczajowo pomiêdzy argumentami a zmiennymi
lokalnymi umieszcza siê dodatkowy odstêp, by udokumentowaæ spodziewany
sposób korzystania z funkcji.

@cindex przes³anianie zmiennych
@cindex zmienne, przes³anianie
Podczas wykonywania cia³a funkcji, warto¶ci argumentów i zmiennych lokalnych
ukrywaj± lub @dfn{przes³aniaj±} ewentualne zmienne o tych samych nazwach
u¿ywane w pozosta³ej czê¶ci programu.  Przes³oniête zmienne nie s± dostêpne
w definicji funkcji, gdy¿ nie ma sposobu ich nazwania dopóki ich nazwy
s± zabrane dla zmiennych lokalnych.  Do wszystkich innych zmiennych
u¿ytych w programie @code{awk} w ciele funkcji mo¿na normalnie siê odwo³ywaæ
i nadawaæ im warto¶ci.

Argumenty i zmienne lokalne trwaj± tylko dopóty, dopóki wykonywane jest
cia³o funkcji.  Zaraz po jej zakoñczeniu mo¿na ponownie siêgaæ do zmiennych,
które by³y przes³oniête podczas dzia³ania funkcji.

@cindex rekurencyjna funkcja
@cindex funkcja rekurencyjna
Cia³o funkcji mo¿e zawieraæ wyra¿enia, które wywo³uj± funkcje.  Mog± one
nawet wywo³ywaæ tê funkcjê, albo wprost albo za po¶rednictwem innej
funkcji.  Gdy siê tak dzieje, mówimy, ¿e funkcja jest @dfn{rekurencyjna}.

@cindex jêzyk @code{awk}, wersja POSIX
@cindex POSIX @code{awk}
W wielu implementacjach @code{awk}, ³±cznie z @code{gawk},
s³owo kluczowe @code{function} mo¿na skróciæ
do @code{func}.  Jednak POSIX podaje tylko stosowanie s³owa
kluczowego @code{function}.  Ma to faktycznie pewne praktyczne
implikacje.  Je¶li @code{gawk} jest w trybie zgodno¶ci z POSIX
(@pxref{Opcje, ,Opcje wiersza poleceñ}), to poni¿sza instrukcja @emph{nie}
definiuje funkcji:

@example
func foo() @{ a = sqrt($1) ; print a @}
@end example

@noindent
Zamiast tego, definiuje regu³ê, która, dla ka¿dego rekordu, skleja warto¶æ
zmiennej @samp{func} z warto¶ci± zwracan± przez funkcjê @samp{foo}.
Je¶li powsta³y ³añcuch jest niepusty, to wykonywana jest zadana akcja.
Raczej nie tego chciano.  (@code{awk} przyjmuje to wej¶cie jako sk³adniowo
poprawne, gdy¿ funkcje mog± byæ u¿yte przed ich zdefiniowaniem w programie.)

@cindex przeno¶no¶æ
Dla zapewnienia przeno¶no¶ci programów @code{awk} nale¿y przy
definiowaniu funkcji zawsze stosowaæ s³owo kluczowe @code{function}.

@node Przyk³ad definicji, Pu³apki funkcji, Sk³adnia definicji, U¿ytkownika
@section Przyk³ady definicji funkcji

Oto przyk³ad funkcji u¿ytkownika, o nazwie @code{myprint}, pobieraj±cej
liczbê i wypisuj±cej j± w konkretnym formacie.

@example
function myprint(num)
@{
     printf "%6.3g\n", num
@}
@end example

@noindent
Dla ilustracji, poni¿ej podamy regu³ê @code{awk} korzystaj±c± z naszej
funkcji @code{myprint}:

@example
$3 > 0     @{ myprint($3) @}
@end example

@noindent
Program ten wypisuje, w naszym specjalnym formacie, wszystkie trzecie pola
wej¶cia zawieraj±ce liczbê dodatni±.  St±d te¿, przy danych:

@example
@group
 1.2   3.4    5.6   7.8
 9.10 11.12 -13.14 15.16
17.18 19.20  21.22 23.24
@end group
@end example

@noindent
program, wykorzystuj±c nasz± funkcjê formatuj±c± wyniki, wypisze:

@example
   5.6
  21.2
@end example

Poni¿sza funkcja usuwa wszystkie elementy z tablicy.

@example
function delarray(a,    i)
@{
    for (i in a)
       delete a[i]
@}
@end example

Przy pracy z tablicami czêsto konieczne jest usuniêcie wszystkich elementów
tablicy i ponowne rozpoczêcie z now± list± elementów
(@pxref{Delete, ,Instrukcja @code{delete}}).
Zamiast konieczno¶ci powtarzania tej pêtli w ka¿dym miejscu programu,
w którym potrzebujemy wyczy¶ciæ tablicê, nasz program mo¿e po prostu
wywo³ywaæ @code{delarray}.
(Gwarantuje to przeno¶no¶æ.  Wykorzystanie @samp{delete @var{tablica}}
do usuniêcia zawarto¶ci ca³ej tablicy jest niestandardowym rozszerzeniem.)

A oto przyk³ad funkcji rekurencyjnej.  Jako parametr wej¶ciowy pobiera
³añcuch, a zwraca ten ³añcuch w odwróconej kolejno¶ci.

@example
function rev(str, start)
@{
    if (start == 0)
        return ""

    return (substr(str, start, 1) rev(str, start - 1))
@}
@end example

Je¿eli funkcja ta znajduje siê w pliku o nazwie @file{rev.awk}, mo¿emy
przetestowaæ j± tak:

@example
$ echo "Nie panikuj!" |
> gawk --source '@{ print rev($0, length($0)) @}' -f rev.awk
@print{} !jukinap eiN
@end example

Oto przyk³ad wykorzystuj±cy wbudowan± funkcjê @code{strftime}.
(@xref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu},
gdzie bli¿ej opisano @code{strftime}.)
Funkcja @code{ctime} z C pobiera znacznik czasu i zwraca go
w ³añcuchu, sformatowanym w dobrze znany sposób.  Oto jej wersja @code{awk}:

@example
@c file eg/lib/ctime.awk
# ctime.awk
#
# wersja awk funkcji ctime(3) z C

@group
function ctime(ts,    format)
@{
    format = "%a %b %d %H:%M:%S %Z %Y"
    if (ts == 0)
        ts = systime()    # u¿yj czasu bie¿±cego jako domy¶lnego
    return strftime(format, ts)
@}
@c endfile
@end group
@end example

@node Pu³apki funkcji, Instrukcja return, Przyk³ad definicji, U¿ytkownika
@section Wywo³ywanie funkcji u¿ytkownika

@cindex wywo³anie przez warto¶æ
@cindex wywo³anie przez odwo³anie
@cindex wywo³ywanie funkcji
@cindex funkcja, wywo³ywanie
@dfn{Wywo³anie funkcji} oznacza spowodowanie uruchomienia funkcji
i wykonania jej zadania.  Wywo³anie funkcji jest wyra¿eniem, a jego
warto¶ci± jest warto¶æ zwracana przez funkcjê.

Wywo³anie funkcje sk³ada siê z nazwy funkcji z nastêpuj±cymi po niej
w nawiasach argumentami.  W miejscu argumentów wywo³ania wpisuje siê
wyra¿enia @code{awk}.  Wyra¿enia te s± obliczane za ka¿dym razem, gdy
wykonywane jest wywo³anie, a ich warto¶ci stanowi± parametry aktualne.
Na przyk³ad, oto wywo³anie @code{foo} z trzema argumentami (pierwszy
bêd±cy z³o¿eniem ³añcuchów):

@example
foo(x y, "strata", 4 * z)
@end example

@strong{Uwaga:} nie dopuszcza siê bia³ych znaków (spacji i tabulacji) miêdzy
nazw± funkcji a nawiasem otwieraj±cym listy argumentów.  Je¶li przez pomy³kê
napisaliby¶my bia³y znak, @code{awk} móg³by pomy¶leæ, ¿e mamy zamiar
konkatenowaæ zmienn± z wyra¿eniem w nawiasach.  Zauwa¿y jednak, ¿e u¿yli¶my
nazwy funkcji a nie nazwy zmiennej, i zg³osi b³±d.

@cindex wywo³anie przez warto¶æ
Gdy funkcja jest wo³ana, otrzymuje @emph{kopiê} warto¶ci swoich argumentów.
Jest to znane jako @dfn{wywo³anie przez warto¶æ}.  Wywo³uj±cy jako wyra¿enia
argumentowego mo¿e u¿yæ zmiennej, ale wywo³uj±ca funkcja tego nie wie:
wie tylko, jak± warto¶æ mia³ argument.  Na przyk³ad, je¶li napiszemy taki
kod:

@example
foo = "bar"
z = myfunc(foo)
@end example

@noindent
to nie powinni¶my my¶leæ o argumencie @code{myfunc}, ¿e jest ``zmienn±
@code{foo}''.  Zamiast tego, nale¿y traktowaæ go jako warto¶æ ³añcuchow±,
@code{"bar"}.

Je¿eli funkcja @code{myfunc} zmienia warto¶ci swoich zmiennych
lokalnych, to nie ma to ¿adnego wp³ywu na inne zmienne.  Zatem, je¶li
@code{myfunc} robi tak:

@example
@group
function myfunc(str)
@{
  print str
  str = "zzz"
  print str
@}
@end group
@end example

@noindent
aby zmieniæ swoj± pierwsz± zmienn± argumentow± @code{str}, to @emph{nie}
zmienia to warto¶ci @code{foo} w miejscu wywo³ania.  Rola zmiennej
@code{foo} w wywo³ywaniu @code{myfunc} skoñczy³a siê w chwili, gdy zosta³a
obliczona jej warto¶æ, @code{"bar"}.  Je¿eli @code{str} istnieje tak¿e poza
@code{myfunc}, to cia³o funkcji nie mo¿e zmieniæ tej zewnêtrznej warto¶ci,
gdy¿ podczas wykonywania @code{myfunc} jest ona przes³oniêta i nie mo¿e byæ
st±d widziana ani zmieniana.

@cindex wywo³anie przez odwo³anie
Jednak, gdy parametrami funkcji s± tablice, @emph{nie} s± one kopiowane.
Zamiast tego, do bezpo¶redniej na niej manipulacji udostêpniana jest funkcji
sama tablica.  Zwykle nazywane jest to @dfn{wywo³aniem przez odwo³anie}.
Zmiany dokonane na parametrze tablicowym wewn±trz cia³a funkcji
@emph{s±} widoczne poza t± funkcj±.
@ifinfo
Mo¿e to byæ @strong{bardzo} niebezpieczne je¿eli nie uwa¿a siê na to,
co siê robi.
Na przyk³ad:
@end ifinfo
@iftex
@emph{Mo¿e to byæ bardzo niebezpieczne je¿eli nie uwa¿a siê na to,
co siê robi.}
Na przyk³ad:
@end iftex

@example
@group
function zmiento(tabl, ind, nwart)
@{
     tabl[ind] = nwart
@}
@end group

BEGIN @{
    a[1] = 1; a[2] = 2; a[3] = 3
    zmiento(a, 2, "dwa")
    printf "a[1] = %s, a[2] = %s, a[3] = %s\n",
            a[1], a[2], a[3]
@}
@end example

@noindent
Program ten wypisuje @samp{a[1] = 1, a[2] = dwa, a[3] = 3}, poniewa¿
@code{zmiento} umieszcza @code{"dwa"} w drugim elemencie @code{a}.

@cindex niezdefiniowane funkcje
@cindex funkcje, niezdefiniowane
Niektóre implementacje @code{awk} pozwalaj± na wywo³ywanie funkcji, która
nie zosta³a zdefiniowana, i zg³aszaj± problem tylko w czasie wykonania, gdy
program faktycznie usi³uje wywo³aæ funkcjê.  Na przyk³ad:

@example
@group
BEGIN @{
    if (0)
        foo()
    else
        bar()
@}
function bar() @{ @dots{} @}
# zauwa¿, ¿e `foo' nie jest zdefiniowane
@end group
@end example

@noindent
Poniewa¿ instrukcja @samp{if} nigdy nie bêdzie prawdziwa, to, ¿e nie
zdefiniowano @code{foo}, nie stanowi rzeczywistego k³opotu.  Zwykle jednak
je¶li program wywo³uje niezdefiniowan± funkcjê, to jest to problem.

@ignore
At one point, I had gawk dieing on this, but later decided that this might
break old programs and/or test suites.
@end ignore

Je¿eli podano opcjê @samp{--lint}
(@pxref{Opcje, ,Opcje wiersza poleceñ}),
@code{gawk} bêdzie zawiadamia³ o wywo³aniach niezdefiniowanych funkcji.

Niektóre implementacje @code{awk} generuj± b³±d wykonania je¶li u¿yje siê
instrukcji @code{next}
(@pxref{Instrukcja next, , Instrukcja @code{next}})
wewn±trz funkcji definiowanej przez u¿ytkownika.
@code{gawk} nie ma tego problemu.

@node Instrukcja return,  , Pu³apki funkcji, U¿ytkownika
@section Instrukcja @code{return}
@cindex @code{return} instrukcja

Cia³o funkcji definiowanej przez u¿ytkownika mo¿e zawieraæ instrukcjê
@code{return}.  Zwraca ona sterowanie do dalszej czê¶ci programu @code{awk}.
Mo¿e byæ te¿ wykorzystana do zwracania warto¶ci do wykorzystania w dalszej
czê¶ci programu.  Wygl±da tak:

@example
return @r{[}@var{wyra¿enie}@r{]}
@end example

Czê¶æ @var{wyra¿enie} jest opcjonalna.  Je¶li zostanie pominiêta, to
zwracana warto¶æ jest niezdefiniowana i, z tego powodu, nieprzewidywalna.

Na koñcu ka¿dej definicji funkcji zak³ada siê wystêpowanie instrukcji
@code{return} bez wyra¿enia zwracaj±cego warto¶æ.  Zatem je¶li sterowanie
osi±gnie koniec cia³a funkcji, to funkcja zwraca nieprzewidywaln± warto¶æ.
@code{awk} @emph{nie} bêdzie ostrzega³ o u¿yciu przez nas warto¶ci zwracanej
przez tak± funkcjê.

Czasami, chcemy napisaæ funkcjê, gdy¿ potrzebujemy tego, co ona robi, a nie
co zwraca.  Funkcja taka odpowiada funkcji @code{void} znanej z C, czy
procedurze (@code{procedure}) Pascala.  Zatem, niezwracanie warto¶ci mo¿e
byæ w³a¶ciwe; powinno siê po prostu pamiêtaæ, ¿e je¿eli wykorzystujemy
warto¶æ takiej funkcji, to robimy to na w³asne ryzyko.

Oto przyk³ad funkcji u¿ytkownika zwracaj±cej warto¶æ najwiêkszej liczby
wystêpuj±cej w¶ród elementów tablicy:

@example
@group
function maxelt(vec,   i, ret)
@{
     for (i in vec) @{
          if (ret == "" || vec[i] > ret)
               ret = vec[i]
     @}
     return ret
@}
@end group
@end example

@noindent
Wywo³ujemy @code{maxelt} z jednym argumentem, bêd±cym nazw± tablicy.
Zmiennych lokalnych @code{i} i @code{ret} nie zaplanowano jako argumentów;
mimo, ¿e nic nie mo¿e nas powstrzymaæ od przekazania do @code{maxelt} dwóch
lub trzech argumentów, to wyniki mog± byæ dziwne.  Dodatkowe odstêpy przed
@code{i} w li¶cie parametrów funkcji wskazuj±, ¿e nie zak³ada siê by
@code{i} i @code{ret} by³y argumentami.  Jest to konwencja, której powinno
siê przestrzegaæ przy definiowaniu w³asnych funkcji.

Oto program korzystaj±cy z naszej funkcji @code{maxelt}.  Wczytuje on
tablicê, wywo³uje @code{maxelt} i zg³asza najwiêksz± liczbê w tej tablicy:

@example
@group
awk '
function maxelt(vec,   i, ret)
@{
     for (i in vec) @{
          if (ret == "" || vec[i] > ret)
               ret = vec[i]
     @}
     return ret
@}
@end group

@group
# wczytaj wszystkie pola ka¿dego rekordu do nums.
@{
     for(i = 1; i <= NF; i++)
          nums[NR, i] = $i
@}

END @{
     print maxelt(nums)
@}'
@end group
@end example

Otrzymuj±c poni¿sze dane wej¶ciowe:

@example
@group
 1 5 23 8 16
44 3 5 2 8 26
256 291 1396 2962 100
-6 467 998 1101
99385 11 0 225
@end group
@end example

@noindent
program nasz powie (zgodnie z oczekiwaniami), ¿e najwiêksz± liczb± w naszej
tablicy jest @code{99385}.

@node Wywo³anie gawk, Funkcje biblioteczne, U¿ytkownika, Top
@chapter Uruchamianie @code{awk}
@cindex wiersz poleceñ
@cindex wywo³anie @code{gawk}
@cindex argumenty, wiersz poleceñ
@cindex opcje, wiersz poleceñ
@cindex d³ugie opcje
@cindex opcje, d³ugie

Istniej± dwie metody uruchamiania @code{awk}: z programem podanym wprost,
albo z jednym czy wiêcej plikami programów.  Oto szablony obu; elementy
zawarte w @samp{@r{[}@dots{}@r{]}} s± w nich opcjonalne.

Oprócz tradycyjnych jednoliterowych opcji w stylu POSIX, @code{gawk}
rozpoznaje tak¿e d³ugie opcje GNU.

@example
awk @r{[@var{opcje}]} -f plikprog @r{[@code{--}]} @var{plik} @dots{}
awk @r{[@var{opcje}]} @r{[@code{--}]} '@var{program}' @var{plik} @dots{}
@end example

@cindex pusty program
@cindex ciemny k±t
Mo¿liwe jest wywo³anie @code{awk} z pustym programem:

@example
$ awk '' plikdanych1 plikdanych2
@end example

@noindent
Nie ma to jednak wiêkszego sensu: @code{awk} po prostu milcz±co zakoñczy
pracê gdy otrzyma pusty program (c.k.).  Je¿eli w wierszu poleceñ podano
opcjê @samp{--lint}, @code{gawk} wy¶le ostrze¿enie, ¿e program jest
pusty.

@menu
* Opcje::                       Opcje wiersza poleceñ i ich znaczenie.
* Inne argumenty::              Nazwy plików wej¶ciowych i przypisania
                                zmiennych.
* Zmienna AWKPATH::             Katalogi przeszukiwania dla programów @code{awk}.
* Przestarza³e::                Przestarza³e opcje i/lub cechy.
* Nieudokumentowane::           Nieudokumentowane opcje i cechy.
* Znane b³êdy::                 Znane b³êdy @code{gawk}.
@end menu

@node Opcje, Inne argumenty, Wywo³anie gawk, Wywo³anie gawk
@section Opcje wiersza poleceñ

Opcje rozpoczynaj± siê kresk±, i sk³adaj± siê z pojedynczego znaku.
D³ugie opcje w stylu GNU sk³adaj± siê z dwu kresek i s³owa kluczowego.
S³owa kluczowe mo¿na skracaæ, dopóki skrót pozwala na unikaln±, jednoznaczn±
identyfikacjê opcji.  Je¶li opcja pobiera argument, to albo bezpo¶rednio po
s³owie kluczowym wystêpuje znak równo¶ci (@samp{=}) i warto¶æ argumentu,
albo s³owo kluczowe i warto¶æ oddzielone s± bia³ym znakiem.   W celu
zachowania zwiêz³o¶ci, poni¿sze omówienie odnosi siê tylko do tradycyjnych,
krótkich opcji; d³ugie i krótkie opcje s± jednak we wszystkich kontekstach
wzajemnie wymienne.

Ka¿da z d³ugich opcji @code{gawk} ma odpowiadaj±c± jej opcjê w stylu
POSIX.  Opcje i ich znaczenie s± nastêpuj±ce:

@table @code
@item -F @var{fs}
@itemx --field-separator @var{fs}
@cindex @code{-F} opcja
@cindex @code{--field-separator} opcja
Nadaje zmiennej @code{FS} warto¶æ @var{fs}
(@pxref{Separatory pól, ,Jak rozdzielaæ pola}).

@item -f @var{plik-¼ród³owy}
@itemx --file @var{plik-¼ród³owy}
@cindex @code{-f} opcja
@cindex @code{--file} opcja
Wskazuje, ¿e programu @code{awk} nale¿y szukaæ w @var{pliku-¼ród³owym}
zamiast w pierwszym nie-opcyjnym argumencie.

@item -v @var{zmn}=@var{wart}
@itemx --assign @var{zmn}=@var{wart}
@cindex @code{-v} opcja
@cindex @code{--assign} opcja
Nadaje zmiennej @var{zmn} warto¶æ @var{wart} @strong{przed} rozpoczêciem
wykonywania programu.  Takie warto¶ci zmiennych s± dostêpne w regule
@code{BEGIN} (@pxref{Inne argumenty, ,Inne argumenty wiersza poleceñ}).

Opcja @samp{-v} mo¿e nadaæ warto¶æ tylko jednej zmiennej, ale mo¿na j±
zastosowaæ wiêcej ni¿ raz, za ka¿dym razem przypisuj±c warto¶æ innej
zmiennej, jak np.: @samp{awk @w{-v foo=1} @w{-v bar=2} @dots{}}.

@strong{Uwaga!}  Wykorzystanie @samp{-v} do nadania warto¶ci zmiennym
wbudowanym mo¿e prowadziæ do zaskakuj±cych rezultatów.  @code{awk} ponownie
nada warto¶ci tym zmiennym, gdy bêdzie tego potrzebowa³, prawdopodobnie
ignoruj±c wszelkie predefiniowane warto¶ci, jakie podali¶my.

@item -mf @var{NNN}
@itemx -mr @var{NNN}
Przypisuje rozmaitym limitom pamiêci warto¶æ @var{NNN}.  Flaga @samp{f}
ustala maksymaln± liczbê pól, a @samp{r} maksymalny rozmiar rekordu.
Te dwie flagi i opcja @samp{-m} pochodz± z @code{awk} w wersji
Bell Labs research.  Pozostawiono je w celu zachowania zgodno¶ci, ale
poza tym s± przez @code{gawk} ignorowane, gdy¿ @code{gawk} nie ma ¿adnych
predefiniowanych ograniczeñ.

@item -W @var{opcje-gawk}
@cindex @code{-W} opcja
Zgodnie ze standardem POSIX, opcje specyficzne dla danej implementacji
podawane s± jako argumenty opcji @samp{-W}.  Opcje te równie¿ maj±
odpowiedniki w postaci d³ugich opcji w stylu GNU.
Zobacz ni¿ej.

@item --
Sygnalizuje koniec opcji wiersza poleceñ.  Nastêpne argumenty nie s±
traktowane jak opcje, nawet je¶li zaczynaj± siê od @samp{-}.  Taka
interpretacja @samp{--} jest zgodna z POSIX-ow± konwencj± przetwarzania
argumentów.

Jest przydatna je¶li mamy pliki o nazwach zaczynaj±cych siê od @samp{-},
albo w skryptach pow³oki, je¶li mamy nazwy plików podawane przez
u¿ytkownika, który mo¿e zacz±æ od @samp{-}.

@end table

Dostêpne s± nastêpuj±ce opcje specyficzne dla @code{gawk}:

@table @code
@item -W traditional
@itemx -W compat
@itemx --traditional
@itemx --compat
@cindex @code{--compat} opcja
@cindex @code{--traditional} opcja
@cindex tryb zgodno¶ci
@cindex zgodno¶æ, tryb
Okre¶la @dfn{tryb zgodno¶ci}, w którym rozszerzenia GNU jêzyka @code{awk}
s± wy³±czone, tak ¿e @code{gawk} zachowuje siê ca³kiem jak wersja uniksowego
z @code{awk} Bell Labs research.  Zalecan± postaci± tej opcji jest
@samp{--traditional}.
@xref{POSIX/GNU, ,Rozszerzenia @code{gawk} poza POSIX @code{awk}},
podsumowuj±ce rozszerzenia.  Zobacz tak¿e
@ref{Tryb zgodno¶ci, ,Zgodno¶æ w dó³ i debuggowanie}.

@item -W copyleft
@itemx -W copyright
@itemx --copyleft
@itemx --copyright
@cindex @code{--copyleft} opcja
@cindex @code{--copyright} opcja
Wypisuje krótk± wersjê Powszechnej Licencji Publicznej (General Public
License), a nastêpnie koñczy pracê.  Ta opcja mo¿e znikn±æ w przysz³ych
wersjach @code{gawk}.

@item -W help
@itemx -W usage
@itemx --help
@itemx --usage
@cindex @code{--help} opcja
@cindex @code{--usage} opcja
Wypisuje komunikat o ``sposobie u¿ycia'', podsumowuj±cy krótkie i d³ugie
opcje akceptowane przez @code{gawk}, a nastêpnie koñczy pracê.

@item -W lint
@itemx --lint
@cindex @code{--lint} opcja
Ostrzega o konstrukcjach niepewnych czy nieprzeno¶nych do innych
implementacji @code{awk}.  Niektóre z ostrze¿eñ emitowane s± gdy @code{gawk}
po raz pierwszy czyta program.  Inne wysy³ane s± w czasie wykonania, podczas
dzia³ania programu.

@item -W lint-old
@itemx --lint-old
@cindex @code{--lint-old} opcja
Ostrzega o konstrukcjach, które nie s± dostêpne w pierwotnej wersji
@code{awk} z Version 7 Unix
(@pxref{V7/SVR3.1, , G³ówne ró¿nice miêdzy V7 a SVR3.1}).

@item -W posix
@itemx --posix
@cindex @code{--posix} opcja
@cindex POSIX, tryb
@cindex tryb POSIX
Dzia³a w trybie ¶cis³ej zgodno¶ci z POSIX.  Wy³±cza to wszystkie
rozszerzenia @code{gawk} (tak samo jak @samp{--traditional}), i nak³ada
nastêpuj±ce dodatkowe ograniczenia:

@c IMPORTANT! Keep this list in sync with the one in node POSIX

@itemize @bullet
@item
Nie s± rozpoznawane sekwencje specjalne @code{\x}
(@pxref{Sekwencje specjalne}).

@item
Znaki nowej linii nie dzia³aj± jako bia³e znaki rozdzielaj±ce pola gdy
@code{FS} jest równe pojedynczej spacji.

@item
Nie jest rozpoznawane @code{func} jako synonim s³owa kluczowego
@code{function} (@pxref{Sk³adnia definicji, ,Sk³adnia definicji funkcji}).

@item
Nie mo¿na stosowaæ operatorów @samp{**} i @samp{**=} zamiast @samp{^}
i @samp{^=} (@pxref{Operatory arytmetyczne, ,Operatory arytmetyczne}, a tak¿e
@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).

@item
Podanie @samp{-Ft} w wierszu poleceñ nie nadaje @code{FS} warto¶ci
pojedynczego znaku tabulacji
(@pxref{Separatory pól, ,Jak rozdzielaæ pola}).

@item
Nie jest obs³ugiwana funkcja wbudowana @code{fflush}
(@pxref{Funkcje I/O, , Wbudowane funkcje wej¶cia/wyj¶cia}).
@end itemize

Je¿eli w wierszu poleceñ zostanie podane zarówno @samp{--traditional}
jak i @samp{--posix}, to @samp{--posix} ma pierwszeñstwo.  Je¶li podano
obie te opcje, @code{gawk} wy¶le te¿ ostrze¿enie.

@item -W re-interval
@itemx --re-interval
Dopuszcza wyra¿enia przedzia³owe (interval expressions)
(@pxref{Operatory regexp, , Operatory wyra¿eñ regularnych}),
w wyra¿eniach regularnych.
Poniewa¿ wyra¿enia przedzia³owe tradycyjnie nie by³y dostêpne w @code{awk},
@code{gawk} domy¶lnie ich nie zapewnia.  Chroni to stare programy @code{awk}
przed b³êdnym dzia³aniem.

@item -W source @var{tekst-programu}
@itemx --source @var{tekst-programu}
@cindex @code{--source} opcja
Kod ¼ród³owy pobierany jest z @var{tekst-programu}.  Opcja ta umo¿liwia
u¿ywanie kodu ¼ród³owego z plików równocze¶nie z kodem wprowadzonym
w wierszu poleceñ.  Jest to szczególnie u¿yteczne gdy mamy funkcje
biblioteczne, które chcieliby¶my wykorzystaæ w programach wpisanych
w wierszu poleceñ
(@pxref{Zmienna AWKPATH, ,Zmienna ¶rodowiska @code{AWKPATH}}).

@item -W version
@itemx --version
@cindex @code{--version} opcja
Wypisuje informacjê o wersji tego konkretnego egzemplarza @code{gawk}.
Umo¿liwia to ustalenie, czy nasza kopia @code{gawk} jest aktualna
w stosunku do tego, co obecnie rozpowszechnia Free Software Foundation.
Przydatne tak¿e przy zg³oszeniach b³êdów
(@pxref{B³êdy,  , Zg³aszanie problemów i b³êdów}).
@end table

Wszystkie inne opcje znakowane s± jako niepoprawne i wysy³any jest
komunikat ostrzegawczy.  Poza tym s± ignorowane.

W trybie zgodno¶ci, je¶li warto¶ci± @var{fs} przekazan± opcji @samp{-F}
jest @samp{t}, to traktowane jest to jako przypadek szczególny, i @code{FS}
zostaje nadana warto¶æ znaku tabulacji (@code{"\t"}).  Jest to prawdziwe
tylko dla opcji @samp{--traditional}, ale nie dla @samp{--posix}
(@pxref{Separatory pól, ,Jak rozdzielaæ pola}).

Opcji @samp{-f} mo¿na u¿yæ w wierszu poleceñ wiêcej ni¿ raz.  Je¿eli wyst±pi
ona wiêcej ni¿ raz, to, @code{awk} czyta ¼ród³o programu ze wszystkich
wymienionych plików, tak jakby by³y one z³±czone w jeden du¿y plik.
Przydaje siê to do tworzenia bibliotek funkcji @code{awk}.  U¿yteczne
funkcje mo¿na napisaæ raz, a nastêpnie wczytywaæ ze standardowego miejsca,
zamiast konieczno¶ci w³±czania ich do ka¿dego poszczególnego programu.

Mo¿na wpisywaæ program na terminalu i nadal u¿ywaæ funkcji bibliotecznych,
podaj±c @samp{-f /dev/tty}.  @code{awk} bêdzie czyta³ z terminala plik,
który ma byæ u¿yty jako czê¶æ programu @code{awk}.  W celu zakoñczenia
pisania programu, po wpisaniu tre¶ci naciskamy @kbd{Control-d} (znak koñca
pliku).  (Mo¿na te¿ wykorzystaæ @samp{-f -} do odczytu ¼ród³a programu ze
standardowego wej¶cia, ale wówczas nie bêdzie mo¿na równocze¶nie u¿yæ
standardowego wej¶cia jako ¼ród³a danych.)

Poniewa¿ korzystanie ze standardowych mechanizmów @code{awk} do ³±czenia
programów @code{awk} z pliku ¼ród³owego i z wiersza poleceñ jest
nieporêczne, @code{gawk} udostêpnia opcjê @samp{--source}.  Nie wymaga ona
zaw³aszczania standardowego wej¶cia dla kodu ¼ród³owego i pozwala na ³atwe
³±czenie kodu ¼ród³owego z wiersza poleceñ i bibliotek.
(@pxref{Zmienna AWKPATH, ,Zmienna ¶rodowiska @code{AWKPATH}}).

Je¿eli nie podano @samp{-f} ani @samp{--source}, to @code{gawk} jako tekstem
kodu ¼ród³owego programu pos³u¿y siê pierwszym nie bêd±cym opcj± argumentem
wiersza poleceñ.

@cindex @code{POSIXLY_CORRECT}, zmienna ¶rodowiska
@cindex zmienna ¶rodowiska, @code{POSIXLY_CORRECT}
Je¶li istnieje zmienna ¶rodowiska @code{POSIXLY_CORRECT}, to @code{gawk}
bêdzie dzia³aæ w trybie ¶cis³ej zgodno¶ci z POSIX, dok³adnie tak, jakby
w linii poleceñ podano opcjê @samp{--posix}.  Wiele programów GNU szuka
tej zmiennej ¶rodowiska, by w³±czyæ tryb pe³nej zgodno¶ci z POSIX.  Je¿eli
w wierszu poleceñ podano @samp{--lint}, a @code{gawk} w³±cza tryb zgodno¶ci
z POSIX z powodu @code{POSIXLY_CORRECT}, to wypisze komunikat
ostrzegawczy wskazuj±cy, ¿e w rezultacie dzia³a tryb POSIX.

Standardowo zmienn± tê ustala siê w prywatnym pliku uruchomieniowym pow³oki.
Dla pow³oki zgodnej z pow³oka Bourne'a (jak Bash), do pliku @file{.profile}
w swoim katalogu domowym dopisuje siê poni¿sze wiersze:

@example
@group
POSIXLY_CORRECT=true
export POSIXLY_CORRECT
@end group
@end example

Dla pow³oki zgodnej z @code{csh},@footnote{Nie zalecane.}
do pliku @file{.login} w swoim katalogu domowym nale¿y dodaæ taki wiersz:

@example
setenv POSIXLY_CORRECT true
@end example

@node Inne argumenty, Zmienna AWKPATH, Opcje, Wywo³anie gawk
@section Inne argumenty wiersza poleceñ

Ewentualne dodatkowe argumenty wiersza poleceñ s± normalnie traktowane jako
pliki wej¶ciowe, które maj± zostaæ przetworzone w podanej kolejno¶ci.
Jednak argument maj±cy postaæ @code{@var{zmn}=@var{wart}}, przypisuje
warto¶æ @var{wart} zmiennej @var{zmn} --- wcale nie okre¶la pliku.

@vindex ARGIND
@vindex ARGV
Wszystkie te argumenty udostêpniane s± naszemu programowi @code{awk}
w tablicy @code{ARGV} (@pxref{Zmienne wbudowane}).  Opcje wiersza poleceñ
i tekst programu (je¶li jest) s± @code{ARGV} opuszczane.  Wszystkie inne
argumenty, ³±cznie z przypisaniami zmiennych s± do³±czane.
Podczas przetwarzania ka¿dego elementu @code{ARGV}, @code{gawk} nadaje
zmiennej @code{ARGIND} warto¶æ indeksu w @code{ARGV}, pod którym
umiejscowiony jest bie¿±cy element.

Argumenty opisuj±ce nazwy plików odró¿niane s± od argumentów przypisañ
zmiennych gdy @code{awk} ma otworzyæ nastêpny plik wej¶ciowy.  W tym
momencie wykonywania, sprawdza on ``nazwê pliku'', by stwierdziæ czy nie
jest to faktycznie przypisanie do zmiennej. Je¶li tak, to @code{awk} nadaje
warto¶æ zmiennej zamiast czytaæ plik.

Z tego powodu, zmienne w rzeczywisto¶ci otrzymuj± zadane warto¶ci po
przeczytaniu wszystkich podanych przed nimi plików.  W szczególno¶ci,
warto¶ci zmiennych przypisane w ten sposób @emph{nie} s± dostêpne w regule
@code{BEGIN} (@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}),
gdy¿ regu³y te s± uruchamiane zanim @code{awk} zacznie badaæ listê
argumentów.

@cindex ciemny k±t
Warto¶ci zmiennych podanych w wierszu poleceñ s± przetwarzane co do
wystêpowania sekwencji specjalnych (c.k.) (@pxref{Sekwencje specjalne}).

W niektórych wcze¶niejszych implementacjach @code{awk}, gdy przypisanie
zmiennej wyst±pi³o przed wszystkimi nazwami plików, przypisanie to
nastêpowa³o @emph{przed} wykonaniem regu³y @code{BEGIN}.  Zachowanie siê
@code{awk} by³o zatem niespójne; niektóre przypisania wiersza poleceñ by³y
dostêpne w regule @code{BEGIN}, podczas gdy inne nie.  Niektóre aplikacje
zaczê³y jednak polegaæ na tej ``mo¿liwo¶ci''.
@c     ``feature.''
Gdy zmieniano @code{awk} tak, by by³ bardziej spójny, w celu
przystosowania aplikacji zale¿nych od starego zachowania dodano opcjê
@samp{-v}.

Funkcja przypisywania zmiennych jest najprzydatniejsza do nadawania
warto¶ci takim zmiennym jak @code{RS}, @code{OFS} i @code{ORS},
steruj±cych formatami wej¶ciowymi i wyj¶ciowymi, przed przegl±daniem plików
wej¶ciowych.  Jest te¿ u¿yteczna przy sterowaniu stanem je¶li dla jakiego¶
pliku danych potrzebujemy wielu przebiegów.  Na przyk³ad:

@cindex wielokrotne przebiegi po danych
@cindex przebiegi, wielokrotne
@example
awk 'przeb == 1  @{ @var{obs³uga 1 przebiegu} @}
     przeb == 2  @{ @var{obs³uga 2 przebiegu} @}'
       przeb=1 mojedane przeb=2 mojedane
@end example

Poniewa¿ mamy funkcjê przypisywania zmiennych, do nadawania
warto¶ci @code{FS} w ogóle nie jest konieczna opcja @samp{-F}.
Pozostaje w celu utrzymania historycznej zgodno¶ci.

@node Zmienna AWKPATH, Przestarza³e, Inne argumenty, Wywo³anie gawk
@section Zmienna ¶rodowiska @code{AWKPATH}
@cindex @code{AWKPATH}, zmienna ¶rodowiska
@cindex zmienna ¶rodowiska, @code{AWKPATH}
@cindex ¶cie¿ka wyszukiwania
@cindex katalog wyszukiwania
@cindex wyszukiwanie, ¶cie¿ka
@cindex ró¿nice miêdzy @code{gawk} a @code{awk}

Poprzednia sekcja opisywa³a, w jaki sposób opcj± @samp{-f} mo¿na podawaæ
nazwy plików programów @code{awk} w wierszu poleceñ.  W wiêkszo¶ci
implementacji @code{awk} musimy podaæ dok³adn± ¶cie¿kê dla ka¿dego pliku
z programem, chyba ¿e jest on w katalogu bie¿±cym.

@cindex ¶cie¿ka wyszukiwania, dla plików ¼ród³owych
Jednak w @code{gawk}, je¶li nazwa pliku dostarczona opcji @samp{-f}
nie zawiera @samp{/}, to @code{gawk} przegl±da po kolei katalogi z listy
katalogów (zwanej @dfn{¶cie¿k± wyszukiwania}), szukaj±c w nich pliku o
podanej nazwie.

¦cie¿ka wyszukiwania jest ³añcuchem sk³adaj±cym siê z oddzielonych
dwukropkami nazw katalogów.  @code{gawk} bierze swoj± ¶cie¿kê wyszukiwania
ze zmiennej ¶rodowiska @code{AWKPATH}.  Je¿eli zmienna ta nie istnieje,
to stosuje ¶cie¿kê domy¶ln±, któr± jest
@samp{.:/usr/local/share/awk}.@footnote{Twoja w³asna wersja @code{gawk} mo¿e
wykorzystywaæ inny katalog; zale¿y to od
tego, jak @code{gawk} zosta³ utworzony i zainstalowany. Faktyczny katalog
bêdzie warto¶ci± @samp{$(datadir)} utworzon± podczas konfiguracji
@code{gawk}.  Niemniej jednak prawdopodobnie nie musisz siê tym przejmowaæ.}
(Programy napisane dla administratorów systemu powinny u¿ywaæ zmiennej
@code{AWKPATH}, która nie zawiera katalogu bie¿±cego, @file{.}.)

Funkcja ¶cie¿ki wyszukiwania jest szczególnie przydatna przy tworzeniu
bibliotek u¿ytecznych funkcji @code{awk}.  Pliki bibliotek mo¿na umie¶ciæ
w standardowym katalogu, bêd±cym w ¶cie¿ce domy¶lnej, a nastêpnie podaæ w
wierszu poleceñ za pomoc± krótkiej nazwy pliku.  W przeciwnym razie, dla
ka¿dego pliku musia³aby byæ wpisana pe³na nazwa pliku.

W³asne programy @code{awk} z wiersza poleceñ mog± korzystaæ ze
wspomagaj±cych plików bibliotecznych u¿ywaj±c równocze¶nie opcji
@samp{--source} i @samp{-f}.
@xref{Funkcje biblioteczne, , Biblioteczka funkcji @code{awk}}.

Przeszukiwanie ¶cie¿ki nie jest wykonywane gdy @code{gawk} pracuje
w trybie zgodno¶ci.  Jest to prawd± zarówno dla @samp{--traditional}
jak i dla @samp{--posix}.  @xref{Opcje, ,Opcje wiersza poleceñ}.

@strong{Zauwa¿:} je¶li chcemy, by zosta³y znalezione pliki w bie¿±cym
katalogu, musimy uj±æ go w ¶cie¿ce, albo przez umieszczenie w niej
jawnie katalogu @file{.}, albo przez zapisanie w niej pustej pozycji.
(Pusta pozycja jest wskazywana przez rozpoczêcie lub zakoñczenie ¶cie¿ki
dwukropkiem lub przez umieszczenie obok siebie dwóch dwukropków (@samp{::}).)
Je¿eli bie¿±cego katalogu nie ujêto w ¶cie¿ce, to plików nie mo¿na znale¼æ
w bie¿±cym katalogu.  Ten mechanizm ¶cie¿ki wyszukiwania jest identyczny
jak wystêpuj±cy w pow³oce.
@c someday, @cite{The Bourne Again Shell}....

Pocz±wszy od wersji 3.0, je¶li w ¶rodowisku nie ma zdefiniowanej
@code{AWKPATH}, @code{gawk} umie¶ci w @code{ENVIRON["AWKPATH"]} swoj±
domy¶ln± ¶cie¿kê wyszukiwania.  U³atwia to ustalenie ¶cie¿ki wyszukiwania,
jak± pos³u¿y siê @code{gawk}.

@node Przestarza³e, Nieudokumentowane, Zmienna AWKPATH, Wywo³anie gawk
@section Przestarza³e opcje i/lub cechy

@cindex przestarza³e opcje
@cindex niezalecane opcje
@cindex nieaprobowane opcje
@cindex przestarza³e cechy
@cindex niezalecane cechy
@cindex nieaprobowane cechy
Ta sekcja opisuje cechy i/lub opcje wiersza poleceñ z poprzednich wersji
@code{gawk}, które albo nie s± dostêpne w obecnej wersji albo s± nadal
obs³ugiwane, lecz niezalecane (co znaczy, ¿e @emph{nie} bêdzie ich
w kolejnym wydaniu).

@c update this section for each release!

W wersji @value{VERSION}.@value{PATCHLEVEL} @code{gawk}, nie ma opcji
wiersza poleceñ ani innych niezalecanych cech z poprzednich wersji
@code{gawk}.

Ta sekcja
jest wiêc w gruncie rzeczy wype³niaczem, rezerwuj±cym miejsce na wypadek
gdyby w której¶ nastêpnej wersji @code{gawk} jakie¶ opcje sta³y siê
przestarza³e.

@ignore
@c This is pretty old news...
The public-domain version of @code{strftime} that is distributed with
@code{gawk} changed for the 2.14 release.  The @samp{%V} conversion specifier
that used to generate the date in VMS format was changed to @samp{%v}.
This is because the POSIX standard for the @code{date} utility now
specifies a @samp{%V} conversion specifier.
@xref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu}, for details.
@end ignore

@node Nieudokumentowane, Znane b³êdy, Przestarza³e, Wywo³anie gawk
@section Nieudokumentowane opcje i cechy
@cindex nieudokumentowane cechy
@display
@i{Use the Source, Luke!}
Obi-Wan
@end display
@sp 1

Tê sekcjê celowo pozostawiono pust±.

@c Read The Source, Luke!

@c t³um.: skoro ju¿ tu dotar³e¶, nie bêdziesz mieæ problemów z orygina³em ;)

@ignore
@c If these came out in the Info file or TeX document, then they wouldn't
@c be undocumented, would they?

@code{gawk} has one undocumented option:

@table @code
@item -W nostalgia
@itemx --nostalgia
Print the message @code{"awk: bailing out near line 1"} and dump core.
This option was inspired by the common behavior of very early versions of
Unix @code{awk}, and by a t--shirt.
@end table

Early versions of @code{awk} used to not require any separator (either
a newline or @samp{;}) between the rules in @code{awk} programs.  Thus,
it was common to see one-line programs like:

@example
awk '@{ sum += $1 @} END @{ print sum @}'
@end example

@code{gawk} actually supports this, but it is purposely undocumented
since it is considered bad style.  The correct way to write such a program
is either

@example
awk '@{ sum += $1 @} ; END @{ print sum @}'
@end example

@noindent
or

@example
awk '@{ sum += $1 @}
     END @{ print sum @}' data
@end example

@noindent
@xref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}, for a fuller
explanation.

@end ignore

@node Znane b³êdy, , Nieudokumentowane, Wywo³anie gawk
@section Znane b³êdy @code{gawk}
@cindex b³êdy, znane w @code{gawk}
@cindex znane b³êdy

@itemize @bullet
@item
Opcja @samp{-F} do zmiany warto¶ci @code{FS}
(@pxref{Opcje, ,Opcje wiersza poleceñ})
nie jest niezbêdna, gdy¿ mamy funkcjê przypisañ zmiennych
w wierszu poleceñ.  Pozostaje tylko ze wzglêdu na zgodno¶æ wsteczn±.

@item
Je¿eli nasz system rzeczywi¶cie obs³uguje @file{/dev/fd} i skojarzone pliki
@file{/dev/stdin}, @file{/dev/stdout} i @file{/dev/stderr}, to
mo¿emy uzyskaæ inne wyj¶cie z @code{awk} ni¿ otrzymaliby¶my na systemie bez
tych plików.  Gdy @code{gawk} interpretuje te pliki wewnêtrznie, to
synchronizuje wyj¶cie na standardowe wyj¶cie z wyj¶ciem do
@file{/dev/stdout}, podczas gdy na systemie z tymi plikami, wyj¶cie
jest faktycznie do innych otwartych plików
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}).

@item
Sk³adniowo niepoprawne, jednoznakowe programy maj± sk³onno¶æ do
przepe³niania stosu analizatora sk³adni, wysy³aj±c niezbyt pomocny
komunikat.  Programy takie s± zaskakuj±co trudne do rozpoznania
w przypadku ca³kiem ogólnym i naprawdê nie by³oby to warte w³o¿onego
wysi³ku.
@end itemize

@node Funkcje biblioteczne, Przyk³adowe programy, Wywo³anie gawk, Top
@chapter Biblioteczka funkcji @code{awk}

@c 2e: USE TEXINFO-2 FUNCTION DEFINITION STUFF!!!!!!!!!!!!!
W niniejszym rozdziale pokazano biblioteczkê przydatnych funkcji
@code{awk}.  Funkcje te wykorzystano w pokazanych dalej przyk³adowych
programach (@pxref{Przyk³adowe programy, ,Praktyczne programy @code{awk}}).
Funkcje przedstawiono kolejno od prostych do skomplikowanych.

@ref{Program extract, ,Wydzielanie programów z plików ¼ród³owych Texinfo},
pokazuje program, który mo¿na wykorzystaæ do wydzielenia kodu
¼ród³owego omawianych funkcji bibliotecznych i programów ze ¼ród³a
Texinfo tej ksi±¿ki.  (Zrobiono to ju¿ jako czê¶æ dystrybucji @code{gawk}.)

Je¿eli napisa³e¶ jak±¶ przydatn± funkcjê @code{awk} ogólnego zastosowania
i chcia³by¶ wnie¶æ j± do kolejnego wydania ksi±¿ki, skontaktuj siê proszê z
autorem.  @xref{B³êdy, ,Zg³aszanie problemów i b³êdów}, gdzie opisano, jak to
robiæ.  Nie wysy³aj samego kodu, gdy¿ bêdzie wymagana twoja zgoda albo na
umieszczenie go w zasobach ogólnie dostêpnych (public domain),
albo opublikowanie go
na licencji GPL (@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE}),
albo przypisanie jego praw autorskich Fundacji (Free Software Foundation).

@menu
* Uwagi o przeno¶no¶ci::        Co zrobiæ, je¶li nie mamy @code{gawk}.
* Funkcja nextfile::            Dwie implementacje funkcji @code{nextfile}.
* Funkcja assert::              Funkcja do obs³ugi asercji w programach @code{awk}.
* Funkcja round::               Funkcja do zaokr±glania je¶li @code{sprintf}
                                nie robi tego poprawnie.
* Funkcje porz±dku::            Funkcje do stosowania znaków jako liczb
                                i odwrotnie.
* Funkcja join::                Funkcja do ³±czenia tablicy w ³añcuch.
* Funkcja mktime::              Funkcja do przekszta³cania daty
                                w znacznik czasu.
* Funkcja gettimeofday::        Funkcja do pobierania sformatowanych czasów.
* Funkcja filetrans::           Funkcja obs³ugi przej¶æ miêdzy plikami.
* Funkcja getopt::              Funkcja do przetwarzania argumentów wiersza
                                poleceñ.
* Funkcje passwd::              Funkcje do pobierania danych o u¿ytkownikach.
* Funkcje group::               Funkcje do pobierania danych o grupach.
* Nazwy biblioteczne::          Jak najlepiej nazywaæ prywatne zmienne
                                globalne w funkcjach bibliotecznych.
@end menu

@node Uwagi o przeno¶no¶ci, Funkcja nextfile, Funkcje biblioteczne, Funkcje biblioteczne
@section Symulowanie cech specyficznych dla @code{gawk}
@cindex przeno¶no¶æ

Programy w tym rozdziale i w
@ref{Przyk³adowe programy, ,Praktyczne programy @code{awk}},
swobodnie korzystaj± z cech specyficznych dla @code{gawk}.
Ta sekcja krótko omawia, w jaki sposób mo¿na je przepisaæ dla innych
implementacji @code{awk}.

Komunikaty diagnostyczne wysy³ane s± na @file{/dev/stderr}.
Nale¿y u¿yæ @samp{| "cat 1>&2"} zamiast @samp{> "/dev/stderr"}, je¶li dany
system nie posiada @file{/dev/stderr}, lub je¿eli nie mo¿na u¿yæ
@code{gawk}.

Wiele z programów korzysta z @code{nextfile}
(@pxref{Instrukcja nextfile, ,Instrukcja @code{nextfile}}),
do pominiêcia ewentualnych pozosta³ych danych z pliku wej¶ciowego.
@ref{Funkcja nextfile, ,Implementacja @code{nextfile} jako funkcji},
pokazuje jak napisaæ funkcjê, która robi to samo.

Na koniec, niektóre z tych programów ignoruj± rozró¿nianie du¿ych i ma³ych
liter w wej¶ciu.  Robi± to przypisuj±c jeden do @code{IGNORECASE}.  Mo¿na
osi±gn±æ ten sam skutek dodaj±c nastêpuj±c± regu³ê na pocz±tku programu:

@example
# ignorujemy wielko¶æ znaków
@{ $0 = tolower($0) @}
@end example

@noindent
Nale¿y te¿ sprawdziæ czy wszystkie sta³e wyra¿enia regularne i sta³e
³añcuchowe wykorzystywane w porównaniach pos³uguj± siê tylko ma³ymi
literami.

@node Funkcja nextfile, Funkcja assert, Uwagi o przeno¶no¶ci, Funkcje biblioteczne
@section Implementacja @code{nextfile} jako funkcji

@cindex pomijanie plików wej¶ciowych
@cindex pliki wej¶ciowe, pomijanie
Instrukcja @code{nextfile} przedstawiona w
@ref{Instrukcja nextfile, ,Instrukcja @code{nextfile}},
jest rozszerzeniem specyficznym dla @code{gawk}.  Nie jest dostêpna
w innych implementacjach @code{awk}.  Ta sekcja pokazuje dwie wersje
funkcji @code{nextfile}, które mo¿na wykorzystaæ do symulowania instrukcji
@code{nextfile} z @code{gawk} je¶li nie mo¿na u¿yæ samego @code{gawk}.

Oto pierwsza próba napisania funkcji @code{nextfile}.

@example
@group
# nextfile --- pomiñ pozosta³e rekordy bie¿±cego pliku

# to powinno byæ przeczytane przed "g³ównym" programem awk

function nextfile()    @{ _porzuc_ = FILENAME; next @}

_porzuc_ == FILENAME  @{ next @}
@end group
@end example

Plik ten powinien by³ do³±czony przed g³ównym programem, gdy¿ podaje on
regu³ê, która musi byæ wykonana wcze¶niej.  Regu³a porównuje nazwê
bie¿±cego pliku danych (która jest zawsze w zmiennej @code{FILENAME}) ze
zmienn± prywatn± o nazwie @code{_porzuc_}.  Je¶li nazwa pliku pasuje, to
akcja tej regu³y wykonuje instrukcjê @code{next}, by przej¶æ dalej do
kolejnego rekordu.  (U¿ycie @samp{_} w nazwie zmiennej jest konwencj±.
Opisano j± pe³niej
w @ref{Nazwy biblioteczne,  , Nazywanie zmiennych globalnych funkcji bibliotecznych}.)

U¿ycie instrukcji @code{next} w praktyce tworzy pêtlê czytaj±c± wszystkie
rekordy bie¿±cego pliku danych.  Ostatecznie, osi±gany jest koniec pliku
i otwierany jest nowy plik danych, co zmienia warto¶æ @code{FILENAME}.
Gdy siê to stanie, porównanie @code{_porzuc_} z @code{FILENAME} daje wynik
negatywny, a wykonywanie jest kontynuowane od pierwszej regu³y
``faktycznego'' programu.

Sama funkcja @code{nextfile} po prostu nadaje warto¶æ zmiennej
@code{_porzuc_} a nastêpnie wykonuje instrukcjê @code{next}, by uruchomiæ
pêtlê.@footnote{Niektóre implementacje @code{awk} nie powalaj± na
wykonywanie @code{next} z wnêtrza cia³a funkcji.  Je¿eli korzysta siê z
takiej wersji, konieczne jest inne obej¶cie problemu.}
@c mawk is what we're talking about.

Przedstawiona pocz±tkowa wersja ma drobn± usterkê.  Co siê stanie je¶li jaki¶
plik danych wymieniono w wierszu poleceñ @emph{dwukrotnie}, raz za razem,
lub nawet z samym tylko przypisaniem zmiennej miêdzy oboma wyst±pieniami tej
samej nazwy pliku?

@c @findex nextfile
@c do it this way, since all the indices are merged
@cindex @code{nextfile} funkcja
W takim przypadku, nasz kod przeskoczy przez plik, drugi raz, mimo ¿e
powinien zatrzymaæ siê po doj¶ciu do koñca pierwszego wyst±pienia.
Oto druga wersja @code{nextfile}, która zaradzi temu k³opotowi.

@example
@c file eg/lib/nextfile.awk
# nextfile --- pomiñ pozosta³e rekordy bie¿±cego pliku
# poprawnie obs³uguje kolejne wyst±pienia tego samego pliku
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May, 1993

# to powinno byæ przeczytane przed "g³ównym" programem awk

function nextfile()   @{ _porzuc_ = FILENAME; next @}

@group
_porzuc_ == FILENAME @{
      if (FNR == 1)
          _porzuc_ = ""
      else
          next
@}
@end group
@c endfile
@end example

Funkcja @code{nextfile} nie zmieni³a siê.  Przypisuje @code{_porzuc_} nazwê
bie¿±cego pliku a nastêpnie wykonuje instrukcjê @code{next}.  Instrukcja ta
odczytuje kolejny rekord i zwiêksza @code{FNR}, tak ¿e @code{FNR} na pewno
bêdzie mieæ warto¶æ co najmniej dwa.  Je¶li jednak @code{nextfile} wywo³ano
dla ostatniego rekordu pliku, to @code{awk} zamknie bie¿±cy plik danych
i przejdzie do nastêpnego.  Robi±c to, przypisze @code{FILENAME} nazwê
nowego pliku i nada @code{FNR} pocz±tkow± warto¶æ jeden.  Je¿eli
nastêpny plik jest taki sam jak poprzedni, @code{_porzuc_} bêdzie nadal
równe @code{FILENAME}.  Jednak @code{FNR} bêdzie równe jeden, mówi±c nam, ¿e
jest to nowe wyst±pienie tego pliku, a nie to, które odczytywali¶my podczas
wykonywania funkcji @code{nextfile}.  W tym przypadku zmiennej
@code{_porzuc_} przywracana jest pocz±tkowa warto¶æ ³añcucha pustego, tak ¿e
nastêpne wywo³ania tej regu³y dadz± wynik negatywny (do nastêpnego razu gdy
zostanie wywo³ana @code{nextfile}).

Je¶li @code{FNR} nie jest równe jeden, to jeste¶my nadal w pierwotnym
pliku danych, a program wykonuje instrukcjê @code{next}, przeskakuj±c
przezeñ.

W tym momencie pojawia siê istotne pytanie:  ``Skoro sposób dzia³ania
@code{nextfile} mo¿na zapewniæ stosuj±c plik biblioteczny, po co wbudowano
j± w @code{gawk}?''  Jest to wa¿na kwestia.  Dodawanie cech z b³ahych
powodów prowadzi do wiêkszych, wolniejszych programów, które s± trudniejsze
w pielêgnacji.

Odpowied¼ brzmi: wbudowanie @code{nextfile} w @code{gawk} daje znacz±cy
przyrost efektywno¶ci.  Je¿eli funkcja @code{nextfile} wykonywana jest na
pocz±tku du¿ego pliku danych, @code{awk} nadal musi badaæ ca³y plik,
rozbijaj±c go na rekordy, tylko po to by po nim przeskakiwaæ.  Wbudowane
@code{nextfile} mo¿e po prostu natychmiast zamkn±æ plik i przej¶æ do
nastêpnego, oszczêdzaj±c mnóstwa czasu.  Jest to szczególnie wa¿ne
w @code{awk}, gdy¿ programy @code{awk} s± na ogó³ ograniczone
wej¶ciem/wyj¶ciem (tj.@: wiêkszo¶æ czasu zu¿ywaj± na dokonywanie
operacji wej¶cia i wyj¶cia, a nie na wykonywanie obliczeñ).

@node Funkcja assert, Funkcja round, Funkcja nextfile, Funkcje biblioteczne
@section Asercje

@cindex asercje
@cindex @code{assert}, wersja C
Przy pisaniu du¿ych programów czêsto przydatna jest mo¿liwo¶æ dowiedzenia
siê, ¿e dany warunek czy zestaw warunków jest prawdziwy.  Przed
przyst±pieniem do konkretnego obliczenia, tworzymy zdanie, stwierdzaj±ce,
jaki jest oczekiwany stan.  Zdanie takie nazywamy ``asercj±''.  W jêzyku C
dostarczany jest plik nag³ówkowy @code{<assert.h>} i odpowiadaj±ce mu
makro @code{assert}, które programista mo¿e wykorzystaæ do tworzenia
asercji.  Je¿eli asercja daje wynik negatywny, to makro @code{assert}
zapewnia wypisanie komunikatu diagnostycznego opisuj±cego warunek, który
powinien byæ prawdziwy a nie by³, a nastêpnie ubija program.
W C wykorzystanie @code{assert} wygl±da tak:

@c NEEDED
@page
@example
#include <assert.h>

int myfunc(int a, double b)
@{
     assert(a <= 5 && b >= 17);
     @dots{}
@}
@end example

Je¶li asercja nie by³aby spe³niona, program wypisa³by komunikat podobny
do tego:

@example
prog.c:5: assertion failed: a <= 5 && b >= 17
@end example

@findex assert
Jêzyk ANSI C umo¿liwia przekszta³cenie warunku na ³añcuch znakowy w celu
zamieszczenia go w wypisywanym komunikacie diagnostycznym.  Nie jest to
mo¿liwe w @code{awk}, wiêc ta funkcja @code{assert} wymaga testowanego
warunku tak¿e w postaci ³añcucha.

@example
@c @group
@c file eg/lib/assert.awk
# assert --- zweryfikuj, czy warunek jest prawdziwy.
#            Je¶li nie, to zakoñcz.
# Arnold Robbins, arnold@@gnu.org, Public Domain # May, 1993

function assert(warunek, lancuch)
@{
    if (! warunek) @{
        printf("%s:%d: assertion failed: %s\n",
            FILENAME, FNR, lancuch) > "/dev/stderr"
        _assert_exit = 1
        exit 1
    @}
@}

END @{
    if (_assert_exit)
        exit 1
@}
@c endfile
@c @end group
@end example

Funkcja @code{assert} testuje parametr @code{warunek}.  Je¶li jest on
fa³szywy, wypisuje na standardowym wyj¶ciu komunikat, do opisania nie
spe³nionego warunku pos³uguj±c siê parametrem @code{lancuch}.  Nastêpnie
przypisuje zmiennej @code{_assert_exit} jeden i wykonuje instrukcjê
@code{exit}.  Instrukcja @code{exit} skacze do regu³y @code{END}.
Je¶li regu³a @code{END} stwierdzi, ¿e @code{_assert_exit} jest prawdziwe,
to natychmiast koñczy pracê programu.

Celem regu³y @code{END} i jej testu jest powstrzymanie innych regu³
@code{END} przed zadzia³aniem.   Gdy asercja nie jest spe³niona, program
powinien bezzw³ocznie zakoñczyæ pracê.
Je¿eli ¿adna asercja nie zawiod³a, to podczas normalnego uruchomienia
regu³y @code{END} @code{_assert_exit} bêdzie nadal fa³szywe, i zostan±
wykonane pozosta³e regu³y @code{END} programu.
By wszystko to funkcjonowa³o poprawnie, @file{assert.awk} musi byæ
pierwszym plikiem ¼ród³owym czytanym przez @code{awk}.

@c NEEDED
@page
Z funkcji @code{assert} w programach korzysta siê tak:

@example
function myfunc(a, b)
@{
     assert(a <= 5 && b >= 17, "a <= 5 && b >= 17")
     @dots{}
@}
@end example

@noindent
Je¶li asercja nie bêdzie spe³niona, zobaczymy komunikat typu:

@example
mydata:1357: assertion failed: a <= 5 && b >= 17
@end example

Z t± wersj± @code{assert} jest pewien k³opot, który mo¿e byæ nie do obej¶cia
w standardowym @code{awk}.
Regu³a @code{END} jest automatycznie dodawana do programu wywo³uj±cego
@code{assert}.  Normalnie, je¶li program sk³ada siê wy³±cznie z regu³y
@code{BEGIN}, pliki wej¶ciowe i/lub standardowe wej¶cie nie s± czytane.
Teraz jednak, poniewa¿ program ma regu³ê @code{END}, @code{awk}
bêdzie próbowa³ czytaæ pliki wej¶ciowe czy standardowe wej¶cie
(@pxref{U¿ywanie BEGIN/END, , Akcje pocz±tkowe i koñcowe}),
najprawdopodobniej powoduj±c zawieszenie pracy programu, czekaj±cego na dane
wej¶ciowe.

@node Funkcja round, Funkcje porz±dku, Funkcja assert, Funkcje biblioteczne
@section Zaokr±glanie liczb

@cindex zaokr±glanie
Sposób, w jaki @code{printf} i @code{sprintf}
(@pxref{Printf, , Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}})
wykonuj± zaokr±glanie bêdzie czêsto zale¿a³ od procedury C @code{sprintf}
danego systemu.
Na wielu maszynach,
zaokr±glanie @code{sprintf} jest ``nierówne'', co znaczy, ¿e, wbrew
prostodusznym oczekiwaniom, nie zawsze zaokr±gla koñcowe @samp{.5} w górê.
W zaokr±gleniu nierównym @samp{.5} zaokr±glane jest do najbli¿szej
parzystej, zamiast zawsze w górê.  Zatem 1.5 zaokr±glane jest do 2, ale
4.5 do 4.  W wyniku tego, je¶li stosujemy format wykonuj±cy zaokr±glenia
(np., @code{"%.0f"}), to powinni¶my sprawdziæ, co robi nasz system.
Poni¿sza funkcja wykonuje tradycyjne zaokr±glanie.  Mo¿e siê przydaæ je¶li
@code{printf} naszego @code{awk} zaokr±gla nierówno.

@findex round
@example
@c file eg/lib/round.awk
# round --- robi normalne zaokr±glanie
#
# Arnold Robbins, arnold@@gnu.org, August, 1996
# Public Domain

function round(x,   wartc, wartb, ulamek)
@{
   wartc = int(x)    # czê¶æ ca³kowita, int() obcina

   # zobacz, czy jest czê¶æ u³amkowa
   if (wartc == x)   # bez u³amka
      return x

   if (x < 0) @{
      wartb = -x     # warto¶æ bezwzglêdna
      wartc = int(wartb)
      ulamek = wartb - wartc
@group
      if (ulamek >= .5)
         return int(x) - 1   # -2.5 --> -3
      else
         return int(x)       # -2.3 --> -2
@end group
   @} else @{
      ulamek = x - wartc
      if (ulamek >= .5)
         return wartc + 1
      else
         return wartc
   @}
@}

# uruchomienie z testem
@{ print $0, round($0) @}
@c endfile
@end example

@node Funkcje porz±dku, Funkcja join, Funkcja round, Funkcje biblioteczne
@section Konwersja miêdzy znakami a liczbami

@cindex liczbowe warto¶ci znaków
@cindex numeryczne warto¶ci znaków
@cindex warto¶ci znaków jako liczby
Jedna z komercyjnych implementacji @code{awk} zawiera funkcjê wbudowan±
@code{ord}, pobieraj±c± znak i zwracaj±c± liczbow± warto¶æ tego znaku
w zestawie znaków naszej maszyny.  Je¿eli ³añcuch przekazany @code{ord}
zawiera wiêcej ni¿ jeden znak, to u¿ywany jest tylko pierwszy.

Odwrotno¶ci± tej funkcji jest @code{chr} (od funkcji o tej samej nazwie
w Pascalu), która pobiera liczbê i zwraca odpowiadaj±cy jej znak.

Obie funkcje mo¿na ³adnie napisaæ w @code{awk}; nie faktycznego powodu, by
wbudowywaæ je w interpreter @code{awk}.

@findex ord
@findex chr
@example
@group
@c file eg/lib/ord.awk
# ord.awk --- robi ord i chr
#
# Identyfikatory globalne:
#    _ord_:      warto¶ci numeryczne indeksowane znakami
#    _ord_init:  funkcja inicjuj±ca _ord_
#
# Arnold Robbins
# arnold@@gnu.org
# Public Domain
# 16 January, 1992
# 20 July, 1992, revised

BEGIN    @{ _ord_init() @}
@c endfile
@end group

@c @group
@c file eg/lib/ord.awk
function _ord_init(    low, high, i, t)
@{
    low = sprintf("%c", 7) # BEL to ascii 7
    if (low == "\a") @{    # zwyk³e ascii
        low = 0
        high = 127
    @} else if (sprintf("%c", 128 + 7) == "\a") @{
        # ascii, ze znacznikiem parzysto¶ci
        low = 128
        high = 255
    @} else @{        # ebcdic(!)
        low = 0
        high = 255
    @}

    for (i = low; i <= high; i++) @{
        t = sprintf("%c", i)
        _ord_[t] = i
    @}
@}
@c endfile
@c @end group
@end example

@cindex zestawy znaków
@cindex kodowanie znaków
@cindex znaki, kodowanie
@cindex znaki, zestawy
@cindex ASCII
@cindex EBCDIC
@cindex znacznik parzysto¶ci
Warto po¶wiêciæ chwilê na pewne wyja¶nienie liczb u¿ywanych przez @code{chr}.
Najwa¿niejszym obecnie stosowanym zestawem znaków jest ASCII. Mimo, ¿e bajt
o¶miobitowy mo¿e przechowaæ 256 ró¿nych warto¶ci (od zera do 255), ASCII
definiuje tylko znaki wykorzystuj±ce warto¶ci od zera
do 127.@footnote{W wielu krajach rozszerzono ASCII, tak by wykorzystywa³o
warto¶ci od 128 do 255 dla znaków specyficznych dla danego kraju.  Je¿eli
nasz system korzysta z takich rozszerzeñ, mo¿na upro¶ciæ @code{_ord_init},
by wykonywa³o zwyk³± pêtlê od zera do 255.}
Wiemy o co najmniej jednym producencie komputerów,
@c Pr1me, blech
który stosuje ASCII, ale ze znacznikiem parzysto¶ci, co znaczy, ¿e skrajny
lewy bit bajtu jest zawsze jedynk±.  Znaczy to, ¿e na takich systemach
znaki maj± numeryczne warto¶ci od 128 do 255.
Na koniec, wielkie systemy mainframe stosuj± zestaw znaków EBCDIC,
wykorzystuj±cy wszystkie 256 warto¶ci.  Mimo, ¿e w niektórych starszych
systemach w u¿ytku s± inne zestawy znaków, nie warto faktycznie siê
nimi przejmowaæ.

@example
@group
@c file eg/lib/ord.awk
function ord(str,    c)
@{
    # interesuje nas tylko pierwszy znak
    c = substr(str, 1, 1)
    return _ord_[c]
@}
@c endfile
@end group

@group
@c file eg/lib/ord.awk
function chr(c)
@{
    # wymu¶ numeryczne c przez dodanie 0
    return sprintf("%c", c + 0)
@}
@c endfile
@end group

@group
@c file eg/lib/ord.awk
#### kod testowy ####
# BEGIN    \
# @{
#    for (;;) @{
#        printf("podaj znak: ")
#        if (getline zmn <= 0)
#            break
#        printf("ord(%s) = %d\n", zmn, ord(zmn))
#    @}
# @}
@c endfile
@end group
@end example

Oczywistym udoskonaleniem tych funkcji by³oby przesuniêcie kodu funkcji
@code{@w{_ord_init}} do cia³a regu³y @code{BEGIN}.  Napisano go pocz±tkowo
w ten sposób by u³atwiæ budowê.

Mamy tu ``program testowy'' w regule @code{BEGIN}, do testowania funkcji.
Do czynnego u¿ytkowania zosta³ zakomentowany.

@node Funkcja join, Funkcja mktime, Funkcje porz±dku, Funkcje biblioteczne
@section Scalanie tablicy w ³añcuch

@cindex ³±czenie ³añcuchów
Przy przetwarzaniu ³añcuchów czêsto przydaje siê mo¿liwo¶æ po³±czenia
wszystkich ³añcuchów z jakiej¶ tablicy w jeden d³ugi ³añcuch.  Cel ten
realizuje poni¿sza funkcja, @code{join}.  Jest wykorzystywana dalej w kilku
programach u¿ytkowych
(@pxref{Przyk³adowe programy, ,Praktyczne programy @code{awk}}).

Istotny jest dobry projekt funkcji.  Nasza funkcja powinna byæ ogólna, ale
te¿ jej zachowanie domy¶lne powinno byæ rozs±dne.  Wywo³ywana jest z tablic±
oraz pocz±tkowym i koñcowym indeksem elementów, jakie maj± zostaæ po³±czone.
Zak³amy, ¿e elementy tablicy s± numeryczne -- rozs±dne za³o¿enie, gdy¿
tablica zapewne zosta³a utworzona za pomoc± @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

@findex join
@example
@group
@c file eg/lib/join.awk
# join.awk --- ³±czy tablicê w ³añcuch
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

function join(tablica, pocz, kon, sep,    wynik, i)
@{
    if (sep == "")
       sep = " "
    else if (sep == SUBSEP) # magiczna warto¶æ
       sep = ""
    wynik = tablica[pocz]
    for (i = pocz + 1; i <= kon; i++)
        wynik = wynik sep tablica[i]
    return wynik
@}
@c endfile
@end group
@end example

Dodatkowy, opcjonalny argument jest separatorem, jaki ma byæ zastosowany
przy ponownym ³±czeniu ³añcuchów.  Je¶li wywo³anie dostarczy niepust±
warto¶æ, @code{join} skorzysta z niej.  Je¶li jej nie poda, to argument
bêdzie mieæ warto¶æ pust±.  W tym przypadku @code{join} jako domy¶lny
separator ³añcuchów stosuje pojedynczy odstêp.  Je¿eli warto¶æ jest równa
@code{SUBSEP}, to @code{join} z³±czy ³añcuchy bez separatora miêdzy nimi.
@code{SUBSEP} s³u¿y jako ``magiczna'' warto¶æ, wskazuj±ca, ¿e miêdzy
sk³adowymi ³añcuchami nie powinno byæ rozdzielania.

By³oby mi³o, gdyby @code{awk} mia³ operator przypisania dla konkatenacji.
Brak jawnego operatora konkatenacji powoduje, ¿e operacje na ³añcuchach s±
trudniejsze ni¿ musz± byæ faktycznie.

@node Funkcja mktime, Funkcja gettimeofday, Funkcja join, Funkcje biblioteczne
@section Konwersja dat na znaczniki czasu

Funkcja @code{systime} wbudowana w @code{gawk} zwraca bie¿±cy czas jako
znacznik czasowy w ``sekundach od pocz±tku Epoki''.  Stosuj±c wbudowan±
funkcjê @code{strftime} znacznik czasu mo¿na przekszta³ciæ na drukowaln±
datê w niemal nieograniczenie dowolnym formacie.  (Wiêcej o @code{systime}
i @code{strftime},
@pxref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu}.)

@cindex konwersja dat na znaczniki czasu
@cindex daty, konwersja na znaczniki czasu
@cindex znaczniki czasu, konwersja na daty
@cindex timestamp, konwersja na datê
Interesuj±cym, lecz trudnym problemem jest konwersja czytelnej reprezentacji
daty z powrotem na znacznik czasu.  Biblioteka C posiada funkcjê
@code{mktime}, która wykonuje podstawowe zadanie, przekszta³caj±c
na znacznik czasu reprezentacjê kanoniczn± daty.

Na pierwszy rzut oka, wygl±da na to, ¿e @code{gawk} musia³by mieæ
funkcjê wbudowan± @code{mktime}, która by³aby po prostu ``punktem
zaczepienia'' do wersji z jêzyka C.  W rzeczywisto¶ci jednak @code{mktime}
mo¿na zrealizowaæ w ca³o¶ci w @code{awk}.@footnote{@value{UPDATE-MONTH}:
W rzeczywisto¶ci myli³em siê pisz±c to.  Przedstawiona tu wersja
nie zawsze dzia³a prawid³owo, a nastêpna g³ówna wersja @code{gawk} bêdzie
zapewniaæ @code{mktime} jako funkcjê wbudowan±.}
@c sigh.

Oto wersja @code{mktime} napisana w @code{awk}.  Pobiera zwyk³±
reprezentacjê daty i czasu i przekszta³ca j± na znacznik czasu.

Przedstawiony kod jest przepleciony proz±.  W
@ref{Program extract, ,Wydzielanie programów z plików ¼ród³owych Texinfo},
zobaczymy, w jaki sposób mo¿na przetworzyæ plik ¼ród³owy Texinfo tej
ksi±¿ki, by wydzieliæ kod do pojedynczego pliku ¼ród³owego.

Program zaczyna siê komentarzem opisowym i regu³± @code{BEGIN}, która
inicjuje tablicê @code{_tm_mies}.  Jest to dwuwymiarowa tablica
zawieraj±ca d³ugo¶ci poszczególnych miesiêcy.  Pierwszym indeksem jest zero
dla zwyk³ych lat, za¶ jeden dla przestêpnych.  W obu rodzajach lat warto¶ci
dla wszystkich miesiêcy, z wyj±tkiem lutego, s± takie same.  Z tego powodu
stosujemy przypisanie wielokrotne.

@example
@c @group
@c file eg/lib/mktime.awk

# mktime.awk --- przekszta³ca kanoniczn± reprezentacjê
#                daty na znacznik czasu

# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

BEGIN    \
@{
    # inicjacja tablicy d³ugo¶ci miesiêcy
    _tm_mies[0,1] = _tm_mies[1,1] = 31
    _tm_mies[0,2] = 28; _tm_mies[1,2] = 29
    _tm_mies[0,3] = _tm_mies[1,3] = 31
    _tm_mies[0,4] = _tm_mies[1,4] = 30
    _tm_mies[0,5] = _tm_mies[1,5] = 31
    _tm_mies[0,6] = _tm_mies[1,6] = 30
    _tm_mies[0,7] = _tm_mies[1,7] = 31
    _tm_mies[0,8] = _tm_mies[1,8] = 31
    _tm_mies[0,9] = _tm_mies[1,9] = 30
    _tm_mies[0,10] = _tm_mies[1,10] = 31
    _tm_mies[0,11] = _tm_mies[1,11] = 30
    _tm_mies[0,12] = _tm_mies[1,12] = 31
@}
@c endfile
@c @end group
@end example

Korzy¶ci z ³±czenia wielu regu³ @code{BEGIN}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}})
s± szczególnie oczywiste przy pisaniu plików bibliotecznych.  Funkcje
zawarte w bibliotece mog± bez trudno¶ci inicjowaæ w³asne prywatne dane.
Mog± te¿ zapewniæ akcje porz±dkowe w prywatnych regu³ach @code{END}.

Nastêpna funkcja jest prosta.  Oblicza, czy dany rok jest przestêpny czy nie.
Je¿eli rok jest podzielny bez reszty przez cztery, ale nie dzieli siê przez
100, albo je¶li jest podzielny przez 400, to jest to rok przestêpny.
Zatem, 1904 by³ rokiem przestêpnym, 1900 nie by³, ale 2000 jest
przestêpny.
@c Change this after the year 2000 to ``2000 was'' (:-)

@findex _tm_isleap
@example
@group
@c file eg/lib/mktime.awk
# decyduje czy rok jest przestêpny
function _tm_isleap(rok,    ret)
@{
    ret = (rok % 4 == 0 && rok % 100 != 0) ||
            (rok % 400 == 0)

    return ret
@}
@c endfile
@end group
@end example

Funkcja ta w naszym pliku wykorzystywana jest tylko kilkukrotnie, a jej
obliczenia mog³yby zostaæ wstawione (zapisane @dfn{in-line}) w miejscu,
gdzie jest u¿ywana.  Zrobienie z nich osobnej funkcji u³atwi³o pocz±tkowe
konstruowanie, zapobiega tak¿e mo¿liwo¶ci pope³nienia b³êdów typograficznych
przy powielaniu kodu w wielu miejscach.

Kolejna funkcja jest bardziej interesuj±ca.  Wykonuje wiêkszo¶æ pracy przy
tworzeniu znacznika czasu, polegaj±cej na konwersji daty i czasu na pewn±
liczbê sekund od pocz±tku Epoki.  Wywo³uj±cy przekazuje tablicê (do¶æ
wymy¶lnie nazwan± @code{a}) zawieraj±c± sze¶æ warto¶ci: rok ³±cznie ze
stuleciem, miesi±c jako liczbê miêdzy 1 a 12, dzieñ miesi±ca, godzinê jako
liczbê miêdzy 0 a 23, minuty i sekundy.

Do wstêpnego obliczenia liczby sekund w godzinie, sekund w dniu i sekund
w roku funkcja wykorzystuje kilka zmiennych lokalnych.  Czêsto kod w C
po prostu zapisuje dane wyra¿enie in-line, spodziewaj±c siê, ¿e kompilator
wykona @dfn{z³o¿enie sta³ych} (constant folding).  Np., wiêkszo¶æ
kompilatorów C przekszta³ci³aby @samp{60 * 60} na @samp{3600} w czasie
kompilacji, zamiast przeliczaæ to ka¿dorazowo w czasie wykonania.
Wstêpne obliczenie tych warto¶ci powoduje, ¿e funkcja jest bardziej efektywna.

@findex _tm_addup
@example
@c @group
@c file eg/lib/mktime.awk
# zamienia datê na sekundy
function _tm_addup(a,    razem, roksek, dziensek,
                         godzsek, i, j)
@{
    godzsek = 60 * 60
    dziensek = 24 * godzsek
    roksek = 365 * dziensek

    razem = (a[1] - 1970) * roksek

@group
    # dodatkowy dzieñ dla lat przestêpnych
    for (i = 1970; i < a[1]; i++)
        if (_tm_isleap(i))
            razem += dziensek
@end group

@group
    j = _tm_isleap(a[1])
    for (i = 1; i < a[2]; i++)
        razem += _tm_mies[j, i] * dziensek
@end group

    razem += (a[3] - 1) * dziensek
    razem += a[4] * godzsek
    razem += a[5] * 60
    razem += a[6]

    return razem
@}
@c endfile
@c @end group
@end example

Funkcja zaczyna od pierwszego przybli¿enia wszystkich sekund pomiêdzy
pó³noc± 1 stycznia 1970,@footnote{Jest to pocz±tek Epoki w systemach
POSIX-owych.  Na innych systemach mo¿e byæ inny.} a pocz±tkiem bie¿±cego
roku.  Nastêpnie przechodzi przez wszystkie te lata i dla ka¿dego roku
przestêpnego dodaje równowarto¶æ w sekundach jednego dnia.

Zmienna @code{j} przechowuje jeden lub zero, w zale¿no¶ci od tego czy
bie¿±cy rok jest czy nie jest przestêpny.  Dla ka¿dego miesi±ca
bie¿±cego roku poprzedzaj±cego aktualny miesi±c dodaje liczbê sekund
tego miesi±ca, wykorzystuj±c odpowiedni± pozycjê tablicy @code{_tm_mies}.

Na koniec, dodaje sekundy odpowiadaj±ce liczbie dni poprzedzaj±cych bie¿±cy
oraz liczbie godzin, minut i sekund bie¿±cego dnia.

Wynikiem jest ilo¶æ sekund od 1 stycznia 1970.  Warto¶æ ta nie jest jednak
jeszcze tym, czego potrzebujemy.  Opiszemy pokrótce powód.

G³ówna funkcja @code{mktime} pobiera pojedynczy argument ³añcuchowy.
£añcuch przedstawia datê i czas w postaci ``kanonicznej'' (ustalonej).
Powinno to byæ
@code{"@var{rok} @var{mies} @var{dzien} @var{godz} @var{min} @var{sek}"}.

@findex mktime
@example
@c @group
@c file eg/lib/mktime.awk
# mktime --- zamieñ datê na sekundy,
#            koryguj z uwagi na strefê czasow±

function mktime(str,    wyn1, wyn2, a, b, i, j, t, rozn)
@{
    i = split(str, a, " ")    # nie polegaj na FS

    if (i != 6)
        return -1

    # wymu¶ numeryczne
    for (j in a)
        a[j] += 0

@group
    # sprawd¼ poprawno¶æ
    if (a[1] < 1970 ||
        a[2] < 1 || a[2] > 12 ||
        a[3] < 1 || a[3] > 31 ||
        a[4] < 0 || a[4] > 23 ||
        a[5] < 0 || a[5] > 59 ||
        a[6] < 0 || a[6] > 60 )
            return -1
@end group

    wyn1 = _tm_addup(a)
    t = strftime("%Y %m %d %H %M %S", wyn1)

    if (_tm_debug)
        printf("(%s) -> (%s)\n", str, t) > "/dev/stderr"

    split(t, b, " ")
    wyn2 = _tm_addup(b)

    rozn = wyn1 - wyn2

    if (_tm_debug)
        printf("rozn = %d sekund\n", rozn) > "/dev/stderr"

    wyn1 += rozn

    return wyn1
@}
@c endfile
@c @end group
@end example

Funkcja najpierw dzieli ³añcuch, stosuj±c jako separatory spacje i tabulacje
i umieszczaj±c wynik w tablicy.  Je¿eli w tablicy nie ma sze¶ciu elementów,
to zwraca b³±d, sygnalizowany jako warto¶æ @minus{}1.
Nastêpnie wymusza numeryczno¶æ ka¿dego elementu tablicy, dodaj±c doñ zero.
Kolejna instrukcja, @samp{if}, upewnia siê, ¿e ka¿dy element mie¶ci siê
w dopuszczalnym zakresie.  (Ta kontrola powinna zostaæ pó¼niej poszerzona,
np., by upewniæ siê, ¿e dzieñ miesi±ca jest w poprawnym zakresie dla
konkretnego, podanego miesi±ca.)  Wszystko to w gruncie rzeczy stanowi
wstêpn± konfiguracjê i kontrolê b³êdów.

Przypomnijmy, ¿e @code{_tm_addup} tworzy³a warto¶æ w sekundach od pó³nocy
1 stycznia 1970.  Warto¶æ ta nie nadaje siê wprost do u¿ytku jako wynik,
którego potrzebujemy, @emph{gdy¿ obliczenia nie bior± pod uwagê lokalnej
strefy czasowej}.  Inaczej mówi±c, warto¶æ ta przedstawia ilo¶æ sekund od
pocz±tku Epoki, ale tylko dla UTC (czasu uniwersalnego, Greenwich).
Je¶li lokalna strefa czasowa le¿y na wschód lub zachód od UTC, to do
wynikowego znacznika czasu nale¿y dodaæ, lub odj±æ od niego, pewn± liczbê
godzin.

Na przyk³ad, 18:23 w Atlancie, stan Georgia (USA), jest normalnie piêæ godzin
na zachód (za) UTC.  Przy czasie letnim jest to tylko cztery godziny
za UTC.
Je¶li wywo³ujemy @code{mktime} w Atlancie, z argumentem
@code{@w{"1993 5 23 18 23 12"}}, wynikiem z @code{_tm_addup} bêdzie
18:23 UTC, co stanowi dopiero 14:23 w Atlancie.  Niezbêdne jest dodanie
do otrzymanego wyniku kolejnych sekund o równowarto¶ci czterech godzin.

Jak @code{mktime} mo¿e stwierdziæ, jak daleko do UTC siê znajduje?
To jest zaskakuj±co ³atwe.  Zwrócony znacznik czasu przedstawia czas
przekazany do @code{mktime} @emph{jako UTC}.  Znacznikiem tym mo¿na
z powrotem nakarmiæ @code{strftime}, które sformatuje go jako
czas @emph{lokalny}, tj.@: tak, jakby mia³ ju¿ w sobie dodan± ró¿nicê
w stosunku do UTC.  Zrobiono to przez przekazanie do @code{strftime}
³añcucha @code{@w{"%Y %m %d %H %M %S"}} jako argumentu formatu.
Zwróci ono obliczony znacznik w formacie pierwotnego ³añcucha.  Wynik
reprezentuje czas uwzglêdniaj±cy ró¿nicê do UTC.  Gdy nowy czas jest
konwertowany z powrotem na znacznik czasu, ró¿nica pomiêdzy tymi dwoma
znacznikami jest ró¿nic± (w sekundach) miêdzy lokaln± stref± czasow± a UTC.
Ró¿nica ta jest nastêpnie dodawana do pierwotnego wyniku.  Przyk³ad
pokazuj±cy to przedstawiono poni¿ej.

Na koniec, mamy ``g³ówny'' program do przetestowania funkcji.

@example
@c there used to be a blank line after the getline,
@c squished out for page formatting reasons
@c @group
@c file eg/lib/mktime.awk
BEGIN  @{
    if (_tm_test) @{
        printf "Wprowad¼ datê yyyy mm dd hh mm ss: "
        getline _tm_test_date
        t = mktime(_tm_test_date)
        r = strftime("%Y %m %d %H %M %S", t)
        printf "Otrzymujemy zwrotnie (%s)\n", r
    @}
@}
@c endfile
@c @end group
@end example

Ca³y program do sterowania diagnostyk± wyj¶cia i w³±czenia testu w koñcowej
regule @code{BEGIN} korzysta z dwu zmiennych, którym warto¶æ mo¿na nadaæ
w wierszu poleceñ.  Oto wynik przebiegu testu.  (Zauwa¿, ¿e wyj¶ciem
diagnostycznym jest standardowe wyj¶cie b³êdów, za¶ wyj¶ciem testu
standardowe wyj¶cie.)

@example
@c @group
$ gawk -f mktime.awk -v _tm_test=1 -v _tm_debug=1
@print{} Wprowad¼ datê yyyy mm dd hh mm ss: 1993 5 23 15 35 10
@error{} (1993 5 23 15 35 10) -> (1993 05 23 11 35 10)
@error{} rozn = 14400 sekund
@print{} Otrzymujemy zwrotnie (1993 05 23 15 35 10)
@c @end group
@end example

Wprowadzono czas 15:25, 23 maja 1993.  Pierwszy wiersz wyj¶cia
diagnostycznego pokazuje czas wynikowy jako UTC -- cztery godziny
wyprzedzaj±cy czas lokalny.  Drugi wiersz pokazuje, ¿e ró¿nica wynosi
14400 sekund, co stanowi cztery godziny.  (Ró¿nica jest tylko
czterogodzinna, gdy¿ w maju obowi±zuje tu czas letni.)  Ostatni
wiersz wyj¶cia testowego pokazuje, ¿e algorytm wyrównywania strefy czasowej
dzia³a: zwrócony czas jest taki sam jak czas wprowadzony.

Program ten nie rozwi±zuje ogólnego problemu zamiany dowolnej daty
na znacznik czasu.  Problem taki jest bardzo zagmatwany.  Jednak funkcja
@code{mktime} daje fundament, na którym mo¿na budowaæ rozwi±zanie.
Inny program mo¿e przekszta³caæ nazwy miesiêcy na ich numery
kolejne i czasy AM/PM [t³um:przed/po po³udniu, stosowane przy zegarze
12-godzinnym] na czas 24-godzinny, by utworzyæ format ``kanoniczny'',
jakiego wymaga @code{mktime}.

@node Funkcja gettimeofday, Funkcja filetrans, Funkcja mktime, Funkcje biblioteczne
@section Obs³uga daty i czasu

@cindex sformatowane znaczniki czasu
@cindex znaczniki czasu, sformatowane
Funkcje @code{systime} i @code{strftime} opisane w
@ref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu},
zapewniaj± minimaln± funkcjonalno¶æ niezbêdn± przy dzia³aniach na czasie
w postaci czytelnej dla cz³owieka.  Mimo, ¿e @code{strftime} jest rozleg³a,
formaty steruj±ce niekonieczne s± ³atwe do zapamiêtania i intuicyjnie
oczywiste przy czytaniu programu.

Poni¿sza funkcja, @code{gettimeofday}, zape³nia dostarczon± przez
u¿ytkownika tablicê sformatowan± informacj± o czasie.  Zwraca ³añcuch
z bie¿±cym czasem sformatowanym tak samo, jak przez narzêdzie @code{date}.

@findex gettimeofday
@example
@c @group
@c file eg/lib/gettime.awk
# gettimeofday --- pobierz datê i czas w daj±cym siê u¿yæ formacie
# Arnold Robbins, arnold@@gnu.org, Public Domain, May 1993
#
# Zwraca ³añcuch w formacie wyj¶ciowym date(1)
# Wype³nia tablicê argumentu czasu poszczególnymi warto¶ciami:
#    czas["sekunda"]         -- sekundy (0 - 59)
#    czas["minuta"]          -- minuty (0 - 59)
#    czas["godzina"]         -- godziny (0 - 23)
#    czas["altgodzina"]      -- godziny (0 - 12)
#    czas["dzienmca"]        -- dzieñ miesi±ca (1 - 31)
#    czas["miesiac"]         -- miesi±c roku (1 - 12)
#    czas["nazwamca"]        -- nazwa miesi±ca
#    czas["mckrotko"]        -- krótka nazwa miesi±ca
#    czas["rok"]             -- rok w stuleciu (0 - 99)
#    czas["pelnyrok"]        -- rok ze stuleciem (19xx lub 20xx)
#    czas["dzientyg"]        -- dzien tygodnia (niedziela = 0)
#    czas["altdzientyg"]     -- dzien tygodnia (poniedzia³ek = 0)
#    czas["numtyg"]          -- numer tygodnia, niedziela pierwsza
#    czas["altnumtyg"]       -- numer tygodnia, poniedzia³ek pierwszy
#    czas["nazwadnia"]       -- nazwa dnia tygodnia
#    czas["dzienkrotko"]     -- krótka nazwa dnia tygodnia
#    czas["dzienroku"]       -- dzieñ roku (0 - 365)
#    czas["strefa"]          -- skrót nazwy strefy czasowej
#    czas["ampm"]            -- okre¶lenie AM lub PM

function gettimeofday(czas,    ret, teraz, i)
@{
    # pobierz czas raz, unikaj±c zbêdnych wywo³añ systemowych
    teraz = systime()

    # zwróæ wyj¶cie w stylu date(1)
    ret = strftime("%a %b %d %H:%M:%S %Z %Y", teraz)

    # wyczy¶æ tablicê docelow±
    for (i in czas)
        delete czas[i]

    # wype³nij warto¶ciami, wymuszaj±c na numerycznych
    # warto¶ciach ich numeryczno¶æ przez dodanie 0
    czas["sekunda"]     = strftime("%S", now) + 0
    czas["minuta"]      = strftime("%M", now) + 0
    czas["godzina"]     = strftime("%H", now) + 0
    czas["altgodzina"]  = strftime("%I", now) + 0
    czas["dzienmca"]    = strftime("%d", now) + 0
    czas["miesiac"]     = strftime("%m", now) + 0
    czas["nazwamca"]    = strftime("%B", now)
    czas["mckrotko"]    = strftime("%b", now)
    czas["rok"]         = strftime("%y", now) + 0
    czas["pelnyrok"]    = strftime("%Y", now) + 0
    czas["dzientyg"]    = strftime("%w", now) + 0
    czas["altdzientyg"] = strftime("%u", now) + 0
    czas["nazwadzien"]  = strftime("%A", now)
    czas["dzienkrotko"] = strftime("%a", now)
    czas["dzienroku"]   = strftime("%j", now) + 0
    czas["strefa"]      = strftime("%Z", now)
    czas["ampm"]        = strftime("%p", now)
    czas["numtyg"]      = strftime("%U", now) + 0
    czas["altnumtyg"]   = strftime("%W", now) + 0

    return ret
@}
@c endfile
@end example

Indeksy ³añcuchowe s± ³atwiejsze w korzystaniu i czytaniu ni¿ rozmaite
formaty wymagane przez @code{strftime}.  Funkcja ta jest wykorzystywana przez
program @code{alarm} przedstawiony
w @ref{Program alarm, ,Program-budzik}.

@c exercise!!!
Funkcjê @code{gettimeofday} przedstawiono powy¿ej tak, jak zosta³a napisana.
Ogólniejsza konstrukcja funkcji pozwoli³aby u¿ytkownikowi podanie
opcjonalnej warto¶ci znacznika czasu, która by³aby u¿yta zamiast bie¿±cego
czasu.

@node Funkcja filetrans, Funkcja getopt, Funkcja gettimeofday, Funkcje biblioteczne
@section Obs³uga przej¶æ miêdzy plikami

@cindex inicjalizacja i porz±dki dla ka¿dego pliku
Ka¿da z regu³ @code{BEGIN} i @code{END} wykonywana jest dok³adnie raz,
odpowiednio na pocz±tku i na koñcu programu @code{awk}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}).
Sami, jako autorzy @code{gawk}, mieli¶my kiedy¶ u¿ytkownika, który b³êdnie
s±dzi³, ¿e regu³a @code{BEGIN} jest wykonywana na pocz±tku ka¿dego pliku
a @code{END} na koñcu ka¿dego pliku danych.  Gdy zosta³ poinformowany, ¿e
tak nie jest, poprosi³ by¶my dodali specjalne wzorce do @code{gawk},
o nazwach @code{BEGIN_FILE} i @code{END_FILE}, które mia³yby po¿±dane
zachowanie.  Nawet dostarczy³ nam kod, by to zrobiæ.

Jednak, po krótkim namy¶le, doszed³em do nastêpuj±cego programu
bibliotecznego.  Organizuje on wywo³ywanie dwu zapewnianych przez
u¿ytkownika funkcji, @code{beginfile} i @code{endfile}, na pocz±tku i koñcu
ka¿dego pliku danych.  Program, oprócz tego, ¿e rozwi±zuje problem
w jedynie dziewiêciu(!) linijkach kodu, robi to w sposób @emph{przeno¶ny}.
Konstrukcja ta bêdzie dzia³aæ w dowolnej implementacji @code{awk}.

@example
@c @group
# transfile.awk
#
# Daje u¿ytkownikowi obs³ugê przej¶cia miêdzy plikami
#
# U¿ytkownik musi zapewniæ funkcje beginfile() i endfile(),
# z których ka¿da pobiera odpowiednio nazwê pliku
# rozpoczynanego lub koñczonego.
#
# Arnold Robbins, arnold@@gnu.org, January 1992
# Public Domain

FILENAME != _staryplik \
@{
    if (_staryplik != "")
        endfile(_staryplik)
    _staryplik = FILENAME
    beginfile(FILENAME)
@}

END   @{ endfile(FILENAME) @}
@c @end group
@end example

Plik ten musi byæ wczytany przed ``g³ównym'' programem u¿ytkownika, tak by
regu³a, jak± zawiera, by³a wykonywana jako pierwsza.

Regu³a ta opiera siê na zmiennej @code{awk} @code{FILENAME}, która zmienia
siê automatycznie dla ka¿dego nowego pliku danych.  Bie¿±ca nazwa pliku
przechowywana jest w zmiennej prywatnej, @code{_staryplik}.  Je¿eli
@code{FILENAME} nie jest równe @code{_staryplik}, to rozpoczêto
przetwarzanie nowego pliku danych, i konieczne jest wywo³anie @code{endfile}
dla starego pliku.  Poniewa¿ @code{endfile} powinna byæ wywo³ana je¶li
przetworzono plik, program upewnia siê najpierw, czy @code{_staryplik}
nie jest ³añcuchem pustym.  Nastêpnie przypisuje nazwê bie¿±cego pliku
zmiennej @code{_staryplik} i wywo³uje @code{beginfile} dla tego pliku.
Poniewa¿, jak wszystkie zmienne @code{awk}, @code{_staryplik} bêdzie
inicjowane ³añcuchem pustym, regu³a ta wykona siê poprawnie nawet dla
pierwszego pliku danych.

Program zawiera tak¿e regu³ê @code{END}, do wykonania koñcowego
przetwarzania ostatniego pliku.  Poniewa¿ @code{END} przychodzi przed
wszystkimi innymi ewentualnymi regu³ami @code{END} podanymi w programie
``g³ównym'', najpierw zostanie wywo³ana @code{endfile}.  Raz jeszcze zalety
wielokrotnych regu³ @code{BEGIN} i @code{END} powinny byæ bezsporne.

@findex beginfile
@findex endfile
Nasza wersja ma ten sam k³opot, co pierwsza wersja @code{nextfile}
(@pxref{Funkcja nextfile, ,Implementacja @code{nextfile} jako funkcji}).
Je¿eli ten sam plik danych pojawia siê w wierszu poleceñ dwa razy z rzêdu,
to @code{endfile} i @code{beginfile} nie zostan± wykonane na koñcu
pierwszego przebiegu i na pocz±tku drugiego.  Ta wersja rozwi±zuje problem.

@example
@c @group
@c file eg/lib/ftrans.awk
# ftrans.awk --- obs³uga  przej¶cia miêdzy plikami
#
# u¿ytkownik zapewnia funkcje beginfile() i endfile()
#
# Arnold Robbins, arnold@@gnu.org, November 1992
# Public Domain

FNR == 1 @{
    if (_plik_ != "")
        endfile(_plik_)
    _plik_ = FILENAME
    beginfile(FILENAME)
@}

END  @{ endfile(_plik_) @}
@c endfile
@c @end group
@end example

W @ref{Program wc, ,Zliczanie rzeczy},
zobaczymy, jak mo¿na wykorzystaæ tê funkcjê biblioteczn±,
i jak upraszcza ona pisanie g³ównego programu.

@node Funkcja getopt, Funkcje passwd, Funkcja filetrans, Funkcje biblioteczne
@section Przetwarzanie opcji wiersza poleceñ

@cindex @code{getopt}, wersja C
@cindex przetwarzanie argumentów
@cindex argumenty, przetwarzanie
Wiêkszo¶æ narzêdzi w systemach zgodnych z POSIX przyjmuje w wierszu poleceñ
opcje lub ``prze³±czniki'', które s³u¿± do zmiany sposobu zachowania siê
programu.
@code{awk} jest przyk³adem takiego programu
(@pxref{Opcje, ,Opcje wiersza poleceñ}).
Czêsto opcje pobieraj± @dfn{argumenty}, dane, których program potrzebuje
do poprawnego wykonania danej opcji wiersza poleceñ.  Na przyk³ad, opcja
@samp{-F} narzêdzia @code{awk} wymaga ³añcucha, jaki ma byæ u¿yty jako
separator pól.  Pierwsze wyst±pienie w wierszu poleceñ @samp{--} albo
³añcucha nie rozpoczynaj±cego siê od @samp{-} koñczy opcje.

Wiêkszo¶æ systemów uniksowych do przetwarzania argumentów wiersza poleceñ
udostêpnia funkcjê C o nazwie @code{getopt}.  Programista dostarcza ³añcuch
opisuj±cy jednoliterowe opcje.  Je¿eli opcja wymaga argumentu, w ³añcuchu
wystêpuje po nim dwukropek.  Do @code{getopt} s± te¿ przekazywane ilo¶æ
i warto¶ci argumentów wiersza poleceñ.  Wywo³ywana jest ona w pêtli.
@code{getopt} przetwarza argumenty wiersza poleceñ z uwagi na litery opcji.
Przy ka¿dym obrocie pêtli zwraca pojedynczy znak reprezentuj±cy kolejn±
literê opcji, jak± znalaz³a, albo @samp{?} je¶li napotka³a niepoprawn±
opcjê.  Gdy zwraca @minus{}1, to w wierszu poleceñ ma ju¿ nie opcji.

Przy korzystaniu z @code{getopt} opcje nie pobieraj±ce argumentów mo¿na
grupowaæ, ³±cz±c je ze sob±.  Ponadto, opcje pobieraj±ce argumenty wymagaj±
obecno¶ci argumentu.  Argument mo¿e wystêpowaæ bezpo¶rednio po literze opcji
albo byæ osobnym argumentem wiersza poleceñ.

Zak³adaj±c, ¿e mamy hipotetyczny program, który przyjmuje trzy opcje wiersza
poleceñ @samp{-a}, @samp{-b} i @samp{-c}, a @samp{-b} wymaga argumentu,
poprawne s± wszystkie poni¿sze sposoby wywo³ania programu:

@example
@c @group
prog -a -b foo -c dane1 dane2 dane3
prog -ac -bfoo -- dane1 dane2 dane3
prog -acbfoo dane1 dane2 dane3
@c @end group
@end example

Zwróæ uwagê, ¿e gdy argument jest po³±czony z opcj±, reszta argumentów
wiersza poleceñ uwa¿ana jest za argument tej opcji.  W powy¿szym
przyk³adzie, @samp{-acbfoo} wskazuje, ¿e podano wszystkie z opcji @samp{-a},
@samp{-b} i @samp{-c}, a @samp{foo} jest argumentem opcji @samp{-b}.

@code{getopt} dostarcza cztery zewnêtrzne zmienne do wykorzystania przez
programistê.

@table @code
@item optind
Indeks w tablicy warto¶ci argumentów (@code{argv}), gdzie znaleziono
pierwszy nie bêd±cy opcj± argument wiersza poleceñ.

@item optarg
Warto¶æ ³añcuchowa argumentu aktualnej opcji.

@item opterr
Zwykle @code{getopt} wypisuje komunikat o b³êdzie gdy znajdzie niepoprawn±
opcjê.  Nadanie @code{opterr} warto¶ci zero wy³±cza tê cechê.
(Program u¿ytkowy mo¿e zechcieæ wypisaæ w³asny komunikat o b³êdzie.)

@item optopt
Litera reprezentuj±ca aktualn± opcjê wiersza poleceñ.
Mimo, ¿e zwykle nie jest udokumentowana, wiêkszo¶æ wersji zapewnia tê
zmienn±.
@end table

Poni¿szy fragment w C pokazuje, jak @code{getopt} móg³by przetwarzaæ
argumenty wiersza poleceñ przekazane do @code{awk}.

@example
@group
int
main(int argc, char *argv[])
@{
    @dots{}
    /* wypisz nasz w³asny komunikat */
    opterr = 0;
@end group
@group
    while ((c = getopt(argc, argv, "v:f:F:W:")) != -1) @{
        switch (c) @{
        case 'f':    /* plik */
            @dots{}
            break;
        case 'F':    /* separator pól */
            @dots{}
            break;
        case 'v':    /* przypisanie zmiennej */
            @dots{}
            break;
        case 'W':    /* rozszerzenie */
            @dots{}
            break;
        case '?':
        default:
            usage();
            break;
        @}
    @}
    @dots{}
@}
@end group
@end example

Nawiasem mówi±c, @code{gawk} w rzeczywisto¶ci zarówno do przetwarzania
zwyk³ych, jak i d³ugich opcji w stylu GNU, korzysta z funkcji GNU
@code{getopt_long} (@pxref{Opcje, ,Opcje wiersza poleceñ}).

Abstrakcja zapewniana przez @code{getopt} jest bardzo przydatna
i w programach @code{awk} równie¿ by³aby bardzo porêczna.
Oto wersja @code{getopt} napisana w @code{awk}.  Ta funkcja ujawnia jedn±
z najwiêkszych s³abo¶ci @code{awk}: jest kiepski w operowaniu na
pojedynczych znakach.  Dla uzyskania dostêpu do indywidualnych znaków
niezbêdne jest powtarzanie wywo³añ @code{substr}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

Kod jest omawiany po kawa³ku.

@example
@c @group
@c file eg/lib/getopt.awk
# getopt --- robi w awk funkcjê getopt(3) z biblioteki C
#
# arnold@@gnu.org
# Public domain
#
# Initial version: March, 1991
# Revised: May, 1993

@group
# Zmienne zewnêtrzne:
#    Optind -- indeks w ARGV pierwszego argumentu nie-opcyjnego
#    Optarg -- warto¶æ ³añcuchowa argumentu bie¿±cej opcji
#    Opterr -- je¶li niezerowe, wypisuje nasz± diagnostykê
#    Optopt -- litera bie¿±cej opcji
@end group

# Zwraca
#    -1     na koñcu opcji
#    ?      dla nierozpoznanej opcji
#    <c>    znak reprezentuj±cy bie¿±c± opcjê

# Dane prywatne
#    _opti  indeks w opcji wieloflagowej, np. -abc
@c endfile
@c @end group
@end example

Funkcja zaczyna siê od dokumentacji: kto napisa³ kod, i kiedy zosta³ on
wypuszczony, po czym nastêpuje lista wykorzystywanych zmiennych globalnych,
jakie s± zwracane warto¶ci i co znacz±, i wszelkie zmienne globalne, które
dla tej funkcji bibliotecznej s± ``prywatne''.  Taka dokumentacja jest
kluczowa dla ka¿dego programu, a szczególnie dla funkcji bibliotecznych.

@findex getopt
@example
@c @group
@c file eg/lib/getopt.awk
function getopt(argc, argv, options,    optl, thisopt, i)
@{
    optl = length(options)
    if (optl == 0)        # nie podano opcji
        return -1

    if (argv[Optind] == "--") @{  # wszystko zrobione
        Optind++
        _opti = 0
        return -1
    @} else if (argv[Optind] !~ /^-[^: \t\n\f\r\v\b]/) @{
        _opti = 0
        return -1
    @}
@c endfile
@c @end group
@end example

Funkcja sprawdza najpierw, czy rzeczywi¶cie zosta³a wywo³ana z ³añcuchem
opcji (parametr @code{options}).  Je¶li @code{options} ma d³ugo¶æ zerow±,
@code{getopt} od razu zwraca @minus{}1.

Nastêpn± rzecz± do sprawdzenia jest koniec opcji.  Ci±g @samp{--} koñczy
opcje wiersza poleceñ, podobnie ka¿dy argument wiersza poleceñ nie
rozpoczynaj±cy siê od @samp{-}.  Do przechodzenia przez tablicê
argumentów wiersza poleceñ u¿ywana jest @code{Optind}.  Zachowuje ona
swoj± warto¶æ pomiêdzy wywo³aniami @code{getopt}, gdy¿ jest zmienn±
globaln±.

U¿yte wyra¿enie regularne, @code{@w{/^-[^: \t\n\f\r\v\b]/}},
jest byæ mo¿e nieco za ostre.  Kontroluje, czy po @samp{-} wystêpuje
co¶, co nie jest bia³ym znakiem ani dwukropkiem.
Je¶li bie¿±cy argument wiersza poleceñ nie pasuje do tego wzorca, to nie
jest opcj± i koñczy przetwarzanie opcji.

@example
@group
@c file eg/lib/getopt.awk
    if (_opti == 0)
        _opti = 2
    thisopt = substr(argv[Optind], _opti, 1)
    Optopt = thisopt
    i = index(options, thisopt)
    if (i == 0) @{
        if (Opterr)
            printf("%c -- invalid option\n",
                                  thisopt) > "/dev/stderr"
        if (_opti >= length(argv[Optind])) @{
            Optind++
            _opti = 0
        @} else
            _opti++
        return "?"
    @}
@c endfile
@end group
@end example

Zmienna @code{_opti} zapamiêtuje pozycjê w bie¿±cym argumencie wiersza poleceñ
(@code{argv[Optind]}).  W przypadku, gdy po³±czono wiele opcji z jednym
@samp{-} (np. @samp{-abx}), nale¿y zwracaæ je u¿ytkownikowi po jednej.

Je¶li @code{_opti} jest równe zero, otrzymuje warto¶æ dwa, indeks nastêpnego
znaku, jaki nale¿y zbadaæ w ³añcuchu (pomijamy @samp{-}, stoj±ce na pozycji
numer jeden).  Znak ten, uzyskany z @code{substr}, przechowuje zmienna
@code{thisopt}. Jest on równocze¶nie przechowywany w @code{Optopt},
do wykorzystania przez program g³ówny.

Je¶li @code{thisopt} nie ma w ³añcuchu @code{options}, to jest to
niepoprawna opcja.  Je¿eli @code{Opterr} jest niezerowe, @code{getopt}
wypisze na standardowym wyj¶ciu b³êdów komunikat o b³êdzie podobny do
komunikatu @code{getopt} w wersji C.

Poniewa¿ opcja jest niepoprawna, nale¿y j± pomin±æ i przej¶æ do nastêpnego
znaku opcyjnego.  Je¿eli @code{_opti} jest wiêksze lub równe d³ugo¶ci
bie¿±cego argumentu wiersza poleceñ, to nale¿y przej¶æ do kolejnego
argumentu.  Wówczas zwiêkszane jest @code{Optind} i zerowane @code{_opti}.
W przeciwnym przypadku, @code{Optind} jest pozostawiane bez zmian,
a zwiêkszane jest tylko @code{_opti}.

W ka¿dym z przypadków, poniewa¿ opcja jest niepoprawna, @code{getopt}
zwraca @samp{?}.  Program g³ówny mo¿e zbadaæ @code{Optopt} je¶li potrzebuje
wiedzieæ, jaka by³a faktycznie litera niepoprawnej opcji.

@example
@group
@c file eg/lib/getopt.awk
    if (substr(options, i + 1, 1) == ":") @{
        # pobierz argument opcji
        if (length(substr(argv[Optind], _opti + 1)) > 0)
            Optarg = substr(argv[Optind], _opti + 1)
        else
            Optarg = argv[++Optind]
        _opti = 0
    @} else
        Optarg = ""
@c endfile
@end group
@end example

Je¿eli dana opcja wymaga argumentu, to w ³añcuchu @code{options} po jej
literze wystêpuje dwukropek.  Je¿eli w bie¿±cym argumencie wiersza poleceñ
(@code{argv[Optind]}) pozosta³y jakie¶ znaki, to reszta tego ³añcucha
przypisywana jest do @code{Optarg}.  W przeciwnym razie u¿ywany jest
nastêpny argument wiersza poleceñ (@samp{-xFOO} versus @samp{@w{-x FOO}}).
W obu przypadkach zerowane jest @code{_opti}, gdy¿ w bie¿±cym argumencie
wiersza poleceñ nie ma ju¿ znaków pozosta³ych do zbadania.

@example
@c @group
@c file eg/lib/getopt.awk
    if (_opti == 0 || _opti >= length(argv[Optind])) @{
        Optind++
        _opti = 0
    @} else
        _opti++
    return thisopt
@}
@c endfile
@c @end group
@end example

Na koniec, je¿eli @code{_opti} jest albo zerowe albo wiêksze ni¿ d³ugo¶æ
bie¿±cego argumentu wiersza poleceñ, to znaczy to, ¿e ten element
w @code{argv} jest ju¿ w ca³o¶ci przetworzony.  Zwiêkszane jest wiêc
@code{Optind}, tak by wskazywa³o na kolejny element @code{argv}.  Je¿eli
¿aden z tych warunków nie jest prawdziwy, to zwiêkszane jest tylko
@code{_opti}, tak by przy nastêpnym wywo³aniu @code{getopt} by³a
przetwarzana kolejna litera opcji.

@example
@c @group
@c file eg/lib/getopt.awk
BEGIN @{
    Opterr = 1    # domy¶lnie w³±czona diagnostyka
    Optind = 1    # pomiñ ARGV[0]

    # program testowy
    if (_getopt_test) @{
        while ((_go_c = getopt(ARGC, ARGV, "ab:cd")) != -1)
            printf("c = <%c>, optarg = <%s>\n",
                                       _go_c, Optarg)
        printf("argumenty nieopcyjne:\n")
        for (; Optind < ARGC; Optind++)
            printf("\tARGV[%d] = <%s>\n",
                                    Optind, ARGV[Optind])
    @}
@}
@c endfile
@c @end group
@end example

Regu³a @code{BEGIN} inicjuje zarówno @code{Opterr}, jak i @code{Optind},
jedynk±.  @code{Opterr} otrzymuje warto¶æ jeden, gdy¿ domy¶lnym
zachowaniem @code{getopt} jest wypisywanie komunikatu diagnostycznego
po zauwa¿eniu niepoprawnej opcji. @code{Optind} otrzymuje warto¶æ jeden,
gdy¿ nie ma powodu, by badaæ nazwê programu, znajduj±c± siê w @code{ARGV[0]}.

Dalsza czê¶æ regu³y @code{BEGIN} jest prostym programem testowym.
Oto wynik dwu przyk³adowych przebiegów programu testowego.

@example
@group
$ awk -f getopt.awk -v _getopt_test=1 -- -a -cbARG bax -x
@print{} c = <a>, optarg = <>
@print{} c = <c>, optarg = <>
@print{} c = <b>, optarg = <ARG>
@print{} argumenty nieopcyjne:
@print{}         ARGV[3] = <bax>
@print{}         ARGV[4] = <-x>
@end group

@group
$ awk -f getopt.awk -v _getopt_test=1 -- -a -x -- xyz abc
@print{} c = <a>, optarg = <>
@error{} x -- invalid option
@print{} c = <?>, optarg = <>
@print{} argumenty nieopcyjne:
@print{}         ARGV[4] = <xyz>
@print{}         ARGV[5] = <abc>
@end group
@end example

Pierwsze @samp{--} koñczy argumenty przekazywane do @code{awk}, wiêc
@code{awk} nie próbuje interpretowaæ @samp{-a} itd. jako w³asnych opcji.

Do przetwarzania swoich opcji korzysta z @code{getopt}
kilka programów przyk³adowych przedstawionych w
@ref{Przyk³adowe programy, ,Praktyczne programy @code{awk}}.

@node Funkcje passwd, Funkcje group, Funkcja getopt, Funkcje biblioteczne
@section Czytanie bazy u¿ytkowników

@cindex @file{/dev/user}
Plik specjalny  @file{/dev/user}
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}})
daje dostêp do zwi±zanych z bie¿±cym u¿ytkownikiem numerycznych
rzeczywistych i efektywnych identyfikatorów u¿ytkownika i grupy, oraz, je¶li
jest dostêpny, zestawu dodatkowych grup u¿ytkownika.  Jednak, poniewa¿ s± to
liczby, przeciêtnemu u¿ytkownikowi nie daj± zbyt u¿ytecznej informacji.
Musi istnieæ jaka¶ metoda znalezienia danych o u¿ytkowniku zwi±zanych
z numerami u¿ytkowników i grup.  Niniejsza sekcja przedstawia pakiet funkcji
do pobierania informacji z bazy danych u¿ytkowników.
@xref{Funkcje group, ,Czytanie bazy grup},
gdzie jest podobny pakiet, pobieraj±cy informacje z bazy grup.

@cindex @code{getpwent}, wersja C
@cindex informacje o u¿ytkowniku
@cindex informacje o koncie
@cindex plik hase³
Standard POSIX nie definiuje pliku, w którym trzymane s± dane
o u¿ytkownikach.  Zamiast tego, zapewnia plik nag³ówkowy @code{<pwd.h>}
i kilka podprogramów w jêzyku C s³u¿±cych do uzyskiwania informacji
o u¿ytkowniku.  Najwa¿niejsz± z nich jest @code{getpwent}, od ``get password
entry'' (pobierz wpis z hase³). U¿yte ``password'' pochodzi od pierwotnej
bazy danych o u¿ytkownikach, @file{/etc/passwd}, która przechowuje dane
o u¿ytkowniku, razem z zakodowanymi has³ami (st±d nazwa).

Mimo, ¿e program @code{awk} móg³by po prostu bezpo¶rednio czytaæ
@file{/etc/passwd} (format jest dobrze znany), z powodu sposobu, w jaki
pliki hase³ obs³ugiwane s± w systemach sieciowych, plik ten mo¿e nie
zawieraæ pe³nej informacji o zbiorze u¿ytkowników systemu.

@cindex @code{pwcat}, program
@cindex program @code{pwcat}
Aby byæ pewnym mo¿no¶ci stworzenia czytelnej, pe³nej wersji bazy
u¿ytkowników, trzeba napisaæ ma³y program w C, który wywo³uje
@code{getpwent}.  Funkcjê @code{getpwent} zdefiniowano tak, by zwraca³a
wska¼nik do @code{struct passwd}.  Przy ka¿dym wywo³aniu zwraca kolejn±
pozycjê bazy danych.  Je¿eli nie ma ju¿ wiêcej pozycji, zwraca
@code{NULL}, wska¼nik pusty.  Gdy siê to stanie, program C powinien
wywo³aæ @code{endpwent}, by zamkn±æ bazê.  Oto @code{pwcat}, program w C,
który wypisuje, jak @code{cat}, bazê hase³.

@findex pwcat.c
@example
@c @group
@c file eg/lib/pwcat.c
/*
 * pwcat.c
 *
 * Tworzy drukowaln± wersj± bazy hase³
 *
 * Arnold Robbins
 * arnold@@gnu.org
 * May 1993
 * Public Domain
 */

#include <stdio.h>
#include <pwd.h>

int
main(argc, argv)
int argc;
char **argv;
@{
    struct passwd *p;

    while ((p = getpwent()) != NULL)
        printf("%s:%s:%d:%d:%s:%s:%s\n",
            p->pw_name, p->pw_passwd, p->pw_uid,
            p->pw_gid, p->pw_gecos, p->pw_dir, p->pw_shell);

    endpwent();
    exit(0);
@}
@c endfile
@c @end group
@end example

Nie przejmuj siê, je¿eli nie rozumiesz C.
Wyj¶ciem z @code{pwcat} jest baza u¿ytkowników, w tradycyjnym formacie
@file{/etc/passwd}, o polach rozdzielanych dwukropkami.  Polami s±:

@table @asis
@item Login name
Nazwa zg³oszeniowa u¿ytkownika.

@item Encrypted password
Zakodowane has³o u¿ytkownika.  Na niektórych systemach mo¿e nie byæ dostêpne.

@item User-ID
Numeryczny identyfikator danego u¿ytkownika.

@item Group-ID
Numeryczny identyfikator grupy u¿ytkownika.

@item Full name
Pe³na nazwa (imiê, nazwisko) u¿ytkownika, i byæ mo¿e inne dane z nim
zwi±zane.

@item Home directory
Katalog zg³oszeniowy, ``domowy'' u¿ytkownika (znany programuj±cym w
pow³oce jako @code{$HOME}).

@item Login shell
Program, który zostanie uruchomiony gdy u¿ytkownik siê zaloguje.
Jest zwykle to pow³oka, taka jak Bash (Gnu Bourne-Again shell).
@end table

Oto kilka typowych dla wyj¶cia z @code{pwcat} wierszy.

@example
@c @group
$ pwcat
@print{} root:3Ov02d5VaUPB6:0:1:Operator:/:/bin/sh
@print{} nobody:*:65534:65534::/:
@print{} daemon:*:1:1::/:
@print{} sys:*:2:2::/:/bin/csh
@print{} bin:*:3:3::/bin:
@print{} arnold:xyzzy:2076:10:Arnold Robbins:/home/arnold:/bin/sh
@print{} miriam:yxaay:112:10:Miriam Robbins:/home/miriam:/bin/sh
@print{} andy:abcca2:113:10:Andy Jacobs:/home/andy:/bin/sh
@dots{}
@c @end group
@end example

Po tym wprowadzeniu poka¿emy grupê funkcji do pozyskiwania danych o
u¿ytkowniku.  Mamy tu kilka funkcji, odpowiadaj±cych funkcjom C o tych
samych nazwach.

@findex _pw_init
@example
@c file eg/lib/passwdawk.in
@group
# passwd.awk --- dostêp do danych pliku hase³
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

BEGIN @{
    # dopasuj to do w³asnego systemu
    _pw_awklib = "/usr/local/libexec/awk/"
@}
@end group

@group
function _pw_init(    oldfs, oldrs, olddol0, pwcat)
@{
    if (_pw_inited)
        return
    oldfs = FS
    oldrs = RS
    olddol0 = $0
    FS = ":"
    RS = "\n"
    pwcat = _pw_awklib "pwcat"
    while ((pwcat | getline) > 0) @{
        _pw_byname[$1] = $0
        _pw_byuid[$3] = $0
        _pw_bycount[++_pw_total] = $0
    @}
    close(pwcat)
    _pw_count = 0
    _pw_inited = 1
    FS = oldfs
    RS = oldrs
    $0 = olddol0
@}
@c endfile
@end group
@end example

Regu³a @code{BEGIN} przypisuje zmiennej prywatnej katalog, w którym
przechowywany jest @code{pwcat}.  Poniewa¿ @code{pwcat} wykorzystujemy
jako pomoc dla procedury bibliotecznej @code{awk}, zdecydowali¶my siê
umie¶ciæ go w @file{/usr/local/libexec/awk}.
W swoim systemie mo¿esz trzymaæ go w jakim¶ innym katalogu.

Funkcja @code{_pw_init} przechowuje trzy kopie danych o u¿ytkowniku
w trzech tablicach asocjacyjnych.
Tablice s± indeksowane nazw± u¿ytkownika (@code{_pw_byname}),
numerycznym identyfikatorem u¿ytkownika (@code{_pw_byuid}) i kolejno¶ci±
wystêpowania (@code{_pw_bycount}).

Zmienn± @code{_pw_inited} pos³u¿ono siê w celu poprawy efektywno¶ci:
@code{_pw_init} wystarczy wywo³aæ tylko raz.

Poniewa¿ nasza funkcja do czytania danych z @code{pwcat} wykorzystuje
instrukcjê @code{getline}, najpierw zapamiêtuje warto¶ci @code{FS},
@code{RS} i @code{$0}.  Jest to konieczne, gdy¿ omawiane funkcje mog±
zostaæ wywo³ane z dowolnego miejsca programu u¿ytkownika, a mo¿e on mieæ
swoje w³asne warto¶ci @code{FS} i @code{RS}.
@ignore
Problem, what if FIELDWIDTHS is in use? Sigh.
@end ignore

G³ówna czê¶æ funkcji wykorzystuje pêtlê do czytania wierszy bazy, podzia³u
danego wiersza na pola, a nastêpnie, jak tego potrzebujemy, zapamiêtania go
w ka¿dej z tablic.  Po wykonaniu pêtli, @code{@w{_pw_init}} robi porz±dki,
zamykaj±c potok, przypisuj±c @code{@w{_pw_inited}} jedynkê i odtwarzaj±c
@code{FS}, @code{RS} i  @code{$0}.  Pos³ugiwanie siê @code{@w{_pw_count}}
bêdzie obja¶nione ni¿ej.

@findex getpwnam
@example
@group
@c file eg/lib/passwdawk.in
function getpwnam(name)
@{
    _pw_init()
    if (name in _pw_byname)
        return _pw_byname[name]
    return ""
@}
@c endfile
@end group
@end example

Funkcja @code{getpwnam} pobiera nazwê u¿ytkownika jako argument ³añcuchowy.
Je¶li dany u¿ytkownik jest w bazie, zwraca odpowiedni wiersz.  W przeciwnym
razie zwraca ³añcuch pusty.

@findex getpwuid
@example
@group
@c file eg/lib/passwdawk.in
function getpwuid(uid)
@{
    _pw_init()
    if (uid in _pw_byuid)
        return _pw_byuid[uid]
    return ""
@}
@c endfile
@end group
@end example

Podobnie,
funkcja @code{getpwuid} pobiera jako argument numeryczny
identyfikator u¿ytkownika.  Je¶li taki numer u¿ytkownika jest w bazie,
zwraca odpowiedni wiersz.  W przeciwnym razie zwraca ³añcuch pusty.

@findex getpwent
@example
@c @group
@c file eg/lib/passwdawk.in
function getpwent()
@{
    _pw_init()
    if (_pw_count < _pw_total)
        return _pw_bycount[++_pw_count]
    return ""
@}
@c endfile
@c @end group
@end example

Funkcja @code{getpwent} po prostu przechodzi przez bazê, po jednej pozycji
naraz.  Korzysta z @code{_pw_count} do zapamiêtywania swojej bie¿±cej pozycji
w tablicy @code{_pw_bycount}.

@findex endpwent
@example
@c @group
@c file eg/lib/passwdawk.in
function endpwent()
@{
    _pw_count = 0
@}
@c endfile
@c @end group
@end example

Funkcja @code{@w{endpwent}} zeruje @code{@w{_pw_count}}, tak ¿e kolejne
wywo³ania @code{getpwent} rozpoczn± siê znów od pocz±tku.

¦wiadom± decyzj± projektow± w pakiecie jest to, ¿e ka¿dy z podprogramów
wywo³uje @code{@w{_pw_init}} w celu zainicjowania tablic bazy.  Dodatkowy
koszt uruchomienia osobnego procesu do stworzenia bazy u¿ytkowników
i operacji wej¶cia/wyj¶cia do jej przeszukania poniesiony zostanie tylko
je¶li program g³ówny u¿ytkownika faktycznie wywo³a jedn± z tych funkcji.
Je¿eli razem z programem u¿ytkownika wczytywany jest plik biblioteczny, ale
¿aden z podprogramów nie zostanie nigdy wywo³any, to nie bêdzie ¿adnego
dodatkowego narzutu na czas wykonania.  (Alternatyw± by³oby przesuniêcie
cia³a @code{@w{_pw_init}} do regu³y @code{BEGIN}, która zawsze uruchamia³aby
@code{pwcat}.  Upraszcza to kod, lecz uruchamia dodatkowy proces, który mo¿e
nigdy nie byæ potrzebny.)

Z kolei, wywo³anie @code{_pw_init} nie jest zbyt kosztowne, gdy¿ zmienna
@code{_pw_inited} powstrzymuje program od czytania danych wiêcej ni¿ raz.
Je¶li chcieliby¶my ze swojego programu wycisn±æ ostatni cykl, to kontrola
@code{_pw_inited} powinna byæ przesuniêta poza @code{_pw_init} i powielona
w ka¿dej z pozosta³ych funkcji.  W praktyce nie jest to konieczne, gdy¿
wiêkszo¶æ programów @code{awk} jest ograniczona wej¶ciem/wyj¶ciem,
a tylko zapcha³oby to kod.

Funkcji tych u¿ywa program @code{id} w
@ref{Program id, ,Wypisywanie informacji o u¿ytkowniku}.

@node Funkcje group, Nazwy biblioteczne, Funkcje passwd, Funkcje biblioteczne
@section Czytanie bazy grup

@cindex @code{getgrent}, wersja C
@cindex informacje o grupach
@cindex informacje o koncie
@cindex plik grup
Wiêkszo¶æ rozwa¿añ przedstawionych w
@ref{Funkcje passwd, ,Czytanie bazy u¿ytkowników},
odnosi siê równie¿ do bazy grup.  Mimo, ¿e tradycyjnie istnieje dobrze znany
plik, @file{/etc/group}, w dobrze znanym formacie, standard POSIX zapewnia
wy³±cznie zestaw podprogramów bibliotecznych C
(@code{<grp.h>} i @code{getgrent}) daj±cych dostêp do tych danych.
Mimo tego nawet, ¿e plik ten istnieje, mo¿liwe jest, ¿e nie zawiera pe³nej
informacji.  Z tego powodu, tak jak w przypadku bazy u¿ytkowników, niezbêdne
jest posiadanie ma³ego programu w C, który tworzy jako swoje wyj¶cie bazê
grup.

@cindex @code{grcat}, program
Oto @code{grcat}, program w C, który wypisuje, jak @code{cat}, bazê grup.

@findex grcat.c
@example
@c @group
@c file eg/lib/grcat.c
/*
 * grcat.c
 *
 * tworzy drukowaln± wersjê bazy grup
 *
 * Arnold Robbins, arnold@@gnu.org
 * May 1993
 * Public Domain
 */

#include <stdio.h>
#include <grp.h>

@group
int
main(argc, argv)
int argc;
char **argv;
@{
    struct group *g;
    int i;
@end group

@group
    while ((g = getgrent()) != NULL) @{
        printf("%s:%s:%d:", g->gr_name, g->gr_passwd,
                                            g->gr_gid);
@end group
        for (i = 0; g->gr_mem[i] != NULL; i++) @{
            printf("%s", g->gr_mem[i]);
            if (g->gr_mem[i+1] != NULL)
                putchar(',');
        @}
        putchar('\n');
    @}
    endgrent();
    exit(0);
@}
@c endfile
@c @end group
@end example

Ka¿dy wiersz bazy grup reprezentuje jedn± grupê.  Pola rozdzielone s±
dwukropkami, i reprezentuj± poni¿sze dane.

@table @asis
@item Group Name
Nazwa grupy

@item Group Password
Zakodowane has³o grupy.  W praktyce pole to nie jest nigdy wykorzystywane.
Zwykle jest puste lub ma warto¶æ @samp{*}.

@item Group ID Number
Numeryczny identyfikator grupy.  Liczba ta powinna byæ niepowtarzalna
w obrêbie pliku.

@item Group Member List
Lista rozdzielonych dwukropkami nazw u¿ytkowników.  S± oni cz³onkami
danej grupy.  Wiêkszo¶æ systemów uniksowych zezwala, by u¿ytkownicy byli
cz³onkami wielu grup równocze¶nie.  Je¶li nasz system równie¿ na to pozwala,
to odczyt @file{/dev/user} zwróci te numery identyfikatorów grup w polach
@code{$5} do @code{$NF}.  (Zauwa¿, ¿e @file{/dev/user} jest rozszerzeniem
@code{gawk};
@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}.)
@end table

Oto, co mo¿e daæ uruchomienie @code{grcat}:

@example
@group
$ grcat
@print{} wheel:*:0:arnold
@print{} nogroup:*:65534:
@print{} daemon:*:1:
@print{} kmem:*:2:
@print{} staff:*:10:arnold,miriam,andy
@print{} other:*:20:
@dots{}
@end group
@end example

Poni¿ej przedstawiono funkcje do uzyskiwania informacji z bazy grup.
Mamy tu kilka funkcji, wzorowanych na funkcjach bibliotecznych C o tych
samych nazwach.

@findex _gr_init
@example
@group
@c file eg/lib/groupawk.in
# group.awk --- funkcje do obs³ugi pliku grup
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

BEGIN    \
@{
    # dopasuj to do w³asnego systemu
    _gr_awklib = "/usr/local/libexec/awk/"
@}
@c endfile
@end group

@group
@c file eg/lib/groupawk.in
function _gr_init(    oldfs, oldrs, olddol0, grcat, n, a, i)
@{
    if (_gr_inited)
        return
@end group

@group
    oldfs = FS
    oldrs = RS
    olddol0 = $0
    FS = ":"
    RS = "\n"
@end group

@group
    grcat = _gr_awklib "grcat"
    while ((grcat | getline) > 0) @{
        if ($1 in _gr_byname)
            _gr_byname[$1] = _gr_byname[$1] "," $4
        else
            _gr_byname[$1] = $0
        if ($3 in _gr_bygid)
            _gr_bygid[$3] = _gr_bygid[$3] "," $4
        else
            _gr_bygid[$3] = $0

        n = split($4, a, "[ \t]*,[ \t]*")
@end group
@group
        for (i = 1; i <= n; i++)
            if (a[i] in _gr_groupsbyuser)
                _gr_groupsbyuser[a[i]] = \
                    _gr_groupsbyuser[a[i]] " " $1
            else
                _gr_groupsbyuser[a[i]] = $1
@end group

@group
        _gr_bycount[++_gr_count] = $0
    @}
@end group
@group
    close(grcat)
    _gr_count = 0
    _gr_inited++
    FS = oldfs
    RS = oldrs
    $0 = olddol0
@}
@c endfile
@end group
@end example
Regu³a @code{BEGIN} przypisuje zmiennej prywatnej katalog, w którym
przechowywany jest @code{grcat}.  Poniewa¿ @code{grcat} wykorzystujemy
jako pomoc dla procedury bibliotecznej @code{awk}, zdecydowali¶my siê
umie¶ciæ go w @file{/usr/local/libexec/awk}.
W swoim systemie mo¿esz trzymaæ go w jakim¶ innym katalogu.

Podprogramy te maj± ten sam schemat, co podprogramy bazy u¿ytkowników
(@pxref{Funkcje passwd, ,Czytanie bazy u¿ytkowników}).
Zmienna @code{@w{_gr_inited}} wykorzystywana jest do zagwarantowania, ¿e
baza danych nie bêdzie przegl±dana wiêcej ni¿ raz.
Funkcja @code{@w{_gr_init}} najpierw zachowuje @code{FS}, @code{RS}
i @code{$0}, a nastêpnie przypisuje @code{FS} i @code{RS} poprawne przy
przegl±daniu informacji o grupach warto¶ci.

Dane o grupach przechowywane s± w kilku tablicach asocjacyjnych.
Tablice indeksowane s± nazw± grupy (@code{@w{_gr_byname}}), identyfikatorem
grupy (@code{@w{_gr_bygid}}) i pozycj± w bazie (@code{@w{_gr_bycount}}).
Istnieje dodatkowa tablica indeksowana nazw± u¿ytkownika
(@code{@w{_gr_groupsbyuser}}), bêd±ca list± rozdzielonych spacjami grup,
do których nale¿y ka¿dy poszczególny u¿ytkownik.

W przeciwieñstwie do bazy u¿ytkowników, mo¿na mieæ w bazie wiele rekordów
dla tej samej grupy.  Jest to czêste gdy grupa ma du¿± ilo¶æ cz³onków.
Taka para wpisów mo¿e wygl±daæ tak:

@example
tvpeople:*:101:johny,jay,arsenio
tvpeople:*:101:david,conan,tom,joan
@end example

Z tego powodu, @code{_gr_init} patrzy, czy nazwa lub identyfikator
grupy nie by³y ju¿ widziane.  Je¶li tak, to nazwy u¿ytkowników s± po prostu
³±czone z poprzedni± list± u¿ytkowników grupy.  (W przedstawionym powy¿ej
kodzie wystêpuje pewnien trudno uchwytny problem.  Za³ó¿my, ¿e za pierwszym
razem nie by³o ¿adnych nazw.  Kod ten dodaje nazwy wraz z pocz±tkowym
przecinkiem.  Nie sprawdza te¿, czy istnieje @code{$4}.)

Na koniec, @code{_gr_init} zamyka potok do @code{grcat}, odtwarza
@code{FS}, @code{RS} i @code{$0}, inicjuje @code{_gr_count} zerem (jest
u¿ywane pó¼niej), i czyni niezerowym @code{_gr_inited}.

@findex getgrnam
@example
@c @group
@c file eg/lib/groupawk.in
function getgrnam(group)
@{
    _gr_init()
    if (group in _gr_byname)
        return _gr_byname[group]
    return ""
@}
@c endfile
@c @end group
@end example

Funkcja @code{getgrnam} pobiera nazwê grupy jako swój argument i, je¶li
grupa ta istnieje, zwraca j±.  W przeciwnym razie @code{getgrnam} zwraca
³añcuch pusty.

@findex getgrgid
@example
@c @group
@c file eg/lib/groupawk.in
function getgrgid(gid)
@{
    _gr_init()
    if (gid in _gr_bygid)
        return _gr_bygid[gid]
    return ""
@}
@c endfile
@c @end group
@end example

Funkcja @code{getgrgid} jest podobna, pobiera numeryczny identyfikator
grupy i szuka informacji zwi±zanej z tym identyfikatorem.

@findex getgruser
@example
@group
@c file eg/lib/groupawk.in
function getgruser(user)
@{
    _gr_init()
    if (user in _gr_groupsbyuser)
        return _gr_groupsbyuser[user]
    return ""
@}
@c endfile
@end group
@end example

Funkcja @code{getgruser} nie ma odpowiednika w C.  Pobiera nazwê
u¿ytkownika i zwraca listê grup, których jest on cz³onkiem.

@findex getgrent
@example
@c @group
@c file eg/lib/groupawk.in
function getgrent()
@{
    _gr_init()
    if (++_gr_count in _gr_bycount)
        return _gr_bycount[_gr_count]
    return ""
@}
@c endfile
@c @end group
@end example

Funkcja @code{getgrent} przechodzi przez bazê, kolejno po jednym wpisie.
Korzysta z @code{_gr_count} do zapamiêtywania swego po³o¿enia na li¶cie.

@findex endgrent
@example
@group
@c file eg/lib/groupawk.in
function endgrent()
@{
    _gr_count = 0
@}
@c endfile
@end group
@end example

@code{endgrent} zeruje @code{_gr_count}, tak ¿e @code{getgrent} mo¿e
rozpocz±æ ponownie od pocz±tku.

Jak w przypadku funkcji obs³ugi bazy u¿ytkowników, ka¿da z funkcji wywo³uje
@code{_gr_init}, by zainicjowaæ tablice.  Wykonywanie tych wywo³añ
skutkuje dodatkowymi kosztami uruchamiania @code{grcat} tylko wtedy, gdy
funkcje te zostan± u¿yte (w przeciwieñstwie do przesuniêcia cia³a
@code{_gr_init} do wnêtrza regu³y @code{BEGIN}).

Wiêkszo¶æ pracy stanowi przeszukiwanie bazy i tworzenie rozmaitych tablic
asocjacyjnych.  Funkcje, które wywo³uje u¿ytkownik, s± same bardzo proste,
zdaj±c siê na wykonanie zadania przez tablice asocjacyjne @code{awk}.

Opisane funkcje wykorzystywane s± przez program @code{id} w
@ref{Program id, ,Wypisywanie informacji o u¿ytkowniku}.

@node Nazwy biblioteczne,  , Funkcje group, Funkcje biblioteczne
@section Nazywanie zmiennych globalnych funkcji bibliotecznych

@cindex kwestie przestrzeni nazw w @code{awk}
@cindex dokumentowanie programów @code{awk}
@cindex programy, dokumentowanie
Z powodu sposobu, w jaki ewoluowa³ jêzyk @code{awk}, zmienne s± albo
@dfn{globalne} (do u¿ytku ca³ego programu), albo @dfn{lokalne}
(do u¿ytku tylko konkretnej funkcji).  Nie ma ¿adnego stanu po¶redniego,
analogicznego do zmiennych @code{statycznych} w C.

Funkcje biblioteczne czêsto potrzebuj± zmiennych globalnych, które mog³yby
wykorzystaæ do zachowania pomiêdzy wywo³aniami funkcji informacji o stanie.
Na przyk³ad, zmienna @code{_opti} wystêpuj±ca w @code{getopt}
(@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}),
czy tablica @code{_tm_mies} wykorzystywana przez @code{mktime}
(@pxref{Funkcja mktime, ,Konwersja dat na znaczniki czasu}).
Zmienne takie nazywamy @dfn{prywatnymi}, gdy¿ jedynymi funkcjami, jakie
potrzebuj± z nich korzystaæ s± funkcje z biblioteki.

Przy pisaniu funkcji bibliotecznej, powinno siê próbowaæ wybraæ nazwy
swoich zmiennych prywatnych tak, by nie kolidowa³y one ze zmiennymi
wykorzystywanymi albo przez inn± funkcjê biblioteczn±, albo przez program
g³ówny u¿ytkownika.  Na przyk³ad, nazwa taka jak @samp{i} czy @samp{j} nie
jest dobrym wyborem, gdy¿ programy u¿ytkownika czêsto u¿ywaj± podobnych nazw
zmiennych dla w³asnych celów.

Wszystkie programy przyk³adowe pokazane w niniejszym rozdziale zaczyna³y
nazwy swoich zmiennych prywatnych od znaku podkre¶lenia (@samp{_}).
U¿ytkownicy na ogó³ nie stosuj± pocz±tkowych znaków podkre¶lenia w nazwach
w³asnych zmiennych, wiêc konwencja ta od razu zmniejsza ryzyko
przypadkowego wspó³dzielenia nazwy zmiennej z programem u¿ytkownika.

Dodatkowo, kilka spo¶ród funkcji bibliotecznych stosuje przedrostek,
wskazuj±cy która funkcja czy zestaw funkcji wykorzystuj± dane zmienne.
Na przyk³ad, @code{_tm_mies} w @code{mktime}
(@pxref{Funkcja mktime, ,Konwersja dat na znaczniki czasu})
i @code{_pw_byname} w podprogramach bazy u¿ytkowników
(@pxref{Funkcje passwd, ,Czytanie bazy u¿ytkowników}).
Zalecamy stosowanie siê do tej konwencji, poniewa¿ zmniejsza ona
nawet w wiêkszym stopniu ryzyko nieumy¶lnego konfliktu nazw.  Zauwa¿, ¿e
konwencja ta mo¿e byæ wykorzystywana równie dobrze do nazw zmiennych,
jak i do nazw funkcji prywatnych.

Mimo, i¿ móg³bym przepisaæ wszystkie procedury biblioteczne tak, by
stosowa³y siê do tej konwencji, nie zrobi³em tego, by pokazaæ jak ewoluowa³
mój styl programowania w @code{awk} i zapewniæ jak±¶ podstawê do rozwa¿añ.

Poczyñmy jeszcze ostatni± uwagê na temat nazywania zmiennych.
Je¶li funkcja udostêpnia zmienne globalne programowi g³ównemu, dobra
konwencj± jest rozpoczêcie nazwy zmiennej du¿± liter±. Na przyk³ad,
zmienne @code{Opterr} i @code{Optind} z @code{getopt}
(@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}).  Pocz±tkowa
du¿a litera wskazuje, ¿e jest to zmienna globalna, podczas gdy fakt, ¿e ca³a
nazwa zmiennej nie sk³ada siê z du¿ych liter wskazuje, ¿e nie jest to jedna
ze zmiennych wbudowanych @code{awk}, jak np. @code{FS}.

Wa¿ne jest równie¿, by @emph{wszystkie} zmienne w funkcjach
bibliotecznych, które nie musz± zachowywaæ stanu, by³y zadeklarowane jako
lokalne.  Je¶li siê tego nie zrobi, zmienna mo¿e zostaæ przypadkowo u¿yta
w programie u¿ytkownika, co prowadzi do bardzo trudnych do wy¶ledzenia
b³êdów.

@example
function fun_bibl(x, y,    l1, l2)
@{
    @dots{}
    @var{u¿ycie zmiennej} zmn  # zmn mog³aby byæ lokalna, ale
    @dots{}                 # przez niedopatrzenie nie jest
    @}
@end example

@cindex Tcl
Inn± konwencj±, powszechn± w spo³eczno¶ci Tcl, jest stosowanie pojedynczej
tablicy asocjacyjnej do przechowywania warto¶ci potrzebnych funkcji
(funkcjom) bibliotecznym, czy inaczej ``pakietowi''.  Znacz±co zmniejsza
to liczbê faktycznie wykorzystywanych nazw.  Na przyk³ad, funkcje opisane w
@ref{Funkcje passwd, , Czytanie bazy u¿ytkowników},
mog³yby u¿ywaæ @code{@w{PW_data["inited"]}}, @code{@w{PW_data["total"]}},
@code{@w{PW_data["count"]}} i @code{@w{PW_data["awklib"]}} zamiast
@code{@w{_pw_inited}}, @code{@w{_pw_awklib}}, @code{@w{_pw_total}}
i @code{@w{_pw_count}}.

Konwencje przedstawione w tej sekcji s± dok³adnie tym -- konwencjami.
Nie musisz pisaæ programów w ten sposób, jedynie zalecamy, by¶ tak robi³.

@node Przyk³adowe programy, Historia jêzyka, Funkcje biblioteczne, Top
@chapter Praktyczne programy @code{awk}

W tym rozdziale przedstawiamy mieszankê programów @code{awk} dla
przyjemno¶ci czytania.
@iftex
Rozdzia³ ten sk³ada siê z dwu sekcji. Pierwsza pokazuje zrobione w @code{awk}
wersje kilku popularnych narzêdzi POSIX-owych.  Druga jest
workiem pe³nym interesuj±cych programów.
@end iftex

Wiele z tych programów wykorzystuje funkcje biblioteczne przedstawione
w @ref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}}.

@menu
* Klony::                       Klony typowych narzêdzi.
* Rozmaite programy::           Parê interesuj±cych programów @code{awk}.
@end menu

@node Klony, Rozmaite programy, Przyk³adowe programy, Przyk³adowe programy
@section Wymy¶lanie prochu dla rozrywki i zysku

Ta sekcja przedstawia kilka narzêdzi POSIX, które zosta³y zaimplementowane
w @code{awk}.  Ponowne wymy¶lanie tych programów w @code{awk} jest czêsto
dobr± zabaw±, gdy¿ odpowiednie algorytmy mo¿na wyraziæ przejrzy¶cie, jasno,
a kod jest zwykle zwiêz³y i prosty.  Jest to mo¿liwe dziêki temu, ¿e
@code{awk} robi tak wiele za nas.

Nale¿y zauwa¿yæ, ¿e przeznaczeniem opisywanych programów nie jest
zast±pienie wersji zainstalowanych w twoim systemie.  Ich celem jest
natomiast zilustrowanie programowania w jêzyku @code{awk} rzeczywistych,
``z ¿ycia wziêtych'' zadañ.

Programy przedstawiono w kolejno¶ci alfabetycznej.

@menu
* Program cut::             Narzêdzie @code{cut}.
* Program egrep::           Narzêdzie @code{egrep}.
* Program id::              Narzêdzie @code{id}.
* Program split::           Narzêdzie @code{split}.
* Program tee::             Narzêdzie @code{tee}.
* Program uniq::            Narzêdzie @code{uniq}.
* Program wc::              Narzêdzie @code{wc}.
@end menu

@node Program cut, Program egrep, Klony, Klony
@subsection Wycinanie pól i kolumn

@cindex @code{cut}, narzêdzie
@cindex narzêdzie @code{cut}
Narzêdzie @code{cut} wybiera, lub ``wycina'' (``cut''), znaki albo pola
ze swego standardowego wej¶cia i wysy³a je na standardowe wyj¶cie.
@code{cut} potrafi wyci±æ albo listê znaków, albo listê pól.  Domy¶lnie,
pola oddzielane s± tabulacjami, ale mo¿na podaæ opcjê wiersza poleceñ, by
zmieniæ @dfn{ogranicznik} pól, tj.@: znak separatora pól.  Definicja pól
w @code{cut} jest mniej ogólna ni¿ w @code{awk}.

Typowym zastosowaniem @code{cut} mo¿e byæ wyci±gniêcie z wyj¶cia programu
@code{who}, pokazuj±cego zalogowanych u¿ytkowników, tylko nazw kont.
Na przyk³ad, poni¿szy potok tworzy posortowan±, nie zawieraj±c± powtórzeñ
listê zalogowanych u¿ytkowników:

@example
who | cut -c1-8 | sort | uniq
@end example

@code{cut} ma nastêpuj±ce opcje:

@table @code
@item -c @var{lista}
Wykorzystuje @var{listê} jako listê znaków do wyciêcia.  Pozycje listy mo¿na
rozdzielaæ, a zakresy znaków oddzielaæ my¶lnikami.  Lista @samp{1-8,15,22-35}
okre¶la znaki od jeden do osiem, 15, i 22 do 35.

@item -f @var{lista}
Wykorzystuje @var{listê} jako listê pól do wyciêcia.

@item -d @var{ogranicz}
Jako znaku separatora pól, zamiast znaku tabulacji, u¿ywa @var{ogranicz}.

@item -s
Pomija wypisywanie wierszy, które nie zawieraj± ogranicznika pól.
@end table

Implementacja @code{cut} wykonana w @code{awk} korzysta z funkcji
bibliotecznej @code{getopt}
(@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}), oraz funkcji
bibliotecznej @code{join}
(@pxref{Funkcja join, ,Scalanie tablicy w ³añcuch}).

Program rozpoczyna siê od komentarza opisuj±cego opcje i funkcji @code{usage}
(sposób u¿ycia), która wypisuje komunikat o sposobie u¿ycia i koñczy pracê
programu.  @code{usage} wywo³ywana jest gdy podano nieprawid³owe argumenty.

@findex cut.awk
@example
@c @group
@c file eg/prog/cut.awk
# cut.awk --- implementacja cut w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# Opcje:
#    -f list        wycina pola (fields)
#    -d c           znak separatora (delimiter) pól
#    -c list        wycina znaki (characters)
#
#    -s        pomija wiersze bez znaku separatora

function usage(    e1, e2)
@{
    e1 = "sk³adnia: cut [-f lista] [-d c] [-s] [pliki...]"
    e2 = "sk³adnia: cut [-c lista] [pliki...]"
    print e1 > "/dev/stderr"
    print e2 > "/dev/stderr"
    exit 1
@}
@c endfile
@c @end group
@end example

@noindent
Zmienne @code{e1} i @code{e2} zastosowano, by funkcja ³adnie
mie¶ci³a siê na
@iftex
stronie.
@end iftex
@ifinfo
ekranie.
@end ifinfo

Nastêpnie mamy regu³ê @code{BEGIN}, która wykonuje analizê sk³adniow± opcji
wiersza poleceñ.  Przypisuje @code{FS} pojedynczy znak tabulacji, gdy¿ taki
jest domy¶lny separator pól @code{cut}.  Ustalany jest te¿ separator pól
wyj¶ciowych, by by³ taki sam jak separator pól wej¶ciowych.  Nastêpnie
do przechodzenia przez kolejne opcje wiersza poleceñ wykorzystywana jest
@code{getopt}.  Jedna ze zmiennych @code{wg_pol} i @code{wg_znakow} staje
siê prawdziwa, wskazuj±c, ¿e przetwarzanie powinno byæ wykonane, odpowiednio,
wed³ug pól lub wed³ug znaków.  Przy wycinaniu wed³ug znaków, separator pól
wyj¶ciowych staje siê ³añcuchem pustym.

@example
@c @group
@c file eg/prog/cut.awk
BEGIN    \
@{
    FS = "\t"    # domy¶lne
    OFS = FS
    while ((c = getopt(ARGC, ARGV, "sf:c:d:")) != -1) @{
        if (c == "f") @{
            by_fields = 1
            fieldlist = Optarg
        @} else if (c == "c") @{
            by_chars = 1
            fieldlist = Optarg
            OFS = ""
@group
        @} else if (c == "d") @{
            if (length(Optarg) > 1) @{
                printf("Korzystam z pierwszego znaku %s" \
                " jako separatora\n", Optarg) > "/dev/stderr"
                Optarg = substr(Optarg, 1, 1)
            @}
            FS = Optarg
            OFS = FS
            if (FS == " ")    # obrona semantyki awk
                FS = "[ ]"
        @} else if (c == "s")
            suppress++
        else
            usage()
    @}
@end group

    for (i = 1; i < Optind; i++)
        ARGV[i] = ""
@c endfile
@c @end group
@end example

Gdy separator pól jest spacj±, podejmowane s± specjalne ¶rodki ostro¿no¶ci.
Stosowanie @code{@w{" "}} (pojedynczej spacji) jako warto¶ci @code{FS} jest
niepoprawne -- @code{awk} rozdziela³by pola ci±gami spacji, tabulacji i/lub
znaków nowej linii, a chcemy, by by³y oddzielane pojedynczymi spacjami.
Zwróæ te¿ uwagê, ¿e po ukoñczeniu @code{getopt} musimy wyczy¶ciæ wszystkie
elementy @code{ARGV}, od jeden do @code{Optind}, by @code{awk} nie próbowa³
przetwarzaæ opcji wiersza poleceñ jako nazw plików.

Po uporaniu siê z opcjami wiersza poleceñ, program upewnia siê, czy maj± one
sens.  Powinna byæ u¿yta tylko jedna z opcji @samp{-c} i @samp{-f}, i obie z
nich wymagaj± listy pól.  Nastêpnie, do rozbioru na czê¶ci listy pól czy
znaków, wywo³ywana jest albo @code{set_fieldlist} albo @code{set_charlist}.

@example
@c @group
@c file eg/prog/cut.awk
    if (by_fields && by_chars)
        usage()

    if (by_fields == 0 && by_chars == 0)
        by_fields = 1    # domy¶lne

    if (fieldlist == "") @{
        print "cut: potrzebna lista dla -c lub -f" > "/dev/stderr"
        exit 1
    @}

@group
    if (by_fields)
        set_fieldlist()
    else
        set_charlist()
@}
@c endfile
@end group
@end example

Oto funkcja @code{set_fieldlist}.  Najpierw ³amie na przecinkach listê pól
na czê¶ci, umieszczaj±c wyniki w tablicy.  Nastêpnie, dla ka¿dego
elementu tablicy, patrzy czy jest on mo¿e w rzeczywisto¶ci zakresem, a je¶li
tak, to dzieli go na sk³adowe.  Podany zakres jest sprawdzany, by upewniæ
siê, ¿e pierwsza z liczb jest mniejsza od drugiej.  Ka¿da liczba z listy
dodawana jest do tablicy @code{flist}, bêd±cej po prostu wykazem pól do
wypisania.  Wykorzystywany jest zwyk³y podzia³ na pola.  Program pozwala,
by @code{awk} sam zaj±³ siê rozdzielaniem na pola.

@example
@c @group
@c file eg/prog/cut.awk
function set_fieldlist(        n, m, i, j, k, f, g)
@{
    n = split(fieldlist, f, ",")
    j = 1    # indeks w flist
    for (i = 1; i <= n; i++) @{
        if (index(f[i], "-") != 0) @{ # zakres
            m = split(f[i], g, "-")
            if (m != 2 || g[1] >= g[2]) @{
                printf("b³êdna lista pól: %s\n",
                                  f[i]) > "/dev/stderr"
                exit 1
            @}
            for (k = g[1]; k <= g[2]; k++)
                flist[j++] = k
        @} else
            flist[j++] = f[i]
    @}
    nfields = j - 1
@}
@c endfile
@c @end group
@end example

Funkcja @code{set_charlist} jest bardziej skomplikowana ni¿
@code{set_fieldlist}.  Pomys³ polega tu na zastosowaniu wystêpuj±cej
w @code{gawk} zmiennej @code{FIELDWIDTHS}
(@pxref{Sta³y rozmiar, ,Czytanie danych o sta³ej szeroko¶ci}), opisuj±cej
wej¶cie o sta³ej szeroko¶ci.  Gdy u¿ywamy listy znaków, jest to dok³adnie
to, czego potrzebujemy.

Przygotowanie @code{FIELDWIDTHS} jest bardziej skomplikowane, ni¿ zwyk³e
wykazanie pól, jakie powinny byæ wypisane.  Musimy pamiêtaæ pola,
które bêd± wypisane oraz wtr±cone znaki, które maj± byæ pominiête.
Na przyk³ad, za³ó¿my, ¿e potrzebujemy znaków od jeden do osiem, 15,
i 22 do 35.  U¿yliby¶my wówczas @samp{-c 1-8,15,22-35}.  Potrzebn± warto¶ci±
@code{FIELDWIDTHS} by³oby @code{@w{"8 6 1 6 14"}}.  Daje nam to piêæ pól,
z których powinny zostaæ wypisane @code{$1}, @code{$3} i @code{$5}.
Wtr±cone pola s± ``wype³niaczem'' (``filler''), materia³em pomiêdzy
po¿±danymi danymi.

@code{flist} zawiera listê pól do wypisania, a @code{t} pamiêta pe³n± listê
pól, ³±cznie z polami wype³niacza.

@example
@c @group
@c file eg/prog/cut.awk
function set_charlist(    field, i, j, f, g, t,
                          filler, last, len)
@{
    field = 1   # zlicza pola razem
    n = split(fieldlist, f, ",")
    j = 1       # indeks w flist
    for (i = 1; i <= n; i++) @{
        if (index(f[i], "-") != 0) @{ # zakres
            m = split(f[i], g, "-")
            if (m != 2 || g[1] >= g[2]) @{
                printf("b³êdna lista znaków: %s\n",
                               f[i]) > "/dev/stderr"
                exit 1
            @}
            len = g[2] - g[1] + 1
            if (g[1] > 1)  # oblicza d³ugo¶æ filler
                filler = g[1] - last - 1
            else
                filler = 0
            if (filler)
                t[field++] = filler
            t[field++] = len  # d³ugo¶æ pola
            last = g[2]
            flist[j++] = field - 1
        @} else @{
            if (f[i] > 1)
                filler = f[i] - last - 1
            else
                filler = 0
            if (filler)
                t[field++] = filler
            t[field++] = 1
            last = f[i]
            flist[j++] = field - 1
        @}
    @}
@group
    FIELDWIDTHS = join(t, 1, field - 1)
    nfields = j - 1
@}
@end group
@c endfile
@end example

Oto regu³a, która faktycznie przetwarza dane.  Je¿eli podano opcjê
@samp{-s}, to @code{suppress} bêdzie prawdziwe.  Pierwsza instrukcja
@code{if} zapewnia, ¿e rekord wej¶ciowy nie zawiera separatora pól.
Je¶li @code{cut} w danym przebiegu przetwarza pola, @code{suppress} jest
prawdziwe, a w rekordzie nie ma znaku separatora rekordów, to rekord ten
jest pomijany.

Je¿eli rekord jest poprawny, to w tym miejscu @code{gawk} rozdzieli³ ju¿
dane na pola, albo za pomoc± znaku w @code{FS}, albo u¿ywaj±c pól o sta³ej
d³ugo¶ci i @code{FIELDWIDTHS}.  Wystêpuj±ca tu pêtla przechodzi przez
listê pól, jakie maj± byæ wypisane.  Je¶li odpowiednie pole zawiera dane,
to jest wypisywane.  Je¿eli nastêpne pole tak¿e zawiera dane, to pomiêdzy
tymi polami wypisywany jest znak separatora.

@c 2e: Could use `index($0, FS) != 0' instead of `$0 !~ FS', below

@example
@c @group
@c file eg/prog/cut.awk
@{
    if (by_fields && suppress && $0 !~ FS)
        next

    for (i = 1; i <= nfields; i++) @{
        if ($flist[i] != "") @{
            printf "%s", $flist[i]
            if (i < nfields && $flist[i+1] != "")
                printf "%s", OFS
        @}
    @}
    print ""
@}
@c endfile
@c @end group
@end example

Ta wersja @code{cut} w wykonywaniu wycinania wed³ug znaków opiera siê na
u¿ywanej w @code{gawk} zmiennej @code{FIELDWIDTHS}.  Mimo, i¿
w innych implementacjach @code{awk} by³oby mo¿liwe skorzystanie
z @code{substr}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}),
metoda taka by³aby równocze¶nie niezwykle bolesna.  Zmienna
@code{FIELDWIDTHS} zapewnia eleganckie rozwi±zanie problemu podzia³u wiersza
wej¶ciowego na poszczególne znaki.

@node Program egrep, Program id, Program cut, Klony
@subsection Wyszukiwanie wyra¿eñ regularnych w plikach

@cindex @code{egrep}, narzêdzie
@cindex narzêdzie @code{egrep}
Narzêdzie @code{egrep} szuka wzorców w plikach.  Korzysta z wyra¿eñ
regularnych, które s± prawie identyczne, jak dostêpne w @code{awk}
(@pxref{Sta³e regexp, ,Sta³e regexp}).  U¿ywane jest w ten sposób:

@example
egrep @r{[} @var{opcje} @r{]} '@var{wzorzec}' @var{pliki} @dots{}
@end example

@var{wzorzec} jest wyra¿eniem regularnym.
W typowym zastosowaniu, wyra¿enie regularne jest cytowane, by zapobiec
rozwijaniu przez pow³okê znaków specjalnych jako masek nazw plików.
Normalnie, @code{egrep} wypisuje pasuj±ce wiersze.  Je¶li w wierszu poleceñ
podano kilka nazw plików, to ka¿dy wiersz wyj¶ciowy poprzedzony jest nazw±
pliku i dwukropkiem.

Opcjami s±:

@table @code
@item -c
Zamiast pasuj±cych do wzorca wierszy wypisuje tylko ich ilo¶æ.

@item -s
Tryb cichy.  Nie jest tworzone ¿adne wyj¶cie, a kod zakoñczenia wskazuje
czy dopasowano wzorzec, czy te¿ nie.

@item -v
Odwraca znaczenie testu.  @code{egrep} wypisuje wiersze, które @emph{nie}
pasuj± do wzorca, i koñczy pomy¶lnie pracê je¶li nie dopasowano wzorca.

@item -i
Nie rozró¿nia wielko¶ci liter zarówno we wzorcu, jak i w danych wej¶ciowych.

@item -l
Wypisuje tylko nazwy plików, w których znaleziono dopasowania, a nie
pasuj±ce wiersze.

@item -e @var{wzorzec}
U¿ywa @var{wzorca} jako wyra¿enia regularnego do dopasowania.
Celem opcji @samp{-e} jest umo¿liwienie podania wzorca zaczynaj±cego
siê od @samp{-}.
@end table

Nasza wersja wykorzystuje funkcjê biblioteczn± @code{getopt}
(@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}) i program
biblioteczny do obs³ugi przej¶cia miêdzy plikami
(@pxref{Funkcja filetrans, ,Obs³uga przej¶æ miêdzy plikami}).

Program zaczyna siê od komentarza opisowego, a nastêpnie regu³y @code{BEGIN},
przetwarzaj±cej za pomoc± @code{getopt} argumenty wiersza poleceñ.  Opcja
@samp{-i} (ignoruj wielko¶æ liter) jest szczególnie ³atwa w @code{gawk};
wykorzystujemy po prostu zmienn± wbudowan± @code{IGNORECASE}
(@pxref{Zmienne wbudowane}).

@findex egrep.awk
@example
@c @group
@c file eg/prog/egrep.awk
# egrep.awk --- symulacja egrep w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# Opcje:
#    -c    zlicza (count) wiersze
#    -s    cicho (silent): u¿ywa kodu zakoñczenia
#    -v    odwraca (invert) test:
#            powodzenie, gdy nie pasuje
#    -i    ignoruje wielko¶æ liter
#    -l    wypisuje (list) tylko nazwy plików
#    -e    argument jest wzorcem

BEGIN @{
    while ((c = getopt(ARGC, ARGV, "ce:svil")) != -1) @{
        if (c == "c")
            count_only++
        else if (c == "s")
            no_print++
        else if (c == "v")
            invert++
        else if (c == "i")
            IGNORECASE = 1
        else if (c == "l")
            filenames_only++
        else if (c == "e")
            pattern = Optarg
        else
            usage()
    @}
@c endfile
@c @end group
@end example

Dalej mamy kod, który obs³uguje charakterystyczne zachowanie @code{egrep}.
Je¿eli nie podano wzorca za pomoc± @samp{-e}, to jako wzorzec wykorzystywany
jest pierwszy nie bêd±cy opcj± argument wiersza poleceñ.  Argumenty wiersza
poleceñ @code{awk} a¿ do @code{ARGV[Optind]} s± czyszczone, by @code{awk}
nie usi³owa³ przetworzyæ ich jako pliki.  Je¿eli nie podano ¿adnych plików,
to u¿ywane jest standardowe wej¶cie, a je¶li podano kilka, to odnotowujemy
to, by pó¼niej w wydruku poprzedziæ dopasowane wiersze nazwami plików.

Ostatnie dwa wiersze s± zakomentowane, gdy¿ nie s± potrzebne w @code{gawk}.
Powinny zostaæ odkomentowane je¶li bêdziemy musieli korzystaæ z innej wersji
@code{awk}.

@example
@c @group
@c file eg/prog/egrep.awk
    if (pattern == "")
        pattern = ARGV[Optind++]

    for (i = 1; i < Optind; i++)
        ARGV[i] = ""
    if (Optind >= ARGC) @{
        ARGV[1] = "-"
        ARGC = 2
    @} else if (ARGC - Optind > 1)
        do_filenames++

#    if (IGNORECASE)
#        pattern = tolower(pattern)
@}
@c endfile
@c @end group
@end example

Kolejna grupa wierszy równie¿ powinna byæ odkomentowana je¶li nie
korzystasz z @code{gawk}.  Regu³a ta, je¶li podano opcjê @samp{-i}, zamienia
wszystkie litery wiersza wej¶ciowego na ma³e.  Jest ona zakomentowana gdy¿
nie jest konieczna w @code{gawk}.
@c bug: if a match happens, we output the translated line, not the original

@example
@c @group
@c file eg/prog/egrep.awk
#@{
#    if (IGNORECASE)
#        $0 = tolower($0)
#@}
@c endfile
@c @end group
@end example

Funkcja @code{beginfile} wywo³ywana jest przez regu³ê z @file{ftrans.awk}
za ka¿dym razem, gdy rozpoczyna siê przetwarzanie nowego pliku.  W tym
przypadku jest ona bardzo prosta: wykonuje tylko inicjowanie zmiennej
@code{fcount} zerem.  @code{fcount} pamiêta, ile wierszy bie¿±cego pliku
pasowa³o do wzorca.

@example
@group
@c file eg/prog/egrep.awk
function beginfile(smiec)
@{
    fcount = 0
@}
@c endfile
@end group
@end example

Funkcja @code{endfile} wywo³ywana jest po przetworzeniu ka¿dego pliku.
Stosowana jest tylko wtedy, gdy u¿ytkownik chce przeliczyæ pasuj±ce wiersze.
@code{no_print} bêdzie prawdziwa tylko je¶li wymagany jest kod zakoñczenia.
@code{count_only} bêdzie prawdziwe je¶li wymagane s± liczby wierszy.
Zgodnie z tym, @code{egrep} bêdzie wypisywa³ liczby wierszy tylko je¶li
w³±czone s± wypisywanie i zliczanie.  Format wyj¶ciowy musi byæ dostosowany
do liczby plików, jakie bêd± przetwarzane.  Na koniec, @code{fcount} jest
dodawane do @code{total}, by¶my wiedzieli, ile ogó³em wierszy pasowa³o do
wzorca.

@example
@group
@c file eg/prog/egrep.awk
function endfile(file)
@{
    if (! no_print && count_only)
        if (do_filenames)
            print file ":" fcount
        else
            print fcount

    total += fcount
@}
@c endfile
@end group
@end example

Poni¿sza regu³a wykonuje wiêkszo¶æ pracy zwi±zanej z dopasowywaniem wierszy.
Zmienna @code{matches} bêdzie prawdziwa je¶li wiersz pasuje do wzorca.
Je¿eli u¿ytkownik chce wierszy, które nie pasuj±, znaczenie @code{matches}
jest odwracane za pomoc± operatora @samp{!}.  @code{fcount} zwiêkszane jest
o warto¶æ @code{matches}, która bêdzie albo jedynk± albo zerem, zale¿nie od
tego czy dopasowanie by³o pomy¶lne czy nie.  Je¿eli wiersz nie pasuje, to
instrukcja @code{next} po prostu przechodzi do nastêpnego.

W poni¿szych kilku wierszach kodu wystêpuje parê optymalizacji.  Je¿eli
u¿ytkownik chce tylko kodu zakoñczenia (@code{no_print} jest prawdziwe),
i nie musimy zliczaæ wierszy, to wystarczy wiedzieæ, ¿e pasuje jeden wiersz
danego pliku, i mo¿emy przeskoczyæ do nastêpnego pliku za pomoc±
@code{nextfile}.  Dalej, w podobnych wierszach, je¶li wypisujemy tylko nazwy
plików, a nie musimy zliczaæ wierszy, to mo¿emy wypisaæ nazwê pliku,
a nastêpnie dziêki @code{nextfile} przej¶æ do nastêpnego pliku.

Wreszcie, wypisywany jest ka¿dy wiersz, z poprzedzaj±c± go nazw±
pliku i dwukropkiem, je¶li to konieczne.

@ignore
2e: note, probably better to recode the last few lines as
    if (! count_only) @{
        if (no_print)
            nextfile

        if (filenames_only) @{
            print FILENAME
            nextfile
        @}

        if (do_filenames)
            print FILENAME ":" $0
        else
            print
    @}
@end ignore

@example
@c @group
@c file eg/prog/egrep.awk
@{
    matches = ($0 ~ pattern)
    if (invert)
        matches = ! matches

    fcount += matches    # 1 lub 0

    if (! matches)
        next

    if (no_print && ! count_only)
        nextfile

    if (filenames_only && ! count_only) @{
        print FILENAME
        nextfile
    @}

    if (do_filenames && ! count_only)
        print FILENAME ":" $0
@group
    else if (! count_only)
        print
@end group
@}
@c endfile
@c @end group
@end example

@c @strong{Exercise}: rearrange the code inside @samp{if (! count_only)}.

Regu³a @code{END} czuwa nad utworzeniem poprawnego kodu zakoñczenia.
Je¿eli nie by³o ¿adnych dopasowañ, kod zakoñczenia wynosi jeden,
w przeciwnym razie -- zero.

@example
@c @group
@c file eg/prog/egrep.awk
END    \
@{
    if (total == 0)
        exit 1
    exit 0
@}
@c endfile
@c @end group
@end example

W przypadku wyst±pienia niepoprawnych opcji funkcja @code{usage} wypisuje
komunikat o sposobie wywo³ywania i koñczy pracê programu.

@example
@c @group
@c file eg/prog/egrep.awk
function usage(    e)
@{
    e = "Sk³adnia: egrep [-csvil] [-e wzorzec] [pliki ...]"
    print e > "/dev/stderr"
    exit 1
@}
@c endfile
@c @end group
@end example

Zmienn± @code{e} zastosowano by funkcja ³adnie mie¶ci³a siê na drukowanej
stronie.

@cindex kontynuacja odwrotnym uko¶nikiem
Ma³a uwaga o stylu programowania.  Spostrzeg³e¶ byæ mo¿e, ¿e regu³a
@code{END} wykorzystuje kontynuacjê odwrotnym uko¶nikiem, z samotnym
nawiasem otwieraj±cym w wierszu.  Zrobiono to tak, by bardziej przypomina³o
sposób, w jaki zapisywane s± funkcje.  Wiele naszych przyk³adów
@iftex
umieszczonych w tym rozdziale
@end iftex
stosuje ten styl.  Sam zdecyduj, czy podoba ci siê taki sposób zapisywania
w³asnych regu³ @code{BEGIN} i @code{END}, czy nie.

@node Program id, Program split, Program egrep, Klony
@subsection Wypisywanie informacji o u¿ytkowniku

@cindex @code{id}, narzêdzie
@cindex narzêdzie @code{id}
Narzêdzie @code{id} wypisuje dla danego u¿ytkownika rzeczywisty
i efektywny identyfikator u¿ytkownika, rzeczywisty i efektywny
identyfikator grupy, i zbiór grup u¿ytkownika, je¶li s± takie.
@code{id} wypisze efektywny identyfikator u¿ytkownika i efektywny
identyfikator grupy tylko wtedy je¶li s± one ró¿ne od rzeczywistych.
Je¶li to mo¿liwe, poda tak¿e odpowiednie nazwy u¿ytkowników i grup.
Wynik mo¿e wygl±daæ tak:

@example
$ id
@print{} uid=2076(arnold) gid=10(staff) groups=10(staff),4(tty)
@end example

Dane te s± dok³adnie takie same, jak te, które zapewnia wystêpuj±cy
w @code{gawk} plik specjalny @file{/dev/user}
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}).
Narzêdzie @code{id} daje jednak przyjemniejsze wyj¶cie ni¿ sam tylko ³añcuch
liczb.

Oto prosta wersja @code{id} napisana w @code{awk}.
Korzysta z funkcji bibliotecznych obs³uguj±cych bazê u¿ytkowników
(@pxref{Funkcje passwd, ,Czytanie bazy u¿ytkowników}),
oraz z funkcji bibliotecznych do obs³ugi bazy grup
(@pxref{Funkcje group, ,Czytanie bazy grup}).

Program jest ca³kiem prosty.  Ca³a robota wykonywana jest
w regule @code{BEGIN}.  Numery identyfikatorów u¿ytkownika i grupy
uzyskiwane s± z @file{/dev/user}.  Je¿eli nie ma obs³ugi @file{/dev/user},
program poddaje siê.

Kod powtarza siê.  Pozycja w bazie u¿ytkowników dotycz±ca rzeczywistego
identyfikatora u¿ytkownika dzielona jest na dwukropkach @samp{:} na
czê¶ci sk³adowe.  Nazwa jest pierwszym polem.  Podobny kod wykorzystywany
jest dla efektywnego identyfikatora u¿ytkownika i identyfikatorów grupy.

@findex id.awk
@example
@c @group
@c file eg/prog/id.awk
# id.awk --- implementacja id w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# wyj¶ciem jest:
# uid=12(foo) euid=34(bar) gid=3(baz) \
#             egid=5(blat) groups=9(nine),2(two),1(one)

BEGIN    \
@{
    if ((getline < "/dev/user") < 0) @{
        err = "id: brak obs³ugi /dev/user - nie mogê dzia³aæ"
        print err > "/dev/stderr"
        exit 1
    @}
    close("/dev/user")

    uid = $1
    euid = $2
    gid = $3
    egid = $4

    printf("uid=%d", uid)
    pw = getpwuid(uid)
@group
    if (pw != "") @{
        split(pw, a, ":")
        printf("(%s)", a[1])
    @}
@end group

    if (euid != uid) @{
        printf(" euid=%d", euid)
        pw = getpwuid(euid)
        if (pw != "") @{
            split(pw, a, ":")
            printf("(%s)", a[1])
        @}
    @}

    printf(" gid=%d", gid)
    pw = getgrgid(gid)
    if (pw != "") @{
        split(pw, a, ":")
        printf("(%s)", a[1])
    @}

    if (egid != gid) @{
        printf(" egid=%d", egid)
        pw = getgrgid(egid)
        if (pw != "") @{
            split(pw, a, ":")
            printf("(%s)", a[1])
        @}
    @}

    if (NF > 4) @{
        printf(" groups=");
        for (i = 5; i <= NF; i++) @{
            printf("%d", $i)
            pw = getgrgid($i)
            if (pw != "") @{
                split(pw, a, ":")
                printf("(%s)", a[1])
            @}
@group
            if (i < NF)
                printf(",")
@end group
        @}
    @}
    print ""
@}
@c endfile
@c @end group
@end example

@c exercise!!!
@ignore
The POSIX version of @code{id} takes arguments that control which
information is printed.  Modify this version to accept the same
arguments and perform in the same way.
@end ignore

@node Program split, Program tee, Program id, Klony
@subsection Podzia³ du¿ego pliku na czê¶ci

@cindex @code{split}, narzêdzie
@cindex narzêdzie @code{split}
Program @code{split} dzieli du¿e pliki tekstowe na mniejsze kawa³ki.
Domy¶lnie pliki wyj¶ciowe nazywane s± @file{xaa}, @file{xab}, i tak dalej.
Ka¿dy z nich zawiera 1000 wierszy, z wyj±tkiem, na ogó³, ostatniego pliku.
Ilo¶æ wierszy w ka¿dym pliku zmieniamy podaj±c w wierszu poleceñ liczbê
poprzedzon± znakiem minus, np. @samp{-500} dla plików o 500 wierszach
zamiast 1000.  Chc±c zmieniæ nazwê plików wyj¶ciowych na co¶ w rodzaju
@file{mojplikaa}, @file{mojplikab}, i tak dalej, podajemy dodatkowy argument
okre¶laj±cy zadan± nazwê.

Oto wersja @code{split} wykonana w @code{awk}. Wykorzystuje ona funkcje
@code{ord} i @code{chr} przedstawione
w @ref{Funkcje porz±dku, ,Konwersja miêdzy znakami a liczbami}.

Program ustala najpierw warto¶ci domy¶lne, a nastêpnie sprawdza, czy nie ma
zbyt wielu argumentów.  Nastêpnie po kolei przygl±da siê ka¿demu
argumentowi.  Pierwszy mo¿e byæ minusem, po którym wystêpuje liczba.  Je¶li
tak jest, to wygl±da on jak liczba ujemna, wiêc robimy z niej dodatni± i to
jest liczba wierszy.  Nazwa pliku danych jest pomijana, a ostatni argument
jest wykorzystywany jako przedrostek nazw plików wynikowych.

@findex split.awk
@example
@c @group
@c file eg/prog/split.awk
# split.awk --- robi split w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# sk³adnia: split [-num] [plik] [nazwawyj]

BEGIN @{
    outfile = "x"    # domy¶lne
    count = 1000
    if (ARGC > 4)
        usage()

    i = 1
    if (ARGV[i] ~ /^-[0-9]+$/) @{
        count = -ARGV[i]
        ARGV[i] = ""
        i++
    @}
    # sprawd¼my argv na wypadek czytania z stdin zamiast z pliku
    if (i in ARGV)
        i++    # pomiñ nazwê pliku danych
    if (i in ARGV) @{
        outfile = ARGV[i]
        ARGV[i] = ""
    @}

    s1 = s2 = "a"
    out = (outfile s1 s2)
@}
@c endfile
@c @end group
@end example

Nastêpna regu³a wykonuje wiêkszo¶æ pracy. @code{tcount} (temporary count -
licznik tymczasowy) zapamiêtuje, ile wierszy do tej pory wypisano do pliku
wynikowego.  Je¶li jest wiêksza ni¿ @code{count}, to pora zamkn±æ bie¿±cy
plik i rozpocz±æ nowy.  @code{s1} i @code{s2} pamiêtaj± aktualne przyrostki
nazwy pliku.  Je¿eli oba maj± warto¶æ @samp{z}, to plik danych jest
po prostu zbyt du¿y.  W przeciwnym razie, @code{s1} zmiania siê na nastêpn±
na literê alfabetu a @code{s2} zaczyna znów od @samp{a}.

@example
@c @group
@c file eg/prog/split.awk
@{
    if (++tcount > count) @{
        close(out)
        if (s2 == "z") @{
            if (s1 == "z") @{
                printf("split: %s jest za du¿y do podzia³u\n", \
                       FILENAME) > "/dev/stderr"
                exit 1
            @}
            s1 = chr(ord(s1) + 1)
            s2 = "a"
        @} else
            s2 = chr(ord(s2) + 1)
        out = (outfile s1 s2)
        tcount = 1
    @}
    print > out
@}
@c endfile
@c @end group
@end example

Funkcja @code{usage} po prostu wypisuje komunikat o b³êdzie i koñczy pracê
programu.

@example
@c @group
@c file eg/prog/split.awk
function usage(   e)
@{
    e = "sk³adnia: split [-num] [plik] [nazwawyj]"
    print e > "/dev/stderr"
    exit 1
@}
@c endfile
@c @end group
@end example

@noindent
Zmienn± @code{e} zastosowano by funkcja ³adnie mie¶ci³a siê na
@iftex
stronie.
@end iftex
@ifinfo
ekranie.
@end ifinfo

Program jest troszkê niechlujny; zdaje siê na @code{awk}, by zamkn±³
za niego automatycznie ostatni plik, zamiast samemu zrobiæ to
w regule @code{END}.

@node Program tee, Program uniq, Program split, Klony
@subsection Duplikowanie wyj¶cia do wielu plików

@cindex @code{tee}, narzêdzie
@cindex narzêdzie @code{tee}
Program @code{tee} znany jest jako ``pipe fitting''.@footnote{od t³um.@:
armatura instalacji; ang.pipe, potok, znaczy dos³ownie ``przewód
rurowy''. ``Tee'' (ti:) to po prostu ``litera Te'', trójnik, T-kszta³tka.}
@code{tee} kopiuje swoje standardowe wej¶cie na standardowe
wyj¶cie, a równocze¶nie powiela je do plików wymienionych w wierszu poleceñ.
Ma tak± sk³adniê:

@example
tee @r{[}-a@r{]} plik @dots{}
@end example

Opcja @samp{-a} mówi @code{tee}, by wykonywa³ dopisywanie do wskazanych
plików, zamiast obcinaæ je i zaczynaæ od nowa.

Regu³a @code{BEGIN} najpierw w tablicy o nazwie @code{copy} tworzy kopiê
wszystkich argumentów wiersza poleceñ.  @code{ARGV[0]} nie jest kopiowane,
gdy¿ nie jest potrzebne.  @code{tee} nie mo¿e korzystaæ bezpo¶rednio
z @code{ARGV}, poniewa¿ @code{awk} bêdzie usi³owa³ ka¿dy plik wymieniony
w @code{ARGV} przetworzyæ jako dane wej¶ciowe.

Je¿eli pierwszym argumentem jest @samp{-a}, to zmienna znacznikowa
@code{append} otrzymuje warto¶æ prawdziw±, i usuwane s± @code{ARGV[1]}
i @code{copy[1]}.  Je¿eli @code{ARGC} jest mniejsze ni¿ dwa, to nie podano
nazw plików, i @code{tee} wypisuje  komunikat o sposobie u¿ycia i koñczy
pracê.  Na koniec, dziêki nadaniu @code{ARGV[1]} warto¶ci @code{"-"},
a @code{ARGC} warto¶ci dwa, na @code{awk} wymuszany jest odczyt standardowego
wyj¶cia.

@c 2e: the `ARGC--' in the `if (ARGV[1] == "-a")' isn't needed.

@findex tee.awk
@example
@group
@c file eg/prog/tee.awk
# tee.awk --- tee w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993
# Revised December 1995
@end group

@group
BEGIN    \
@{
    for (i = 1; i < ARGC; i++)
        copy[i] = ARGV[i]
@end group

@group
    if (ARGV[1] == "-a") @{
        append = 1
        delete ARGV[1]
        delete copy[1]
        ARGC--
    @}
@end group
@group
    if (ARGC < 2) @{
        print "sk³adnia: tee [-a] plik ..." > "/dev/stderr"
        exit 1
    @}
@end group
@group
    ARGV[1] = "-"
    ARGC = 2
@}
@c endfile
@end group
@end example

Pojedyncza regu³a wykonuje ca³± pracê.  Poniewa¿ nie ma tu wzorca,
wykonywana jest dla ka¿dego wiersza wej¶cia.  Cia³o regu³y po prostu
wypisuje dany wiersz do ka¿dego pliku z wiersza poleceñ, a nastêpnie
na standardowe wyj¶cie.

@example
@group
@c file eg/prog/tee.awk
@{
    # przesuniêcie if poza pêtlê przyspiesza j±
    if (append)
        for (i in copy)
            print >> copy[i]
    else
        for (i in copy)
            print > copy[i]
    print
@}
@c endfile
@end group
@end example

Mo¿na by by³o zakodowaæ pêtlê w ten sposób:

@example
for (i in copy)
    if (append)
        print >> copy[i]
    else
        print > copy[i]
@end example

@noindent
jest to bardziej zwiêz³e, ale równocze¶nie mniej efektywne. Warunek @samp{if}
jest sprawdzany dla ka¿dego rekordu i ka¿dego pliku wyj¶ciowego.  Dziêki
powieleniu cia³a pêtli, @samp{if} sprawdzany jest tylko raz dla ka¿dego
rekordu wej¶ciowego.  Je¿eli mamy @var{N} rekordów wej¶ciowych i @var{M}
plików wej¶ciowych, to pierwsza metoda wykonuje @var{N} instrukcji
@samp{if}, podczas gdy druga wykona³aby @var{N}@code{*}@var{M} instrukcji
@samp{if}.

Na koniec, regu³a @code{END} robi porz±dki, zamykaj±c wszystkie pliki
wyj¶ciowe.

@example
@c @group
@c file eg/prog/tee.awk
END    \
@{
    for (i in copy)
        close(copy[i])
@}
@c endfile
@c @end group
@end example

@node Program uniq, Program wc, Program tee, Klony
@subsection Wypisywanie nie powtarzaj±cych siê wierszy tekstu

@cindex @code{uniq}, narzêdzie
@cindex narzêdzie @code{uniq}
Narzêdzie @code{uniq} czyta posortowane wiersze danych ze swego
standardowego wej¶cia, i (domy¶lnie) usuwa dubluj±ce siê wiersze.
Inaczej mówi±c, wypisywane s± tylko niepowtarzalne, unikatowe wiersze,
st±d nazwa.  @code{uniq} ma kilka opcji.  Wywo³ywany jest tak:

@example
uniq @r{[}-udc @r{[}-@var{n}@r{]]} @r{[}+@var{n}@r{]} @r{[} @var{plik wej¶ciowy} @r{[} @var{plik wyj¶ciowy} @r{]]}

@end example

Opcje te oznaczaj±:

@table @code
@item -d
Wypisuje tylko wiersze powtarzaj±ce siê.

@item -u
Wypisuje tylko wiersze nie powtarzaj±ce siê.

@item -c
Zlicza wiersze.  Opcja ta przes³ania @samp{-d} i @samp{-u}.  Zliczane s±
zarówno wiersze powtarzaj±ce siê, jak i nie powtarzaj±ce siê.

@item -@var{n}
Przed porównaniem wierszy pomija @var{n} pól.  Definicja pól jest podobna do
domy¶lnej @code{awk}: nie-bia³e znaki oddzielone ci±gami spacji i/lub
tabulacji.

@item +@var{n}
Przed porównaniem wierszy pomija @var{n} znaków.  Wcze¶niej pomijane s±
ewentualne pola okre¶lone za pomoc± @samp{-@var{n}}.

@item @var{plik wej¶ciowy}
Dane czytane s± z pliku wej¶ciowego wymienionego w wierszu poleceñ, a nie
ze standardowego wej¶cia.

@item @var{plik wyj¶ciowy}
Tworzone wyj¶cie wysy³ane jest do wskazanego pliku wyj¶ciowego, zamiast na
standardowe wyj¶cie.
@end table

Normalnie @code{uniq} zachowuje siê tak, jakby podano równocze¶nie opcje
@samp{-d} i @samp{-u}.

Oto realizacja @code{uniq} w @code{awk}.  Wykorzystuje funkcje biblioteczne
@code{getopt} (@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}),
i @code{join} (@pxref{Funkcja join, ,Scalanie tablicy w ³añcuch}).

Program zaczyna siê od funkcji @code{usage} a nastêpnie komentarza
zawieraj±cego krótki zarys opcji i ich znaczenia.

Regu³a @code{BEGIN} zajmuje siê argumentami i opcjami wiersza poleceñ.
Korzysta z pewnej sztuczki, by uzyskaæ od @code{getopt} obs³ugê opcji
postaci @samp{-25}.  Traktuje mianowicie tak± opcjê jako literê opcji
@samp{2} z argumentem @samp{5}.  Je¿eli faktycznie podano dwie lub wiêcej
cyfr (@code{Optarg} wygl±da jak liczba), to @code{Optarg} jest sklejane
z cyfr± opcji, a nastêpnie do wyniku jest dodawane zero, by zrobiæ z niego
liczbê.  Je¶li opcja sk³ada siê tylko z jednej cyfry, to @code{Optarg} nie
jest potrzebne, a @code{Optind} musi zostaæ zmniejszone, by @code{getopt}
przetworzy³a je nastêpnym razem. Ten kod jest niew±tpliwie nieco zawi³y.

Je¿eli nie podano opcji, to brane s± domy¶lne, wypisywanie zarówno
powtarzaj±cych siê jak i unikatowych wierszy.  Plik wyj¶ciowy, je¶li go
podano, jest przypisywany do @code{outputfile}.  Wcze¶niej @code{outputfile}
by³o inicjowane jako standardowe wyj¶cie, @file{/dev/stdout}.

@findex uniq.awk
@example
@c file eg/prog/uniq.awk
# uniq.awk --- robi uniq w awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

@group
function usage(    e)
@{
    e = "sk³adnia: uniq [-udc [-n]] [+n] [ wej [ wyj ]]"
    print e > "/dev/stderr"
    exit 1
@}
@end group

# -c    zlicza (count) wiersze. przes³ania -d i -u
# -d    tylko zdublowane wiersze
# -u    tylko unikatowe wiersze
# -n    pomija n pól
# +n    pomija n znaków, najpierw pomija pola

BEGIN   \
@{
    count = 1
    outputfile = "/dev/stdout"
    opts = "udc0:1:2:3:4:5:6:7:8:9:"
    while ((c = getopt(ARGC, ARGV, opts)) != -1) @{
        if (c == "u")
            non_repeated_only++
        else if (c == "d")
            repeated_only++
        else if (c == "c")
            do_count++
        else if (index("0123456789", c) != 0) @{
            # getopt wymaga argumentów opcji, co
            # gmatwa sprawê dla rzeczy typu -5
            if (Optarg ~ /^[0-9]+$/)
                fcount = (c Optarg) + 0
@group
            else @{
                fcount = c + 0
                Optind--
            @}
@end group
        @} else
            usage()
    @}

    if (ARGV[Optind] ~ /^\+[0-9]+$/) @{
        charcount = substr(ARGV[Optind], 2) + 0
        Optind++
    @}

    for (i = 1; i < Optind; i++)
        ARGV[i] = ""

    if (repeated_only == 0 && non_repeated_only == 0)
        repeated_only = non_repeated_only = 1

    if (ARGC - Optind == 2) @{
        outputfile = ARGV[ARGC - 1]
        ARGV[ARGC - 1] = ""
    @}
@}
@c endfile
@end example

Poni¿sza funkcja, @code{are_equal}, porównuje bie¿±cy wiersz, @code{$0},
z poprzednim, @code{last}.  Obs³uguje pomijanie pól i znaków.

Je¿eli nie podano ani liczby pól ani znaków, @code{are_equal} zwraca po
prostu jeden lub zero, w zale¿no¶ci od wyniku zwyk³ego porównania ³añcuchów
@code{last} i @code{$0}.  W przeciwnym przypadku, sprawy siê komplikuj±.

Je¿eli maj± zostaæ pominiête pola, to ka¿dy wiersz rozbijany jest w tablicê
za pomoc± @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}),
a nastêpnie ¿±dane pola za pomoc± @code{join} s± ponownie ³±czone w wiersz.
Z³±czone wiersze przechowywane s± w @code{clast} i @code{cline}.
Je¿eli nie pomija siê pól, to @code{clast} i @code{cline} otrzymuj±
warto¶ci, odpowiednio, @code{last} i @code{$0}.

Wreszcie, je¿eli pomijane s± znaki, to do usuniêcia pocz±tkowych
@code{charcount} znaków z @code{clast} i @code{cline} wykorzystywana jest
funkcja @code{substr}.  Oba ³añcuchy s± nastêpnie porównywane,
a @code{are_equal} zwraca wynik porównania.

@example
@c @group
@c file eg/prog/uniq.awk
function are_equal(    n, m, clast, cline, alast, aline)
@{
    if (fcount == 0 && charcount == 0)
        return (last == $0)

    if (fcount > 0) @{
        n = split(last, alast)
        m = split($0, aline)
        clast = join(alast, fcount+1, n)
        cline = join(aline, fcount+1, m)
    @} else @{
        clast = last
        cline = $0
    @}
    if (charcount) @{
        clast = substr(clast, charcount + 1)
        cline = substr(cline, charcount + 1)
    @}

    return (clast == cline)
@}
@c endfile
@c @end group
@end example

Poni¿sze dwie regu³y stanowi± cia³o programu.  Pierwsza z nich jest
wykonywana wy³±cznie dla pierwszego wiersza danych. Nadaje @code{last}
warto¶æ @code{$0}, by kolejne wierszy tekstu mog³y byæ z czym¶ porównane.

Druga regu³a realizuje nasze zadanie.  Zmienna @code{equal} bêdzie jedynk±
lub zerem w zale¿no¶ci od wyniku porównania wykonanego przez @code{are_equal}.
Je¿eli @code{uniq} zlicza powtarzaj±ce siê wiersze, to je¶li wiersze s±
równe zwiêkszana jest zmienna @code{count}.  W przeciwnym razie wypisuje siê
wiersz, a zmienna jest sprowadzana do stanu pocz±tkowego, gdy¿ dane dwa
wiersze nie s± równe.

Je¿eli @code{uniq} nie zlicza, to @code{count} zwiêkszane jest je¶li
wiersze s± równe.  W przeciwnym razie, je¶li @code{uniq} zlicza powtarzaj±ce
siê wiersze, a spostrze¿ono wiêcej ni¿ jeden wiersz taki jak bie¿±cy, lub
te¿ je¶li @code{uniq} zlicza unikatowe wiersze, a zauwa¿ono tylko jeden
wiersz, to wiersz ten jest wypisywany, a @code{count} jest zerowane.

Na koniec, podobne rozwi±zanie u¿yte jest w regule @code{END} do wypisania
ostatniego wiersza danych wej¶ciowych.

@example
@c @group
@c file eg/prog/uniq.awk
@group
NR == 1 @{
    last = $0
    next
@}
@end group

@{
    equal = are_equal()

    if (do_count) @{    # przes³ania -d i -u
        if (equal)
            count++
        else @{
            printf("%4d %s\n", count, last) > outputfile
            last = $0
            count = 1    # stan wyj¶ciowy
        @}
        next
    @}

    if (equal)
        count++
    else @{
        if ((repeated_only && count > 1) ||
            (non_repeated_only && count == 1))
                print last > outputfile
        last = $0
        count = 1
    @}
@}

@group
END @{
    if (do_count)
        printf("%4d %s\n", count, last) > outputfile
    else if ((repeated_only && count > 1) ||
            (non_repeated_only && count == 1))
        print last > outputfile
@}
@end group
@c endfile
@c @end group
@end example

@node Program wc,  , Program uniq, Klony
@subsection Zliczanie rzeczy

@cindex @code{wc}, narzêdzie
@cindex narzêdzie @code{wc}
Narzêdzie @code{wc} (word count - zliczanie wyrazów) zlicza wiersze,
wyrazy i znaki z jednego lub wiêcej plików wej¶ciowych.  Ma tak± sk³adniê:

@example
wc @r{[}-lwc@r{]} @r{[} @var{pliki} @dots{} @r{]}
@end example

Je¿eli w wierszu poleceñ nie podano plików, @code{wc} czyta swoje
standardowe wej¶cie.  Je¶li jest wiêcej plików, to wypisze tak¿e
ca³kowite ilo¶ci dla wszystkich plików.  Ma nastêpuj±ce opcje:

@table @code
@item -l
Zlicza tylko wiersze.

@item -w
Zlicza tylko wyrazy.
``Wyraz'' jest nieprzerwanym ci±giem nie-bia³ych znaków, oddzielonym
spacjami i/lub tabulacjami.  Tak siê dobrze sk³ada, ¿e w @code{awk} jest to
normalna metoda rozdzielania pól w danych wej¶ciowych.

@item -c
Zlicza tylko znaki.
@end table

Realizacja @code{wc} w @code{awk} jest szczególnie elegancka, gdy¿ @code{awk}
wykonuje za nas mnóstwo pracy: dzieli wiersze na wyrazy (tj.@: pola) i zlicza
je, zlicza wiersze (tj.@: rekordy), i ³atwo mo¿emy siê od niego dowiedzieæ,
jak d³ugi jest wiersz.

Ta wersja korzysta z funkcji bibliotecznej @code{getopt}
(@pxref{Funkcja getopt, ,Przetwarzanie opcji wiersza poleceñ}) oraz
funkcji obs³ugi przej¶æ miêdzy plikami
(@pxref{Funkcja filetrans, ,Obs³uga przej¶æ miêdzy plikami}).

Wykazuje ona zasadnicz± ró¿nicê w stosunku do tradycyjnych wersji @code{wc}.
Nasza wersja zawsze wypisuje uzyskane liczby w kolejno¶ci: wiersze, wyrazy
i znaki.  Wersje tradycyjne zwracaj± uwagê na kolejno¶æ wystêpowania opcji
@samp{-l}, @samp{-w} i @samp{-c} w wierszu poleceñ, i wypisuj± liczby w tej
kolejno¶ci.

Regu³a @code{BEGIN} wykonuje przetwarzanie argumentów.
Zmienna @code{print_total} bêdzie prawdziwa je¶li w wierszu poleceñ
wymieniono wiêcej ni¿ jeden plik.

@findex wc.awk
@example
@c @group
@c file eg/prog/wc.awk
# wc.awk --- zlicza wiersze, wyrazy, znaki
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# Options:
#    -l    zlicza tylko wiersze
#    -w    zlicza tylko wyrazy
#    -c    zlicza tylko znaki
#
# domy¶lnie zliczane s± wiersze, wyrazy, znaki

BEGIN @{
    # niech getopt wypisze komunikat o nieprawid³owych
    # opcjach. my je ignorujemy
    while ((c = getopt(ARGC, ARGV, "lwc")) != -1) @{
        if (c == "l")
            do_lines = 1
        else if (c == "w")
            do_words = 1
        else if (c == "c")
            do_chars = 1
    @}
    for (i = 1; i < Optind; i++)
        ARGV[i] = ""

    # je¶li bez opcji, rób wszystkie
    if (! do_lines && ! do_words && ! do_chars)
        do_lines = do_words = do_chars = 1

    print_total = (ARGC - i > 2)
@}
@c endfile
@c @end group
@end example

Funkcja @code{beginfile} jest prosta: zeruje tylko liczniki wierszy, wyrazów
i znaków i zapamiêtuje nazwê bie¿±cego pliku w @code{fname}.

Funkcja @code{endfile} dodaje liczby dotycz±ce bie¿±cego pliku do
narastaj±cych sum wierszy, wyrazów i znaków.  Nastêpnie wypisuje liczniki
dotycz±ce w³a¶nie przeczytanego pliku.  Zak³ada, ¿e zerowanie liczb dla
kolejnego pliku danych wykona @code{beginfile}.

@example
@c left brace on line with `function' because of page breaking
@c file eg/prog/wc.awk
@group
function beginfile(file) @{
    chars = lines = words = 0
    fname = FILENAME
@}
@end group

function endfile(file)
@{
    tchars += chars
    tlines += lines
    twords += words
    if (do_lines)
        printf "\t%d", lines
    if (do_words)
        printf "\t%d", words
    if (do_chars)
        printf "\t%d", chars
    printf "\t%s\n", fname
@}
@c endfile
@end example

Mamy tu jedn± regu³ê, wykonywan± dla ka¿dego wiersza.  Dodaje ona d³ugo¶æ
rekordu do @code{chars}.  Musi jeszcze dodaæ jeden, gdy¿ znak nowej linii
rozdzielaj±cy rekordy (warto¶æ @code{RS}) sam nie jest czê¶ci± rekordu.
@code{lines} z ka¿dym przeczytanym wierszem zwiêksza siê o jeden, a
@code{words} o @code{NF}, liczbê ``wyrazów''
w tym wierszu.@footnote{Przeanalizuj kod w
@ref{Funkcja filetrans, ,Obs³uga przej¶æ miêdzy plikami}.  Dlaczego
@code{wc} musi u¿ywaæ osobnej zmiennej @code{lines}, zamiast korzystania
z warto¶ci @code{FNR} w @code{endfile}?}

Na koniec, regu³a @code{END} po prostu wypisuje sumy ca³kowite dla
wszystkich plików.

@example
@c @group
@c file eg/prog/wc.awk
# robi po jednym wierszu
@{
    chars += length($0) + 1    # we¼ znak newline
    lines++
    words += NF
@}

END @{
    if (print_total) @{
        if (do_lines)
            printf "\t%d", tlines
        if (do_words)
            printf "\t%d", twords
        if (do_chars)
            printf "\t%d", tchars
        print "\ttotal"
    @}
@}
@c endfile
@c @end group
@end example

@node Rozmaite programy,  , Klony, Przyk³adowe programy
@section Pe³en worek programów @code{awk}

Ta sekcja to wielki ``worek'' pe³en rozmaitych programów.
Mam nadziejê, ¿e uznasz je za interesuj±ce i przyjemne.

@menu
* Program dupword::         Znajdowanie w dokumencie zdublowanych wyrazów.
* Program alarm::           Budzik.
* Program translate::       Program podobny do narzêdzia @code{tr}.
* Program labels::          Drukowanie etykiet adresowych.
* Sortowanie wyrazów::      Program do tworzenia statystyki wyrazów.
* Sortowanie historii::     Usuwanie zdublowanych pozycji z pliku historii.
* Program extract::         Wyci±ganie programów z plików
                            ¼ród³owych Texinfo.
* Prosty sed::              Prosty edytor strumieniowy.
* Program igawk::           Interfejs dla @code{awk}, który do³±cza pliki.
@end menu

@node Program dupword, Program alarm, Rozmaite programy, Rozmaite programy
@subsection Znajdowanie w dokumencie zdublowanych wyrazów

Powszechnym b³êdem przy pisaniu du¿ej ilo¶ci prozy jest przypadkowe
powtórzenie s³ów.  Czêsto mo¿na to zauwa¿yæ w tek¶cie jako co¶ w rodzaju ``Ten
ten program robi nastêpuj±ce @dots{}''.  Je¿eli tekst jest w postaci
elektronicznej, czêsto zdublowane wyrazy wystêpuj± na koñcu jednego wiersza
i na pocz±tku nastêpnego, co powoduje, ¿e s± bardzo trudne do zauwa¿enia.
@c jak tu!

Opisywany program, @file{dupword.awk}, przegl±da plik po jednym wierszu,
szukaj±c s±siaduj±cych wyst±pieñ tego samego s³owa.  Zapamiêtuje tak¿e
ostatni wyraz w wierszu (w zmiennej @code{prev}), by móc go porównaæ
z pierwszym wyrazem nastêpnego wiersza.

Pierwsze dwie instrukcje zapewniaj±, ¿e wiersz bêdzie w ca³o¶ci ma³ymi
literami, wiêc, na przyk³ad, ``Ten'' i ``ten'' przy porównywaniu bêd± takie
same.  Druga instrukcja usuwa z wiersza wszystkie znaki, które nie s± ani
alfanumeryczne ani bia³ymi znakami, by interpunkcja równie¿ nie wp³ywa³a na
porównywanie.  Prowadzi to czasem do meldunków o powtórzonych s³owach, które
w rzeczywisto¶ci s± ró¿ne, ale zdarza siê to rzadko.

@c FIXME: add check for $i != ""
@findex dupword.awk
@example
@group
@c file eg/prog/dupword.awk
# dupword --- znajduje w tek¶cie zdublowane s³owa
# Arnold Robbins, arnold@@gnu.org, Public Domain
# December 1991

@{
    $0 = tolower($0)
    gsub(/[^A-Za-z0-9 \t]/, "");
    if ($1 == prev)
        printf("%s:%d: zdublowane %s\n",
            FILENAME, FNR, $1)
    for (i = 2; i <= NF; i++)
        if ($i == $(i-1))
            printf("%s:%d: zdublowane %s\n",
                FILENAME, FNR, $i)
    prev = $NF
@}
@c endfile
@end group
@end example

@node Program alarm, Program translate, Program dupword, Rozmaite programy
@subsection Program-budzik

Poni¿szy program jest prostym ``budzikiem''.
Podajemy mu godzinê i opcjonalny komunikat.  O zadanej porze wypisuje
komunikat na standardowym wyj¶ciu.  Dodatkowo, mo¿na podaæ mu, ile razy
ma byæ powtórzony komunikat, a tak¿e jaka ma byæ zw³oka miêdzy
powtórzeniami.

Program wykorzystuje funkcjê @code{gettimeofday} z
@ref{Funkcja gettimeofday, ,Obs³uga daty i czasu}.

Ca³a praca wykonywana jest w regule @code{BEGIN}. Pierwsz± czê¶ci± jest
sprawdzenie argumentów i nadanie ustawieñ domy¶lnych: opó¼nienia, liczby
powtórzeñ i komunikatu do wypisania.  Je¿eli u¿ytkownik poda³ komunikat, ale
nie zawiera on znaku ASCII BEL (znanego jako znak ``dzwonka'', alarmu,
@samp{\a}), to jest on dodawany do komunikatu.  (W wielu systemach wypisanie
ASCII BEL daje jaki¶ rodzaj sygna³u d¼wiêkowego.  Zatem, wysy³aj±c sygna³
ostrzegawczy, system zwraca na siebie uwagê, na wypadek gdyby u¿ytkownik nie
patrzy³ na komputer czy terminal.)

@c WK zmieniono 'print skladn' na 'print skladn1'
@findex alarm.awk
@example
@c @group
@c file eg/prog/alarm.awk
# alarm --- ustawia alarm
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# sk³adnia: alarm czas [ "komunikat" [ ile_razy [ zw³oka ] ] ]

BEGIN    \
@{
    # wstêpne sprawdzenie poprawno¶ci argumentów
    skladn1 = "sk³adnia: alarm czas ['komunikat' [ile_razy [zw³oka]]]"
    skladn2 = sprintf("\t(%s) czas ::= hh:mm", ARGV[1])

    if (ARGC < 2) @{
        print skladn1 > "/dev/stderr"
        exit 1
    @} else if (ARGC == 5) @{
        zwloka = ARGV[4] + 0
        ile_razy = ARGV[3] + 0
        komunikat = ARGV[2]
    @} else if (ARGC == 4) @{
        ile_razy = ARGV[3] + 0
        komunikat = ARGV[2]
    @} else if (ARGC == 3) @{
        komunikat = ARGV[2]
    @} else if (ARGV[1] !~ /[0-9]?[0-9]:[0-9][0-9]/) @{
        print skladn1 > "/dev/stderr"
        print skladn2 > "/dev/stderr"
        exit 1
    @}

    # ustawienia domy¶lne akcji
    # po osi±gniêciu zadanego czasu
    if (zwloka == 0)
        zwloka = 180    # 3 minuty
    if (ile_razy == 0)
        ile_razy = 5
@group
    if (komunikat == "")
        komunikat = sprintf("\aTeraz jest %s!\a", ARGV[1])
    else if (index(komunikat, "\a") == 0)
        komunikat = "\a" komunikat "\a"
@end group
@c endfile
@end example

Kolejny fragment kodu zamienia czas alarmu na godziny i minuty, i, je¶li
to konieczne, przekszta³ca go na czas 24-godzinny.  Potem zamienia go
na liczbê sekund od pó³nocy.  Nastêpnie na liczbê sekund od pó³nocy zamienia
czas bie¿±cy.  Ró¿nica pomiêdzy tymi dwoma liczbami wskazuje, jak d³ugo
nale¿y odczekaæ przed wywo³aniem alarmu.

@example
@c @group
@c file eg/prog/alarm.awk
    # podzia³ czasu docelowego
    split(ARGV[1], aczas, ":")
    godz = aczas[1] + 0  # wymu¶ numeryczne
    min  = aczas[2] + 0  # wymu¶ numeryczne

    # pobranie bie¿±cego czasu podzielonego na sk³adowe
    gettimeofday(teraz)

    # je¶li podano czas w formacie 12-godzinnym i jest
    # ju¿ po tej godzinie, np. `alarm 5:30' o 9 rano
    # znaczy 5:30 po po³udniu, to dodajmy 12 do faktycznej
    # godziny
    if (godz < 12 && teraz["godzina"] > godz)
        godz += 12

    # ustal czas docelowy w sekundach od pó³nocy
    cel = (godz * 60 * 60) + (min * 60)

    # we¼ czas bie¿±cy w sekundach od pó³nocy
    biezacy = (teraz["godzina"] * 60 * 60) + \
              (teraz["minuta"] * 60) + teraz["sekunda"]

    # jak d³ugo odczekaæ
    czasdrzemki = cel - biezacy
    if (czasdrzemki <= 0) @{
        print "czas w przesz³o¶ci!" > "/dev/stderr"
        exit 1
    @}
@c endfile
@c @end group
@end example

Na koniec, program wykorzystuje funkcjê @code{system}
(@pxref{Funkcje I/O, ,Wbudowane funkcje wej¶cia/wyj¶cia}) do wywo³ania
narzêdzia @code{sleep}.  Narzêdzie to odczekuje po prostu zadan± liczbê
sekund.  Je¶li kodem zakoñczenia nie jest zero, to program przyjmuje, ¿e
przerwano @code{sleep}, i koñczy pracê. Je¿eli @code{sleep} zakoñczy³o
dzia³anie ze statusem OK (zero), to program wypisuje komunikat w pêtli,
ponownie stosuj±c @code{sleep} do odczekania tylu sekund, ile to konieczne.

@example
@c file eg/prog/alarm.awk
@group
    # chrrrr.... id¼ precz je¶li ci przerw±
    if (system(sprintf("sleep %d", czasdrzemki)) != 0)
        exit 1
@end group

    # czas na powiadomienie!
    polecenie = sprintf("sleep %d", zwloka)
    for (i = 1; i <= ile_razy; i++) @{
        print komunikat
        # je¶li przerwano polecenie sleep, id¼ sobie
        if (system(polecenie) != 0)
            break
    @}

    exit 0
@}
@c endfile
@end example

@node Program translate, Program labels, Program alarm, Rozmaite programy
@subsection Zamiana znaków

Systemowe narzêdzie @code{tr} transliteruje znaki [t³um: zamienia znaki
pewnego zestawu na znaki innego zestawu].  Na przyk³ad, czêsto u¿ywane jest
do przekszta³cenia du¿ych liter na ma³e, w celu dalszego przetwarzania.

@example
@var{tworzenie danych} | tr '[A-Z]' '[a-z]' | @var{przetwarzanie danych} @dots{}
@end example

@code{tr} podajemy dwie listy znaków objête nawiasami kwadratowymi.
Zazwyczaj, listy s± ujmowane w znaki cytowania, by powstrzymaæ pow³okê przed
prób± wykonania rozwiniêcia nazw plików.@footnote{Na starszych,
nie POSIX-owych systemach, @code{tr} czêsto nie wymaga ujmowania list
w nawiasy kwadratowe i cudzys³owy.  Jest to cecha produktu.}
Przy przetwarzaniu wej¶cia, pierwszy znak pierwszej listy zastêpowany jest
pierwszym znakiem drugiej listy, drugi znak pierwszej drugim znakiem
drugiej, i tak dalej.  Je¿eli lista ``z'' ma wiêcej znaków ni¿ lista ``na'',
to  dla pozosta³ych znaków listy ``z'' jest u¿ywany ostatni znak listy
``na''.

Jaki¶ czas temu,
@c na pocz±tku czy w po³owie 1989!
pewien u¿ytkownik zaproponowa³ nam, by¶my dodali funkcjê transliteracji do
@code{gawk}.  Bêd±c przeciwnym ``efektowi choinki'' [t³um.: prze³adowanie
programu funkcjami], napisa³em poni¿szy program, by udowodniæ, ¿e
transliteracjê znaków mo¿na zrobiæ za pomoc± funkcji u¿ytkownika.
Program ten nie jest tak kompletny, jak systemowe narzêdzie @code{tr},
ale generalnie spe³nia zadanie.

Program @code{translate} ukazuje jedn± z kilku s³abo¶ci standardowego
@code{awk}: zajmowanie siê pojedynczymi znakami jest bardzo uci±¿liwe,
wymagaj±c powtarzanego stosowania funkcji wbudowanych @code{substr},
@code{index} i @code{gsub}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).@footnote{Ten
program zosta³ napisany zanim @code{gawk} uzyska³ mo¿liwo¶æ podzia³u
³añcucha na pojedyncze znaki umieszczane w osobnych elementach tablicy.
Jak móg³by¶ wykorzystaæ tê now± cechê do uproszczenia programu?}

Mamy tu dwie funkcje.  Pierwsza @code{stranslate}, pobiera trzy argumenty.

@table @code
@item z
Lista znaków, które konwertowaæ.

@item na
Lista znaków, na które konwertowaæ.

@item cel
£añcuch, jaki ma podlegaæ konwersji.
@end table

Tablice asocjacyjne powoduj±, ¿e czê¶æ wykonuj±ca konwersjê znaków jest
ca³kiem ³atwa. @code{t_ar} przechowuje znaki ``na'', indeksowane znakami
``z''.  Nastêpnie przez @code{z} przechodzi zwyk³± pêtla, po jednym znaku
naraz.  Dla ka¿dego znaku w @code{z}, je¶li znak ten pojawia siê
w @code{cel}, wykorzystywana jest @code{gsub}, zmieniaj±ca go na odpowiedni
znak @code{na}.

Funkcja @code{translate} po prostu wywo³uje @code{stranslate} u¿ywaj±c jako
celu @code{$0}.  Program g³ówny inicjuje dwie zmienne globalne, @code{Z}
i @code{NA}, wed³ug wiersza poleceñ, a nastêpnie zmienia @code{ARGV}, tak
¿e @code{awk} bêdzie czyta³ ze standardowego wej¶cia.

Wreszcie, regu³a przetwarzania po prostu dla ka¿dego rekordu wywo³uje
@code{translate}.

@findex translate.awk
@example
@c @group
@c file eg/prog/translate.awk
# translate --- robi rzeczy podobne do tr
# Arnold Robbins, arnold@@gnu.org, Public Domain
# August 1989

# b³êdy: nie obs³uguje rzeczy typu: tr A-Z a-z, musz±
# byæ przeliterowane. Je¶li jednak `na' jest krótsze od `z',
# to dla reszty `z' jest stosowany ostatni znak z `na'.

function stranslate(z, na, cel,   dl_z, dl_na, t_tr, i, c)
@{
    dl_z = length(z)
    dl_na = length(na)
    for (i = 1; i <= dl_na; i++)
        t_tr[substr(z, i, 1)] = substr(na, i, 1)
    if (dl_na < dl_z)
        for (; i <= dl_z; i++)
            t_tr[substr(z, i, 1)] = substr(na, dl_na, 1)
    for (i = 1; i <= dl_z; i++) @{
        c = substr(z, i, 1)
        if (index(cel, c) > 0)
            gsub(c, t_tr[c], cel)
    @}
    return cel
@}

function translate(z, na)
@{
    return $0 = stranslate(z, na, $0)
@}

@group
# program g³ówny
BEGIN @{
    if (ARGC < 3) @{
        print "sk³adnia: translate z na" > "/dev/stderr"
        exit
    @}
@end group
    Z = ARGV[1]
    NA = ARGV[2]
    ARGC = 2
    ARGV[1] = "-"
@}

@{
    translate(Z, NA)
    print
@}
@c endfile
@c @end group
@end example

Mimo ¿e mo¿liwe jest wykonanie transliteracji znaków w funkcji
zdefiniowanej na poziomie u¿ytkownika, niekoniecznie jest to efektywne,
i zaczêli¶my siê zastanawiaæ nad dodaniem funkcji wbudowanej.  Jednak,
wkrótce po napisaniu tego programu, dowiedzieli¶my siê, ¿e w @code{awk}
z System V Release 4 dodano funkcje @code{toupper} i @code{tolower}.
Funkcje te obs³uguj± przewa¿aj±c± wiêkszo¶æ przypadków, w których
transliteracja jest niezbêdna, zatem woleli¶my po prostu do³o¿yæ te
funkcje równie¿ do @code{gawk}, a zostawiæ w spokoju ca³± resztê.

Oczywistym udoskonaleniem tego programu by³oby inicjowanie tablicy
@code{t_tr} tylko raz, w regule @code{BEGIN}.  Zak³ada to jednak, ¿e
listy ``z'' i ``na'' w trakcie dzia³ania programu nigdy siê nie zmieni±.


@node Program labels, Sortowanie wyrazów, Program translate, Rozmaite programy
@subsection Wypisywanie etykiet adresowych

Oto przyk³ad ``rzeczywistego''@footnote{``Rzeczywisty'' definiujemy jako
``program faktycznie wykorzystywany do zrobienia czego¶''.} programu.  Ten
skrypt czyta listê nazw i adresów, i tworzy etykiety adresowe.  Na ka¿dej
stronie jest 20 etykiet, dwie w poziomie i dziesiêæ w pionie.  Adresy na
pewno nie bêd± wiêksze ni¿ piêæ wierszy danych.  Ka¿dy z adresów oddzielony
jest od nastêpnego pustym wierszem.

Podstawowym pomys³em jest odczytanie danych o 20 etykietach. Ka¿dy
wiersz ka¿dej etykiety przechowywany jest w tablicy @code{line}.
Jedyna regu³a g³ówna zajmuje siê wype³nianiem tej tablicy i wypisywaniem
strony po przeczytaniu 20 etykiet.

Regu³a @code{BEGIN} po prostu przypisuje @code{RS} ³añcuch pusty, tak by
@code{awk} dzieli³ rekordy w miejscu pustych wierszy
(@pxref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}).  Nadaje
@code{MAXLINES} warto¶æ 100, gdy¿ @code{MAXLINE} jest maksymaln± liczb±
wierszy na stronie (20 * 5 = 100).

Wiêkszo¶æ pracy wykonywane jest w funkcji @code{printpage}.  Wiersze
etykiet sk³adowane s± kolejno w tablicy @code{line}.  Musz± one jednak
zostaæ wydrukowane poziomo: @code{line[1]} obok @code{line[6]},
@code{line[2]} obok @code{line[7]}, i tak dalej.  Aby to osi±gn±æ
wykorzystano dwie pêtle.  Zewnêtrzna, sterowana przez @code{i}, przechodzi
przez co dziesi±ty wiersz danych, to jest ka¿dy rz±d etykiet.
Wewnêtrzna pêtla, kontrolowana przez @code{j}, przechodzi przez wiersze tego
rzêdu.  Poniewa¿ @code{j} zmienia siê od zera do czterech, @samp{i+j} jest
@code{j}-tym wierszem w @code{i}-tym rzêdzie etykiet, a @samp{i+j+5}
jest wpisem obok niej.  Wynik wygl±da ostatecznie mniej wiêcej tak:

@example
wiersz 1          wiersz 6
wiersz 2          wiersz 7
wiersz 3          wiersz 8
wiersz 4          wiersz 9
wiersz 5          wiersz 10
@end example

Zauwa¿my na koniec, ¿e przy wierszach numer 21 i 61, wypisywany jest
dodatkowy pusty wiersz, by utrzymaæ wyrównane etykiety na wyj¶ciu.
Zale¿y to od konkretnego rodzaju etykiet wykorzystywanych w czasie, gdy
by³ pisany program.  Zwróæ te¿ uwagê, ¿e s± tu dwa puste wiersze
na górze strony i dwa puste na dole.

Regu³a @code{END} organizuje opró¿nienie bufora ostatniej strony etykiet:
w danych mog³a nie wyst±piæ pe³na wielokrotno¶æ 20 etykiet.

@findex labels.awk
@example
@c @group
@c file eg/prog/labels.awk
# labels.awk
# Arnold Robbins, arnold@@gnu.org, Public Domain
# June 1992

# Program do wydruku etykiet.  Ka¿da etykieta to 5 wierszy
# danych. Mog± one zawieraæ puste wiersze.  Arkusze
# etykiet maj± po 2 puste wiersze na górze i 2 na dole.

BEGIN    @{ RS = "" ; MAXLINES = 100 @}

function printpage(    i, j)
@{
    if (Nlines <= 0)
        return

    printf "\n\n"        # nag³ówek

    for (i = 1; i <= Nlines; i += 10) @{
        if (i == 21 || i == 61)
            print ""
        for (j = 0; j < 5; j++) @{
            if (i + j > MAXLINES)
                break
            printf "   %-41s %s\n", line[i+j], line[i+j+5]
        @}
        print ""
    @}

    printf "\n\n"        # stopka

    for (i in line)
        line[i] = ""
@}

# regu³a g³ówna
@{
    if (Count >= 20) @{
        printpage()
        Count = 0
        Nlines = 0
    @}
    n = split($0, a, "\n")
    for (i = 1; i <= n; i++)
        line[++Nlines] = a[i]
    for (; i <= 5; i++)
        line[++Nlines] = ""
    Count++
@}

END    \
@{
    printpage()
@}
@c endfile
@c @end group
@end example

@node Sortowanie wyrazów, Sortowanie historii, Program labels, Rozmaite programy
@subsection Tworzenie statystyk u¿ycia wyrazów

Poni¿szy program @code{awk} wypisuje liczbê wyst±pieñ ka¿dego s³owa ze
swojego wej¶cia.  Przez wykorzystanie ³añcuchów jako indeksów
ilustruje skojarzeniow± naturê tablic @code{awk}.  Demonstruje tak¿e
konstrukcjê @samp{for @var{x} in @var{tablica}}.  Wreszcie,
pokazuje, w jaki sposób mo¿na wykorzystaæ @code{awk} w po³±czeniu z innymi
programami narzêdziowymi do wykonania stosunkowo z³o¿onych, u¿ytecznych
zadañ przy minimum wysi³ku.
Po listingu programu zamieszczono nieco wyja¶nieñ.

@example
awk '
# wypisuje czêsto¶ci s³ów
@{
    for (i = 1; i <= NF; i++)
        czest[$i]++
@}

@group
END @{
    for (slowo in czest)
        printf "%s\t%d\n", slowo, czest[slowo]
@}'
@end group
@end example

Pierwsza rzecz, na jak± warto zwróciæ uwagê w tym programie to to, ¿e ma on
dwie regu³y.  Pierwsza, poniewa¿ ma pusty wzorzec, wykonywana jest na ka¿dym
wierszu wej¶cia.  Wykorzystuje dostêpny w @code{awk} mechanizm dostêpu do
pól (@pxref{Pola, ,Badanie pól}) do wy³apania z wiersza poszczególnych
s³ów, a zmienn± wbudowan± @code{NF} (@pxref{Zmienne wbudowane}) do
rozpoznania, ile jest dostêpnych pól.

Dla ka¿dego pola wej¶ciowego zwiêkszany jest element tablicy @code{czest},
by odzwierciedla³, ¿e wyraz ten widziano kolejny raz.

Druga regu³a, poniewa¿ ma wzorzec @code{END}, nie jest wykonywana a¿
do momentu wyczerpania wej¶cia.  Wypisuje ona zawarto¶æ tablicy
@code{czest}, która zosta³a skonstruowana wewn±trz pierwszej akcji.

Program ma kilka niedoci±gniêæ, które nie pozwalaj±, by móg³ byæ przydatny
z rzeczywistymi plikami tekstowymi:

@itemize @bullet
@item
S³owa wykrywane s± za pomoc± konwencji @code{awk} mówi±cej, ¿e pola s±
oddzielone bia³ym znakiem, i ¿e inne znaki w wej¶ciu (z wyj±tkiem znaków
nowej linii) nie maj± ¿adnego specjalnego znaczenia dla @code{awk}.  Znaczy
to, ¿e znaki interpunkcyjne uwa¿ane s± za czê¶ci wyrazów.

@item
Jêzyk @code{awk} uwa¿a du¿e i ma³e litery za ró¿ne.  St±d te¿,
@samp{bartender} i @samp{Bartender} nie s± traktowane jak to samo s³owo.
Jest to niepo¿±dane, gdy¿ w zwyk³ym tek¶cie s³owa rozpoczynaj±ce zdanie
pisane s± z du¿ej litery i analizator czêsto¶ci nie powinien byæ wra¿liwy
na wielko¶æ liter.

@item
Wyniki nie pojawiaj± siê w ¿adnej u¿ytecznym porz±dku.  Prawdopodobnie
jeste¶my raczej zainteresowani tym, które s³owa pojawiaj± siê najczê¶ciej,
lub u³o¿on± alfabetycznie tabel± czêsto¶ci poszczególnych s³ów.
@end itemize

Metod± rozwi±zania tego problemu jest wykorzystanie pewnych bardziej
zaawansowanych cech jêzyka @code{awk}.  Najpierw, skorzystamy
z @code{tolower} by usun±æ ró¿nice w wielko¶ci liter.  Nastêpnie,
wykorzystamy @code{gsub} do usuniêcia znaków interpunkcyjnych.  Na koniec,
u¿yjemy systemowego narzêdzia @code{sort} by przetworzyæ wyj¶cie
naszego skryptu @code{awk}.  Oto nowa wersja programu:

@findex wordfreq.sh
@example
@c file eg/prog/wordfreq.awk
# Wypisuje czêsto¶ci s³ów
@{
    $0 = tolower($0)    # usuwa ró¿nice miêdzy
                        # du¿ymi a ma³ymi literami
    gsub(/[^a-z0-9_ \t]/, "", $0)  # usuwa interpunkcjê
    for (i = 1; i <= NF; i++)
        czest[$i]++
@}
@c endfile

@group
END @{
    for (slowo in czest)
        printf "%s\t%d\n", slowo, czest[slowo]
@}
@end group
@end example

Zak³adaj±c, ¿e zapisali¶my ten program w pliku o nazwie @file{wordfreq.awk},
a dane s± w @file{plik1}, poni¿szy potok

@example
awk -f wordfreq.awk plik1 | sort +1 -nr
@end example

@noindent
tworzy tabelê s³ów pojawiaj±cych siê w @file{plik1} uporz±dkowanych
w kolejno¶ci malej±cej czêsto¶ci.

Program @code{awk} odpowiednio gromadzi dane i tworzy tabelê czêsto¶ci
wyrazów, która nie jest uporz±dkowana.

Wyj¶cie skryptu @code{awk} jest nastêpnie sortowane przez narzêdzie
@code{sort} i wypisywane na terminalu.  Opcje podane @code{sort} w tym
przyk³adzie mówi±, ¿e sortowanie powinno byæ wed³ug drugiego pola ka¿dego
wiersza wej¶ciowego (pominiêcie jednego pola), klucze sortowania powinny byæ
traktowane jak wielko¶ci numeryczne (inaczej @samp{15} by³oby przed
@samp{5}), i ¿e sortowanie ma byæ wykonane w porz±dku malej±cym
(reverse, odwrotnym).

Mogliby¶my nawet zrobiæ @code{sort} z wnêtrza programu, zmieniaj±c akcjê
@code{END} na:

@example
@c file eg/prog/wordfreq.awk
END @{
    sort = "sort +1 -nr"
    for (slowo in czest)
        printf "%s\t%d\n", slowo, czest[slowo] | sort
    close(sort)
@}
@c endfile
@end example

Musieliby¶my u¿yæ tej metody na systemach, które nie maj± prawdziwych
potoków.

Wiêcej o sposobie korzystania z programu @code{sort} mo¿na znale¼æ w ogólnej
dokumentacji systemu operacyjnego.

@node Sortowanie historii, Program extract, Sortowanie wyrazów, Rozmaite programy
@subsection Usuwanie duplikatów z niesortowanego tekstu

Program @code{uniq}
(@pxref{Program uniq, ,Wypisywanie nie powtarzaj±cych siê wierszy tekstu}),
usuwa zdublowane wiersze z @emph{posortowanych} danych.

Za³ó¿my jednak, ¿e potrzebujemy usun±æ powtarzaj±ce siê wiersze z pliku
danych, ale zachowuj±c kolejno¶æ wierszy?  Dobrym przyk³adem mo¿e tu byæ
plik historii poleceñ pow³oki.  Plik historii przechowuje kopiê ka¿dego
wprowadzonego polecenia, a nie jest niczym nietypowym kilkakrotne
powtarzanie tego samego polecenia.  Chcemy od czasu do czasu
kondensowaæ plik historii przez usuniêcie powielonych pozycji.
Nadal jednak po¿±dane jest zachowanie pierwotnej kolejno¶ci poleceñ.

Zadanie takie wykonuje poni¿szy prosty program.  Wykorzystuje dwie tablice.
Tablica @code{dane} indeksowana jest tekstem ka¿dego wiersza.  Dla ka¿dego
wiersza inkrementowane jest @code{dane[$0]}.

Je¶li jakiego¶ konkretnego wiersza nie napotkano wcze¶niej, to
@code{dane[$0]} bêdzie zerem.  W tym przypadku, jego tekst zapamiêtywany
jest w @code{wiersze[ile]}.  Ka¿dy element w tablicy @code{wiersze} jest
niepowtarzalnym poleceniem, a indeksy tej tablicy wskazuj± na kolejno¶æ w
jakiej napotkano te wiersze.  Regu³a wypisuje po prostu wiersze, po kolei.

@cindex Rakitzis, Byron
@findex histsort.awk
@example
@group
@c file eg/prog/histsort.awk
# histsort.awk --- upakowanie pliku historii pow³oki
# Arnold Robbins, arnold@@gnu.org, Public Domain
# May 1993

# Dziêki Byronowi Rakitzis za ogólny pomys³
@{
    if (dane[$0]++ == 0)
        wiersze[++ile] = $0
@}

END @{
    for (i = 1; i <= ile; i++)
        print wiersze[i]
@}
@c endfile
@end group
@end example

Program stanowi te¿ podstawê do generowania innych przydatnych danych.
Na przyk³ad, zastosowanie poni¿szej instrukcji @code{print} w regule
@code{END} wskaza³oby, jak czêsto u¿ywane by³y poszczególne polecenia.

@example
print dane[lines[i]], wiersze[i]
@end example

Fragment ten dzia³a prawid³owo, poniewa¿ @code{dane[$0]} inkrementowano
przy ka¿dym wyst±pieniu wiersza.

@node Program extract, Prosty sed, Sortowanie historii, Rozmaite programy
@subsection Wydzielanie programów z plików ¼ród³owych Texinfo

@iftex
Ten i poprzedni rozdzia³
(@ref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}}),
przedstawiaj± wiele programów @code{awk}.
@end iftex
@ifinfo
@ref{Funkcje biblioteczne, ,Biblioteczka funkcji @code{awk}},
i @ref{Przyk³adowe programy, ,Praktyczne programy @code{awk}},
s± sekcjami najwy¿szego poziomu dla du¿ej ilo¶ci programów @code{awk}.
@end ifinfo
Je¿eli chcieliby¶my poeksperymentowaæ z tymi programami, konieczno¶æ
wpisywania ich rêcznie by³aby nudna.  Poka¿emy tu program, który potrafi
wydzieliæ czê¶ci pliku wej¶ciowego Texinfo do oddzielnych plików.

Niniejsz± ksi±¿kê napisano w Texinfo, jêzyku formatowania dokumentów
projektu GNU.  Pojedynczy plik ¼ród³owy mo¿na wykorzystaæ do utworzenia
zarówno dokumentacji drukowanej, jak i elektronicznej.

@iftex
Texinfo opisano w pe³ni w @cite{Texinfo---The GNU Documentation Format},
dostêpnym z Free Software Foundation.
@end iftex
@ifinfo
Texinfo jest opisany w ca³o¶ci, poczynaj±c od
@ref{Top, , Introduction, texi, Texinfo---The GNU Documentation Format}.

@end ifinfo

Do naszych celów wystarczy wiedzieæ trzy rzeczy o plikach wej¶ciowych
Texinfo.

@itemize @bullet
@item
Symbol ``at'', @samp{@@}, w Texinfo ma znaczenie specjalne, ca³kiem podobnie
jak @samp{\} w C czy @code{awk}.  Dos³owne symbole @samp{@@} reprezentowane
s± w plikach ¼ród³owych Texinfo jako @samp{@@@@}.

@item
Komentarze zaczynaj± siê albo od @samp{@@c} albo od @samp{@@comment}.
Program wydobywaj±cy pliki bêdzie pracowa³ wykorzystuj±c specjalne
komentarze rozpoczynaj±ce siê na samym pocz±tku wiersza.

@item
Tekst przyk³adu, który nie powinien byæ dzielony miêdzy strony zgrupowany
jest miêdzy wierszami zawieraj±cymi polecenia @samp{@@group}
i @samp{@@end group}.
@end itemize

Poni¿szy program, @file{extract.awk}, czyta plik ¼ród³owy Texinfo i,
w oparciu o wspomniane specjalne komentarze, robi dwie rzeczy.
W momencie zauwa¿enia @samp{@w{@@c system @dots{}}} wykonuje polecenie,
wyodrêbniaj±c tekst polecenia z wiersza steruj±cego i przesy³aj±c go
do funkcji
@code{system} (@pxref{Funkcje I/O, ,Wbudowane funkcje wej¶cia/wyj¶cia}).
Po zauwa¿eniu @samp{@@c file @var{nazwapliku}}, ka¿dy nastêpny wiersz
wysy³any jest do pliku @var{nazwapliku}, do momentu
napotkania @samp{@@c endfile}.
Regu³y w @file{extract.awk} dopasowuj± @samp{@@c} lub @samp{@@comment},
dziêki u¿yciu czê¶ci @samp{omment} jako opcjonalnej.  Wiersze zawieraj±ce
@samp{@@group} i @samp{@@end group} s± po prostu usuwane.
@file{extract.awk} korzysta z funkcji bibliotecznej @code{join}
(@pxref{Funkcja join, ,Scalanie tablicy w ³añcuch}).

Wszystkie programy przyk³adowe w ¼ródle Texinfo ksi±¿ki @cite{@value{TITLE}}
(@file{gawk.texi}) zosta³y ujête miêdzy wiersze @samp{file}
i @samp{endfile}.  Dystrybucja @code{gawk} wykorzystuje kopiê
@file{extract.awk} do wydzielenia programów przyk³adowych i instalacji
wielu z nich w standardowym katalogu, gdzie mo¿e je znale¼æ @code{gawk},
Plik Texinfo wygl±da podobnie jak to:

@example
@dots{}
Ten program ma blok @@code@{BEGIN@},
wypisuj±cy mi³y komunikat:

@@example
@@c file examples/messages.awk
BEGIN @@@{ print "Nie panikuj!" @@@}
@@c end file
@@end example

Wypisuje te¿ pewn± koñcow± radê:

@@example
@@c file examples/messages.awk
END @@@{ print "Zawsze unikaj znudzonych archeologów!" @@@}
@@c end file
@@end example
@dots{}
@end example

@file{extract.awk} zaczyna od nadania @code{IGNORECASE} warto¶ci jeden, co
powoduje, ¿e mieszanie du¿ych i ma³ych liter w dyrektywach nie bêdzie mieæ
znaczenia.

Pierwsza regu³a obs³uguje wywo³anie instrukcji @code{system}, sprawdzaj±c
czy podano polecenie (@code{NF} równe co najmniej trzy).  Sprawdza te¿
czy polecenie to zakoñczy³o pracê z kodem zerowym, znacz±cym OK.

@findex extract.awk
@example
@c @group
@c file eg/prog/extract.awk
# extract.awk --- wydziela pliki i uruchamia programy
#                 z plików texinfo
# Arnold Robbins, arnold@@gnu.org, Public Domain, May 1993

BEGIN    @{ IGNORECASE = 1 @}

@group
/^@@c(omment)?[ \t]+system/    \
@{
    if (NF < 3) @{
        e = (FILENAME ":" FNR)
        e = (e  ": ¼le zbudowany wiersz `system'")
        print e > "/dev/stderr"
        next
    @}
    $1 = ""
    $2 = ""
    stat = system($0)
    if (stat != 0) @{
        e = (FILENAME ":" FNR)
        e = (e ": ostrze¿enie: system zwróci³ " stat)
        print e > "/dev/stderr"
    @}
@}
@end group
@c endfile
@end example

@noindent
Zmienn± @code{e} zastosowano by funkcja ³adnie mie¶ci³a siê na
@iftex
stronie.
@end iftex
@ifinfo
ekranie.
@end ifinfo

Druga regu³a obs³uguje przenoszenie danych do plików.  Upewnia siê, czy
w dyrektywie podano nazwê pliku.  Je¿eli wymieniony plik nie jest aktualnie
tworzonym plikiem, to bie¿±cy plik jest zamykany.  Oznacza to, ¿e nie podano
dla niego @samp{@@c endfile}.  (Powinni¶my zapewne wypisaæ w tym przypadku
komunikat diagnostyczny, choæ teraz tego nie robimy.)

Zasadnicz± czê¶æ zadania realizuje pêtla @samp{for}.  Czyta wiersze
za pomoc±
@code{getline} (@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).
W przypadku napotkania niespodziewanego koñca pliku wywo³uje funkcjê
@code{@w{unexpected_eof}}.  Je¿eli wiersz jest wierszem ``endfile'', to
przerywa pêtlê.  Je¿eli wiersz jest typu @samp{@@group} lub
@samp{@@end group}, to jest ignorowany, a program przechodzi do nastêpnego.
(Te wiersze steruj±ce w Texinfo trzymaj± bloki kodu razem na jednej
stronie.  Niestety, @TeX{} nie zawsze jest do¶æ sprytny, by zrobiæ swoje
ca³kiem dobrze, i musimy mu trochê podpowiadaæ.)

Wiêkszo¶æ pracy wykonuje poni¿szych kilka linijek kodu.  Je¿eli w wierszu
nie ma symboli @samp{@@}, to mo¿na go wypisaæ wprost.  W przeciwnym razie
musz± zostaæ usuniête wszystkie pocz±tkowe @samp{@@}.

W celu usuniêcia symboli @samp{@@}, wiersz dzielony jest, za pomoc±
funkcji @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}),
na odrêbne elementy tablicy @code{a}.  Ka¿dy pusty element @code{a}
wskazuje na dwa kolejne symbole @samp{@@} w pierwotnym wierszu.
Dla ka¿dych dwu pustych elementów (@samp{@@@@} w pliku pierwotnym) musimy
dodaæ z powrotem pojedynczy symbol @samp{@@}.

Po zakoñczeniu przetwarzania tablicy, do ponownego z³±czenia kawa³ków
w pojedynczy wiersz wywo³ywana jest @code{join} z warto¶ci± @code{SUBSEP}.
Wiersz ten jest nastêpnie wypisywany do pliku wyj¶ciowego.

@example
@c @group
@c file eg/prog/extract.awk
@group
/^@@c(omment)?[ \t]+file/    \
@{
    if (NF != 3) @{
        e = (FILENAME ":" FNR ": ¼le zbudowany wiersz `file'")
        print e > "/dev/stderr"
        next
    @}
@end group
    if ($3 != curfile) @{
        if (curfile != "")
            close(curfile)
        curfile = $3
    @}

    for (;;) @{
        if ((getline line) <= 0)
            unexpected_eof()
        if (line ~ /^@@c(omment)?[ \t]+endfile/)
            break
        else if (line ~ /^@@(end[ \t]+)?group/)
            continue
        if (index(line, "@@") == 0) @{
            print line > curfile
            continue
        @}
        n = split(line, a, "@@")
@group
        # je¶li a[1] == "", tzn. pocz±tkowe @@,
        # nie oddawaj jednego.
@end group
        for (i = 2; i <= n; i++) @{
            if (a[i] == "") @{ # by³o @@@@
                a[i] = "@@"
                if (a[i+1] == "")
                    i++
            @}
        @}
        print join(a, 1, n, SUBSEP) > curfile
    @}
@}
@c endfile
@c @end group
@end example

Wa¿ne jest zwrócenie uwagi na u¿ycie przekierowania @samp{>}.
Wyj¶cie wykonane za pomoc± @samp{>} otwiera dany plik tylko raz. Pozostaje
on otwarty a kolejne elementy wyj¶cia s± do niego dopisywane.
(@pxref{Przekierowanie, , Przekierowanie wyj¶cia @code{print} i @code{printf}}).
Daje nam to mo¿liwo¶æ ³atwego przeplatania tekstu programu i obja¶nieñ
dotycz±cych tego samego pliku ¼ród³owego (tak jak to zrobiono tutaj!) bez
¿adnych k³opotów.
@c    hassle
Plik zamykany jest tylko wtedy, gdy napotkana zostanie nowa nazwa pliku albo
koniec pliku wej¶ciowego.

Na koniec, funkcja @code{@w{unexpected_eof}} wypisuje odpowiedni komunikat
o b³êdzie i koñczy pracê programu.

Regu³a @code{END} obs³uguje koñcowe porz±dkowanie, zamykaj±c otwarty plik.

@example
@c file eg/prog/extract.awk
@group
function unexpected_eof()
@{
    printf("%s:%d: niespodziewany EOF lub b³±d\n", \
        FILENAME, FNR) > "/dev/stderr"
    exit 1
@}
@end group

END @{
    if (curfile)
        close(curfile)
@}
@c endfile
@end example

@node Prosty sed, Program igawk, Program extract, Rozmaite programy
@subsection Prosty edytor strumieniowy

@cindex @code{sed}, narzêdzie
@cindex narzêdzie @code{sed}
Narzêdzie @code{sed} to ``edytor strumieniowy'' (stream editor), program,
który czyta strumieñ danych, dokonuje na nim zmian, i przekazuje zmienione
dane dalej.  Jest czêsto wykorzystywany do robienia zmian w du¿ych plikach
lub w strumieniach danych tworzonych przez potoki poleceñ.

Chocia¿ trzeba przyznaæ, ¿e @code{sed} jest skomplikowanym programem,
najczêstszym jego wykorzystaniem jest wykonywanie globalnych podstawieñ
w ¶rodku potoku:

@example
polecenie1 < dane.pocz | sed 's/stare/nowe/g' | polecenie2 > wynik
@end example

Tu, @samp{s/stare/nowe/g} nakazuje @code{sed} wyszukanie wyra¿enia
regularnego @samp{stare} w ka¿dym wierszu wej¶ciowym i zast±pienie go
tekstem @samp{nowe}, globalnie (tj.@: wszystkie wyst±pienia w wierszu).
Przypomina to funkcjê @code{gsub}
(@pxref{Funkcje ³añcuchowe, , Funkcje wbudowane dzia³aj±ce na ³añcuchach})
z @code{awk}.

Poni¿szy program, @file{awksed.awk}, przyjmuje co najmniej dwa argumenty
wiersza poleceñ: wzorzec, jakiego szukaæ, i tekst, jaki ma go zast±piæ.
Dodatkowe argumenty traktowane s± jak nazwy plików danych do przetworzenia.
Je¿eli nie podano ¿adnych, to u¿ywane jest standardowe wej¶cie.

@cindex Brennan, Michael
@cindex @code{awksed}
@cindex prosty edytor strumieniowy
@cindex edytor strumieniowy, prosty
@example
@c @group
@c file eg/prog/awksed.awk
# awksed.awk --- robi s/foo/bar/g za pomoc± samego print
#    Dziêki Michaelowi Brennanowi za pomys³

# Arnold Robbins, arnold@@gnu.org, Public Domain
# August 1995

function usage()
@{
    print "sk³adnia: awksed wzr zast [pliki...]" > "/dev/stderr"
    exit 1
@}

@group
BEGIN @{
    # kontrola poprawno¶ci argumentów
    if (ARGC < 3)
        usage()
@end group

    RS = ARGV[1]
    ORS = ARGV[2]

    # nie u¿ywaj argumentów jako plików
    ARGV[1] = ARGV[2] = ""
@}

# patrzaj, bez trzymanki!
@{
    if (RT == "")
        printf "%s", $0
    else
        print
@}
@c endfile
@c @end group
@end example

Program opiera siê na zdolno¶ci @code{gawk} do obs³ugi @code{RS} jako
wyra¿enia regularnego, oraz na przypisywaniu zmiennej @code{RT} tekstu,
jaki faktycznie
zakoñczy³ rekord (@pxref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}).

Pomys³ polega na tym, by w @code{RS} by³ wzorzec do wyszukania. @code{gawk}
automatycznie przypisze do @code{$0} tekst pomiêdzy dopasowaniami wzorca.
To tekst, który chcemy pozostawiæ bez zmian.  Nastêpnie, dziêki przypisaniu
tekst zastêpuj±cego do @code{ORS}, pojedyncza instrukcja @code{print}
wypisze tekst, jaki chcemy zostawiæ, a po nim tekst zast±pienia.

W tym schemacie jest pewna zagwozdka: co zrobiæ, je¶li ostatni rekord nie
koñczy siê tekstem pasuj±cym do @code{RS}?  Skorzystanie z instrukcji
@code{print} powoduje bezwarunkowe wypisanie tekstu zast±pienia, co nie jest
poprawne.

Je¶li jednak plik nie koñczy siê tekstem pasuj±cym do @code{RS}, to @code{RT}
zostanie przypisany ³añcuch pusty.  W tym przypadku mo¿emy wypisaæ @code{$0}
za pomoc± @code{printf}
(@pxref{Printf, ,Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}}).

Regu³a @code{BEGIN} obs³uguje konfiguracjê, kontrolê poprawnej liczby
argumentów i w przypadku problemów wywo³anie @code{usage}.  Nastêpnie
inicjuje @code{RS} i @code{ORS} argumentami wiersza poleceñ i przypisuje
@code{ARGV[1]} i @code{ARGV[2]} ³añcuch pusty, by nie zosta³y potraktowane
jak nazwy plików (@pxref{ARGC i ARGV, , U¿ywanie @code{ARGC} i @code{ARGV}}).

Funkcja @code{usage} wypisuje komunikat o b³êdzie i koñczy pracê programu.

Wreszcie, jedyna regu³a g³ówna obs³uguje nakre¶lony powy¿ej schemat
tworzenia wyj¶cia za pomoc± odpowiednio @code{print} lub @code{printf},
w zale¿no¶ci od warto¶ci @code{RT}.

@ignore
Exercise, compare the performance of this version with the more
straightforward:

BEGIN {
    pat = ARGV[1]
    repl = ARGV[2]
    ARGV[1] = ARGV[2] = ""
}

{ gsub(pat, repl); print }

Exercise: what are the advantages and disadvantages of this version vs. sed?
  Advantage: egrep regexps
             speed (?)
  Disadvantage: no & in replacement text

Others?
@end ignore

@node Program igawk, , Prosty sed, Rozmaite programy
@subsection £atwa metoda korzystania z funkcji bibliotecznych

Korzystanie z funkcji bibliotecznych w @code{awk} mo¿e byæ bardzo korzystne.
Zachêca do wielokrotnego u¿ywania kodu i pisania ogólnych funkcji.  Programy
s± mniejsze, zatem czytelniejsze.  Jednak stosowanie funkcji bibliotecznych
jest ³atwe tylko przy pisaniu programów @code{awk}.  Jest bolesne przy ich
uruchamianiu, gdy¿ wymaga wielu opcji @samp{-f}.  Je¶li nie jest dostêpny
@code{gawk}, to niedostêpna jest te¿ zmienna ¶rodowiska @code{AWKPATH}
i mo¿liwo¶æ umieszczenia funkcji @code{awk} w katalogu
bibliotek (@pxref{Opcje, ,Opcje wiersza poleceñ}).

By³oby mi³o, gdyby¶my mogli napisaæ program tak:

@example
# funkcje biblioteczne
@@include getopt.awk
@@include join.awk
@dots{}

# program g³ówny
BEGIN @{
    while ((c = getopt(ARGC, ARGV, "a:b:cde")) != -1)
        @dots{}
    @dots{}
@}
@end example

Poni¿szy program, @file{igawk.sh}, udostêpnia tak± obs³ugê.  Symuluje
wyszukiwanie przez @code{gawk} zmiennej @code{AWKPATH}, pozwala te¿ na
@dfn{zagnie¿d¿one} do³±czenia, tj.@: plik, który zosta³ do³±czony za pomoc±
@samp{@@include} mo¿e zawieraæ dalsze instrukcje @samp{@@include}.
@code{igawk} bêdzie usi³owa³ do³±czaæ pliki tylko raz, by zagnie¿d¿one
do³±czenia nie spowodowa³y przypadkowo dwukrotnego do³±czenia funkcji
bibliotecznej.

@code{igawk} zewnêtrznie powinien zachowywaæ siê tak jak @code{gawk}.
To znaczy, ¿e powinien przyjmowaæ wszystkie argumenty wiersza poleceñ
@code{gawk}, ³±cznie z mo¿liwo¶ci± podania wielu nazw plików ¼ród³owych
poprzez @samp{-f}, i mo¿liwo¶ci± przeplatania plików ¼ród³owych z wiersza
poleceñ i bibliotecznych.

Program napisano za pomoc± jêzyka poleceñ Pow³oki POSIX (POSIX Shell,
@code{sh}).  Dzia³a w nastêpuj±cy sposób:

@enumerate
@item
Pêtla po argumentach, zachowuj±ca wszystko, co nie reprezentuje kodu
¼ród³owego @code{awk}, na pó¼niej, gdy zostanie uruchomiony rozwiniêty
program.

@item
Zachowanie ewentualnych argumentów nie reprezentuj±cych tekstu @code{awk}
w pliku tymczasowym, który zostanie rozwiniêty.  Mamy dwa przypadki.

@enumerate a
@item
Tekst dos³owny, dostarczony przez @samp{--source} lub @samp{--source=}.
Ten tekst jest po prostu bezpo¶rednio powtarzany przez program @code{echo},
który samoczynnie zapewni koñcowy znak nowej linii.

@item
Nazwy plików dostarczone przez @samp{-f}.  Stosujemy ³adn± sztuczkê,
i powtarzamy echem @samp{@@include @var{nazwapliku}} do pliku tymczasowego.
Poniewa¿ program do³±czania bêdzie dzia³a³ w ten sam sposób, co @code{gawk},
spowoduje to w³±czenie tekstu pliku do programu w odpowiednim miejscu.
@end enumerate

@item
Uruchomienie programu napisanego w @code{awk} (naturalnie) z utworzonym
plikiem tymczasowym jako plikiem danych, by rozwin±æ instrukcje
@samp{@@include}.  Rozwiniêty program umieszczany jest w drugim pliku
tymczasowym.

@item
Uruchomienie rozwiniêtego programu za pomoc± @code{gawk}, z pozosta³ymi
pocz±tkowymi argumentami wiersza poleceñ podanymi przez u¿ytkownika (jak
nazwy plików danych).
@end enumerate

Pocz±tkowa czê¶æ programu w³±cza ¶ledzenie w pow³oce je¶li pierwszym
argumentem by³o @samp{debug}.  W przeciwnym razie, instrukcja @code{trap}
pow³oki organizuje sprz±tanie plików tymczasowych przy zakoñczeniu lub
przerwaniu pracy programu.

@c 2e: For the temp file handling, go with Darrel's ig=${TMP:-/tmp}/igs.$$
@c 2e: or something as similar as possible.

Nastêpna czê¶æ jest pêtl± po wszystkich argumentach wiersza poleceñ.
Mamy kilka interesuj±cych nas kilka przypadków.

@table @code
@item --
Ta opcja koñczy argumenty @code{igawk}.  Ca³a reszta powinna bez dalszej
analizy zostaæ przekazana do programu @code{awk} u¿ytkownika.

@item -W
Wskazuje, ¿e nastêpna opcja jest specyficzna dla @code{gawk}.  W celu
u³atwienia przetwarzania argumentów, przed pozosta³ymi argumentami
dopisywane jest @samp{-W} a pêtla kontynuuje dzia³anie.
(To trik programowania w @code{sh}.  Nie przejmuj siê nim, je¶li nie znasz
@code{sh}.)

@item -v
@itemx -F
S± zapamiêtywane i przekazywane do @code{gawk}.

@item -f
@itemx --file
@itemx --file=
@itemx -Wfile=
Nazwa pliku zapamiêtywana jest w pliku tymczasowym @file{/tmp/ig.s.$$}
za pomoc± instrukcji @samp{@@include}.
Do usuniêcia pocz±tkowej, opcyjnej czê¶ci argumentu (np., @samp{--file=})
wykorzystywane jest narzêdzie @code{sed}.

@item --source
@itemx --source=
@itemx -Wsource=
Tekst ¼ród³owy jest zapisywany do @file{/tmp/ig.s.$$}.

@item --version
@itemx -Wversion
@code{igawk} wypisuje swój numer wersji, uruchamia @samp{gawk --version},
by uzyskaæ informacjê o wersji @code{gawk}, a nastêpnie koñczy pracê.
@end table

Je¶li nie podano ¿adnej z opcji @samp{-f}, @samp{--file}, @samp{-Wfile},
@samp{--source}, ani @samp{-Wsource}, to pierwszy nie bêd±cy opcj±
argument powinien byæ programem @code{awk}.  Je¿eli nie pozosta³y ju¿
¿adne argumenty wiersza poleceñ, @code{igawk} wypisze komunikat o
b³êdzie i zakoñczy pracê.  W przeciwnym razie, pierwszy argument powtarzany
jest echem do @file{/tmp/ig.s.$$}.

W ka¿dym z przypadków, po przetworzeniu argumentów plik @file{/tmp/ig.s.$$}
zawiera pe³ny tekst pierwotnego programu @code{awk}.

Zapis @samp{$$} w @code{sh} reprezentuje numeryczny identyfikator bie¿±cego
procesu.  W programach pow³oki jest czêsto wykorzystywany do tworzenia
niepowtarzalnych nazw plików tymczasowych.  Pozwala to na równoczesne
uruchamianie @code{igawk} przez wielu u¿ytkowników bez obawy o konflikt nazw
plików tymczasowych.

@cindex @code{sed}, narzêdzie
@cindex narzêdzie @code{sed}
Oto i nasz program:

@findex igawk.sh
@example
@c @group
@c file eg/prog/igawk.sh
#! /bin/sh

# igawk --- jak gawk, ale przetwarza @@include
# Arnold Robbins, arnold@@gnu.org, Public Domain
# July 1993

if [ "$1" = debug ]
then
    set -x
    shift
else
    # sprz±tanie przy zakoñczeniu i otrzymaniu
    # hangup, interrupt, quit, termination

    trap 'rm -f /tmp/ig.[se].$$' 0 1 2 3 15
fi

while [ $# -ne 0 ] # pêtla po argumentach
do
    case $1 in
    --)     shift; break;;

    -W)     shift
            set -- -W"$@@"
            continue;;

    -[vF])  opts="$opts $1 '$2'"
            shift;;

    -[vF]*) opts="$opts '$1'" ;;

    -f)     echo @@include "$2" >> /tmp/ig.s.$$
            shift;;

@group
    -f*)    f=`echo "$1" | sed 's/-f//'`
            echo @@include "$f" >> /tmp/ig.s.$$ ;;
@end group

    -?file=*)    # -Wfile lub --file
            f=`echo "$1" | sed 's/-.file=//'`
            echo @@include "$f" >> /tmp/ig.s.$$ ;;

    -?file)    # get arg, $2
            echo @@include "$2" >> /tmp/ig.s.$$
            shift;;

    -?source=*)    # -Wsource lub --source
            t=`echo "$1" | sed 's/-.source=//'`
            echo "$t" >> /tmp/ig.s.$$ ;;

    -?source)  # pobierz argument, $2
            echo "$2" >> /tmp/ig.s.$$
            shift;;

    -?version)
            echo igawk: version 1.0 1>&2
            gawk --version
            exit 0 ;;

    -[W-]*)    opts="$opts '$1'" ;;

    *)      break;;
    esac
    shift
done

if [ ! -s /tmp/ig.s.$$ ]
then
    if [ -z "$1" ]
    then
         echo igawk: brak programu! 1>&2
         exit 1
    else
        echo "$1" > /tmp/ig.s.$$
        shift
    fi
fi

# w tym momencie w /tmp/ig.s.$$ jest koñcowy program
@c endfile
@c @end group
@end example

Program @code{awk} do przetwarzania dyrektyw @samp{@@include} czyta
po jednym wierszu utworzony program, u¿ywaj±c @code{getline}
(@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).  Nazwy plików
wej¶ciowych i instrukcje @samp{@@include} zarz±dzane s± z wykorzystaniem
stosu.  Za ka¿dym razem, gdy napotkane zostanie @samp{@@include}, nazwa
bie¿±cego pliku umieszczana jest na stosie, a plik wymieniony w dyrektywie
@samp{@@include} staje siê bie¿±cym plikiem wej¶ciowym.  Po zakoñczeniu
ka¿dego pliku, ze stosu zdejmowana jest nazwa poprzedniego pliku
wej¶ciowego, który staje siê ponownie bie¿±cym plikiem.  Proces rozpoczyna
siê od umieszczenia pierwotnego pliku jako pierwszego na stosie.

Funkcja @code{pathto} zajmuje siê znajdowaniem pe³nej ¶cie¿ki do pliku.
Symuluje zachowanie siê @code{gawk} przy przeszukiwaniu zmiennej
@code{AWKPATH}
(@pxref{Zmienna AWKPATH, ,Zmienna ¶rodowiska @code{AWKPATH}}).
Je¶li nazwa pliku zawiera @samp{/}, to nie jest wykonywane przeszukiwanie
¶cie¿ki.  W przeciwnym razie, nazwa pliku sklejana jest z nazw± ka¿dego
z katalogów ¶cie¿ki i wykonywana jest próba otwarcia pliku o tak utworzonej
nazwie.  Jedyn± metod± sprawdzenia w @code{awk} czy mo¿na odczytaæ plik jest
spróbowanie i podjêcie odczytania go za pomoc± @code{getline}: to w³a¶nie
robi @code{pathto} @footnote{W niektórych bardzo starych wersjach @code{awk},
test @samp{getline smiec < t} mo¿e siê zapêtliæ je¶li plik istnieje, ale
jest pusty.  Caveat Emptor [t³um.: przys³.³ac. "Niech siê strze¿e
kupuj±cy"].} Je¿eli mo¿na przeczytaæ plik, to jest on zamykany i zwracana
jest jego nazwa.
@ignore
An alternative way to test for the file's existence would be to call
@samp{system("test -r " t)}, which uses the @code{test} utility to see if
the file exists and is readable.  The disadvantage to this method is that it
requires creating an extra process, and can thus be slightly slower.
@end ignore

@example
@c file eg/prog/igawk.sh
gawk -- '
# przetwarza dyrektywy @@include
@c endfile

@group
@c file eg/prog/igawk.sh
function pathto(file,    i, t, smiec)
@{
    if (index(file, "/") != 0)
        return file

    for (i = 1; i <= ndirs; i++) @{
        t = (pathlist[i] "/" file)
        if ((getline smiec < t) > 0) @{
            # mamy go
            close(t)
            return t
        @}
    @}
    return ""
@}
@c endfile
@end group
@end example

Program g³ówny zawiera siê w jednej regule @code{BEGIN}.  Pierwsz±
rzecz±, jak± robi, jest zainicjowanie tablicy @code{pathlist}, której
u¿ywa @code{pathto}.  Po podziale ¶cie¿ki w miejscach @samp{:}, elementy
puste zastêpowane s± przez @code{"."}, co oznacza katalog bie¿±cy.

@example
@group
@c file eg/prog/igawk.sh
BEGIN @{
    path = ENVIRON["AWKPATH"]
    ndirs = split(path, pathlist, ":")
    for (i = 1; i <= ndirs; i++) @{
        if (pathlist[i] == "")
            pathlist[i] = "."
    @}
@c endfile
@end group
@end example

Stos inicjowany jest warto¶ci± @code{ARGV[1]}, któr± bêdzie
@file{/tmp/ig.s.$$}.  Nastêpnie mamy g³ówn± pêtlê.  Kolejno czytane s±
wiersze wej¶ciowe.  Wiersze, które nie rozpoczynaj± siê od @samp{@@include}
wypisywane s± dos³ownie.

Je¿eli dany wiersz zaczyna siê od @samp{@@include}, to nazwa pliku jest
w @code{$2}.  Do utworzenia pe³nej ¶cie¿ki wywo³ywana jest @code{pathto}.
Je¶li siê to nie powiod³o, wypisujemy komunikat o b³êdzie i kontynuujemy.

Nastêpn± rzecz± do sprawdzenia jest to, czy plik zosta³ ju¿ przez nas
do³±czony.  Tablica @code{processed} zaindeksowana jest pe³nymi nazwami
ka¿dego do³±czonego pliku i zapamiêtuje dla nas tê informacjê.  Je¿eli plik
ju¿ obs³ugiwano, to wypisywany jest komunikat ostrzegawczy.  W przeciwnym
razie, nazwa nowego pliku jest umieszczana na stosie a przetwarzanie
kontynuowane.

Na koniec, gdy @code{getline} napotka koniec pliku wej¶ciowego, plik ten
jest zamykany a ze stosu jest zdejmowana nazwa poprzedniego.
Gdy @code{stackptr} jest mniejsze od zera, to program jest zakoñczony.

@example
@c @group
@c file eg/prog/igawk.sh
    stackptr = 0
    input[stackptr] = ARGV[1] # ARGV[1] jest pierwszym plikiem

    for (; stackptr >= 0; stackptr--) @{
        while ((getline < input[stackptr]) > 0) @{
            if (tolower($1) != "@@include") @{
                print
                continue
            @}
            fpath = pathto($2)
            if (fpath == "") @{
                printf("igawk:%s:%d: nie mo¿na znale¼æ %s\n", \
                    input[stackptr], FNR, $2) > "/dev/stderr"
                continue
            @}
@group
            if (! (fpath in processed)) @{
                processed[fpath] = input[stackptr]
                input[++stackptr] = fpath
            @} else
                print $2, "do³±czony w", input[stackptr], \
                    "ju¿ do³±czony w", \
                    processed[fpath] > "/dev/stderr"
        @}
@end group
@group
        close(input[stackptr])
    @}
@}' /tmp/ig.s.$$ > /tmp/ig.e.$$
@end group
@c endfile
@c @end group
@end example

Ostatnim krokiem jest wywo³anie @code{gawk} z rozwiniêtym programem i
pierwotnymi, podanymi przez u¿ytkownika, opcjami i argumentami wiersza
poleceñ.  Kod zakoñczenia zwrócony przez @code{gawk} odsy³any jest do
programu wywo³uj±cego @code{igawk}.

@c this causes more problems than it solves, so leave it out.
@ignore
The special file @file{/dev/null} is passed as a data file to @code{gawk}
to handle an interesting case. Suppose that the user's program only has
a @code{BEGIN} rule, and there are no data files to read. The program should exit without reading any data
files.  However, suppose that an included library file defines an @code{END}
rule of its own. In this case, @code{gawk} will hang, reading standard
input. In order to avoid this, @file{/dev/null} is explicitly to the
command line. Reading from @file{/dev/null} always returns an immediate
end of file indication.

@c Hmm. Add /dev/null if $# is 0?  Still messes up ARGV. Sigh.
@end ignore

@example
@c @group
@c file eg/prog/igawk.sh
eval gawk -f /tmp/ig.e.$$ $opts -- "$@@"

exit $?
@c endfile
@c @end group
@end example

Pokazana wersja @code{igawk} jest moim trzecim podej¶ciem do tego programu.
Oto trzy kluczowe uproszczenia, które spowodowa³y, ¿e program dzia³a lepiej.

@enumerate
@item
Zastosowanie @samp{@@include} nawet do plików wskazanych przez @samp{-f}
znacznie upraszcza zbudowanie wstêpnie posk³adanego programu @code{awk}.
Ca³o¶æ przetwarzania @samp{@@include} mo¿na wykonaæ jednokrotnie.

@item
Funkcja @code{pathto} nie usi³uje zapamiêtaæ wiersza odczytanego za pomoc±
@code{getline} przy sprawdzaniu dostêpno¶ci pliku.  Próba zapamiêtania tego
wiersza do wykorzystania w programie g³ównym znacznie komplikuje sprawê.
@c what problem does this engender though - exercise
@c answer, reading from "-" or /dev/stdin

@item
Pêtla @code{getline} w regule @code{BEGIN} robi wszystko w jednym
miejscu.  Nie jest konieczne tworzenie osobnej pêtli
do przetwarzania zagnie¿d¿onych instrukcji @samp{@@include}.
@end enumerate

Program ten pokazuje tak¿e, ¿e czêsto warto po³±czyæ programowanie
w @code{sh} i @code{awk}.  Zwykle mo¿na sporo osi±gn±æ, bez potrzeby
uciekania siê do niskopoziomowego programowania w C czy C++, a czêsto
³atwiej wykonaæ pewne rodzaje operacji na ³añcuchach czy argumentach
korzystaj±c z pow³oki ni¿ z @code{awk}.

Wreszcie, @code{igawk} pokazuje, ¿e nie zawsze konieczne jest dodawanie
do programu nowych funkcji: mo¿na je czêsto umie¶ciæ w wy¿szej warstwie.
Z @code{igawk} nie ma faktycznego powodu wbudowywania przetwarzania
@samp{@@include} w sam @code{gawk}.

Jako dodatkowy przyk³ad tego, rozwa¿my pomys³ umieszczenia dwu plików
w katalogu ze ¶cie¿ki wyszukiwania.

@table @file
@item default.awk
Plik ten zawiera³by zbiór domy¶lnych funkcji bibliotecznych, jak
@code{getopt} i @code{assert}.

@item site.awk
Ten plik zawiera³by funkcje biblioteczne swoiste dla danego miejsca
czy  instalacji, tj.@: funkcji opracowanych lokalnie.  Posiadanie osobnego
pliku pozwala na zmianê @file{default.awk} przy nowych edycjach @code{gawk},
bez potrzeby ka¿dorazowej aktualizacji go przez administratora systemu przez
dodawanie funkcji lokalnych.
@end table

Pewien u¿ytkownik
@c Karl Berry, karl@ileaf.com, 10/95
zasugerowa³ zmodyfikowanie @code{gawk} tak, by przy uruchomieniu
automatycznie czyta³ te pliki.  Zamiast tego, bardzo ³atwo by³oby zmieniæ
@code{igawk}, by to robi³.  Poniewa¿ @code{igawk} potrafi przetwarzaæ
zagnie¿d¿one dyrektywy @samp{@@include}, plik @file{default.awk} móg³by po
prostu zawieraæ instrukcje @samp{@@include} dla ¿±danych funkcji
bibliotecznych.

@c Exercise: make this change

@node Historia jêzyka, Podsumowanie gawk, Przyk³adowe programy, Top
@chapter Ewolucja jêzyka @code{awk}

W tej ksi±¿ce opisano implementacjê GNU narzêdzia @code{awk}, przestrzegaj±c±
specyfikacji POSIX.  Wielu u¿ytkowników @code{awk} zna tylko pierwotn±
implementacjê @code{awk} z Unix Version 7.  (Implementacja ta by³a baz± dla
@code{awk} w Berkeley Unix, a¿ do 4.3--Reno.  Wydanie 4.4 Berkeley Unix
korzysta z @code{gawk} 2.15.2 jako w³asnej wersji @code{awk}.)
W tym rozdziale pokrótce opisano ewolucjê jêzyka @code{awk}, z odsy³aczami
do innej czê¶ci ksi±¿ki, gdzie mo¿na znale¼æ wiêcej informacji.

@menu
* V7/SVR3.1::                G³ówne zmiany miêdzy V7 a System V Release 3.1.
* SVR4::                     Pomniejsze zmiany miêdzy System V Release 3.1
                             a Release 4.
* POSIX::                    Nowe cechy ze standardu POSIX.
* BTL::                      Nowe cechy z wersji @code{awk} z Bell
                             Laboratories.
* POSIX/GNU::                Rozszerzenia w @code{gawk} nie wystêpuj±ce
                             w POSIX @code{awk}.
@end menu

@node V7/SVR3.1, SVR4, Historia jêzyka, Historia jêzyka
@section G³ówne ró¿nice miêdzy V7 a SVR3.1

Jêzyk @code{awk} znacz±co ewoluowa³ pomiêdzy wydaniem Version 7 Unix (1978)
a now± wersj±, po raz pierwszy ogólnie dostêpn± w System V Release 3.1
(1987).  W niniejszej sekcji podsumowano zmiany, z odsy³aczami do
dodatkowych szczegó³ów.

@itemize @bullet
@item
Wymaganie @samp{;} do rozdzielania regu³ w wierszu
(@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}).

@item
Funkcje definiowane przez u¿ytkownika, instrukcja @code{return}
(@pxref{U¿ytkownika, ,Funkcje u¿ytkownika}).

@item
Instrukcja @code{delete} (@pxref{Delete, ,Instrukcja @code{delete}}).

@item
Instrukcja @code{do}-@code{while}
(@pxref{Instrukcja do, ,Instrukcja @code{do}-@code{while}}).

@item
Funkcje wbudowane @code{atan2}, @code{cos}, @code{sin}, @code{rand} i
@code{srand} (@pxref{Funkcje numeryczne, ,Wbudowane funkcje numeryczne}).

@item
Funkcje wbudowane @code{gsub}, @code{sub} i @code{match}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

@item
Funkcje wbudowane @code{close} i @code{system}
(@pxref{Funkcje I/O, ,Wbudowane funkcje wej¶cia/wyj¶cia}).

@item
Zmienne wbudowane @code{ARGC}, @code{ARGV}, @code{FNR}, @code{RLENGTH},
@code{RSTART} i @code{SUBSEP} (@pxref{Zmienne wbudowane}).

@item
Wyra¿enie warunkowe stosuj±ce operator trójargumentowy @samp{?:}
(@pxref{Wyra¿enia warunkowe, ,Wyra¿enia warunkowe}).

@item
Operator potêgowania @samp{^}
(@pxref{Operatory arytmetyczne, ,Operatory arytmetyczne}) i odpowiadaj±ca mu
postaæ operatora przypisania @samp{^=}
(@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).

@item
Priorytet operatorów zgodny z C, co psuje niektóre stare programy @code{awk}
(@pxref{Priorytet, , Priorytet operatorów)}).

@item
Wyra¿enia regularne jako warto¶æ @code{FS}
(@pxref{Separatory pól, ,Jak rozdzielaæ pola}), i jako trzeci argument
funkcji @code{split}
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

@item
Dynamiczne wyra¿enia regularne jako operandy operatorów @samp{~} i @samp{!~}
(@pxref{U¿ywanie regexp, , Jak stosowaæ wyra¿enia regularne}).

@item
Sekwencje specjalne @samp{\b}, @samp{\f} i @samp{\r}
(@pxref{Sekwencje specjalne}).
(Niektórzy producenci zaktualizowali swoje stare wersje @code{awk} tak, by
rozpoznawa³y @samp{\r}, @samp{\b}, and @samp{\f}, ale nie jest to co¶, na
czym mo¿na polegaæ.)

@item
Przekierowanie wej¶cia funkcji @code{getline}
(@pxref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}).

@item
Wiele regu³ @code{BEGIN} i @code{END}
(@pxref{BEGIN/END, ,Wzorce specjalne @code{BEGIN} i @code{END}}).

@item
Tablice wielowymiarowe
(@pxref{Wielowymiarowe, ,Tablice wielowymiarowe}).
@end itemize

@node SVR4, POSIX, V7/SVR3.1, Historia jêzyka
@section Ró¿nice miêdzy SVR3.1 a SVR4

@cindex jêzyk @code{awk}, wersja V.4
W uniksowej wersji @code{awk} z System V Release 4 wersja dodano takie
funkcje (czê¶æ z nich zosta³a zapocz±tkowana w @code{gawk}):

@itemize @bullet
@item
Zmienna @code{ENVIRON} (@pxref{Zmienne wbudowane}).

@item
Wiele opcji @samp{-f} w wierszu poleceñ
(@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Opcja @samp{-v} do przypisywania zmiennych przed rozpoczêciem wykonywania
programu (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Opcja @samp{--} do koñczenia opcji wiersza poleceñ.

@item
Sekwencje specjalne @samp{\a}, @samp{\v} i @samp{\x}
(@pxref{Sekwencje specjalne}).

@item
Zdefiniowana warto¶æ zwracana przez funkcjê wbudowan± @code{srand}
(@pxref{Funkcje numeryczne, ,Wbudowane funkcje numeryczne}).

@item
Wbudowane funkcje ³añcuchowe @code{toupper} i @code{tolower}
do konwersji wielko¶ci liter
(@pxref{Funkcje ³añcuchowe, ,Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

@item
Ja¶niejsza specyfikacja @samp{%c}, litery steruj±cej formatem funkcji
@code{printf} (@pxref{Litery steruj±ce, ,Litery steruj±ce formatem}).

@item
Mo¿liwo¶æ dynamicznego przekazywania szeroko¶ci pola i dok³adno¶ci
(@code{"%*.*d"}) w li¶cie argumentów funkcji @code{printf}
(@pxref{Litery steruj±ce, ,Litery steruj±ce formatem}).

@item
Stosowanie sta³ych wyra¿eñ regularnych, jak @code{/foo/}, jako wyra¿eñ,
równowa¿nych u¿yciu operatora dopasowania, jak w @samp{$0 ~ /foo/}
(@pxref{U¿ywanie sta³ych regexp, ,U¿ywanie sta³ych regexp}).
@end itemize

@node POSIX, BTL, SVR4, Historia jêzyka
@section Ró¿nice miêdzy SVR4 a POSIX @code{awk}

W POSIX-owym standardzie jêzyka poleceñ i narzêdzi (Command Language and
Utilities) wprowadzono nastêpuj±ce zmiany do jêzyka @code{awk}:

@itemize @bullet
@item
U¿ycie @samp{-W} dla opcji zale¿nych od implementacji.

@item
Zastosowanie @code{CONVFMT} do sterowania konwersj± liczb na ³añcuchy
(@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}).

@item
Pojêcie ³añcucha liczbowego, i ¶ci¶lejsze regu³y porównañ z tym zwi±zane
(@pxref{Typy i porównania, ,Typy zmiennych i wyra¿enia porównania}).

@item
Pe³niejsze udokumentowanie wielu uprzednio nieudokumentowanych cech jêzyka.
@end itemize

Poni¿sze popularne rozszerzenia nie s± dozwolone przez standard POSIX:

@c IMPORTANT! Keep this list in sync with the one in node Options

@itemize @bullet
@item
Nie s± rozpoznawane sekwencje specjalne @code{\x}
(@pxref{Sekwencje specjalne}).

@item
Znaki nowej linii nie dzia³aj± jak bia³e znaki do oddzielania pól
gdy @code{FS} jest równe pojedynczej spacji.

@item
Nie jest rozpoznawany synonim @code{func} s³owa kluczowego @code{function}
(@pxref{Sk³adnia definicji, ,Sk³adnia definicji funkcji}).

@item
Nie mo¿na u¿ywaæ operatorów @samp{**} i @samp{**=} zamiast @samp{^} i
@samp{^=} (@pxref{Operatory arytmetyczne, ,Operatory arytmetyczne}, a tak¿e
@pxref{Operatory przypisania, ,Wyra¿enia przypisania}).

@item
Podanie @samp{-Ft} w wierszu poleceñ nie nadaje @code{FS} warto¶ci
pojedynczej tabulacji (@pxref{Separatory pól, ,Jak rozdzielaæ pola}).

@item
Nie jest obs³ugiwana funkcja wbudowana @code{fflush}
(@pxref{Funkcje I/O, , Wbudowane funkcje wej¶cia/wyj¶cia}).
@end itemize

@node BTL, POSIX/GNU, POSIX, Historia jêzyka
@section Rozszerzenia w @code{awk} z Bell Laboratories

@cindex Kernighan, Brian
Brian Kernighan, jeden z pierwotnych projektantów uniksowego @code{awk},
udostêpni³ swoj± wersjê przez anonimowe @code{ftp}
(@pxref{Inne wersje, ,Inne swobodnie dostêpne implementacje @code{awk}}).
Opisujemy tu te rozszerzenia w jego wersji @code{awk}, które nie wystêpuj±
w POSIX-owym @code{awk}.

@itemize @bullet
@item
Opcje wiersza poleceñ @samp{-mf @var{NNN}} i @samp{-mr @var{NNN}} do
ustawiania, odpowiednio, maksymalnej liczby pól i maksymalnego rozmiaru
rekordu (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Funkcja wbudowana @code{fflush} do opró¿niania buforowanego wyj¶cia
(@pxref{Funkcje I/O, ,Wbudowane funkcje wej¶cia/wyj¶cia}).

@ignore
@item
Tablica @code{SYMTAB}, która pozwla na dostêp do wewnêtrznej tablicy symboli
@code{awk}. Cecha ta nie jest udokumentowana, g³ównie dlatego, ¿e jest
zaimplementowana nieco niepewnie.  Na przyk³ad, nie mo¿na poprzez ni±
     somewhat shakily implemented.
siêgn±æ do tablic czy elementów tablic.
@end ignore
@end itemize

@node POSIX/GNU, , BTL, Historia jêzyka
@section Rozszerzenia @code{gawk} poza POSIX @code{awk}

@cindex tryb zgodno¶ci
@cindex zgodno¶ci, tryb
Implementacja GNU, @code{gawk}, dodaje wiele mo¿liwo¶ci.
W tej sekcji opisano je w kolejno¶ci, w jakiej by³y dodawane do @code{gawk}.
Mo¿na je wy³±czyæ za pomoc± opcji albo @samp{--traditional}
albo @samp{--posix} (@pxref{Opcje, ,Opcje wiersza poleceñ}).

W wersji 2.10 @code{gawk} wprowadzono takie cechy:

@itemize @bullet
@item
Zmienna ¶rodowiska @code{AWKPATH} do okre¶lania ¶cie¿ki wyszukiwania dla
opcji @samp{-f} wiersza poleceñ (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Zmienna @code{IGNORECASE} i jej skutki
(@pxref{Wielko¶æ liter, ,Wielko¶æ liter w dopasowaniach}).

@item
Interpretacja nazw plików @file{/dev/stdin}, @file{/dev/stdout},
@file{/dev/stderr} i @file{/dev/fd/@var{n}}
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}).
@end itemize

W wersji 2.13 @code{gawk} wprowadzono takie cechy:

@itemize @bullet
@item
Zmienna @code{FIELDWIDTHS} i jej skutki
(@pxref{Sta³y rozmiar, ,Czytanie danych o sta³ej szeroko¶ci}).

@item
Funkcje wbudowane @code{systime} i @code{strftime} do uzyskiwania i
wypisywania znaczników czasu
(@pxref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu}).

@item
Opcja @samp{-W lint} do podawania kodu ¼ród³owego i kontroli przeno¶no¶ci
i b³êdów wykonania (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Opcja @samp{-W compat} do wy³±czania tych rozszerzeñ
(@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Opcja @samp{-W posix} do uzyskiwania pe³nej zgodno¶ci z POSIX
(@pxref{Opcje, ,Opcje wiersza poleceñ}).
@end itemize

W wersji 2.14 @code{gawk} wprowadzono takie cechy:

@itemize @bullet
@item
Instrukcja @code{next file} do przechodzenia do nastêpnego pliku
danych (@pxref{Instrukcja nextfile, ,Instrukcja @code{nextfile}}).
@end itemize

W wersji 2.15 @code{gawk} wprowadzono takie cechy:

@itemize @bullet
@item
Zmienna @code{ARGIND}, zapamiêtuj±ca przemieszczanie siê @code{FILENAME}
przez @code{ARGV} (@pxref{Zmienne wbudowane}).

@item
Zmienna @code{ERRNO}, która zawiera komunikat o b³êdzie systemowym gdy
@code{getline} zwróci @minus{}1 lub zawiedzie @code{close}
(@pxref{Zmienne wbudowane}).

@item
Mo¿liwo¶æ stosowania d³ugich nazw opcji w stylu GNU, rozpoczynaj±cych siê
od @samp{--} (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Opcja @samp{--source} do przeplatania kodu ¼ród³owego z wiersza poleceñ i
plików bibliotecznych (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Interpretacja nazw plików @file{/dev/pid}, @file{/dev/ppid},
@file{/dev/pgrpid} i @file{/dev/user}
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}).
@end itemize

W wersji 3.0 @code{gawk} wprowadzono takie cechy:

@itemize @bullet
@item
Instrukcja @code{next file} sta³a siê @code{nextfile}
(@pxref{Instrukcja nextfile, ,Instrukcja @code{nextfile}}).

@item
Opcja @samp{--lint-old}, ostrzegaj±ca o konstrukcjach, które nie s± dostêpne
w pierwotnej wersji @code{awk} z Version 7 Unix
(@pxref{V7/SVR3.1, , G³ówne ró¿nice miêdzy V7 a SVR3.1}).

@item
Dodano opcjê @samp{--traditional} jako lepsz± nazwê dla
@samp{--compat} (@pxref{Opcje, ,Opcje wiersza poleceñ}).

@item
Mo¿liwo¶æ, by @code{FS} by³o ³añcuchem pustym, równie¿ trzeci argument
@code{split} mo¿e byæ ³añcuchem pustym
(@pxref{Pola jednoznakowe, , Jak z ka¿dego znaku zrobiæ osobne pole}).

@item
Mo¿liwo¶æ, by @code{RS} by³o wyra¿eniem regularnym
(@pxref{Rekordy, , Jak wej¶cie dzielone jest na rekordy}).

@item
Zmienna @code{RT}
(@pxref{Rekordy, , Jak wej¶cie dzielone jest na rekordy}).

@item
Funkcja @code{gensub} do efektywniejszego operowania na tek¶cie
(@pxref{Funkcje ³añcuchowe, , Funkcje wbudowane dzia³aj±ce na ³añcuchach}).

@item
Funkcja @code{strftime} uzyska³a domy¶lny format czasu, pozwalaj±cy na
wywo³ywanie jej bez argumentów
(@pxref{Funkcje czasu,  , Funkcje obs³ugi znaczników czasu}).

@item
Pe³na obs³uga zarówno wyra¿eñ regularnych POSIX, jak i GNU
(@pxref{Regexp, , Regular Expressions}).

@item
Opcja @samp{--re-interval} do udostêpniania wyra¿eñ przedzia³owych
w wyra¿eniach regularnych
(@pxref{Operatory regexp, , Operatory wyra¿eñ regularnych}).

@item
Zmienione @code{IGNORECASE}, obecnie stosowane zarówno tak do porównañ
³añcuchów jak i operacji na wyra¿eniach regularnych.
(@pxref{Wielko¶æ liter, ,Wielko¶æ liter w dopasowaniach}).

@item
Opcja @samp{-m} i funkcja @code{fflush} z wersji @code{awk}
z Bell Labs research
(@pxref{Opcje, ,Opcje wiersza poleceñ}; tak¿e
@pxref{Funkcje I/O, ,Wbudowane funkcje wej¶cia/wyj¶cia}).

@item
U¿ycie GNU Autoconf do sterowania procesem konfiguracji
(@pxref{Szybka instalacja, , Kompilowanie @code{gawk} dla Uniksa}).

@item
Obs³uga Amigi
(@pxref{Instalacja na Amidze, ,Instalowanie @code{gawk} na Amidze}).

@c XXX ADD MORE STUFF HERE

@end itemize

@node Podsumowanie gawk, Instalacja, Historia jêzyka, Top
@appendix Podsumowanie @code{gawk}

Ten dodatek zawiera krótkie podsumowanie wiersza poleceñ @code{gawk}
i jêzyka @code{awk}.  Ma zadanie s³u¿yæ jako ``skrócona instrukcja''.
Z tego powodu jest zwiêz³y, ale kompletny.

@menu
* Podsumowanie wiersza poleceñ::  Streszczenie wiersza poleceñ.
* Podsumowanie jêzyka::           Zwiêz³y przegl±d jêzyka.
* Zmienne/Pola::                  Zmienne, pola i tablice.
* Podsumowanie regu³::            Wzorce i akcje, i ich czê¶ci sk³adowe.
* Podsumowanie akcji::            Krótki przegl±d akcji.
* Podsumowanie funkcji::          Definiowanie i wywo³ywanie funkcji.
* Cechy historyczne::             Nieudokumentowane, ale obs³ugiwane
                                  ``mo¿liwo¶ci''.
@end menu

@node Podsumowanie wiersza poleceñ, Podsumowanie jêzyka, Podsumowanie gawk, Podsumowanie gawk
@appendixsec Podsumowanie opcji wiersza poleceñ

Wiersz poleceñ sk³ada siê z opcji przeznaczonych dla samego @code{gawk},
tekstu programu @code{awk} (je¶li nie podano go przez opcjê @samp{-f})
i warto¶ci, jakie maj± byæ udostêpnione w predefiniowanych zmiennych
@code{ARGC} i @code{ARGV}:

@example
gawk @r{[@var{opcje w stylu POSIX lub GNU}]} -f @var{plik-¼ród³} @r{[@code{--}]} @var{plik} @dots{}
gawk @r{[@var{opcje w stylu POSIX lub GNU}]} @r{[@code{--}]} '@var{program}' @var{plik} @dots{}
@end example

Opcje, które akceptuje @code{gawk}:

@table @code
@item -F @var{sp}
@itemx --field-separator @var{sp}
Wykorzystuje @var{sp} jako separator pól (warto¶æ predefiniowanej
zmiennej @code{FS}).

@item -f @var{plik-programu}
@itemx --file @var{plik-programu}
Czyta program ¼ród³owy @code{awk} z pliku @var{plik-programu}, zamiast
z pierwszego argumentu wiersza poleceñ.

@item -mf @var{NNN}
@itemx -mr @var{NNN}
Flaga @samp{f} ustala maksymaln± liczbê pól, a @samp{r} maksymalny rozmiar
rekordu.  Opcje te s± ignorowane przez @code{gawk}, gdy¿ @code{gawk}
nie ma predefiniowanych ograniczeñ. Wystêpuj± one tylko dla
zachowania zgodno¶ci z wersj± @code{awk} z Bell Labs research.

@item -v @var{zmn}=@var{wart}
@itemx --assign @var{zmn}=@var{wart}
Przed rozpoczêciem wykonywania programu przypisuje zmiennej @var{zmn}
warto¶æ @var{wart}.

@item -W traditional
@itemx -W compat
@itemx --traditional
@itemx --compat
Stosuje tryb zgodno¶ci, w którym rozszerzenia @code{gawk} s± wy³±czone.

@item -W copyleft
@itemx -W copyright
@itemx --copyleft
@itemx --copyright
Wypisuje na standardowym wyj¶ciu krótk± wersjê Powszechnej Licencji
Publicznej (GPL) i koñczy pracê.  Opcja ta mo¿e znikn±æ w kolejnych
wersjach @code{gawk}.

@item -W help
@itemx -W usage
@itemx --help
@itemx --usage
Wypisuje na standardowym wyj¶ciu stosunkowo krótkie podsumowanie dostêpnych
opcji i koñczy pracê.

@item -W lint
@itemx --lint
Daje ostrze¿enia o podejrzanych lub nieprzeno¶nych konstrukcjach @code{awk}.

@item -W lint-old
@itemx --lint-old
Ostrzega o konstrukcjach niedostêpnych w pierwotnej wersji @code{awk}
z Version 7 Unix.

@item -W posix
@itemx --posix
Stosuje tryb zgodno¶ci z POSIX, w którym wy³±czone s± rozszerzenia
@code{gawk} i wprowadzone s± dodatkowe ograniczenia.

@item -W re-interval
@itemx --re-interval
Zezwala na wyra¿enia przedzia³owe
(@pxref{Operatory regexp, , Operatory wyra¿eñ regularnych}),
w wyra¿eniach regularnych.

@item -W source=@var{tekst-programu}
@itemx --source @var{tekst-programu}
Wykorzystuje @var{tekst-programu} jako kod ¼ród³owy programu @code{awk}.
Pozwala na przeplatanie kodu ¼ród³owego z wiersza poleceñ z kodem ¼ród³owym
z plików i jest szczególnie przydatna do u¿ywania programów z wiersza
poleceñ z funkcjami bibliotecznymi.

@item -W version
@itemx --version
Wypisuje na standardowym wyj¶ciu b³êdów informacje o tym konkretnym
egzemplarzu @code{gawk}.

@item --
Sygnalizuje koniec opcji.  Przydatna, gdy chce siê zezwoliæ, by kolejne
argumenty samego programu @code{awk} zaczyna³y siê od @samp{-}.
Wystêpuje g³ównie dla spójno¶ci z wystêpuj±cymi w POSIX konwencjami
analizy sk³adniowej argumentów.
@end table

Wszelkie inne opcje s± zaznaczane jako nieprawid³owe, lecz poza tym s±
ignorowane.
@xref{Opcje, ,Opcje wiersza poleceñ}, gdzie podano szczegó³y.

@node Podsumowanie jêzyka, Zmienne/Pola, Podsumowanie wiersza poleceñ, Podsumowanie gawk
@appendixsec Podsumowanie jêzyka

Program @code{awk} sk³ada siê z ci±gu zera lub wiêcej instrukcji
wzorzec-akcja i opcjonalnych definicji funkcji.  Albo wzorzec albo akcjê
mo¿na pomin±æ.

@example
@var{wzorzec}    @{ @var{instrukcje akcji} @}
@var{wzorzec}
          @{ @var{instrukcje akcji} @}

function @var{nazwa}(@var{lista parametrów})   @{ @var{instrukcje akcji} @}
@end example

@code{gawk} najpierw czyta ¼ród³o programu z @var{pliku-programu} (plików),
je¶li takowe podano, lub z pierwszego nie bêd±cego opcj± argumentu w wierszu
poleceñ.  Opcji @samp{-f} w wierszu poleceñ mo¿na u¿yæ wielokrotnie.
@code{gawk} czyta tekst programu ze wszystkich plików @var{plik-programu},
w praktyce sklejaj±c je w kolejno¶ci, w jakiej je podano.  Przydaje siê to
przy konstruowaniu bibliotek funkcji @code{awk}, bez konieczno¶ci wpisywania
ich w ka¿dy nowy program @code{awk}, jaki z nich korzysta. Chc±c w programie
wpisanym w wierszu poleceñ wykorzystaæ funkcjê biblioteczn± z pliku, nale¿y
podaæ @samp{--source '@var{program}'}, a program wpisaæ miêdzy pojedynczymi
cudzys³owami.  @xref{Opcje, ,Opcje wiersza poleceñ}.

¦cie¿kê wyszukiwania u¿ywan± przy szukaniu plików ¼ród³owych wskazanych
opcj± @samp{-f} okre¶la zmienna ¶rodowiska @code{AWKPATH}.  Gdy nie
ustawiono @code{AWKPATH}, wykorzystywana jest domy¶lna ¶cie¿ka,
@samp{.:/usr/local/share/awk}@footnote{¦cie¿ka mo¿e korzystaæ z innego
katalogu ni¿ @file{/usr/local/share/awk}, zale¿nie od sposobu utworzenia i
instalacji @code{gawk}.}.  Je¶li nazwa pliku podana opcji @samp{-f} zawiera
znak @samp{/}, to nie jest przeprowadzane wyszukiwanie.
@xref{Zmienna AWKPATH, ,Zmienna ¶rodowiska @code{AWKPATH}}.

@code{gawk} kompiluje program do postaci wewnêtrznej, a nastêpnie przechodzi
do odczytu plików wymienionych w tablicy @code{ARGV}.
Pocz±tkowe warto¶ci @code{ARGV} pochodz± od argumentów wiersza poleceñ.
Je¿eli w wierszu poleceñ nie podano plików, @code{gawk} czyta
standardowe wej¶cie.

Je¶li ``plik'' wskazany w wierszu poleceñ ma postaæ
@samp{@var{zmn}=@var{wart}}, to jest traktowany jak przypisanie do zmiennej:
zmiennej @var{zmn} przypisywana jest warto¶æ @var{wart}.  Je¶li który¶
z plików ma warto¶æ bêd±c± ³añcuchem pustym, to ten element listy jest
pomijany.

@code{gawk} sprawdza dla ka¿dego rekordu wej¶cia, czy pasuje on do jakiego¶
@var{wzorca} w programie @code{awk}.  Dla ka¿dego wzorca, do którego pasuje
rekord, wykonywana jest skojarzona z nim @var{akcja}.

@node Zmienne/Pola, Podsumowanie regu³, Podsumowanie jêzyka, Podsumowanie gawk
@appendixsec Zmienne i pola

Zmienne @code{awk} nie s± deklarowane: pojawiaj± siê przy pierwszym u¿yciu.
Ich warto¶ci s± albo liczbami zmiennoprzecinkowymi albo ³añcuchami.
@code{awk} posiada tak¿e jednowymiarowe tablice; mo¿liwe jest symulowanie
tablic wielowymiarowych.  Istnieje kilkana¶cie predefiniowanych zmiennych,
inicjowanych przez @code{awk} przy uruchamianiu programu.  Zestawiono
je poni¿ej.

@menu
* Podsumowanie pól::            Podzia³ na pola wej¶ciowe.
* Podsumowanie wbudowanych::    Zmienne wbudowane @code{awk}.
* Podsumowanie tablic::         Stosowanie tablic.
* Podsumowanie typów danych::   Warto¶ci w @code{awk} s± liczbami
                                lub ³añcuchami.
@end menu

@node Podsumowanie pól, Podsumowanie wbudowanych, Zmienne/Pola, Zmienne/Pola
@appendixsubsec Pola

W czasie odczytu ka¿dego wiersza wej¶ciowego @code{gawk} dzieli go
na @var{pola}, jako separator pól wykorzystuj±c warto¶æ zmiennej @code{FS}.
Je¿eli @code{FS} jest pojedynczym znakiem, pola oddzielane s± przez ten
znak.  W przeciwnym wypadku, oczekuje siê, ¿e @code{FS} bêdzie pe³nym
wyra¿eniem regularnym.  W przypadku szczególnym, gdy @code{FS} jest
pojedyncz± spacj±, pola oddzielane s± ci±gami spacji, tabulacji i/lub znaków
nowej linii.@footnote{W POSIX-owym @code{awk} znaki nowej linii nie
rozdzielaj± pól.}
Je¿eli @code{FS} jest ³añcuchem pustym (@code{""}), to ka¿dy pojedynczy
znak rekordu staje siê osobnym polem.
Nale¿y zwróciæ uwagê na to, ¿e warto¶æ @code{IGNORECASE}
(@pxref{Wielko¶æ liter, ,Wielko¶æ liter w dopasowaniach})
wp³ywa równie¿ na sposób podzia³u pól gdy @code{FS} jest wyra¿eniem
regularnym.

Do pola wiersza wej¶ciowego odwo³ujemy siê przez jego pozycjê, @code{$1},
@code{$2}, i tak dalej.  @code{$0} to ca³y wiersz.  Polu mo¿na te¿ przypisaæ
now± warto¶æ.  Numery pól nie musz± byæ sta³ymi:

@example
n = 5
print $n
@end example

@noindent
wypisuje pi±te pole wiersza wej¶ciowego.  Zmiennej @code{NF} przypisywana
jest ca³kowita liczba pól w wierszu wej¶ciowym.

Odwo³ania do nie istniej±cych pól (tj.@: pól po @code{$NF}) zwracaj± ³añcuch
pusty.  Jednak przypisanie do nie istniej±cego pola
(np., @code{$(NF+2) = 5}) zwiêksza warto¶æ @code{NF}, tworzy ewentualne
pola po¶rednie z ³añcuchem pustym jako warto¶ci± i powoduje przeliczenie
warto¶ci @code{$0}, za pomoc± pól rozdzielanych warto¶ci± @code{OFS}.
Zmniejszenie @code{NF} powoduje utratê warto¶ci pól za now± warto¶ci±
i przeliczenie @code{$0}, za pomoc± pól oddzielanych przez @code{OFS}.
@xref{Czytanie plików, ,Czytanie plików wej¶ciowych}.

@node Podsumowanie wbudowanych, Podsumowanie tablic, Podsumowanie pól, Zmienne/Pola
@appendixsubsec Zmienne wbudowane

Zmienne wbudowane @code{gawk}:

@table @code
@item ARGC
Liczba elementów @code{ARGV}. Poni¿ej podano, co faktycznie wchodzi
do @code{ARGV}.

@item ARGIND
Indeks w @code{ARGV} aktualnie przetwarzanego pliku.  Gdy @code{gawk}
przetwarza wej¶ciowe pliki danych, zawsze prawdziwe jest
@samp{FILENAME == ARGV[ARGIND]}.

@item ARGV
Tablica argumentów wiersza poleceñ.  Tablica indeksowana jest od zera
do @code{ARGC} @minus{} 1.  Dziêki dynamicznym zmianom @code{ARGC} i
zawarto¶ci @code{ARGV} mo¿na sterowaæ plikami wykorzystywanymi jako ¼ród³o
danych.  Pusty element w @code{ARGV} jest ignorowany.  @code{ARGV} nie
zawiera opcji @code{awk} ani tekstu samego programu @code{awk}.

@item CONVFMT
Format konwersji u¿ywany przy przekszta³caniu liczb na ³añcuchy.

@item FIELDWIDTHS
Lista rozdzielonych spacjami liczb opisuj±cych dane wej¶ciowe o sta³ej
szeroko¶ci.

@item ENVIRON
Tablica warto¶ci zmiennych ¶rodowiska. Indeksowana nazwami zmiennych,
ka¿dy element jest warto¶ci± odpowiedniej zmiennej.  Zatem,
dla zmiennej ¶rodowiska @code{HOME} mamy @code{ENVIRON["HOME"]}.
Mo¿e mieæ warto¶æ np. @file{/home/arnold}.

Zmiana tej tablicy nie wp³ywa na ¶rodowisko widziane przez programy
uruchamiane przez @code{gawk} za po¶rednictwem przekierowañ lub funkcji
@code{system}.  (Mo¿e siê to zmieniæ w przysz³ych wersjach @code{gawk}.)

Niektóre systemy operacyjne nie posiadaj± zmiennych ¶rodowiska.
Przy pracy w tych systemach tablica @code{ENVIRON} jest pusta.

@item ERRNO
Systemowy komunikat o b³êdzie gdy przy korzystaniu z @code{getline} lub
@code{close} pojawi siê b³±d.

@item FILENAME
Nazwa bie¿±cego pliku wej¶ciowego. Je¿eli w wierszu poleceñ nie podano
¿adnego pliku, warto¶ci± @code{FILENAME} jest ³añcuch pusty.

@item FNR
Numer rekordu wej¶ciowego w bie¿±cym pliku wej¶ciowym.

@item FS
Separator pól wej¶ciowych, domy¶lnie spacja.

@item IGNORECASE
Flaga rozró¿niania wielko¶ci liter w porównywaniach ³añcuchów i dzia³aniach
na wyra¿eniach regularnych.  Je¿eli @code{IGNORECASE} ma warto¶æ niezerow±,
to dopasowywanie wzorców w regu³ach, podzia³ na rekordy za pomoc± @code{RS},
podzia³ na pola za pomoc± @code{FS}, dopasowywanie wyra¿eñ regularnych
za pomoc± @samp{~} i @samp{!~} oraz funkcje wbudowane @code{gensub},
@code{gsub}, @code{index}, @code{match}, @code{split} i @code{sub} ignoruj±
ró¿nice w wielko¶ci liter podczas wykonywania dzia³añ na wyra¿eniach
regularnych. Ignorowana jest te¿ wielko¶æ liter przy porównywaniu ³añcuchów.
Warto¶æ @code{IGNORECASE} @emph{nie} wp³ywa na indeksowanie tablic.

@item NF
Liczba pól w bie¿±cym rekordzie wej¶ciowym.

@item NR
Ca³kowita liczba przegl±dniêtych do tej pory rekordów wej¶ciowych.

@item OFMT
Format wyj¶ciowy w instrukcji @code{print}, domy¶lnie @code{"%.6g"}.

@item OFS
Separator pól wyj¶ciowych, domy¶lnie spacja.

@item ORS
Separator rekordów wyj¶ciowych, domy¶lnie znak nowej linii.

@item RS
Separator rekordów wej¶ciowych, domy¶lnie znak nowej linii.
Je¿eli @code{RS} przypisano ³añcuch pusty, to rekordy oddzielane s± pustymi
wierszami.  Gdy @code{RS} jest ³añcuchem pustym, to znak nowej linii zawsze
dzia³a jako separator pól, oprócz podzia³u wyznaczanego warto¶ci± @code{FS}.
Je¿eli @code{RS} jest ³añcuchem wieloznakowym, to oznacza wyra¿enie
regularne; rekordy rozdzielane s± przez tekst pasuj±cy do danego wyra¿enia
regularnego.

@item RT
Tekst wej¶ciowy, który pasowa³ do tekstu okre¶lonego przez @code{RS},
separator rekordów.

@item RSTART
Indeks pierwszego znaku ostatniego dopasowania wykonanego przez
@code{match}; zero je¶li brak dopasowañ.

@item RLENGTH
D³ugo¶æ ostatnio dopasowanego przez @code{match} ³añcucha; @minus{}1 je¶li
brak dopasowañ.

@item SUBSEP
£añcuch u¿ywany do oddzielania wielu indeksów w elemencie tablicy,
domy¶lnie @code{"\034"}.
@end table

@xref{Zmienne wbudowane}, gdzie podano szczegó³y.

@node Podsumowanie tablic, Podsumowanie typów danych, Podsumowanie wbudowanych, Zmienne/Pola
@appendixsubsec Tablice

Tablice indeksowane s± za pomoc± wyra¿enia w nawiasach kwadratowych
(@samp{[} i @samp{]}).  Indeksy tablicy s± @emph{zawsze} ³añcuchami: w razie
potrzeby liczby s± przekszta³cane na ³añcuchy, zgodnie ze standardowymi
regu³ami konwersji (@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}).

Przy stosowaniu wewn±trz nawiasów kwadratowych kilku wyra¿eñ oddzielonych
przecinkami indeks tablicy jest ³añcuchem powsta³ym przez z³±czenie
warto¶ci poszczególnych, zamienionych na ³añcuchy, indeksów, oddzielonych
separatorem indeksów (warto¶ci± @code{SUBSEP}).

W kontek¶cie warunkowym do sprawdzenia, czy w tablicy jest indeks o zadanej
warto¶ci, mo¿na u¿yæ specjalnego operatora @code{in}.

@example
if (wart in tabl)
        print tabl[wart]
@end example

Je¿eli tablica jest wieloindeksowa, do testowania istnienia elementu
wykorzystujemy @samp{(i, j, @dots{})}.

Konstrukcjê @code{in} mo¿na te¿ stosowaæ w pêtli @code{for}, do
przechodzenia kolejno przez wszystkie elementy tablicy.
@xref{Przegl±danie tablic, ,Przegl±danie wszystkich elementów tablicy}.

Element tablicy usuwa siê za pomoc± instrukcji @code{delete}.

Ca³± tablicê czy¶cimy za pomoc± @samp{delete @var{tablica}}.

@xref{Tablice, ,Tablice w @code{awk}}.

@node Podsumowanie typów danych,  , Podsumowanie tablic, Zmienne/Pola
@appendixsubsec Typy danych

Warto¶ci± wyra¿enia @code{awk} jest zawsze albo liczba albo ³añcuch.

Niektóre konteksty (jak np. przy operatorach arytmetycznych) wymagaj±
warto¶ci numerycznych.  Przekszta³caj± one ³añcuchy na liczby przez
interpretacjê tekstu ³añcucha jako liczby.  Je¿eli ³añcuch nie wygl±da jak
liczba, to jest przekszta³cany na zero.

W innych kontekstach (jak przy konkatenacji) wymagane s± warto¶ci ³añcuchowe.
Liczby s± wówczas zamieniane na ³añcuchy, praktycznie poprzez wypisanie ich
przez @code{sprintf}.  @xref{Konwersja, ,Konwersja ³añcuchów i liczb},
gdzie podano szczegó³y.

W celu wymuszenia konwersji warto¶ci ³añcuchowej na liczbê wystarczy po
prostu dodaæ do niej zero.  Je¿eli warto¶æ, od jakiej zaczynamy jest ju¿
liczb±, nie zmieni jej to.

W celu wymuszenia konwersji warto¶ci numerycznej na ³añcuch nale¿y
skleiæ j± z ³añcuchem pustym.

Porównywania dokonywane s± numerycznie je¶li oba operandy s± numeryczne lub
je¶li jeden jest liczb± a drugi ³añcuchem liczbowym.  W przeciwnym razie
jeden lub oba operandy przekszta³cane s± na ³añcuchy i wykonywane jest
porównywanie znakowe.  Pola, wej¶cie @code{getline}, @code{FILENAME},
elementy @code{ARGV}, elementy @code{ENVIRON} i elementy tablicy utworzonej
przez @code{split} s± jedynymi elementami, które mog± byæ ³añcuchami
liczbowymi.  Sta³e ³añcuchowe, jak @code{"3.1415927"} nie s± ³añcuchami
liczbowymi, s± sta³ymi ³añcuchowymi.  Pe³ne zasady porównañ opisano
w @ref{Typy i porównania, ,Typy zmiennych i wyra¿enia porównania}.

Niezainicjowane zmienne maj± warto¶æ ³añcuchow± @code{""} (³añcuch pusty,
zerowy).  W kontekstach, w których wymagana jest liczba, jest to
równowa¿ne zeru.

@xref{Zmienne}, gdzie szerzej opisano nazywanie i inicjowanie zmiennych;
@pxref{Konwersja, ,Konwersja ³añcuchów i liczb}, gdzie szerzej opisano,
jak interpretowane s± warto¶ci zmiennych.

@node Podsumowanie regu³, Podsumowanie akcji, Zmienne/Pola, Podsumowanie gawk
@appendixsec Wzorce

@menu
* Podsumowanie wzorców::        Krótki przegl±d wzorców.
* Podsumowanie regexp::         Krótki przegl±d wyra¿eñ regularnych.
@end menu

Program @code{awk} w wiêkszo¶ci z³o¿ony jest z regu³, z których ka¿da
sk³ada siê ze wzorca i nastêpuj±cej po nim akcji.  Akcja objêta jest znakami
@samp{@{} i @samp{@}}.  Mo¿na pomin±æ wzorzec albo akcjê, ale nie oba
równocze¶nie.  Je¶li pominiêto wzorzec, akcja wykonywana jest dla ka¿dego
rekordu wej¶ciowego.  Pominiêta akcja jest równowa¿na
@samp{@w{@{ print @}}}, co wypisuje ca³y wiersz.

@c These paragraphs repeated for both patterns and actions. I don't
@c like this, but I also don't see any way around it. Update both copies
@c if they need fixing.
Komentarze zaczynaj± siê znakiem @samp{#} i rozci±gaj± siê do koñca wiersza.
Do oddzielania instrukcji mo¿na stosowaæ puste wiersze.  Instrukcje normalnie
koñcz± siê znakiem nowej linii.  Nie obowi±zuje to jednak dla wierszy, na
koñcu których wystêpuj± @samp{,}, @samp{@{}, @samp{?}, @samp{:}, @samp{&&}
lub @samp{||}.  Instrukcje wierszy koñcz±cych siê na @code{do} lub
@code{else} równie¿ s± automatycznie kontynuowane w nastêpnym wierszu.
W pozosta³ych przypadkach wiersz mo¿na kontynuowaæ koñcz±c go znakiem
@samp{\}; wówczas znak nowej linii jest ignorowany.

W jednym wierszu mo¿na umie¶ciæ kilka instrukcji oddzielaj±c je od siebie
¶rednikiem @samp{;}.  Odnosi siê to zarówno do instrukcji wewn±trz
czê¶ci regu³y definiuj±cej akcjê (zwyk³y przypadek), jak i do instrukcji
regu³.

@xref{Komentarze, ,Komentarze w programach @code{awk}}, gdzie opisano
konwencjê komentarzy w @code{awk};

@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}, gdzie podano
opis mechanizmu kontynuacji linii w @code{awk}.

@node Podsumowanie wzorców, Podsumowanie regexp, Podsumowanie regu³, Podsumowanie regu³
@appendixsubsec Podsumowanie wzorców

Wzorzec @code{awk} mo¿e byæ jednym z poni¿szych:

@example
/@var{wyra¿enie regularne}/
@var{wyra¿enie relacyjne}
@var{wzorzec} && @var{wzorzec}
@var{wzorzec} || @var{wzorzec}
@var{wzorzec} ? @var{wzorzec} : @var{wzorzec}
(@var{wzorzec})
! @var{wzorzec}
@var{wzorzec1}, @var{wzorzec2}
BEGIN
END
@end example

@code{BEGIN} i @code{END} to dwa specjalne rodzaje wzorców, z którymi nie
jest porównywane wej¶cie.  Akcje wszystkich regu³ @code{BEGIN} s± ³±czone
tak, jakby wszystkie ich instrukcje zapisano w pojedynczej regule
@code{BEGIN}.  S± one wykonywane przed rozpoczêciem odczytu wej¶cia.
Podobnie sklejane s± wszystkie regu³y @code{END}.  Wykonywane s± po
wyczerpaniu ca³o¶ci wej¶cia (lub gdy wykonywana jest instrukcja @code{exit}).
Wzorce @code{BEGIN} i @code{END} nie mog± byæ ³±czone z innymi
wzorcami w pokazanych wy¿ej wyra¿eniach wzorca.
Dla @code{BEGIN} i @code{END} nie mo¿na pomin±æ akcji.

Przy wzorcu @code{/}@var{wyra¿enie-regularne}@code{/} skojarzona z nim
instrukcja wykonywana jest dla ka¿dego rekordu wej¶ciowego pasuj±cego do
danego wyra¿enia regularnego.  Wyra¿enia regularne podsumowano poni¿ej.

@var{wyra¿enie relacyjne} mo¿e wykorzystywaæ dowolny z operatorów
zdefiniowanych poni¿ej w sekcji o akcjach.  Ogólnie mówi±c, sprawdza,
czy pewne pola pasuj± do pewnych wyra¿eñ regularnych.

Operatory @samp{&&}, @samp{||} i @samp{!} s± odpowiednio logicznym ``and'',
``or'' i ``not'', jak w C.  Wykonuj± skrócone wyznaczanie warto¶ci, równie¿
jak w C, i s± stosowane do ³±czenia prostszych wyra¿eñ wzorców.
Jak w wiêkszo¶ci jêzyków, do zmiany kolejno¶ci obliczeñ mo¿na u¿yæ nawiasów.

Operator @samp{?:} jest taki sam jak w C.  Je¿eli pasuje pierwszy wzorzec,
to rekord wej¶ciowy dopasowywany jest do drugiego wzorca; w przeciwnym
razie, do trzeciego.  Dopasowanie jest wykonywane albo do drugiego albo do
trzeciego wzorca.

Postaæ @samp{@var{wzorzec1}, @var{wzorzec2}} wzorca zwana jest wzorcem
zakresu.  Dopasowuje wszystkie wiersze wej¶ciowe pocz±wszy od wiersza
pasuj±cego do @var{wzorzec1} a¿ do wiersza pasuj±cego do @var{wzorzec2}
w³±cznie.  Wzorzec zakresu nie mo¿e byæ u¿ywany jako operand jakiegokolwiek
operatora wzorców.

@xref{Przegl±d wzorców, ,Elementy wzorców}.

@node Podsumowanie regexp, , Podsumowanie wzorców, Podsumowanie regu³
@appendixsubsec Wyra¿enia regularne

Wyra¿enia regularne oparto na POSIX-owych EREs (extended regular expressions
-- rozszerzonych wyra¿eniach regularnych).  Sekwencje specjalne dozwolone
w sta³ych ³añcuchowych s± równie¿ poprawne w wyra¿eniach regularnych
(@pxref{Sekwencje specjalne}).  Wyra¿enia regularne z³o¿one s± ze znaków
w nastêpuj±cy sposób:

@table @code
@item @var{c}
dopasowuje znak @var{c} (zak³adaj±c, ¿e @var{c} nie jest ¿adnym ze znaków
wymienionych ni¿ej).

@item \@var{c}
dopasowuje dos³owny znak @var{c}.

@item .
dopasowuje dowolny znak, @emph{³±cznie} ze znakiem nowej linii.
W trybie ¶cis³ej zgodno¶ci z POSIX @samp{.} nie dopasowuje znaku @sc{nul},
czyli znaku o wszystkich bitach równych zero.

@item ^
dopasowuje pocz±tek ³añcucha.

@item $
dopasowuje koniec ³añcucha.

@item [@var{abc}@dots{}]
dopasowuje dowolny ze znaków @var{abc}@dots{} (lista znaków).

@item [[:@var{klasa}:]]
dopasowuje dowolny znak z klasy znaków @var{klasa}.  Dostêpnymi klasami s±
@code{alnum}, @code{alpha}, @code{blank}, @code{cntrl}, @code{digit},
@code{graph}, @code{lower}, @code{print}, @code{punct}, @code{space},
@code{upper} i @code{xdigit}.

@item [[.@var{symbol}.]]
dopasowuje wieloznakowy symbol porz±dkowania leksykograficznego @var{symbol}.
@code{gawk} nie obs³uguje obecnie symboli porz±dkowania (collating symbols).

@item [[=@var{nazwaklasy}=]]
dopasowuje dowolny z równowa¿nych znaków z bie¿±cego ustawienia locale,
wskazanego klas± równowa¿no¶ci @var{nazwaklasy}.
@code{gawk} nie obs³uguje obecnie klas równowa¿no¶ci.

@item [^@var{abc}@dots{}]
dopasowuje dowolny znak oprócz @var{abc}@dots{} (dope³niaj±ca lista znaków).

@item @var{r1}|@var{r2}
dopasowuje @var{r1} lub @var{r2} (alternatywa).

@item @var{r1r2}
dopasowuje @var{r1}, a nastêpnie @var{r2} (z³±czenie).

@item @var{r}+
dopasowuje jeden lub wiêcej @var{r}.

@item @var{r}*
dopasowuje zero lub wiêcej @var{r}.

@item @var{r}?
dopasowuje zero lub jeden @var{r}.

@item (@var{r})
dopasowuje @var{r} (grupowanie).

@item @var{r}@{@var{n}@}
@itemx @var{r}@{@var{n},@}
@itemx @var{r}@{@var{n},@var{m}@}
dopasowuje co najmniej @var{n}, @var{n} lub wiêcej, albo @var{n} do @var{m}
wyst±pieñ @var{r} (wyra¿enia przedzia³owe).

@item \y
dopasowuje ³añcuch pusty albo na pocz±tku albo na koñcu s³owa.

@item \B
dopasowuje ³añcuch pusty wewn±trz s³owa.

@item \<
dopasowuje pusty ³añcuch na pocz±tku s³owa.

@item \>
dopasowuje pusty ³añcuch na koñcu s³owa.

@item \w
dopasowuje dowolny ze znaków tworz±cych wyrazy (znaki alfanumeryczne i znak
podkre¶lenia).

@item \W
dopasowuje dowolny znak nie bêd±cy znakiem wspó³tworz±cym s³owa.

@item \`
dopasowuje ³añcuch pusty na pocz±tku bufora (w @code{gawk} to samo, co
³añcuch).

@item \'
dopasowuje ³añcuch pusty na koñcu bufora.
@end table

O tym, jak @code{gawk} interpretuje znaki w wyra¿eniach regularnych,
decyduj± rozmaite opcje wiersza poleceñ.

@c NOTE!!! Keep this in sync with the same table in the regexp chapter!
@table @asis
@item bez opcji
W przypadku domy¶lnym @code{gawk} udostêpnia wszystkie udogodnienia
POSIX-owych wyra¿eñ regularnych i operatorów GNU opisane powy¿ej.
Jednak wyra¿enia przedzia³owe nie s± obs³ugiwane.

@item @code{--posix}
Obs³ugiwane s± tylko wyra¿enia regularne POSIX, operatory GNU nie maj±
specjalnego znaczenia (np., @samp{\w} dopasowuje dos³owne @samp{w}).
Wyra¿enia przedzia³owe s± dozwolone.

@item @code{--traditional}
Dopasowywane s± wyra¿enia regularne tradycyjnego uniksowego @code{awk}.
Operatory GNU nie maj± znaczenia specjalnego, nie s± dostêpne wyra¿enia
przedzia³owe ani POSIX-owe klasy znaków (@code{[[:alnum:]]} i tak dalej).
Znaki opisane ósemkowymi i szesnastkowymi sekwencjami specjalnymi traktowane
s± dos³ownie, nawet je¶li reprezentuj± metaznaki wyra¿eñ regularnych.

@item @code{--re-interval}
Dopuszcza wyra¿enia przedzia³owe w wyra¿eniach regularnych, nawet je¶li
podano @samp{--traditional}.
@end table

@xref{Regexp, ,Regular Expressions}.

@node Podsumowanie akcji, Podsumowanie funkcji, Podsumowanie regu³, Podsumowanie gawk
@appendixsec Akcje

Instrukcje akcji objête s± nawiasami klamrowymi @samp{@{} i @samp{@}}.
Pominiêta akcja jest równowa¿na @samp{@w{@{ print @}}}.

Instrukcje akcji sk³adaj± siê z typowych instrukcji: przypisania,
instrukcji warunkowych i pêtli, jakie mo¿na znale¼æ w wiêkszo¶ci jêzyków.
Dostêpne operatory, instrukcje steruj±ce i instrukcje wej¶cia/wyj¶cia s±
podobne do wystêpuj±cych w C.

@c These paragraphs repeated for both patterns and actions. I don't
@c like this, but I also don't see any way around it. Update both copies
@c if they need fixing.
Komentarze zaczynaj± siê znakiem @samp{#} i rozci±gaj± siê do koñca wiersza.
Do oddzielania instrukcji mo¿na stosowaæ puste wiersze.  Instrukcje normalnie
koñcz± siê znakiem nowej linii.  Nie obowi±zuje to jednak dla wierszy, na
koñcu których wystêpuj± @samp{,}, @samp{@{}, @samp{?}, @samp{:}, @samp{&&}
lub @samp{||}.  Instrukcje wierszy koñcz±cych siê na @code{do} lub
@code{else} równie¿ s± automatycznie kontynuowane w nastêpnym wierszu.
W pozosta³ych przypadkach wiersz mo¿na kontynuowaæ koñcz±c go znakiem
@samp{\}; wówczas znak nowej linii jest ignorowany.

W jednym wierszu mo¿na umie¶ciæ kilka instrukcji oddzielaj±c je od siebie
¶rednikiem @samp{;}.  Odnosi siê to zarówno do instrukcji wewn±trz
czê¶ci regu³y definiuj±cej akcjê (zwyk³y przypadek), jak i do instrukcji
regu³.

@xref{Komentarze, ,Komentarze w programach @code{awk}}, gdzie opisano
konwencjê komentarzy w @code{awk};

@pxref{Instrukcje/wiersze, ,Instrukcje @code{awk} a wiersze}, gdzie podano
opis mechanizmu kontynuacji linii w @code{awk}.

@menu
* Podsumowanie operatorów::           Operatory @code{awk}.
* Podsumowanie sterowania::           Instrukcje steruj±ce.
* Podsumowanie I/O::                  Instrukcje wej¶cia/wyj¶cia.
* Podsumowanie printf::               Podsumowanie @code{printf}.
* Podsumowanie plików specjalnych::   Interpretowane wewnêtrznie specjalne
                                      nazwy plików.
* Podsumowanie funkcji wbudowanych::  Wbudowane funkcje numeryczne
                                      i ³añcuchowe.
* Podsumowanie funkcji czasu::        Wbudowane funkcje czasu.
* Podsumowanie sta³ych ³añcuchowych:: Sekwencje specjalne w ³añcuchach.
@end menu

@node Podsumowanie operatorów, Podsumowanie sterowania, Podsumowanie akcji, Podsumowanie akcji
@appendixsubsec Operatory

Operatory w @code{awk}, w kolejno¶ci malej±cego priorytetu:

@table @code
@item (@dots{})
Grupowanie.

@item $
Odwo³anie do pola.

@item ++ --
Inkrementacja i dekrementacja, zarówno przedrostkowa jak i przyrostkowa.

@item ^
Potêgowanie (mo¿na te¿ u¿ywaæ @samp{**}, a @samp{**=} do operatora
przypisania, ale nie s± one wymienione w standardzie POSIX).

@item + - !
Jednoargumentowy plus, jednoargumentowy minus i negacja logiczna.

@item * / %
Mno¿enie, dzielenie, reszta z dzielenia (modulo).

@item + -
Dodawanie i odejmowanie.

@item @var{space}
Konkatenacja ³añcuchów.

@item < <= > >= != ==
Zwyczajowe operatory relacyjne.

@item ~ !~
Dopasowanie wyra¿enia regularnego, zaprzeczone dopasowanie.

@item in
Przynale¿no¶æ do tablicy.

@item &&
Koniunkcja logiczna (``and'').

@item ||
Alternatywa logiczna (``or'').

@item ?:
Wyra¿enie warunkowe.  Ma postaæ @samp{@var{wyr1} ? @var{wyr2} : @var{wyr3}}.
Je¿eli @var{wyr1} jest prawdziwe, to warto¶ci± wyra¿enia jest @var{wyr2},
w przeciwnym razie @var{wyr3}.  Obliczane jest tylko jedno spo¶ród
@var{wyr2} i @var{wyr3}.

@item = += -= *= /= %= ^=
Przypisanie.  Obs³ugiwane jest zarówno przypisanie bezpo¶rednie
(@code{@var{zmn}=@var{warto¶æ}}) jak i przypisanie operatorowe (pozosta³e
formy).
@end table

@xref{Wyra¿enia}.

@node Podsumowanie sterowania, Podsumowanie I/O, Podsumowanie operatorów, Podsumowanie akcji
@appendixsubsec Instrukcje steruj±ce

Mamy nastêpuj±ce instrukcje steruj±ce:

@example
if (@var{warunek}) @var{instrukcja} @r{[} else @var{instrukcja} @r{]}
while (@var{warunek}) @var{instrukcja}
do @var{instrukcja} while (@var{warunek})
for (@var{wyr1}; @var{wyr2}; @var{wyr3}) @var{instrukcja}
for (@var{zmn} in @var{tabl}) @var{instrukcja}
break
continue
delete @var{tabl}[@var{indeks}]
delete @var{tabl}
exit @r{[} @var{wyra¿enie} @r{]}
@{ @var{instrukcje} @}
@end example

@xref{Instrukcje, ,Instrukcje steruj±ce w akcjach}.

@node Podsumowanie I/O, Podsumowanie printf, Podsumowanie sterowania, Podsumowanie akcji
@appendixsubsec Instrukcje wej¶cia/wyj¶cia

Mamy nastêpuj±ce instrukcje wej¶cia/wyj¶cia:

@table @code
@item getline
Pobiera @code{$0} z kolejnego rekordu wej¶ciowego; nadaje
warto¶ci @code{NF}, @code{FNR} i @code{NR}.
@xref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}.

@item getline <@var{plik}
Pobiera @code{$0} z kolejnego rekordu @var{pliku}; nadaje
warto¶æ @code{NF}.

@item getline @var{zmn}
Pobiera @code{zmn} z kolejnego rekordu wej¶ciowego; nadaje warto¶ci
@code{NR}, @code{FNR}.

@item getline @var{zmn} <@var{plik}
Pobiera @code{zmn} z kolejnego rekordu @var{pliku}.

@item @var{polecenie} | getline
Uruchamia @var{polecenie}, przesy³aj±c potokiem jego wyj¶cie do
@code{getline}; nadaje warto¶ci @code{$0}, @code{NF}, @code{NR}.

@item @var{polecenie} | getline @code{zmn}
Uruchamia @var{polecenie}, przesy³aj±c potokiem jego wyj¶cie do
@code{getline}; nadaje warto¶æ @var{zmn}.

@item next
Przerywa przetwarzanie aktualnego rekordu wej¶ciowego.  Czytany jest
nastêpny rekord a przetwarzanie zaczyna siê ponownie od pierwszego
wzorca programu @code{awk}.  Je¿eli osi±gniêto koniec danych wej¶ciowych,
wykonywane s± regu³y (regu³a) @code{END}, je¶li istniej±.
@xref{Instrukcja next, ,Instrukcja @code{next}}.

@item nextfile
Przerywa przetwarzanie bie¿±cego pliku wej¶ciowego.  Nastêpny czytany rekord
wej¶ciowy pochodzi z kolejnego pliku wej¶ciowego.  Aktualizowane jest
@code{FILENAME}, @code{FNR} otrzymuje warto¶æ jeden, zwiêksza siê
@code{ARGIND}, a przetwarzanie zaczyna siê ponownie od pierwszego wzorca
programu @code{awk}.  Je¿eli osi±gniêto koniec danych wej¶ciowych,
wykonywane s± regu³y (regu³a) @code{END}, je¶li istniej±.  Wcze¶niejsze
wersje @code{gawk} stosowa³y @samp{next file}; sk³adnia ta jest nadal
obs³ugiwana, ale uwa¿ana za niezalecan±.
@xref{Instrukcja next, ,Instrukcja @code{next}}.

@item print
Wypisuje bie¿±cy rekord wej¶ciowy.
@xref{Wypisywanie, ,Wypisywanie wyników}.

@item print @var{lista-wyr}
Wypisuje wyra¿enia.

@item print @var{lista-wyr} > @var{plik}
Wypisuje wyra¿enia do @var{pliku}. Je¶li @var{plik} nie istnieje, jest
tworzony.  Je¶li istnieje, za pierwszym razem, gdy wykonywane jest
@code{print}, jego zawarto¶æ jest usuwana.

@item print @var{lista-wyr} >> @var{plik}
Wypisuje wyra¿enia do @var{pliku}.  Poprzednia zawarto¶æ @var{pliku}
pozostaje zachowana, a wyj¶cie @code{print} jest dopisywane do pliku.

@item print @var{lista-wyr} | @var{polecenie}
Wypisuje wyra¿enia, wysy³aj±c wyj¶cie potokiem do @var{polecenia}.
Potok do polecenia pozostaje otwarty do momentu wywo³ania funkcji
@code{close}.

@item printf @var{fmt}, @var{lista-wyr}
Formatuje i wypisuje.

@item printf @var{fmt}, @var{lista-wyr} > @var{plik}
Formatuje i wypisuje do @var{pliku}. Je¶li @var{plik} nie
istnieje, jest tworzony.  Je¶li istnieje, za pierwszym razem, gdy wykonywane
jest @code{printf}, jego zawarto¶æ jest usuwana.

@item printf @var{fmt}, @var{lista-wyr} >> @var{plik}
Formatuje i wypisuje do @var{pliku}.  Poprzednia zawarto¶æ
@var{pliku} pozostaje zachowana, a wyj¶cie @code{printf} jest dopisywane do
pliku.

@item printf @var{fmt}, @var{lista-wyr} | @var{polecenie}
Formatuje i wypisuje, wysy³aj±c wyj¶cie potokiem do @var{polecenia}.
Potok do polecenia pozostaje otwarty do momentu wywo³ania funkcji
@code{close}.
@end table

@code{getline} zwraca zero na koñcu pliku, a @minus{}1 przy b³êdzie.
W przypadku b³êdu, @code{getline} nadaje zmiennej @code{ERRNO} warto¶æ
zale¿nego od systemu ³añcucha, który opisuje b³±d.

@node Podsumowanie printf, Podsumowanie plików specjalnych, Podsumowanie I/O, Podsumowanie akcji
@appendixsubsec Podsumowanie @code{printf}

Specyfikacja konwersji ma postaæ
@code{%}[@var{flaga}][@var{szer}][@code{.}@var{dok³}]@var{format}.
@c whew!
Elementy w nawiasach kwadratowych s± opcjonalne.

W @code{awk} instrukcja @code{printf} i funkcja @code{sprintf}
przyjmuj± poni¿sze formaty okre¶laj±ce konwersjê:

@table @code
@item %c
Znak ASCII.  Je¿eli u¿yty dla @samp{%c} argument jest numeryczny,
traktowany jest jak znak i wypisywany.  W przeciwnym wypadku, zak³ada siê,
¿e jest ³añcuchem, i wypisywany jest tylko pierwszy znak tego ³añcucha.

@item %d
@itemx %i
Liczba dziesiêtna (czê¶æ ca³kowita).

@item %e
@itemx %E
Liczba zmiennoprzecinkowa postaci
@samp{@r{[}-@r{]}d.dddddde@r{[}+-@r{]}dd}.
Format @samp{%E} stosuje @samp{E} zamiast @samp{e}.

@item %f
Liczba zmiennoprzecinkowa postaci
@r{[}@code{-}@r{]}@code{ddd.dddddd}.

@item %g
@itemx %G
U¿ywa albo formatu @samp{%e} albo @samp{%f}, zale¿nie od tego, który z nich
daje krótszy ³añcuch, z eliminacj± nieznacz±cych zer.
@samp{%G} stosuje @samp{%E} zamiast @samp{%e}.

@item %o
Liczba ósemkowa bez znaku (tak¿e ca³kowita).

@item %u
Liczba dziesiêtna bez znaku (znów, ca³kowita).

@item %s
£añcuch znaków.

@item %x
@itemx %X
Liczba szesnastkowa bez znaku (ca³kowita).
Format @samp{%X} stosuje litery @samp{A} do @samp{F} zamiast @samp{a}
do @samp{f} dla dziesiêtnych 10 do 15.

@item %%
Pojedynczy znak @samp{%}; nie jest przekszta³cany ¿aden argument.
@end table

Opcjonalne, dodatkowe parametry, które mog± wyst±piæ pomiêdzy @samp{%}
a liter± steruj±c±:

@table @code
@item -
Wyra¿enie powinno byæ w swoim polu wyrównane do lewej.

@item @var{spacja}
W konwersjach numerycznych poprzedza warto¶ci dodatnie spacj±, a ujemne
znakiem minus.

@item +
Znak plus u¿yty przed modyfikatorem szeroko¶ci (zob. ni¿ej), nakazuje
w konwersjach numerycznych zawsze podawaæ znak, nawet je¶li dane do
sformatowania s± dodatnie. Modyfikator @samp{+} przes³ania modyfikator
spacji.

@item #
Stosuje ``alternatywn± postaæ'' dla niektórych liter steruj±cych.
Przy @samp{%o}, zapewnia pocz±tkowe zero.
Przy @samp{%x} i @samp{%X} zapewnia pocz±tkowe @samp{0x} lub @samp{0X} dla
wyniku niezerowego.
Przy @samp{%e}, @samp{%E} i @samp{%f} wynik bêdzie zawsze zawiera³ kropkê
dziesiêtn±.
Przy @samp{%g} i @samp{%G} koñcowe zera nie s± usuwane z wyniku.

@item 0
Pocz±tkowe @samp{0} (zero) dzia³a jak flaga, wskazuj±ca, ¿e wyj¶cie
powinno byæ dope³nione zerami zamiast spacjami.  Odnosi siê to tak¿e do
nienumerycznych formatów wyj¶ciowych.  Flaga ta ma znaczenie tylko gdy pole
jest szersze ni¿ warto¶æ do wypisania.

@item @var{szer}
Pole powinno zostaæ wype³nione do tej szeroko¶ci.  Normalnie dope³niane
jest spacjami.  Je¿eli u¿yto flagi @samp{0}, to jest dope³niane zerami.

@item .@var{dok³}
Liczba okre¶laj±ca dok³adno¶æ, jaka ma byæ u¿yta zastosowana przy
wypisywaniu.  Przy formatach @samp{e}, @samp{E} i @samp{f} podaje liczbê
cyfr, jakie maj± byæ wypisane na prawo od kropki dziesiêtnej. Przy formatach
@samp{g} i @samp{G} okre¶la maksymaln± ilo¶æ cyfr znacz±cych.  Przy
formatach @samp{d}, @samp{o}, @samp{i}, @samp{u}, @samp{x} i @samp{X}
okre¶la minimaln± liczbê cyfr do wypisania.  Dla formatu @samp{s} podaje
maksymaln± liczbê znaków ³añcucha, jakie winny zostaæ wypisane.
@end table

Ka¿da z warto¶ci @var{szer} i @var{dok³}, albo obie z nich, mo¿e byæ podana
jako @samp{*}.  Wówczas, konkretna ich warto¶æ pobierana jest z listy
argumentów.

@xref{Printf, ,Wymy¶lne wyj¶cie dziêki instrukcji @code{printf}}.

@node Podsumowanie plików specjalnych, Podsumowanie funkcji wbudowanych, Podsumowanie printf, Podsumowanie akcji
@appendixsubsec Specjalne nazwy plików

Podczas wykonywania przekierowañ wej¶cia/wyj¶cia z @code{print} czy
@code{printf} do pliku, albo za poprzez @code{getline} z pliku, @code{gawk}
rozpoznaje wewnêtrznie pewne specjalne nazwy plików.  Nazwy te umo¿liwiaj±
dostêp do otwartych deskryptorów plików odziedziczonych przez @code{gawk}
po procesie macierzystym (zwykle pow³oce).  Nazwami tymi s±:

@table @file
@item /dev/stdin
Standardowe wej¶cie.

@item /dev/stdout
Standardowe wyj¶cie.

@item /dev/stderr
Standardowe wyj¶cie b³êdów.

@item /dev/fd/@var{n}
Plik oznaczony otwartym deskryptorem @var{n}.
@end table

Dodatkowo, odczyt poni¿szych plików zapewnia informacjê zwi±zan± z procesem
wykonywanego programu @code{gawk}.  Wszystkie zwracane rekordy zakoñczone s±
znakiem nowej linii.

@table @file
@item /dev/pid
Zwraca ID procesu dla bie¿±cego procesu.

@item  /dev/ppid
Zwraca ID procesu macierzystego dla bie¿±cego procesu.

@item  /dev/pgrpid
Zwraca ID grupy procesu dla bie¿±cego procesu.

@item /dev/user
Co najmniej cztery, oddzielone spacjami, pola, zawieraj±ce warto¶ci zwracane
przez funkcje systemowe @code{getuid}, @code{geteuid}, @code{getgid}
i @code{getegid}.  Je¶li wystêpuj± dodatkowe pola, to s± one
identyfikatorami grup zwróconymi przez funkcjê systemow± @code{getgroups}.
(Przynale¿no¶æ do wielu grup mo¿e nie byæ obs³ugiwana na wszystkich
systemach.)
@end table

@noindent
Z tych nazw plików mo¿na te¿ korzystaæ w wierszu poleceñ do wskazania plików
danych.   Je¶li w rzeczywisto¶ci plików o tych nazwach nie ma w systemie,
to s± one rozpoznawane tylko wewnêtrznie.

@xref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}, gdzie
umieszczono d³u¿szy opis z uzasadnieniem tej cechy.

@node Podsumowanie funkcji wbudowanych, Podsumowanie funkcji czasu, Podsumowanie plików specjalnych, Podsumowanie akcji
@appendixsubsec Funkcje wbudowane

@code{awk} udostêpnia wiele funkcji wbudowanych do wykonywania dzia³añ
na liczbach, ³añcuchach czy operacji wej¶cia/wyj¶cia.

@c NEEDED
@page
Wbudowane funkcje arytmetyczne:

@table @code
@item atan2(@var{y}, @var{x})
Arcus tangens z @var{y/x} w radianach.

@item cos(@var{wyr})
Cosinus @var{wyr}, podanego w radianach.

@item exp(@var{wyr})
Potêga naturalna o wyk³adniku @var{wyr} (@code{e^@var{wyr}}).

@item int(@var{wyr})
Obciêcie do ca³kowitej.

@item log(@var{wyr})
Logarytm naturalny z @code{wyr}.

@item rand()
Liczba losowa miêdzy zero a jeden.

@item sin(@var{wyr})
Sinus @var{wyr}, podanego w radianach.

@item sqrt(@var{wyr})
Pierwiastek kwadratowy.

@item srand(@r{[}@var{wyr}@r{]})
Wykorzystuje @var{wyr} jako nowe ziarno generatora liczb losowych.  Je¿eli
nie podano @var{wyr}, to u¿ywany jest bie¿±cy czas.  Warto¶ci± zwracan± jest
poprzednie ziarno generatora liczb losowych.
@end table

@code{awk} ma nastêpuj±ce wbudowane funkcje ³añcuchowe:

@table @code
@item gensub(@var{regex}, @var{zast±p}, @var{jak} @r{[}, @var{cel}@r{]})
Je¿eli @var{jak} jest ³añcuchem zaczynaj±cym siê od @samp{g} lub @samp{G},
to wszystkie dopasowania @var{regex} w @var{cel} zastêpowane s± przez
@var{zast±p}.  W przeciwnym razie, zastêpowane jest @var{jak}ie kolejne
wyst±pienie.  Je¿eli nie podano @var{celu}, to u¿ywane jest @code{$0}.
Warto¶ci± zwracan± jest zmieniony ³añcuch -- oryginalny @var{cel} nie jest
modyfikowany.  Wewn±trz @var{zast±p}, do wskazania tekstu pasuj±cego do
@var{n}-tego podwyra¿enia w nawiasach stosuje siê @samp{\@var{n}}, gdzie
@var{n} jest cyfr± od zera do dziewiêciu.
Funkcja @code{gensub} jest specyficzna dla @code{gawk}.

@item gsub(@var{regex}, @var{zast±p} @r{[}, @var{cel}@r{]})
Zastêpuje ka¿dy pod³añcuch ³añcucha @var{cel} pasuj±cy do wyra¿enia
regularnego @var{regex} ³añcuchem @var{zast±p}.  Zwraca liczbê zast±pieñ.
Je¿eli nie podano @var{celu}, u¿ywane jest @code{$0}.

@item index(@var{³añc}, @var{szuk})
Zwraca pozycjê ³añcucha @var{szuk} w ³añcuchu @var{³añc}, lub zero je¶li
nie wystêpuje @var{szuk}.

@item length(@r{[}@var{³añc}@r{]})
Zwraca d³ugo¶æ ³añcucha @var{³añc}.  Je¿eli nie podano argumentu, zwracana
jest d³ugo¶æ @code{$0}.

@item match(@var{³añc}, @var{regex})
Zwraca pozycjê w @var{³añc}, na której pojawia siê wyra¿enie regularne
@var{regex}, albo zero je¶li @var{regex} nie wystêpuje, i nadaje warto¶ci
zmiennym @code{RSTART} i @code{RLENGTH}.

@item split(@var{³añc}, @var{tabl} @r{[}, @var{regex}@r{]})
Dzieli @var{³añcuch} na kawa³ki rozdzielane przez wyra¿enie regularne
@var{regex} i umieszczane w tablicy @var{tabl}.  Zwraca liczbê elementów.
Je¿eli pominiêto @var{regex}, to zamiast niego u¿ywane jest @code{FS}.
@var{regex} mo¿e byæ ³añcuchem pustym, co spowoduje umieszczenie ka¿dego
znaku w osobnym elemencie tablicy.  Na pocz±tku wymazywana jest tablica
@var{tabl}.

@item sprintf(@var{fmt}, @var{lista-wyr})
Wypisuje @var{listê-wyr} zgodnie z @var{fmt} i zwraca wynikowy ³añcuch.

@item sub(@var{regex}, @var{zast±p} @r{[}, @var{cel}@r{]})
Tak jak @code{gsub}, ale zastêpowany jest tylko pierwszy pasuj±cy pod³añcuch.

@item substr(@var{³añc}, @var{indeks} @r{[}, @var{d³}@r{]})
Zwraca @var{d³}-znakowy pod³añcuch ³añcucha @var{³añc} zaczynaj±cy siê
od pozycji @var{indeks}.  Je¿eli pominiêto @var{d³}, u¿ywana jest reszta
@var{³añc}.

@item tolower(@var{³añc})
Zwraca kopiê ³añcucha @var{³añc} ze wszystkimi du¿ymi znakami zamienionymi
na odpowiadaj±ce im ma³e.  Znaki niealfabetyczne pozostawione s± bez zmian.

@item toupper(@var{³añc})
Zwraca kopiê ³añcucha @var{³añc} ze wszystkimi ma³ymi znakami zamienionymi
na odpowiadaj±ce im du¿e.  Znaki niealfabetyczne pozostawione s± bez zmian.
@end table

Funkcje zwi±zane z wej¶ciem/wyj¶ciem:

@table @code
@item close(@var{wyr})
Zamyka otwarty plik lub potok wskazywany przez @var{wyr}.

@item fflush(@r{[}@var{wyr}@r{]})
Opró¿nia wszelkie buforowane wyj¶cie do pliku wyj¶ciowego lub potoku
wskazanego przez @var{wyr}.  Je¿eli pominiêto @var{wyr}, opró¿niane jest
standardowe wyj¶cie.  Je¶li @var{wyr} jest ³añcuchem pustym (@code{""}),
opró¿niane s± wszystkie bufory wyj¶ciowe.

@item system(@var{wiersz-polec})
Uruchamia polecenie @var{wiersz-polec} i zwraca jego kod zakoñczenia.
Je¿eli dany system operacyjny nie obs³uguje funkcji @code{system}, wywo³anie
jej spowoduje b³±d krytyczny.

@samp{system("")} mo¿na wykorzystaæ do wymuszonego opró¿nienia przez
@code{awk} oczekuj±cego wyj¶cia.  Jest to bardziej przeno¶ne, ale mniej
oczywiste, ni¿ wywo³anie @code{fflush}.
@end table

@node Podsumowanie funkcji czasu, Podsumowanie sta³ych ³añcuchowych, Podsumowanie funkcji wbudowanych, Podsumowanie akcji
@appendixsubsec Funkcje czasu

Do pobierania bie¿±cego czasu i formatowania znaczników czasu dostêpne s±
dwie kolejne funkcje.  S± one specyficzne dla @code{gawk}.

@table @code
@item systime()
Zwraca czas bie¿±cy jako liczbê sekund od konkretnej Epoki
(pó³noc 1 stycznia 1970 UTC, na systemach POSIX-owych).

@item strftime(@r{[}@var{format}@r{[}, @var{timestamp}@r{]]})
Formatuje znacznik czasu @var{timestamp} zgodnie ze specyfikacj±
@var{formatu}.  Je¿eli nie podano @var{timestamp} to stosowany jest czas
bie¿±cy.  Je¿eli nie podano @var{formatu}, stosowany jest domy¶lny format
równowa¿ny jest wyj¶ciu tworzonemu przez narzêdzie @code{date}.
@xref{Funkcje czasu, ,Funkcje obs³ugi znaczników czasu}, gdzie zamieszczono
szczegó³owy opis specyfikatorów konwersji przyjmowanych przez
@code{strftime}.
@end table

@iftex
@xref{Wbudowane, ,Funkcje wbudowane}, gdzie zamieszczono opis wszystkich
funkcji wbudowanych @code{awk}.
@end iftex

@node Podsumowanie sta³ych ³añcuchowych,  , Podsumowanie funkcji czasu, Podsumowanie akcji
@appendixsubsec Sta³e ³añcuchowe

Sta³e ³añcuchowe w @code{awk} s± ci±gami znaków ujêtymi w cudzys³owy zwyk³e
(@code{"}).  Wewn±trz ³añcuchów rozpoznawane s± pewne
@dfn{sekwencje specjalne}, jak w C.  S± to:

@table @code
@item \\
Dos³owny odwrotny uko¶nik (backslash).

@item \a
Znak dzwonka (alarm, ``alert''), zwykle znak ASCII BEL.

@item \b
Backspace.

@item \f
Wysuw strony, formfeed.

@item \n
Nowa linia, newline.

@item \r
Powrót karetki, carriage return.

@item \t
Tabulacja pozioma.

@item \v
tabulacja pionowa.

@item \x@var{cyfry szesnastkowe}
Znak reprezentowany przez ³añcuch cyfr szesnastkowych wystêpuj±cych po
@samp{\x}.  Jak w ANSI C, wszystkie kolejne cyfry szesnastkowe uwa¿ane s±
za czê¶æ tej sekwencji specjalnej.  Np., @code{"\x1B"} jest ³añcuchem
z³o¿onym ze znaku ASCII ESC (escape).  (Sekwencja specjalna @samp{\x}
nie wystêpuje w POSIX-owym @code{awk}.)

@item \@var{ddd}
Znak reprezentowany przez jedno-, dwu- lub trzycyfrow± sekwencjê cyfr
ósemkowych.  Zatem, @code{"\033"} jest równie¿ ³añcuchem z³o¿onym ze znaku
ASCII ESC (escape).

@item \@var{c}
Dos³owny znak @var{c}, je¶li @var{c} nie jest jednym z powy¿szych.
@end table

Z sekwencji specjalnych mo¿na te¿ korzystaæ wewn±trz sta³ych wyra¿eñ
regularnych (np., wyra¿enie regularne @code{@w{/[@ \t\f\n\r\v]/}}
dopasowuje bia³e znaki).

@xref{Sekwencje specjalne}.

@node Podsumowanie funkcji, Cechy historyczne, Podsumowanie akcji, Podsumowanie gawk
@appendixsec Funkcje definiowane przez u¿ytkownika

Funkcje w @code{awk} s± definiowane nastêpuj±co:

@example
function @var{nazwa}(@var{lista-parametrów}) @{ @var{instrukcje} @}
@end example

Do konkretyzowania parametrów formalnych, deklarowanych w funkcji, u¿ywane s±
parametry aktualne dostarczone w wywo³aniu funkcji.  Tablice przekazywane s±
przez wskazanie, inne zmienne przez warto¶æ.

Je¿eli przekazano mniej parametrów ni¿ wystêpuje nazw
w @var{li¶cie-parametrów}, to dodatkowe nazwy otrzymuj± jako warto¶æ ³añcuch
pusty.  Dodatkowe nazwy dzia³aj± jak zmienne lokalne.

Nawias otwieraj±cy w wywo³aniu funkcji definiowanej przez u¿ytkownika musi
wystêpowaæ bezpo¶rednio po nazwie funkcji, bez wtr±conego odstêpu.
Ma to na celu unikniêcie niejednoznaczno¶ci sk³adni i mylenia
z operatorem konkatenacji.

Zamiast @code{function} mo¿e byæ u¿ywane s³owo @code{func} (ale nie
w POSIX @code{awk}).

Zwracanie warto¶ci przez funkcjê uzyskuje siê instrukcj± @code{return}.

@xref{U¿ytkownika, ,Funkcje u¿ytkownika}.

@node Cechy historyczne,  , Podsumowanie funkcji, Podsumowanie gawk
@appendixsec Cechy historyczne

@cindex cechy historyczne
@code{gawk} obs³uguje dwie cechy historycznych implementacji @code{awk}.

Po pierwsze, mo¿liwe jest wywo³ywanie funkcji wbudowanej @code{length} nie
tylko bez argumentów, lecz nawet bez nawiasów!

@example
a = length
@end example

@noindent
to to samo, co którekolwiek z

@example
a = length()
a = length($0)
@end example

@noindent
Na przyk³ad:

@example
$ echo abcdef | awk '@{ print length @}'
@print{} 6
@end example

@noindent
Cechê tê w standardzie POSIX oznaczono jako ``niezalecan±'', a
@code{gawk} wy¶le ostrze¿enie o jej u¿yciu je¿eli w wierszu poleceñ podano
@samp{--lint}.  (Mo¿liwo¶æ takiego sposobu u¿ycia @code{length} by³a
w oryginalnej implementacji uniksowego @code{awk} w rzeczywisto¶ci
przypadkowa.  Je¿eli jakakolwiek funkcja korzysta³a z @code{$0} jako
argumentu domy¶lnego, to mo¿liwe by³o wywo³ywanie jej bez nawiasów.
W szczególno¶ci, powszechn± praktyk± by³o korzystanie w ten sposób z funkcji
@code{length}, i ten sposób u¿ycia udokumentowano w podrêczniku man
@code{awk}.)

Inn± cech± historyczn± jest stosowanie instrukcji @code{break} albo
@code{continue} poza cia³em pêtli @code{while}, @code{for} lub @code{do}.
Tradycyjne implementacje @code{awk} traktowa³y taki sposób u¿ycia jako
równowa¿ny instrukcji @code{next}.  Nowsze wersje uniksowego @code{awk}
na to nie zezwalaj±.
@code{gawk} obs³uguje taki sposób u¿ycia je¶li podano @samp{--traditional}.

@xref{Opcje, ,Opcje wiersza poleceñ}, gdzie bli¿ej opisano opcje
@samp{--posix} i @samp{--lint}.

@node Instalacja, Uwagi, Podsumowanie gawk, Top
@appendix Instalowanie @code{gawk}

Ten za³±cznik zawiera instrukcje dotycz±ce instalacji @code{gawk} na ró¿nych
platformach wspieranych przez programistów.  G³ówni twórcy tworz± wersjê
pracuj±c± w Uniksie (i pewnego dnia, GNU), choæ @code{gawk} przeniesiono
te¿ na inne platformy.  Plik @file{ACKNOWLEDGMENT} w pakiecie dystrybucyjnym
@code{gawk} wymienia adresy poczty elektronicznej ludzi, którzy zrobili
odpowiednie przeniesienia (porty) programu, podano je te¿
w @ref{B³êdy, ,Zg³aszanie problemów i b³êdów}.

@menu
* Dystrybucja gawk::            Co jest w dystrybucji @code{gawk}.
* Instalacja na Uniksie::       Instalowanie @code{gawk} na ró¿nych wersjach
                                Uniksa.
* Instalacja na VMS::           Instalowanie @code{gawk} na VMS.
* Instalacja na PC::            Instalowanie i kopiowanie @code{gawk}
                                na MS-DOS i OS/2
* Instalacja na Atari::         Instalowanie @code{gawk} na Atari ST.
* Instalacja na Amidze::        Instalowanie @code{gawk} na Amidze.
* B³êdy::                       Zg³aszanie problemów i b³êdów.
* Inne wersje::                 Inne wolnodostêpne implementacje @code{awk}.
@end menu

@node Dystrybucja gawk, Instalacja na Uniksie, Instalacja, Instalacja
@appendixsec Dystrybucja @code{gawk}

W tej sekcji opisano najpierw jak zdobyæ pakiet dystrybucyjny @code{gawk},
jak go zdekompresowaæ, i co jest w rozmaitych plikach i podkatalogach.

@menu
* Pozyskiwanie::                      Jak pozyskaæ dystrybucyjnê.
* Rozpakowywanie::                    Jak rozpakowaæ pakiet dystrybucyjny.
* Zawarto¶æ pakietu dystrybucyjnego:: Co jest w dystrybucji.
@end menu

@node Pozyskiwanie, Rozpakowywanie, Dystrybucja gawk, Dystrybucja gawk
@appendixsubsec Pozyskiwanie pakietu dystrybucyjnego @code{gawk}
@cindex zdobywanie @code{gawk}
@cindex pozyskiwanie @code{gawk}
@cindex anonimowe @code{ftp}
@cindex @code{ftp}, anonimowe
@cindex Free Software Foundation
Oprogramowanie GNU mo¿na pozyskaæ na trzy sposoby.

@enumerate
@item
Skopiowaæ je od kogo¶, kto ju¿ je ma.

@cindex Free Software Foundation
@item
Zamówiæ @code{gawk} bezpo¶rednio z Free Software Foundation.
Dostêpne s± pakiety dystrybucyjne do u¿ytku w Uniksie, MS-DOS i VMS,
na ta¶mie i CD-ROM.  Adres Fundacji:

@quotation
Free Software Foundation @*
59 Temple Place---Suite 330 @*
Boston, MA  02111-1307 USA @*
Phone: +1-617-542-5942 @*
Fax (including Japan): +1-617-542-2652 @*
Email: @code{gnu@@gnu.org} @*
URL: @code{http://www.gnu.org/} @*
@end quotation

@noindent
Zamawianie bezpo¶rednio z FSF wspiera fundacjê i jest wk³adem w dalsze
tworzenie wolnego oprogramowania.

@item
Pobraæ @code{gawk} za pomoc± anonimowego @code{ftp} z serwera internetowego
@code{gnudist.gnu.org}, z katalogu @file{/gnu/gawk}.

Podajemy listê alternatywnych o¶rodków @code{ftp}, sk±d mo¿na uzyskaæ
oprogramowanie GNU.  Gdy o¶rodek wykazano jako
``@var{miejsce}@code{:}@var{katalog}'', to @var{katalog} wskazuje na
katalog, gdzie przechowywane jest oprogramowanie GNU.  Powinno siê korzystaæ
z miejsca bliskiego geograficznie.

@table @asis
@item Azja:
@table @code
@item cair-archive.kaist.ac.kr:/pub/gnu
@itemx ftp.cs.titech.ac.jp
@itemx ftp.nectec.or.th:/pub/mirrors/gnu
@itemx utsun.s.u-tokyo.ac.jp:/ftpsync/prep
@end table

@c NEEDED
@page
@item Australia:
@table @code
@item archie.au:/gnu
(@code{archie.oz} lub @code{archie.oz.au} dla ACSnet)
@end table

@item Afryka:
@table @code
@item ftp.sun.ac.za:/pub/gnu
@end table

@item ¦rodkowy Wschód:
@table @code
@item ftp.technion.ac.il:/pub/unsupported/gnu
@end table

@item Europa:
@table @code
@item archive.eu.net
@itemx ftp.denet.dk
@itemx ftp.eunet.ch
@itemx ftp.funet.fi:/pub/gnu
@itemx ftp.ieunet.ie:pub/gnu
@itemx ftp.informatik.rwth-aachen.de:/pub/gnu
@itemx ftp.informatik.tu-muenchen.de
@itemx ftp.luth.se:/pub/unix/gnu
@itemx ftp.mcc.ac.uk
@itemx ftp.stacken.kth.se
@itemx ftp.sunet.se:/pub/gnu
@itemx ftp.univ-lyon1.fr:pub/gnu
@itemx ftp.win.tue.nl:/pub/gnu
@itemx irisa.irisa.fr:/pub/gnu
@itemx isy.liu.se
@itemx nic.switch.ch:/mirror/gnu
@itemx src.doc.ic.ac.uk:/gnu
@itemx unix.hensa.ac.uk:/pub/uunet/systems/gnu
@end table

@item Polska:
@table @code
@item ftp.task.gda.pl:/pub/gnu
@itemx ftp.icm.edu.pl:/pub/gnu
@itemx ftp.man.torun.pl:/pub/gnu
@end table

@item Ameryka Po³udniowa:
@table @code
@item ftp.inf.utfsm.cl:/pub/gnu
@itemx ftp.unicamp.br:/pub/gnu
@end table

@item Kanada Zachodnia:
@table @code
@item ftp.cs.ubc.ca:/mirror2/gnu
@end table

@item USA:
@table @code
@item col.hp.com:/mirrors/gnu
@itemx f.ms.uky.edu:/pub3/gnu
@itemx ftp.cc.gatech.edu:/pub/gnu
@itemx ftp.cs.columbia.edu:/archives/gnu/prep
@itemx ftp.digex.net:/pub/gnu
@itemx ftp.hawaii.edu:/mirrors/gnu
@itemx ftp.kpc.com:/pub/mirror/gnu
@itemx ftp.uu.net:/systems/gnu
@itemx gatekeeper.dec.com:/pub/GNU
@itemx jaguar.utah.edu:/gnustuff
@itemx labrea.stanford.edu
@itemx mrcnext.cso.uiuc.edu:/pub/gnu
@itemx vixen.cso.uiuc.edu:/gnu
@itemx wuarchive.wustl.edu:/systems/gnu
@end table
@end table
@end enumerate

@node Rozpakowywanie, Zawarto¶æ pakietu dystrybucyjnego, Pozyskiwanie, Dystrybucja gawk
@appendixsubsec Rozpakowywanie pakietu dystrybucyjnego
@code{gawk} rozpowszechniany jest jako plik @code{tar} skompresowany
programem GNU Zip, @code{gzip}.

Po uzyskaniu pakietu dystrybucyjnego (na przyk³ad,
@file{gawk-@value{VERSION}.@value{PATCHLEVEL}.tar.gz}), najpierw
korzystamy z @code{gzip} do zdekompresowania pliku, a nastêpnie z @code{tar}
do rozpakowania archiwum.  Do utworzenia dystrybucji @code{gawk} mo¿na
u¿yæ poni¿szego potoku:

@example
# w System V, dodaj 'o' do flag programu tar
gzip -d -c gawk-@value{VERSION}.@value{PATCHLEVEL}.tar.gz | tar -xvpf -
@end example

@noindent
Utworzy to w bie¿±cym katalogu katalog o nazwie
@file{gawk-@value{VERSION}.@value{PATCHLEVEL}}.

Nazwa pliku pakietu dystrybucyjnego ma postaæ
@file{gawk-@var{V}.@var{R}.@var{n}.tar.gz}.
@var{V} wskazuje g³ówn± wersjê @code{gawk}, @var{R} jest bie¿±cym
wydaniem wersji @var{V}, a @var{n} @dfn{poziomem poprawek} (patch level),
oznaczaj±cym, ¿e w tym wydaniu poprawiono pomniejsze b³êdy.
Aktualny poziom poprawek wynosi @value{PATCHLEVEL}, ale przy pobieraniu
pakietów dystrybucyjnych powinno siê braæ wersjê o najwy¿szych numerach
wersji, wydania i poziomu poprawek.  (Warto zapamiêtaæ, ¿e poziomy wydania
wiêksze lub równe 90 oznaczaj± oprogramowanie ``beta'', nie przeznaczone do
pracy.  Zwykle nie chcemy pobieraæ takiej wersjê, chyba ¿e nie przeszkadza
nam eksperymentowanie.)

W systemach innych ni¿ uniksowe potrzebne bêd± odmienne rozwi±zania
pozyskiwania i rozpakowywania pakietu dystrybucyjnego @code{gawk}.
Nale¿y skontaktowaæ siê z miejscowym ekspertem.

@node Zawarto¶æ pakietu dystrybucyjnego,  , Rozpakowywanie, Dystrybucja gawk
@appendixsubsec Zawarto¶æ pakietu dystrybucyjnego @code{gawk}

Dystrybucja @code{gawk} zawiera wiele plików ¼ród³owych w C, pliki
dokumentacji, podkatalogi i pliki zwi±zane z procesem konfiguracji
(@pxref{Instalacja na Uniksie, ,Kompilowanie i instalowanie @code{gawk} na Uniksie}),
oraz kilka podkatalogów zwi±zanych z ró¿nymi, nieuniksowymi, systemami
operacyjnymi.

@table @asis
@item rozmaite pliki @samp{.c}, @samp{.y} i @samp{.h}
Te pliki s± faktycznym kodem ¼ród³owym @code{gawk}.
@end table

@table @file
@item README
@itemx README_d/README.*
Pliki opisowe: @file{README} do @code{gawk} w Uniksie,
a reszta do rozmaitych kombinacji sprzêtowo-programowych.

@item INSTALL
Plik zawieraj±cy omówienie procesu konfiguracji i instalacji.

@item PORTS
Lista systemów, na które przeniesiono @code{gawk}, i które pomy¶lnie
przesz³y przez zestaw testów.

@item ACKNOWLEDGMENT
Lista osób, które mia³y g³ówny wk³ad w kod lub dokumentacjê.

@item ChangeLog
Szczegó³owa lista zmian w kodzie ¼ród³owym, jak poprawione b³êdy czy
ulepszenia.

@item NEWS
Lista zmian w @code{gawk} od ostatniego wydania czy poprawki.

@item COPYING
Powszechna Licencja Publiczna GNU.

@item FUTURES
Krótka lista mo¿liwo¶ci i/lub zmian rozwa¿anych w przysz³ych wydaniach,
z jakim¶ wskazaniem czasu pojawienia siê zmiany, zale¿nie od stopnia
trudno¶ci.

@item LIMITATIONS
Lista czynników ograniczaj±cych sprawno¶æ @code{gawk}.
Wiêkszo¶æ z nich zale¿y od sprzêtu lub oprogramowania systemowego,
a nie jest ograniczeniami w samym @code{gawk}.

@item POSIX.STD
Opis pewnego obszaru, w którym standard POSIX dotycz±cy @code{awk} jest
niepoprawny, i sposobu, w jaki @code{gawk} radzi sobie z tym problemem.

@item PROBLEMS
Plik opisuj±cy rozpoznane k³opoty wystêpuj±ce w bie¿±cym wydaniu.

@cindex sztuczna inteligencja, za pomoc± @code{gawk}
@cindex programowanie AI, za pomoc± @code{gawk}
@item doc/awkforai.txt
Krótki artyku³ opisuj±cy dlaczego @code{gawk} jest dobrym jêzykiem do
programowania AI (Artificial Intelligence, sztucznej inteligencji) .

@item doc/README.card
@itemx doc/ad.block
@itemx doc/awkcard.in
@itemx doc/cardfonts
@itemx doc/colors
@itemx doc/macros
@itemx doc/no.colors
@itemx doc/setter.outline
¬ród³a @code{troff} piêciokolorowej karty informacyjnej @code{awk}.
Do utworzenia wersji kolorowej potrzebna jest nowoczesna wersja
@code{troff}, jak np. GNU Troff (@code{groff}).  W pliku @file{README.card}
zamieszczono instrukcje dla posiadaczy starszych wersji @code{troff}.

@item doc/gawk.1
¬ród³o @code{troff} podrêcznika systemowego man opisuj±cego @code{gawk}.
Rozpowszechniane dla wygody u¿ytkowników Uniksa.

@item doc/gawk.texi
Plik ¼ród³owy Texinfo niniejszej ksi±¿ki.  W celu uzyskania dokumentu
drukowanego powinien zostaæ przetworzony za pomoc± @TeX{}-a, za¶ w celu
utworzenia pliku Info -- za pomoc± @code{makeinfo}.

@item doc/gawk.info
Gotowy, wygenerowany plik Info tej ksi±¿ki.

@item doc/igawk.1
¬ród³o @code{troff} podrêcznika systemowego man opisuj±cego program
@code{igawk} przedstawiony w
@ref{Program igawk, ,£atwa metoda korzystania z funkcji bibliotecznych}.

@item doc/Makefile.in
Plik wej¶ciowy wykorzystywany podczas procesu konfiguracji do generowania
faktycznego pliku @file{Makefile} do tworzenia dokumentacji.

@item Makefile.in
@itemx acconfig.h
@itemx aclocal.m4
@itemx configh.in
@itemx configure.in
@itemx configure
@itemx custom.h
@itemx missing/*
Te pliki i katalogi wykorzystywane s± podczas konfigurowania @code{gawk}
w rozmaitych systemach uniksowych.  Obja¶niono je szczegó³owo w
@ref{Instalacja na Uniksie, ,Kompilowanie i instalowanie @code{gawk} na Uniksie}.

@item awklib/extract.awk
@itemx awklib/Makefile.in
Katalog @file{awklib} zawiera kopiê @file{extract.awk}
(@pxref{Program extract, ,Wydzielanie programów z plików ¼ród³owych Texinfo}),
któr± mo¿na wykorzystaæ do wydzielenia programów przyk³adowych z pliku
¼ród³owego Texinfo tej ksi±¿ki, i plik @file{Makefile.in}, którego
u¿ywa @code{configure} do wygenerowania @file{Makefile}.
Czê¶ci± procesu tworzenia @code{gawk} jest wydzielenie funkcji
bibliotecznych z
@ref{Funkcje biblioteczne, , Biblioteczka funkcji @code{awk}}, i programu
@code{igawk}
z @ref{Program igawk, ,£atwa metoda korzystania z funkcji bibliotecznych}
do postaci gotowych do u¿ytku plików.
S± one instalowane jako czê¶æ procesu instalacji.

@item atari/*
Pliki potrzebne do stworzenia @code{gawk} na Atari ST.
@xref{Instalacja na Atari, ,Instalowanie @code{gawk} na Atari ST},
gdzie opisano szczegó³y.

@item pc/*
Pliki potrzebne do stworzenia @code{gawk} na MS-DOS i OS/2.
@xref{Instalacja na PC, ,Instalacja i kompilacja na MS-DOS i OS/2},
gdzie opisano szczegó³y.

@item vms/*
Pliki potrzebne do stworzenia @code{gawk} VMS.
@xref{Instalacja na VMS, ,Jak skompilowaæ i zainstalowaæ @code{gawk} na VMS},
gdzie opisano szczegó³y.

@item test/*
Zestaw testów do @code{gawk}.  Do uruchomienia danej wersji @code{gawk}
z tym zestawem nale¿y zastosowaæ @samp{make check} w katalogu @code{gawk}
najwy¿szego poziomu.  Je¿eli @code{gawk} pomy¶lnie przejdzie
@samp{make check}, to mo¿na byæ pewnym pomy¶lnego przeniesienia go na dan±
platformê.
@end table

@node Instalacja na Uniksie, Instalacja na VMS, Dystrybucja gawk, Instalacja
@appendixsec Kompilowanie i instalowanie @code{gawk} na Uniksie

Zazwyczaj kompiluje siê i instaluje @code{gawk} wpisuj±c tylko dwa
polecenia.  Jednak, w przypadku nietypowych systemów, mo¿e zachodziæ
potrzeba samodzielnej konfiguracji @code{gawk}.

@menu
* Szybka instalacja::           Kompilowanie @code{gawk} na Uniksie.
* Filozofia konfigurowania::    Jak to wszystko powinno dzia³aæ.
@end menu

@node Szybka instalacja, Filozofia konfigurowania, Instalacja na Uniksie, Instalacja na Uniksie
@appendixsubsec Kompilowanie @code{gawk} dla Uniksa

@cindex instalacja, Unix
Po rozpakowaniu pakietu dystrybucyjnego @code{gawk} nale¿y przez
@code{cd} zmieniæ katalog na @file{gawk-@value{VERSION}.@value{PATCHLEVEL}}.
Jak wiêkszo¶æ programów GNU, @code{gawk} automatycznie konfiguruje siê
do pracy w systemie uniksowym przez uruchomienie programu @code{configure}.
Program ten jest skryptem pow³oki Bourne'a utworzonym automatycznie za pomoc±
GNU @code{autoconf}.
@iftex
(Oprogramowanie @code{autoconf} opisano szczegó³owo w
@cite{Autoconf---Generating Automatic Configuration Scripts},
dostêpnym z Free Software Foundation.)

@end iftex
@ifinfo
(Oprogramowanie @code{autoconf} jest szczegó³owo opisane poczynaj±c od
@ref{Top, , Introduction, autoconf, Autoconf---Generating Automatic Configuration Scripts}.)
@end ifinfo

W celu skonfigurowania @code{gawk} nale¿y po prostu uruchomiæ
@code{configure}:

@example
sh ./configure
@end example

Tworzy to pliki @file{Makefile} i @file{config.h} dostosowane do naszego
systemu.  @file{config.h} zawiera opis rozmaitych faktów dotycz±cych systemu.
W pliku @file{Makefile} mo¿na zmodyfikowaæ zmienn± @code{CFLAGS}, która
steruje opcjami wiersza poleceñ przekazywanych do kompilatora C (takimi jak
poziomy optymalizacji, czy kompilacja do celów debugowania).

Alternatywnie, mo¿na do³o¿yæ w³asne warto¶ci wiêkszo¶ci zmiennych
@code{make}, jak @code{CC} i @code{CFLAGS}, w wierszu poleceñ przy
uruchamianiu @code{configure}:

@example
CC=cc CFLAGS=-g sh ./configure
@end example

@noindent
W pliku @file{INSTALL} dystrybucji @code{gawk} podano szczegó³y.

Po uruchomieniu @code{configure} i ewentualnym zmodyfikowaniu
@file{Makefile}, wpisujemy:

@example
make
@end example

@noindent
i wkrótce potem powinni¶my mieæ wykonywaln± wersjê @code{gawk}.
To wszystko, co trzeba zrobiæ!
(Je¿eli te kroki zawiod±, proszê przes³aæ zg³oszenie b³êdu;
@pxref{B³êdy, ,Zg³aszanie problemów i b³êdów}.)

@node Filozofia konfigurowania, , Szybka instalacja, Instalacja na Uniksie
@appendixsubsec Proces konfigurowania

@cindex konfigurowanie @code{gawk}
(Ta sekcja adresowana jest tylko do osób, które wiedz±
co¶ o pos³ugiwaniu siê jêzykiem C i systemem operacyjnym Unix.)

Kod ¼ród³owy @code{gawk} zasadniczo usi³uje przystawaæ do standardów
formalnych gdzie tylko jest to mo¿liwe.  Znaczy to, ¿e @code{gawk}
wykorzystuje podprogramy biblioteczne wyszczególnione w standardzie ANSI C
i POSIX-owym standardzie interfejsu systemu operacyjnego.
Przy u¿ywaniu kompilatora ANSI C do usprawnienia kontroli podczas kompilacji
wykorzystywane s± prototypy funkcji.

Wiele systemów uniksowych nie obs³uguje wszystkich standardów ANSI czy POSIX.
Podkatalog @file{missing} w dystrybucji @code{gawk} zawiera zastêpniki tych
podprogramów, których najprawdopodobniej brakuje.

Plik @file{config.h}, tworzony przez program @code{configure}, zawiera
definicje opisuj±ce cechy konkretnego systemu operacyjnego, na którym
usi³ujemy skompilowaæ @code{gawk}.  Plik ten opisuje trzy rzeczy: jakie
pliki nag³ówkowe s± dostêpne, by mo¿na je poprawnie do³±czyæ, jakich
funkcji standardowych mo¿na siê spodziewaæ, ¿e s± faktycznie dostêpne
w naszych bibliotekach C, i ró¿ne inne fakty dotycz±ce naszego wariantu
Uniksa.  Na przyk³ad, w strukturze @code{stat} mo¿e nie byæ elementu
@code{st_blksize}.  W tym przypadku @samp{HAVE_ST_BLKSIZE} bêdzie
niezdefiniowane.

@cindex @code{custom.h}, plik konfiguracyjny
@cindex plik konfiguracyjny @code{custom.h}
Mo¿liwe, ¿e nasz kompilator C ok³amie @code{configure}.  Mo¿e to zrobiæ
nie koñcz±c pracy z b³êdem gdy nie jest dostêpna funkcja biblioteczna.
Mo¿na to obej¶æ modyfikuj±c plik @file{custom.h}.  Nale¿y u¿yæ odpowiedniego
do swojego systemu @samp{#ifdef} i zastosowaæ albo @code{#define} albo
@code{#undef} w stosunku do sta³ych, które ¼le zdefiniowa³ program
@code{configure}.  @file{custom.h} jest automatycznie do³±czany przez
@file{config.h}.

Mo¿e siê te¿ zdarzyæ, ¿e @code{configure} utworzony przez @code{autoconf}
w jaki¶ inny sposób nie bêdzie dzia³aæ w danym systemie.
Je¿eli pojawi± siê k³opoty, plik @file{configure.in} jest wej¶ciem dla
@code{autoconf}.  Mo¿na zmieniæ ten plik i utworzyæ now± wersjê
@code{configure}, która zadzia³a.
@xref{B³êdy, ,Zg³aszanie problemów i b³êdów}, gdzie opisano jak zg³aszaæ
problemy z konfigurowaniem @code{gawk}.  Tego samego rozwi±zania mo¿na
u¿yæ do wys³ania aktualizacji @file{configure.in} i/lub @file{custom.h}.

@node Instalacja na VMS, Instalacja na PC, Instalacja na Uniksie, Instalacja
@appendixsec Jak skompilowaæ i zainstalowaæ @code{gawk} na VMS

@c based on material from Pat Rankin <rankin@eql.caltech.edu>

@cindex instalacja, vms
Ta sekcja opisuje jak skompilowaæ i zainstalowaæ @code{gawk} na VMS.

@menu
* Kompilacja na VMS::             Jak skompilowaæ @code{gawk} na VMS.
* Szczegó³y instalowania na VMS:: Jak zainstalowaæ @code{gawk} na VMS.
* Uruchamianie na VMS::           Jak uruchamiaæ @code{gawk} na VMS.
* VMS POSIX::                     Alternatywne instrukcje dla VMS POSIX.
@end menu

@node Kompilacja na VMS, Szczegó³y instalowania na VMS, Instalacja na VMS, Instalacja na VMS
@appendixsubsec Kompilowanie @code{gawk} na VMS

Do kompilacji @code{gawk} na VMS mamy procedurê poleceñ @code{DCL}, która
wydaje wszystkie niezbêdne polecenia @code{CC} i @code{LINK}, jest te¿
@file{Makefile} do wykorzystania przez narzêdzie @code{MMS}.
W katalogu ¼ród³owym nale¿y u¿yæ

@example
$ @@[.VMS]VMSBUILD.COM
@end example

@noindent
lub

@example
$ MMS/DESCRIPTION=[.VMS]DESCRIP.MMS GAWK
@end example

W zale¿no¶ci od wykorzystywanego kompilatora C, nale¿y dzia³aæ wed³ug jednej
z podanych w tabeli instrukcji postêpowania:

@table @asis
@item VAX C V3.x
Nale¿y u¿yæ niezmienionych @file{vmsbuild.com} lub @file{descrip.mms}.
Stosuj± one @code{CC/OPTIMIZE=NOLINE}, co jest kluczowe przy Version 3.0.

@item VAX C V2.x
Musimy mieæ Version 2.3 lub 2.4; starsze nie bêd± dzia³aæ.  Nale¿y zmieniæ
@file{vmsbuild.com} lub @file{descrip.mms} zgodnie z zawartymi w nich
komentarzami.  W przypadku @file{vmsbuild.com} wymaga to tylko usuniêcia
dwu ograniczników @samp{!}.  Trzeba te¿ poprawiæ @file{config.h} (który
jest kopi± pliku @file{[.config]vms-conf.h}) i zakomentowaæ lub usun±æ
dwa wiersze @samp{#define __STDC__ 0} i @samp{#define VAXC_BUILTINS}
w pobli¿u koñca.

@item GNU C
Nale¿y zmodyfikowaæ @file{vmsbuild.com} lub @file{descrip.mms}; zmiany s±
inne ni¿ przy VAX C V2.x, ale równie proste.  Nie powinny byæ potrzebne
¿adne zmiany w @file{config.h}.

@item DEC C
Nale¿y zmodyfikowaæ @file{vmsbuild.com} lub @file{descrip.mms} zgodnie
z zawartymi w nich komentarzami.  Nie powinny byæ potrzebne ¿adne
zmiany w @file{config.h}.
@end table

@code{gawk} by³ testowany z VAX/VMS 5.5-1 przy zastosowaniu VAX C V3.2,
GNU C 1.40 i 2.3.  Powinien dzia³aæ bez zmian na VMS V4.6 i wy¿szych.

@node Szczegó³y instalowania na VMS, Uruchamianie na VMS, Kompilacja na VMS, Instalacja na VMS
@appendixsubsec Instalowanie @code{gawk} na VMS

Do instalacji @code{gawk} wystarczy jedynie polecenie ``foreign'', bêd±ce
symbolem @code{DCL}, którego warto¶æ zaczyna siê od znaku dolara.
Na przyk³ad:

@example
$ GAWK :== $disk1:[gnubin]GAWK
@end example

@noindent
(Za @samp{$disk1:[gnubin]} nale¿y podstawiæ faktyczne po³o¿enie
@code{gawk.exe}.)  Symbol ten powinien zostaæ umieszczony w @file{login.com}
ka¿dego u¿ytkownika, który bêdzie chcia³ uruchamiaæ @code{gawk},
tak by by³ zdefiniowany za ka¿dym razem, gdy u¿ytkownik siê loguje.
Alternatywnie, mo¿na umie¶ciæ go w ogólnosystemowej procedurze
@file{sylogin.com}, co pozwoli na uruchamianie @code{gawk} wszystkim
u¿ytkownikom.

Opcjonalnie do biblioteki pomocy VMS mo¿na za³adowaæ wpis pomocy:

@example
$ LIBRARY/HELP SYS$HELP:HELPLIB [.VMS]GAWK.HLP
@end example

@noindent
(Mo¿na zast±piæ standardow± bibliotekê VMS @samp{HELPLIB} lokaln±,
specyficzn± dla maszyny bibliotek± pomocy.)  Po za³adowaniu, tekst pomocy,

@example
$ HELP GAWK
@end example

@noindent
poda informacje o implementacji @code{gawk} i o jêzyku programowania
@code{awk}.

Domy¶lne po³o¿enie plików programów @code{awk} mo¿e byæ oznaczone nazw±
logiczn± @samp{AWK_LIBRARY}.  Przy opcji @samp{-f}, je¶li podana nazwa pliku
nie zawiera informacji o urz±dzeniu ani ¶cie¿ce, @code{gawk} bêdzie szuka³
najpierw w bie¿±cym katalogu, a nastêpnie, je¶li nie znaleziono pliku,
w katalogu wyszczególnionym przez translacjê @samp{AWK_LIBRARY}.
Je¿eli po przegl±dniêciu obu katalogów pliku nadal nie znaleziono, to
@code{gawk} do nazwy pliku dodaje przyrostek @samp{.awk} i ponawia próbê
szukania.  Je¿eli nie zdefiniowano @samp{AWK_LIBRARY}, to ta czê¶æ
@c     will fail benignly.
poszukiwania pliku ³agodnie zawiedzie.

@node Uruchamianie na VMS, VMS POSIX, Szczegó³y instalowania na VMS, Instalacja na VMS
@appendixsubsec Uruchamianie @code{gawk} na VMS

Na VMS analiza sk³adniowa wiersza poleceñ i konwencje cytowania s± znacz±co
odmienne, wiêc przyk³ady z tej ksi±¿ki czy innych ¼róde³ czêsto wymagaj±
zmian.  Zmiany s± jednak @emph{drobne}, a wszystkie programy @code{awk}
powinny dzia³aæ poprawnie.

Parê prostych testów:

@example
$ gawk -- "BEGIN @{print ""Hello, World!""@}"
$ gawk -"W" version
! mog³oby te¿ byæ -"W version" czy "-W version"
@end example

@noindent
Nale¿y zwróciæ uwagê, ¿e tekst pisany du¿ymi literami (lub mieszanymi) musi
byæ cytowany.

Oprócz oryginalnego interfejsu w stylu pow³oki, @code{gawk} przeniesiony na
VMS zawiera interfejs w stylu @code{DCL} (szczegó³y znajduj± siê
w odpowiedniej pozycji pomocy).  Jednym ze skutków ubocznych podwójnej
analizy sk³adni wiersza poleceñ jest to, ¿e je¶li wyst±pi tylko jeden
parametr (jak w programie podanym jako cytowany ³añcuch powy¿ej), to
polecenie staje siê niejednoznaczne.  W celu obej¶cia tego problemu,
normalnie opcjonalna flaga @samp{--} jest wymagana do wymuszenia stylu
uniksowego zamiast sk³adni @code{DCL}.  Je¿eli wystêpuj± jakie¶ inne opcje
rozpoczynaj±ce siê kresk± (albo podano wiêcej parametrów, np. takich jak
pliki do przetworzenia), to nie ma niejednoznaczno¶ci i mo¿na pomin±æ
@samp{--}.

Domy¶ln± ¶cie¿k± wyszukiwania przy szukaniu plików programów @code{awk}
podanych opcj± @samp{-f} jest @code{"SYS$DISK:[],AWK_LIBRARY:"}.
Warto¶æ tê przes³ania siê wykorzystuj±c zmienn± logiczn± @samp{AWKPATH}.
Formatem @samp{AWKPATH} jest separowana przecinkami lista specyfikacji
katalogów.  Przy jej definiowaniu warto¶æ nale¿y zacytowaæ, tak by
przechowa³a pojedyncz± translacjê, a nie wielotranslacyjn± listê
wyszukiwania @code{RMS}.

@node VMS POSIX,  , Uruchamianie na VMS, Instalacja na VMS
@appendixsubsec Tworzenie i u¿ytkowanie @code{gawk} na VMS POSIX

Nale¿y zignorowaæ podane wy¿ej instrukcje, choæ nadal w bibliotece pomocy
powinien zostaæ udostêpniony @file{vms/gawk.hlp}.  Drzewo ¼ród³owe nale¿y
rozpakowaæ raczej do podsystemu kontenera plików zamiast do zwyk³ego
systemu plików VMS.  Powinni¶my siê upewniæ, ¿e skrypty @file{configure}
i @file{vms/posix-cc.sh} s± wykonywalne.  Je¶li trzeba, stosujemy
w stosunku do nich @samp{chmod +x}.  Nastêpnie uruchamiamy poni¿sze dwa
polecenia:

@example
@group
psx> CC=vms/posix-cc.sh configure
psx> make CC=c89 gawk
@end group
@end example

@noindent
Pierwsze polecenie, pos³uguj±c siê skryptem, aby kompilator C spe³ni³
oczekiwania @code{configure}, zbuduje z szablonów pliki @file{config.h}
i @file{Makefile}.  Drugie polecenie skompiluje i skonsoliduje @code{gawk}
bezpo¶rednio za pomoc± kompilatora C.  Ostrze¿enia ze strony @code{make}
o niemo¿no¶ci ponownego zdefiniowania @code{CC} nale¿y zignorowaæ.
@code{configure} bêdzie siê wykonywaæ bardzo d³ugo, ale przynajmniej podaje
w czasie pracy informacje kontrolne o postêpach.

Przetestowano z VAX/VMS V6.2, VMS POSIX V2.0 i DEC C V5.2.

Po zbudowaniu, @code{gawk} dzia³a jak ka¿de inne narzêdzie pow³oki.
W ¶rodowisku POSIX VMS, w przeciwieñstwie do @code{gawk} przeniesionego
na zwyk³y VMS, nie jest potrzebne ¿adne specjalne operowanie wierszem
poleceñ.

@c Rewritten by Scott Deifik <scottd@amgen.com>
@c and Darrel Hankerson <hankedr@mail.auburn.edu>
@node Instalacja na PC, Instalacja na Atari, Instalacja na VMS, Instalacja
@appendixsec Instalacja i kompilacja na MS-DOS i OS/2

@cindex instalacja, MS-DOS i OS/2
Je¶li uzyskali¶my dystrybucje binarn± przygotowan± przez prowadz±cych wersjê
dla DOS, to @code{gawk} i niezbêdne pliki
pomocnicze pojawi± siê wewn±trz katalogu @file{gnu}: pliki wykonywalne w
@file{gnu/bin}, biblioteki w @file{gnu/lib/awk}, a strony podrêcznika
systemowego w @file{gnu/man}.  Dystrybucjê zaprojektowano do ³atwej
instalacji w katalogu @file{/gnu} danego napêdu, ale pliki mo¿na
zainstalowaæ gdziekolwiek, o ile poprawnie zostanie ustalona warto¶æ
@code{AWKPATH}.  Bez wzglêdu na katalog instalacji mo¿e wymagaæ poprawienia
pierwszy wiersz @file{igawk.cmd} i @file{igawk.bat} (w @file{gnu/bin}).

Dystrybucja binarna bêdzie zawiera³a osobny plik opisuj±cy jej zawarto¶æ.
W szczególno¶ci, mo¿e zawieraæ wiêcej ni¿ jedn± wersjê wykonywalnego
@code{gawk}.  Pakiety dystrybucyjne do OS/2 mog± mieæ inny uk³ad, lecz
instalacja jest podobna.

Wersje @code{gawk} przeznaczone do pracy w OS/2 i MS-DOS szukaj± plików
programów tak, jak to opisano w @ref{Zmienna AWKPATH, ,Zmienna ¶rodowiska
@code{AWKPATH}}.  Jednak elementy w zmiennej @code{AWKPATH} oddzielane s±
¶rednikami (zamiast dwukropkami).  Je¿eli nie zdefiniowano zmiennej
@code{AWKPATH} lub jest ona pusta, to domy¶ln± ¶cie¿k± wyszukiwania jest
@code{@w{".;c:/lib/awk;c:/gnu/lib/awk"}}.

Przy programowaniu w @code{awk} przydatna mo¿e byæ pow³oka podobna do
@code{sh} (w przeciwieñstwie do @code{command.com} w MS-DOS
lub @code{cmd.exe} w OS/2).  Ian Stewartson napisa³ doskona³± pow³okê
pracuj±c± w MS-DOS i OS/2, a do OS/2 dostêpne s± klon @code{ksh} i GNU Bash.
Informacje o tych pow³okach zawiera plik @file{README_d/README.pc}
w pakiecie dystrybucyjnym @code{gawk}.  U¿ytkownicy pow³oki Stewartsona
w DOS-ie powinni sprawdziæ w dokumentacji obs³ugê wierszy poleceñ.
W szczególno¶ci, mo¿e byæ potrzebna zmiana ustawieñ dla @code{gawk}
w konfiguracji pow³oki.  Istotna mo¿e te¿ byæ opcja @code{ignoretype}.

@code{gawk} mo¿na skompilowaæ do pracy w MS-DOS i OS/2 za pomoc± narzêdzi
konstrukcyjnych GNU od DJ Deloriego (DJGPP, tylko MS-DOS) lub
Eberharda Mattesa (EMX, MS-DOS i OS/2).  Do utworzenia 16-bitowych wersji
do MS-DOS i OS/2 mo¿na u¿yæ Microsoft C.  Dodatkowe uwagi zawiera plik
@file{README_d/README.pc} w dystrybucji @code{gawk}.
@file{pc/Makefile} za¶ zawiera istotne uwagi dotycz±ce opcji kompilacji.

W celu utworzenia @code{gawk} nale¿y skopiowaæ pliki z katalogu @file{pc}
(@emph{oprócz} pliku @file{ChangeLog}) do katalogu, w którym umieszczono
resztê ¼róde³ @code{gawk}.  @file{Makefile} zawiera sekcje konfiguracyjne
z komentarzami; by zadzia³a³ z u¿ytym narzêdziem @code{make} mo¿e byæ
konieczna jego modyfikacja.

@file{Makefile} zawiera kilka celów (targets) do budowy rozmaitych wersji
pracuj±cych w MS-DOS i OS/2.  Lista celów zostanie wypisana po wydaniu
polecenia @code{make} bez podania celu.  Na przyk³ad, by utworzyæ
@code{gawk} za pomoc± narzêdzi DJGPP nale¿y wprowadziæ @samp{make djgpp}.

Stosowanie @code{make} do uruchamiania standardowych testów i instalacji
@code{gawk} wymaga dodatkowych uniksopodobnych narzêdzi, ³±cznie
z @code{sh}, @code{sed} i @code{cp}.  Do uruchomienia testów mo¿e byæ
konieczna konwersja plików @file{test/*.ok}, tak by mia³y zwyczajowe
znaczniki koñca linii w stylu DOS.  Wiêkszo¶æ testów bêdzie dzia³aæ
poprawnie z pow³ok± Stewartsona z dodatkowymi narzêdziami czy odpowiednimi
narzêdziami GNU.  Wymagane jest jednak nieco zmian w @file{test/Makefile}.
Zaleca siê skopiowanie pliku @file{pc/Makefile.tst} na @file{test/Makefile},
jako zastêpnik.  Szczegó³y mo¿na znale¼æ w @file{README_d/README.pc}.

@node Instalacja na Atari, Instalacja na Amidze, Instalacja na PC, Instalacja
@appendixsec Instalowanie @code{gawk} na Atari ST

@c based on material from Michal Jaegermann <michal@gortel.phys.ualberta.ca>

@cindex atari
@cindex instalacja, atari
Nie ma istotnych ró¿nic przy instalacji @code{gawk} na rozmaitych modelach
Atari.  Skompilowane pliki wykonywalne @code{gawk} przy wiêkszo¶ci programów
@code{awk} nie wymagaj± du¿ych ilo¶ci pamiêci i powinny dzia³aæ na
wszystkich modelach opartych o procesory Motoroli (nazywanych dalej ST,
nawet je¶li nie jest to ca³kiem poprawne).

Chc±c korzystaæ z @code{gawk} musimy posiadaæ pow³okê, tekstow± lub
graficzn±, która nie przekszta³ca wszystkich znaków wiersza poleceñ na du¿e.
Obs³uga rozró¿niania du¿ych i ma³ych liter we flagach opcji jest bardzo
wa¿na (@pxref{Opcje, ,Opcje wiersza poleceñ}).
Obecnie jest to zachowanie domy¶lne, a problemy mog± wyst±piæ tylko przy
niektórych bardzo starych komputerach.  Je¿eli system nie zachowuje
wielko¶ci liter flag, trzeba bêdzie zaktualizowaæ narzêdzia.  Do ³atwego
importowania programów @code{awk} z innych ¶rodowisk konieczna jest
obs³uga przekierowañ wej¶cia/wyj¶cia.  Mi³o jest mieæ potoki, ale nie jest
to kluczowe.

@menu
* Kompilowanie na Atari::       Kompilowanie @code{gawk} na Atari.
* U¿ytkowanie na Atari::        Uruchamianie @code{gawk} na Atari.
@end menu

@node Kompilowanie na Atari, U¿ytkowanie na Atari, Instalacja na Atari, Instalacja na Atari
@appendixsubsec Kompilowanie @code{gawk} na Atari ST

Gdy @code{sizeof(int)} ró¿ni siê od @code{sizeof(void *)} do poprawnej
kompilacji @code{gawk} wymagany jest kompilator ANSI C.  Pocz±tkowe
przeniesienie programu wykonano za pomoc± @code{gcc}.  Niektórzy wol±
pliki wykonywalne, w których warto¶ci @code{int} maj± cztery bajty, ale
alternatywny wariant te¿ dzia³a.

Podczas próby rekompilacji ¼róde³ @code{gawk} mo¿e byæ potrzebne sporo
pamiêci, gdy¿ niektóre pliki ¼ród³owe (szczególnie @file{regex.c}) s± do¶æ
du¿e.  Je¿eli przy kompilacji takiego pliku zabraknie pamiêci, nale¿y
spróbowaæ zmniejszyæ poziom optymalizacji tego konkretnego pliku.
Mo¿e pomóc.

@cindex Linux
Z rozs±dn± pow³ok± (mo¿e byæ Bash), a w szczególno¶ci je¿eli pracujemy
na Linuksie, MiNT czy podobnym systemie operacyjnym, mamy ca³kiem niez³e
szanse na to, ¿e narzêdzie @code{configure} zadzia³a bezb³êdnie.
Na wypadek, gdyby by³o inaczej, w podkatalogu @file{atari} umieszczono
przyk³adowe wersje @file{config.h} i @file{Makefile.st}.  Mo¿na je
zmodyfikowaæ i skopiowaæ na odpowiednie pliki w g³ównym katalogu
ze ¼ród³ami.  Nawet je¶li @code{configure} co¶ utworzy³, warto porównaæ
jego wyniki z wersjami przyk³adowymi i ewentualnie dokonaæ korekt.

Niektóre fragmenty kodu ¼ród³owego @code{gawk} zale¿± od zdefiniowania
przez preprocesor @samp{atarist}.  Najpro¶ciej mówi±c, zak³adaj±
¶rodowisko TOS z @code{gcc}.  Je¿eli nie odpowiada to danemu ¶rodowisku,
nale¿y zmieniæ odno¶ne sekcje stosownie do potrzeb.  Zobacz tak¿e uwagi na
temat @code{AWKPATH} i @code{envsep} w @ref{U¿ytkowanie na Atari,
,Uruchamianie @code{gawk} na Atari ST}.

Dostarczony, przyk³adowy @file{config.h} twierdzi, ¿e w bibliotekach brakuje
funkcji @code{system}, co nie jest prawd±, a alternatywna jej implementacja
zapewniona jest w @file{atari/system.c}.  W zale¿no¶ci od w³asnej konkretnej
kombinacji pow³oki i systemu operacyjnego, mo¿na zmieniæ ten plik, tak by
wskazywa³, ¿e funkcja @code{system} jest dostêpna.

@node U¿ytkowanie na Atari, , Kompilowanie na Atari, Instalacja na Atari
@appendixsubsec Uruchamianie @code{gawk} na Atari ST

Wykonywalna wersja @code{gawk} powinna byæ umieszczona, jak zwykle,
gdziekolwiek w ¶cie¿ce wyszukiwania @code{PATH}, gdzie mo¿e j± znale¼æ
nasza pow³oka.

Podczas wykonywania @code{gawk} tworzy wiele plików tymczasowych.
@code{gawk} przy korzystaniu z bibliotek @code{gcc} do TOS szuka zmiennej
¶rodowiska albo @code{TEMP} albo @code{TMPDIR}, w tej kolejno¶ci.
Je¿eli znaleziono któr±¶ z nich, to zak³ada siê, ¿e jej warto¶æ jest
katalogiem na pliki tymczasowe.  Katalog ten musi istnieæ, a je¿eli mo¿liwe
jest po¶wiêcenie pamiêci, dobrze jest umie¶ciæ go na napêdzie RAM.  Je¿eli
nie znaleziono ani @code{TEMP} ani @code{TMPDIR}, to do przechowywania
plików tymczasowych @code{gawk} wykorzystuje katalog bie¿±cy.

Wersja @code{gawk} przeznaczona dla ST szuka swoich plików programów jak
opisano w
@ref{Zmienna AWKPATH, ,Zmienna ¶rodowiska @code{AWKPATH}}.  Domy¶lna warto¶æ
zmiennej @code{AWKPATH} pobierana jest z @code{DEFPATH} zdefiniowanej
w @file{Makefile}. Przyk³adowy, przeznaczony do pracy z @code{gcc}/TOS, plik
@file{Makefile} dla ST w zestawie dystrybucyjnym nadaje @code{DEFPATH}
warto¶æ @code{@w{".,c:\lib\awk,c:\gnu\lib\awk"}}.  ¦cie¿kê wyszukiwania
zmienia siê jawnie nadaj±c @code{AWKPATH} ¿±dan± warto¶æ.  Zauwa¿, ¿e na
ST do oddzielania elementów w zmiennej @code{AWKPATH} nie mo¿na u¿yæ
dwukropków, gdy¿ maj± one inne, zastrze¿one znaczenia.  Do rozdzielenia
elementów ¶cie¿ki nale¿y zamiast tego u¿yæ przecinka.  Przy rekompilacji
znak rozdzielaj±cy mo¿na zmieniæ inicjuj±c inn± warto¶ci± zmienn±
@code{envsep} w @file{atari/gawkmisc.atr}.

Chocia¿ @code{awk} zezwala na du¿± elastyczno¶æ przy dokonywaniu
przekierowañ wej¶cia/wyj¶cia z programu, cecha ta na ST pracuj±cej pod
kontrol± TOS powinna byæ wykorzystywana z rozwag±.  W pewnych okoliczno¶ciach
procedury systemu operacyjnego do przetwarzania kolejki uchwytów plików
trac± ¶lady niektórych zdarzeñ, co powoduje pad komputera i wymaga
ponownego uruchomienia systemu.  Czêsto wystarcza gor±cy restart.
Na szczê¶cie, zdarza siê to rzadko, i raczej w bardzo tajemniczych
sytuacjach.  W szczególno¶ci, powinno siê unikaæ rozwi±zañ, w których
jaka¶ czê¶æ programu @code{awk} stosuje instrukcje @code{print} jawnie
przekierowane do @code{"/dev/stdout"}, podczas gdy inne instrukcje
@code{print} u¿ywaj± domy¶lnego standardowego wyj¶cia, a wywo³uj±ca pow³oka
przekierowa³a standardowe wyj¶cie do pliku.

Gdy @code{gawk} skompilowany jest za pomoc± @code{gcc} w wersji ST i jego
zwyk³ych bibliotek, przyjmuje jako separatory ¶cie¿ki zarówno @samp{/},
jak i @samp{\}.  Mimo ¿e jest to wygodne, nale¿y pamiêtaæ, ¿e odbiera jeden,
poprawny z technicznego punktu widzenia, znak (@samp{/}) z nazw plików.
Mo¿e to powodowaæ k³opoty z programami zewnêtrznymi, wywo³ywanymi za
po¶rednictwem funkcji @code{system}, które mog± nie przestrzegaæ tej
konwencji.  Ka¿dorazowo, gdy istnieje mo¿liwo¶æ, ¿e plik stworzony przez
@code{gawk} bêdzie wykorzystywany przez inne programy, nale¿y w jego nazwie
u¿ywaæ tylko odwrotnych uko¶ników.  Powinno siê te¿ pamiêtaæ, ¿e w @code{awk}
odwrotne uko¶niki w ³añcuchach musz± byæ podwojone, je¶li chcemy uzyskaæ
dos³owne odwrotne uko¶niki (@pxref{Sekwencje specjalne}).

@node Instalacja na Amidze, B³êdy, Instalacja na Atari, Instalacja
@appendixsec Instalowanie @code{gawk} na Amidze

@cindex amiga
@cindex instalacja, amiga
Na systemie Amiga mo¿na zainstalowaæ @code{gawk} korzystaj±c z emulacji
¶rodowiska Uniksa dostêpnej poprzez anonimowe @code{ftp}
z @code{ftp.ninemoons.com} w katalogu @file{pub/ade/current}.
Zawiera ono pow³okê opart± na @code{pdksh}.  G³ówn± sk³adow± tego ¶rodowiska
jest biblioteka emulacji Uniksa, @file{ixemul.lib}.
@c could really use more background here, who wrote this, etc.

Bardziej kompletna dystrybucja przeznaczona na Amigê dostêpna jest
na Geek Gadgets CD-ROM z:

@quotation
CRONUS @*
1840 E. Warner Road #105-265 @*
Tempe, AZ 85284  USA @*
US Toll Free: (800) 804-0833 @*
Phone: +1-602-491-0442 @*
FAX: +1-602-491-0048 @*
Email:  @code{info@@ninemoons.com} @*
WWW: @code{http://www.ninemoons.com} @*
Anonymous @code{ftp} site: @code{ftp.ninemoons.com} @*
@end quotation

Po uzyskaniu dystrybucji, konfigurujemy @code{gawk} po prostu uruchamiaj±c
@code{configure}:

@example
configure -v m68k-amigaos
@end example

Nastêpnie uruchamiamy @code{make} i powinni¶my mieæ wszystko ustawione!
(Je¶li te kroki nie zadzia³aj±, proszê wys³aæ zg³oszenie b³êdu
@pxref{B³êdy, ,Zg³aszanie problemów i b³êdów}.)

@node B³êdy, Inne wersje, Instalacja na Amidze, Instalacja
@appendixsec Zg³aszanie problemów i b³êdów
@display
@i{Nie ma nic bardziej niebezpiecznego ni¿ znudzony archeolog.}
Autostopem przez Galaktykê
@c s³uchowisko radiowe, nie ksi±¿ka. :-)
@end display
@sp 1

Je¶li masz k³opoty z @code{gawk} albo s±dzisz, ¿e znalaz³e¶ b³±d,
zg³o¶, proszê, twórcom.  Nie mo¿emy obiecaæ, ¿e cokolwiek zrobimy, ale mo¿e
bêdziemy chcieli go poprawiæ.

Przed zg³oszeniem b³êdu, upewnij siê, ¿e faktycznie znalaz³e¶ prawdziwy
b³±d.  Uwa¿nie przeczytaj ponownie dokumentacjê i sprawd¼, czy rzeczywi¶cie
mówi, ¿e mo¿esz zrobiæ to, co usi³ujesz.  Je¿eli nie jest jasne, czy
powiniene¶ móc co¶ zrobiæ, czy nie, zg³o¶ to tak¿e -- jest to b³±d
w dokumentacji!

Przed zg³oszeniem b³êdu lub prób± samodzielnego poprawienia go, spróbuj go
wyodrêbniæ do najmniejszego mo¿liwego programu @code{awk} i pliku danych
wej¶ciowych, które powielaj± problem.  Nastêpnie wy¶lij nam pliki programu
i danych, jakie¶ pojêcie o rodzaju systemu uniksowego, którego u¿ywasz,
i dok³adne rezultaty, jakie da³ @code{gawk}.  Powiedz te¿, czego siê
spodziewa³e¶: pomaga to rozstrzygn±æ, czy problem nie le¿a³ rzeczywi¶cie
w dokumentacji.

Gdy problem jest ju¿ sprecyzowany, prze¶lij e-mail w jêzyku angielskim
do @email{bug-gawk@@gnu.org}.

Do³±cz, proszê, numer u¿ywanej wersji @code{gawk}.  Informacjê tê mo¿na
uzyskaæ poleceniem @samp{gawk --version}.  Skorzystanie z wy¿ej podanego
adresu automatycznie wy¶le kopiê twojej wiadomo¶ci do Arnolda Robbinsa.
Je¶li jest to konieczne, jest on te¿ osi±galny wprost
pod adresem @email{arnold@@gnu.org}.

@cindex @code{comp.lang.awk}
@strong{Wa¿ne!} Proszê @emph{nie} wysy³aæ listów ze zg³oszeniami b³êdów
w @code{gawk} na grupê dyskusyjn± @code{comp.lang.awk}.
Mimo ¿e twórcy @code{gawk} czasami czytaj± tê grupê, nie ma ¿adnej pewno¶ci,
¿e zobacz± twój list.  Kroki opisane wy¿ej s± oficjaln±, uznan± metod±
zg³aszania b³êdów.

Zawsze mile widziane s± te¿ sugestie nie zwi±zane z b³êdami.  Je¶li masz
pytania dotycz±ce niejasno¶ci w dokumentacji czy niezrozumia³ych cech,
zapytaj Arnolda Robbinsa. Spróbuje ci pomóc, choæ mo¿e nie mieæ czasu, by
rozwi±zaæ problem.  Mo¿esz wys³aæ mu list elektroniczny na adres internetowy
podany powy¿ej.

Je¿eli napotkasz b³±d w jednym z nie-uniksowych @code{gawk}, wy¶lij proszê
wiadomo¶æ poczt± elektroniczn± do osoby zajmuj±cej siê przeniesieniem
@code{gawk} na tê platformê.  Wymieniono je ni¿ej, a tak¿e w pliku
@file{README} pakietu dystrybucyjnego @code{gawk}.
Je¿eli informacja w pliku @file{README} jest sprzeczna z podan± tutaj,
to powinna byæ uwa¿ana za autorytatywn±.

@c NEEDED for looks
@page
Osoby zajmuj±ce siê przeniesieniem @code{gawk} na systemy nie-uniksowe:

@cindex Deifik, Scott
@cindex Fish, Fred
@cindex Hankerson, Darrel
@cindex Jaegermann, Michal
@cindex Rankin, Pat
@cindex Rommel, Kai Uwe
@table @asis
@item MS-DOS
Scott Deifik, @samp{scottd@@amgen.com} i
Darrel Hankerson, @samp{hankedr@@mail.auburn.edu}.

@item OS/2
Kai Uwe Rommel, @samp{rommel@@ars.de}.

@item VMS
Pat Rankin, @samp{rankin@@eql.caltech.edu}.

@item Atari ST
Michal Jaegermann, @samp{michal@@gortel.phys.ualberta.ca}.

@item Amiga
Fred Fish, @samp{fnf@@ninemoons.com}.
@end table

Je¿eli twój b³±d daje siê powieliæ tak¿e na Uniksie, prze¶lij proszê kopie
swego zg³oszenia na ogóln± listê b³êdów GNU, a tak¿e do Arnolda Robbinsa,
na wskazane wy¿ej adresy.

@node Inne wersje, , B³êdy, Instalacja
@appendixsec Inne wolnodostêpne implementacje @code{awk}
@cindex Brennan, Michael
@ignore
From: emory!amc.com!brennan (Michael Brennan)
Subject: C++ comments in awk programs
To: arnold@gnu.ai.mit.edu (Arnold Robbins)
Date: Wed, 4 Sep 1996 08:11:48 -0700 (PDT)

@end ignore
@display
@i{Wstawianie takich komentarzy w programie awk jest rodzajem zabawy.}
      @code{// Czy komentarze z C++ dzia³aj±? odpowied¼: tak! oczywi¶cie}
Michael Brennan
@end display
@sp 1

Istniej± dwie inne swobodnie dostêpne implementacje @code{awk}
Niniejsza sekcja pokrótce opisuje, sk±d je wzi±æ.

@table @asis
@cindex Kernighan, Brian
@cindex anonymous @code{ftp}
@cindex @code{ftp}, anonimowe
@item Unix @code{awk}
Brian Kernighan by³ w stanie uczyniæ swoj± implementacjê @code{awk}
wolnodostêpn±.  Mo¿na j± uzyskaæ przez anonimowe @code{ftp} z serwera
@code{@w{netlib.bell-labs.com}}.  Nale¿y zmieniæ katalog na
to @file{/netlib/research}, zastosowaæ tryb ``binary'' lub ``image''
i pobraæ @file{awk.bundle.gz}.

Jest to archiwum pow³oki, które zosta³o skompresowane narzêdziem GNU
@code{gzip}. Dekompresuje siê je narzêdziem @code{gunzip}.

Mo¿na j± te¿ pobraæ za po¶rednictwem WWW
z jego @uref{http://cm.bell-labs.com/who/bwk, strony domowej}.

Wersja ta wymaga kompilatora ANSI C; GCC (kompilator C z projektu GNU)
dzia³a ca³kiem nie¼le.

@cindex Brennan, Michael
@cindex @code{mawk}
@item @code{mawk}
Michael Brennan napisa³ niezale¿n± implementacjê @code{awk}, nazwan±
@code{mawk}.  Jest dostêpna na zasadach GPL
(@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE}), tak samo jak @code{gawk}.

Mo¿na j± uzyskaæ przez anonimowe @code{ftp} z serwera
@code{@w{ftp.whidbey.net}}.  Nale¿y zmieniæ katalog na
@file{/pub/brennan}, zastosowaæ tryb ``binary'' lub ``image'' i pobraæ
@file{mawk1.3.3.tar.gz} (lub najnowsz± wersjê, jaka tam jest).

Dekompresjê tego pliku mo¿na wykonaæ za pomoc± @code{gunzip}.
Instalacja jest zbli¿ona jak w przypadku @code{gawk}
(@pxref{Instalacja na Uniksie, , Kompilowanie i instalowanie @code{gawk} na Uniksie}).
@end table

@node Uwagi, S³ownik, Instalacja, Top
@appendix Uwagi implementacyjne

W tym dodatku zawarto informacje istotne g³ównie dla osób tworz±cych
i rozwijaj±cych @code{gawk}.  Ca³o¶æ jest swoista dla @code{gawk} i nie
odnosi siê do innych implementacji.

@menu
* Tryb zgodno¶ci::              Jak wy³±czyæ pewne rozszerzenia @code{gawk}.
* Uzupe³nienia::                Tworzenie uzupe³nieñ @code{gawk}.
* Przysz³e rozszerzenia::       Nowe mo¿liwo¶ci, które kiedy¶ mog± zostaæ
                                wprowadzone.
* Usprawnienia::                Sugestie usprawnieñ, jakie mog± wykonaæ
                                ochotnicy.
@end menu

@node Tryb zgodno¶ci, Uzupe³nienia, Uwagi, Uwagi
@appendixsec Zgodno¶æ w dó³ i debuggowanie

@xref{POSIX/GNU, ,Extensions in @code{gawk} Not in POSIX @code{awk}},
gdzie podsumowano rozszerzenia GNU w stosunku do programu i jêzyka @code{awk}.
Wszystkie te mo¿liwo¶ci mo¿na wy³±czyæ wywo³uj±c @code{gawk} z opcj±
@samp{--traditional} lub z opcj± @samp{--posix}.

Je¿eli @code{gawk} skompilowano do diagnostyki z @samp{-DDEBUG}, to
w wierszu poleceñ jest dostêpna jeszcze jedna opcja:

@table @code
@item -W parsedebug
@itemx --parsedebug
Wypisuje informacje stosu analizatora podczas analizy sk³adniowej programu.
@end table

Opcjê tê przewidziano tylko dla powa¿nych twórców @code{gawk}, a nie dla
przypadkowego u¿ytkownika.  Prawdopodobnie nie zosta³a nawet wkompilowana
w twoj± wersjê @code{gawk}, gdy¿ spowalnia wykonywanie.

@node Uzupe³nienia, Przysz³e rozszerzenia, Tryb zgodno¶ci, Uwagi
@appendixsec Tworzenie uzupe³nieñ @code{gawk}

Je¿eli masz zamiar w znacz±cy sposób poszerzyæ @code{gawk}, masz pe³n±
swobodê w tej kwestii.  To w³a¶nie jest zasadnicz± cech± wolnego
oprogramowania: kod ¼ród³owy jest dostêpny i mo¿esz bez swobodnie zmieniaæ go
jak zechcesz (@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE}).

W tej sekcji omówiono dziedziny, w jakich mo¿na zmieniæ @code{gawk},
i warunki, o których powinno siê pamiêtaæ.

@menu
* Dodawanie kodu::              Dodawanie kodu do g³ównego cia³a @code{gawk}.
* Nowe przeniesienia::          Przenoszenie @code{gawk} na nowy system
                                operacyjny.
@end menu

@node Dodawanie kodu, Nowe przeniesienia, Uzupe³nienia, Uzupe³nienia
@appendixsubsec Dodawanie nowych mo¿liwo¶ci

@cindex dodawanie nowych mo¿liwo¶ci
@cindex mo¿liwo¶ci, dodawanie
@cindex cechy, dodawanie
Je¿eli chcesz, mo¿esz swobodnie dodawaæ nowe mo¿liwo¶ci do @code{gawk}.
Je¶li jednak chcia³by¶, by te zmiany zosta³y zawarte w dystrybucji
@code{gawk}, to jest kilka kroków, jakie powiniene¶ podj±æ, bym móg³
wcieliæ twoje zmiany.

@enumerate 1
@item
Pobierz najnowsz± wersjê.
Znacznie ³atwiej mi scalaæ zmiany je¶li odnosz± siê do naj¶wie¿szej
rozpowszechnianej wersji @code{gawk}.  Je¶li twoja wersja @code{gawk} bêdzie
bardzo stara, mogê nie byæ w stanie zintegrowaæ jej w ogóle.
@xref{Pozyskiwanie, ,Pozyskiwanie pakietu dystrybucyjnego @code{gawk}}, gdzie opisano
pozyskiwanie najnowszej wersji @code{gawk}.

@item
@iftex
Przestrzegaj @cite{Standardów Kodowania GNU}.
@end iftex
@ifinfo
Zobacz @inforef{Top, , Version, standards, GNU Coding Standards}.
@end ifinfo
Dokument ten opisuje w jaki sposób powinno byæ pisane oprogramowanie GNU.
Je¶li go nie czyta³e¶, proszê przeczytaj, najlepiej @emph{przed}
rozpoczêciem modyfikowania @code{gawk}.  (@cite{Standardy Kodowania GNU}
s± czê¶ci± pakietu dystrybucyjnego Autoconf, z FSF.)

@cindex kodowanie, styl stosowany w @code{gawk}
@cindex @code{gawk}, styl kodowania
@cindex styl kodowania stosowany w @code{gawk}
@item
Korzystaj ze stylu kodowania @code{gawk}.
Kod C u¿yty do budowy @code{gawk} kieruje siê instrukcjami zawartymi w
@cite{Standardach Kodowania GNU}, z pomniejszymi wyj±tkami.
Kod sformatowano korzystaj±c z tradycyjnego stylu ``K&R'', szczególnie
tyczy siê to umieszczania nawiasów klamrowych i zastosowania tabulacji.
W skrócie, regu³y kodowania u¿yte w @code{gawk} s± nastêpuj±ce:

@itemize @bullet
@item
Przy definiowaniu funkcji stosujemy nag³ówki w starym stylu
(bez prototypowania funkcji).

@item
Nazwê funkcji umieszczamy na pocz±tku wiersza.

@item
Typ zwracany przez funkcjê, nawet je¶li jest to @code{int}, umieszczamy
w wierszu powy¿ej wiersza z nazw± i argumentami funkcji.

@item
Deklaracje argumentów funkcji nie powinny byæ wciête.

@item
Wokó³ nawiasów u¿ywanych w strukturach steruj±cych
(@code{if}, @code{while}, @code{for}, @code{do}, @code{switch}
i @code{return}) umieszczamy spacje.

@item
Nie umieszczamy spacji przed nawiasami stosowanymi w wywo³aniach funkcji.

@item
Umieszczamy spacje wokó³ wszystkich operatorów C i po przecinkach
w wywo³aniach funkcji.

@item
Nie u¿ywamy operatora przecinkowego do tworzenia wielu efektów ubocznych,
z wyj±tkiem czê¶ci inicjuj±cych i inkrementuj±cych pêtli @code{for},
oraz w cia³ach makr.

@item
Do wciêæ u¿ywamy prawdziwych tabulacji, nie spacji.

@item
U¿ywamy rozmieszczenia nawiasów klamrowych w stylu``K&R''.

@item
U¿ywamy porównañ z @code{NULL} i @code{'\0'} w warunkach instrukcji
@code{if}, @code{while} i @code{for} oraz w przypadkach @code{case}
instrukcji @code{switch}, zamiast zwyk³ego, jawnego wska¼nika czy warto¶ci
znakowej.

@item
Zamiast @code{1} i @code{0} stosujemy, gdzie jest to w³a¶ciwe, sta³e
symboliczne @code{TRUE}, @code{FALSE} i @code{NULL} i sta³± znakow±
@code{'\0'}.

@item
Ka¿d± funkcjê zaopatrujemy w jednowierszowy opisowy komentarz.

@item
Nie u¿ywamy @samp{#elif}.  Wiele starszych kompilatorów Unix C nie
potrafi go obs³u¿yæ.

@item
Do alokacji pamiêci ze stosu nie stosujemy funkcji @code{alloca}.
Korzystanie z niej powoduje wiêcej k³opotów z przeno¶no¶ci± ni¿ daje
niewielkich korzy¶ci brak konieczno¶ci zwalniania przydzia³u pamiêci.
Zamiast tego, u¿ywamy @code{malloc} i @code{free}.
@end itemize

Je¶li bêdê musia³ ponownie formatowaæ twój kod, by dostosowaæ go do stylu
kodowania stosowanego w @code{gawk}, byæ mo¿e nie bêdzie mi siê chcia³o.

@item
B±d¼ przygotowany na podpisanie odpowiednich papierów.
Aby FSF mog³a rozprowadzaæ twoje zmiany, musisz albo zamie¶ciæ je jako
public-domain i dostarczyæ podpisane o¶wiadczenie to stanowi±ce, albo
przyznaæ prawa autorskie FSF.  Obie te rzeczy ³atwo wykonaæ i @emph{wiele}
osób ju¿ to zrobi³o.  Je¶li masz pytania, proszê skontaktuj siê ze mn±
(@pxref{B³êdy, , Zg³aszanie problemów i b³êdów}) lub @code{gnu@@gnu.org}.

@item
Zaktualizuj dokumentacjê.
Proszê, dostarcz razem ze swym nowym kodem nowe sekcje czy rozdzia³y do tej
ksi±¿ki.  Je¶li to mo¿liwe, proszê u¿yj prawdziwego Texinfo zamiast dawaæ
po prostu niesformatowany tekst ASCII (mimo to, nawet to jest lepsze ni¿
brak dokumentacji w ogóle).  Konwencje, jakie powinny byæ stosowane
w @cite{@value{TITLE}} podano po @samp{@@bye} na koñcu pliku ¼ród³owego
Texinfo.  Je¶li to mo¿liwe, proszê te¿ zaktualizowaæ stronê dokumentacji
systemowej man.

Bêdziesz tak¿e musia³ podpisaæ odpowiednie papiery dotycz±ce zmian
w dokumentacji.

@item
Zmiany wysy³aj jako pliki ró¿nic kontekstowych diff lub zunifikowane diff.
Do porównania oryginalnego drzewa ¼ród³owego @code{gawk} ze swoj± wersj±
zastosuj @samp{diff -c -r -N} lub @samp{diff -u -r -N}.
(Pliki ró¿nic kontekstowych s± dla mnie czytelniejsze, ale pliki w formacie
zunifikowanym maj± mniejsze rozmiary.)  Polecam wykorzystywanie @code{diff}
w wersji GNU.  Dostarczaj±c zmiany prze¶lij mi, proszê, wyj¶cie
utworzone przez który¶ z podanych przebiegów @code{diff}.
@xref{B³êdy, , Zg³aszanie problemów i b³êdów}, gdzie podano informacje o
poczcie elektronicznej.

Stosowanie tego formatu u³atwia mi nanoszenie twoich zmian na g³ówn± wersjê
kodu ¼ród³owego @code{gawk} (za pomoc± @code{patch}).  Je¶li bêdê musia³
nanosiæ zmiany rêcznie, korzystaj±c z edytora tekstów, mogê tego nie
zrobiæ, szczególnie je¶li to wiele zmian.

@item
Do dostarczonej pracy do³±cz wpis przeznaczony do umieszczenia
w @file{ChangeLog}.
Pomo¿e to pó¼niej w minimalizacji ilo¶ci pracy, jak± muszê wykonaæ,
u³atwiaj±c mi zaakceptowanie poprawek.
@end enumerate

Chocia¿ wygl±da to na mnóstwo pracy, proszê pamiêtaj, ¿e choæ ty sam piszesz
nowy kod, ja muszê siê nim opiekowaæ i obs³ugiwaæ, a je¿eli nie bêdê
móg³ tego robiæ przy minimum dodatkowej pracy, to prawdopodobnie nie bêdê
robi³.

@node Nowe przeniesienia, , Dodawanie kodu, Uzupe³nienia
@appendixsubsec Przenoszenie @code{gawk} na nowy system operacyjny

@cindex porting @code{gawk}
Je¿eli chcia³by¶ przenie¶æ @code{gawk} na nowy system operacyjny, to
nale¿y przestrzegaæ kilku zasad.

@enumerate 1
@item
Przestrzegaj wskazówek z @ref{Dodawanie kodu, ,Dodawanie nowych mo¿liwo¶ci},
dotycz±cych stylu kodowania, dostarczania plików diff, i tak dalej.

@item
Wykonuj±c przeniesienie, pamiêtaj, ¿e twój kod musi zgodnie wspó³¿yæ
z reszt± @code{gawk} i wersjami na inne platformy.  Unikaj nieuzasadnionych
zmian w czê¶ciach kodu niezale¿nych od systemu.  Je¿eli jest to mo¿liwe,
unikaj rozsiewania @samp{#ifdef}-ów tylko dla swojej wersji po ca³ym kodzie.

Je¿eli niezbêdne dla danego systemu zmiany bêd± zbytnio wp³ywaæ na kod,
prawdopodobnie ich nie zaakceptujê.  W takim przypadku, bêdziesz móg³,
oczywi¶cie, rozpowszechniaæ zmiany na w³asn± rêkê, dopóki bêdziesz dzia³aæ
zgodnie z GPL (@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE}).

@item
Wieloma plikami dostarczanych z @code{gawk} opiekuj± siê inni ludzie
z Free Software Foundation.  Nie powiniene¶ zatem ich zmieniaæ, chyba ¿e
masz bardzo mocne uzasadnienie.  Tzn.@: zmiany nie s± wykluczone, ale zmiany
w tych plikach bêd± analizowane szczególnie uwa¿nie.  Plikami tymi s±:
@file{alloca.c}, @file{getopt.h}, @file{getopt.c}, @file{getopt1.c},
@file{regex.h}, @file{regex.c}, @file{dfa.h}, @file{dfa.c},
@file{install-sh} i @file{mkinstalldirs}.

@item
B±d¼ gotów kontynuowaæ opiekê nad swoim przeniesieniem.
Nieuniksowe systemy operacyjne wspierane s± przez ochotników, którzy
pielêgnuj± kod potrzebny do kompilacji i uruchomienia @code{gawk} na ich
systemach.  Je¿eli ¿aden z ochotników nie opiekuje siê wersj± na dan±
platformê, przeniesienie takie staje siê nieobs³ugiwane, i mo¿e byæ
konieczne usuniêcie go z dystrybucji.

@item
Zapewnij odpowiedni plik @file{gawkmisc.???}.
Ka¿da z przeniesionych wersji posiada w³asny @file{gawkmisc.???}, który
implementuje pewne funkcje specyficzne dla danego systemu operacyjnego.
Jest to przejrzystsze ni¿ multum instrukcji @samp{#ifdef} rozrzuconych
po ca³ym kodzie.  @file{gawkmisc.c} w g³ównym katalogu ¼ród³owym do³±cza
odpowiedni plik @file{gawkmisc.???} z ka¿dego z podkatalogów.  Upewnij siê,
¿e to tak¿e zaktualizowa³e¶.

Plik @file{gawkmisc.???} ka¿dej z przeniesionych wersji posiada przyrostek
wskazuj±cy odpowiedni± nazwê maszyny czy systemu operacyjnego.  Na przyk³ad,
@file{pc/gawkmisc.pc} i @file{vms/gawkmisc.vms}.  Zastosowanie osobnych
przyrostków, zamiast zwyk³ego @file{gawkmisc.c}, umo¿liwia przesuwanie
plików z podkatalogu danego systemu do g³ównego podkatalogu, bez ryzyka
przypadkowego zniszczenia faktycznego pliku @file{gawkmisc.c}.
(Obecnie dotyczy to tylko przenoszenia @code{gawk} na MS-DOS i OS/2.)

@item
Dostarcz @file{Makefile} i ewentualne inne pliki ¼ród³owe i nag³ówkowe C,
które s± niezbêdne dla twojego systemu operacyjnego.  Ca³o¶æ twego kodu
powinna byæ w osobnym podkatalogu, o nazwie takiej jak, lub przypominaj±cej,
nazwê systemu operacyjnego albo komputera.  Je¿eli to mo¿liwe, spróbuj
zorganizowaæ to tak, by nie by³o konieczne przesuwanie plików z podkatalogu
do g³ównego katalogu ¼ród³owego.  Je¶li nie jest to mo¿liwe, upewnij siê, ¿e
nie u¿ywasz dla swoich plików nazw dubluj±cych nazwy plików z g³ównego
katalogu ¼ród³owego.

@item
Zaktualizuj dokumentacjê.
Napisz, proszê, sekcjê (czy sekcje) do tej ksi±¿ki opisuj±c± etapy
instalacji i konfiguracji potrzebne do zainstalowania i/lub skompilowania
@code{gawk} w twoim systemie.

@item
B±d¼ przygotowany na podpisanie odpowiednich papierów.
Aby FSF mog³a rozprowadzaæ twoje zmiany, musisz albo zamie¶ciæ je jako
public-domain i dostarczyæ podpisane o¶wiadczenie to stanowi±ce, albo
przyznaæ prawa autorskie FSF.
@ifinfo
Obie te rzeczy ³atwo wykonaæ i @emph{wiele} osób ju¿ to zrobi³o.  Je¶li
masz pytania, proszê skontaktuj siê ze mn±
(@pxref{B³êdy, ,Zg³aszanie problemów i b³êdów}) lub @code{gnu@@gnu.org}.
@end ifinfo
@end enumerate

Przestrzeganie tych wskazañ znacznie u³atwi zintegrowanie twoich zmian
z @code{gawk} i umo¿liwi szczê¶liwe wspó³istnienie z kodem przeznaczonym
do innych systemów operacyjnych, który ju¿ tu jest.

W kodzie, jaki dostarczasz i którym siê opiekujesz, mo¿esz swobodnie
stosowaæ taki styl kodowania i uk³ad nawiasów klamrowych, jaki ci odpowiada.

@node Przysz³e rozszerzenia, Usprawnienia, Uzupe³nienia, Uwagi
@appendixsec Prawdopodobne przysz³e rozszerzenia
@ignore
From emory!scalpel.netlabs.com!lwall Tue Oct 31 12:43:17 1995
Return-Path: <emory!scalpel.netlabs.com!lwall>
Message-Id: <9510311732.AA28472@scalpel.netlabs.com>
To: arnold@skeeve.atl.ga.us (Arnold D. Robbins)
Subject: Re: May I quote you?
In-Reply-To: Your message of "Tue, 31 Oct 95 09:11:00 EST."
             <m0tAHPQ-00014MC@skeeve.atl.ga.us>
Date: Tue, 31 Oct 95 09:32:46 -0800
From: Larry Wall <emory!scalpel.netlabs.com!lwall>

: Greetings. I am working on the release of gawk 3.0. Part of it will be a
: thoroughly updated manual. One of the sections deals with planned future
: extensions and enhancements.  I have the following at the beginning
: of it:
:
: @cindex PERL
: @cindex Wall, Larry
: @display
: @i{AWK is a language similar to PERL, only considerably more elegant.} @*
: Arnold Robbins
: @sp 1
: @i{Hey!} @*
: Larry Wall
: @end display
:
: Before I actually release this for publication, I wanted to get your
: permission to quote you.  (Hopefully, in the spirit of much of GNU, the
: implied humor is visible... :-)

I think that would be fine.

Larry
@end ignore
@cindex PERL
@cindex Wall, Larry
@display
@i{AWK jest jêzykiem podobnym do PERLA, tylko znacznie bardziej eleganckim.}
Arnold Robbins

@i{Hey!}
Larry Wall
@end display
@sp 1

W tej sekcji wymieniono pokrótce rozszerzenia i mo¿liwe usprawnienia,
wskazuj±ce kierunki rozwoju @code{gawk}, jakie obecnie rozwa¿amy.
Plik @file{FUTURES} w pakietach dystrybucyjnych @code{gawk} równie¿
podaje te rozszerzenia.

Oto zestawienie prawdopodobnych przysz³ych zmian do u¿ytku programuj±cych
w jêzyku @code{awk}.

@c uszeregowane wg prawdopodobieñstwa
@table @asis
@item Lokalizacja
Projekt GNU zaczyna obs³ugiwanie wielu jêzyków.  Mo¿liwe bêdzie co najmniej
wypisywanie przez @code{gawk} ostrze¿eñ i komunikatów o b³êdach w jêzykach
innych ni¿ angielski.  Mo¿liwe, ¿e, prócz samego @code{gawk}, programy
@code{awk} bêd± mog³y korzystaæ ze programów wspomagaj±cych z obs³ug± wielu
jêzyków.

@item Bazy danych
Byæ mo¿e mo¿liwe bêdzie odwzorowywanie pliku GDBM/NDBM/SDBM na tablicê
@code{awk}.

@item Tablica @code{PROCINFO}
Pliki specjalne, zapewniaj±ce dostêp do informacji dotycz±cych procesu
(@pxref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}})
zostan± zast±pione tablic± @code{PROCINFO}, która dostarczy tych samych
danych, w sposób ³atwiejszy w dostêpie.

@item Wiêcej ostrze¿eñ @code{lint}
Istnieje wiêcej rzeczy, które mog³yby byæ sprawdzane z uwagi na przeno¶no¶æ.

@item Kontrola nad ¶rodowiskiem podprocesu
Zmiany poczynione w @code{gawk} w tablicy @code{ENVIRON} mog± przenosiæ siê
na procesy uruchamiane przez @code{gawk}.

@ignore
@item @code{RECLEN} variable for fixed length records
Along with @code{FIELDWIDTHS}, this would speed up the processing of
fixed-length records.

@item A @code{restart} keyword
After modifying @code{$0}, @code{restart} would restart the pattern
matching loop, without reading a new record from the input.

@item A @samp{|&} redirection
The @samp{|&} redirection, in place of @samp{|}, would open a two-way
pipeline for communication with a sub-process (via @code{getline} and
@code{print} and @code{printf}).

@item Function valued variables
It would be possible to assign the name of a user-defined or built-in
function to a regular @code{awk} variable, and then call the function
indirectly, by using the regular variable.  This would make it possible
to write general purpose sorting and comparing routines, for example,
by simply passing the name of one function into another.

@item A built-in @code{stat} function
The @code{stat} function would provide an easy-to-use hook to the
@code{stat} system call so that @code{awk} programs could determine information
about files.

@item A built-in @code{ftw} function
Combined with function valued variables and the @code{stat} function,
@code{ftw} (file tree walk) would make it easy for an @code{awk} program
to walk an entire file tree.
@end ignore
@end table

Oto lista prawdopodobnych ulepszeñ, które spowoduj±, ¿e @code{gawk} bêdzie
mia³ lepsz± wydajno¶æ.

@table @asis
@item Udoskonalona wersja @code{dfa}
Dopasowywacz wzorców @code{dfa} z programu GNU @code{grep} na pewne
problemy.  Nowa lub poprawiona wersja bêdzie sobie radziæ z niektórymi
wa¿nymi kwestiami dotycz±cymi dopasowywania wyra¿eñ regularnych.

@item Wykorzystanie GNU @code{malloc}
@code{malloc} w wersji GNU mo¿e potencjalnie przyspieszyæ @code{gawk},
gdy¿ w du¿ym stopniu opiera siê na stosowaniu dynamicznej alokacji pamiêci.

@end table

@node Usprawnienia,  , Przysz³e rozszerzenia, Uwagi
@appendixsec Sugestie usprawnieñ

Oto kilka projektów, jakie byæ mo¿e zechc± podj±æ przyszli hakerzy
@code{gawk}.  Wielko¶æ projektów waha siê od kilku dni do kilku tygodni
programowania, w zale¿no¶ci od tego, który wybierzesz i jak szybkim jeste¶
programist±.  Wszystkie napisane ulepszenia proszê przesy³aæ do opiekunów
w projekcie GNU.
@xref{Dodawanie kodu, , Dodawanie nowych mo¿liwo¶ci},
gdzie zamieszczono wytyczne, jakich nale¿y przestrzegaæ dodaj±c nowe
mo¿liwo¶ci do @code{gawk}.  @xref{B³êdy, ,Zg³aszanie problemów i b³êdów},
gdzie podano informacje o kontaktowaniu siê z opiekunami @code{gawk}.

@enumerate
@item
Kompilacja programów @code{awk}: @code{gawk} do konwersji podanego skryptu
na drzewo sk³adni wykorzystuje analizator sk³adni Bison (podobny do YACC).
Nastêpnie drzewo sk³adniowe wykonywane jest przez prosty rekurencyjny
ewaluator.  Odbywa to siê sporym kosztem, gdy¿ ewaluator wykonuje wiele
wywo³añ procedur do zrobienia nawet najprostszych rzeczy.

Powinno byæ mo¿liwe, by @code{gawk} przekszta³ca³ drzewo sk³adniowe skryptu
w program C, który u¿ytkownik móg³by nastêpnie skompilowaæ, korzystaj±c
ze zwyk³ego kompilatora C i specjalnej biblioteki @code{gawk},
dostarczaj±cej wszystkich niezbêdnych funkcji (wyra¿enia regularne, pola,
tablice asocjacyjne, koercja typów, i tak dalej).

£atwiejsz± mo¿liwo¶ci± mo¿e byæ faza po¶rednia @code{awk}, konwersji
drzewa sk³adniowego na postaæ liniowego kodu bajtowego jak to jest
w GNU Emacs Lisp.  Ewaluator rekurencyjny mo¿na by wówczas zast±piæ
zwyk³ym interpreterem kodu bajtowego, co by³oby wypo¶rodkowane
szybko¶ci± miêdzy uruchamianiem skompilowanego programu a robieniem tego,
co  @code{gawk} robi obecnie.

@item
Programy z zestawu testowego mog³yby korzystaæ ze sposobu dokumentacji
z tej ksi±¿ki.

@item
Wiêcej pomys³ów mo¿na znale¼æ w pliku @file{FUTURES}.  Skontaktuj siê
z nami je¶li chcia³by¶ powa¿nie zmierzyæ siê z którym¶ z wymienionych
tu zadañ.
@end enumerate

@node S³ownik, Kopiowanie, Uwagi, Top
@appendix S³ownik

@table @asis
@item Akcja (action)
Ci±g instrukcji @code{awk} zwi±zanych z regu³±.  Je¿eli rekord wej¶ciowy
pasuje do wzorca regu³y, @code{awk} wykonuje akcjê tej regu³y.
Akcje s± zawsze objête nawiasami klamrowymi.
@xref{Przegl±d akcji, ,Przegl±d akcji}.

@item Amazingly Workable Formatter (@code{awf}, O dziwo zdatny formater)
Henry Spencer z Uniwersytetu w Toronto napisa³ formater akceptuj±cy du¿y
podzbiór poleceñ formatuj±cych @samp{nroff -ms} i @samp{nroff -man},
u¿ywaj±c @code{awk} i @code{sh}.

@item ANSI
American National Standards Institute.  Organizacja tworz±ca wiele
standardów, miêdzy innymi standardy jêzyków programowania C i C++.

@item Bash
Wersja GNU standardowej pow³oki (Bourne-Again shell).
Zobacz ``Bourne Shell''.

@item BBS
Zobacz ``Bulletin Board System''.

@item Bia³y znak (whitespace)
Sekwencja znaków spacji, tabulacji lub nowej linii wystêpuj±ca wewn±trz
rekordu wej¶ciowego lub ³añcucha.

@item Bourne Shell
Standardowa pow³oka (@file{/bin/sh}) w Uniksie i systemach uniksopodobnych,
pierwotnie napisana przez Stevena R.@: Bourne'a.
Wiele pow³ok (Bash, @code{ksh}, @code{pdksh}, @code{zsh}) jest zasadniczo
zgodnych w górê z pow³ok± Bourne'a.

@item Bulletin Board System
System komputerowy umo¿liwiaj±cy u¿ytkownikom logowanie siê i czytanie
i/lub zostawianie wiadomo¶ci dla innych u¿ytkowników tego systemu,
przypominaj±cy pozostawianie papierowych notek na tablicy og³oszeniowej.

@item C
Jêzyk programowania systemowego, w którym napisana jest wiêkszo¶æ
oprogramowania GNU.  Jêzyk programowania @code{awk} ma sk³adniê podobn± do
C, a w niniejszej ksi±¿ce wskazano, w odpowiednich miejscach, na wystêpuj±ce
podobieñstwa miêdzy @code{awk} i C.

@item Ca³kowita (integer)
Liczba ca³kowita, tj.@: liczba nie posiadaj±ca czê¶ci u³amkowej.

@item CHEM
Preprocesor wspó³pracuj±cy z @code{pic}, który czyta opisy cz±steczek
i tworzy wej¶cie @code{pic} do ich narysowania.  Zosta³ napisany w @code{awk}
przez Briana Kernighana i Jona Bentleya, i jest dostêpny
z @email{@w{netlib@@research.bell-labs.com}}.

@item Ciemny k±t (dark corner)
Obszar jêzyka, w którym specyfikacje czêsto by³y (lub nadal s±) niejasne,
prowadz±c do nieoczekiwanych czy niepo¿±danych zachowañ.  Obszary takie
oznaczono w tej ksi±¿ce przez ``(c.k.)'' w tek¶cie, a pod nag³ówkiem
``ciemny k±t'' w indeksie.

@item Dynamiczne wyra¿enie regularne (dynamic regular expression)
Dynamiczne wyra¿enie regularne jest wyra¿eniem regularnym zapisanym jak
zwyk³e wyra¿enie.  Mo¿e byæ sta³± ³añcuchow±, jak @code{"foo"}, ale mo¿e
byæ te¿ wyra¿eniem, którego warto¶æ mo¿e siê zmieniaæ.
@xref{Regexp obliczane, , Stosowanie dynamicznych wyra¿eñ regularnych}.

@item Edytor strumieniowy (stream editor)
Program, który odczytuje rekordy ze standardowego strumienia wej¶ciowego
i przetwarza je raz lub wiêcej razy w jednym przebiegu.  Ró¿ni siê to od
przypadku programów wsadowych, które zak³adaj± odczytywanie plików
wej¶ciowych w ca³o¶ci przed rozpoczêciem jakiejkolwiek pracy nad nimi.
Jest te¿ inne ni¿ w przypadku programów interaktywnych, które wymagaj±
podania danych wej¶ciowych przez u¿ytkownika.

@item Format
£añcuchy formatu u¿ywane s± do sterowania wygl±dem wyj¶cia instrukcji
@code{printf}.  Równie¿ konwersja danych z liczb na ³añcuchy kontrolowana
jest przez ³añcuch formatu zawarty w zmiennej wbudowanej @code{CONVFMT}.
@xref{Litery steruj±ce, ,Litery steruj±ce formatem}.

@item FSF
Zobacz ``Free Software Foundation''.

@item Free Software Foundation
Organizacja non-profit, której celem jest tworzenie i rozpowszechnianie
swobodnie rozpowszechnialnego oprogramowania.  Za³o¿ona przez
Richarda M.@: Stallmana, autora oryginalnego edytora Emacs.  GNU Emacs jest
obecnie najszerzej u¿ywan± wersj± Emacsa.

@item Funkcja
Wyspecjalizowana grupa instrukcji stosowana do zamkniêcia w ca³o¶æ ogólnych
lub specyficznych dla programu zadañ.  @code{awk} ma wiele funkcji
wbudowanych, pozwala te¿ na definiowanie w³asnych.
@xref{Wbudowane, ,Funkcje wbudowane},
i @ref{U¿ytkownika, ,Funkcje u¿ytkownika}.

@item Funkcja wbudowana (built-in function)
Jêzyk @code{awk} zapewnia funkcje wbudowane, które wykonuj± ró¿norodne
obliczenia numeryczne, zwi±zane z czasem czy ³añcuchami znakowymi.
Przyk³adem jest @code{sqrt} (pierwiastek kwadratowy z liczby) czy
@code{substr} (pod³añcuch ³añcucha).  @xref{Wbudowane, ,Funkcje wbudowane}.

@item @code{gawk}
Implementacja @code{awk} wykonana w ramach projektu GNU.

@item General Public License
Dokument ten opisuje warunki, na jakich mo¿e byæ rozpowszechniany
@code{gawk} i jego ¼ród³a. (@pxref{Kopiowanie, ,GNU GENERAL PUBLIC LICENSE})

@item GNU
Akronim: ``GNU's not Unix'' (GNU nie jest Uniksem).  Nieustaj±cy projekt
Fundacji Wolnego Oprogramowania (FSF) maj±cy na celu stworzenie kompletnego,
swobodnie rozpowszechnialnego, zgodnego z POSIX ¶rodowiska
obliczeniowego.

@item GPL
Zobacz ``General Public License''.

@item Instrukcja z³o¿ona (compound statement)
Szereg instrukcji @code{awk} ujêtych w nawiasy klamrowe.  Instrukcje
z³o¿one mog± byæ zagnie¿d¿ane.
@xref{Instrukcje, ,Instrukcje steruj±ce w akcjach}.

@item I/O
Skrót od ``Input/Output'' (wej¶cie/wyj¶cie), czynno¶æ przemieszczenia danych
do i/lub z pracuj±cego programu.

@item Jêzyk @code{awk}
Jêzyk, w którym pisane s± programy @code{awk}.

@item Konkatenacja
Konkatenacja dwu ³añcuchów oznacza sklejenie ich razem, jeden za drugim,
co daje nowy ³añcuch.  Na przyk³ad, ³añcuch @samp{foo} skonkatenowany
z ³añcuchem @samp{bar} daje ³añcuch @samp{foobar}.
@xref{Konkatenacja, ,Konkatenacja ³añcuchów}.

@item Liczba zmiennoprzecinkowa (floating point number)
Czêsto wzmiankowana wed³ug terminologii matematycznej jako liczba
``wymierna'', jest po prostu liczb±, która mo¿e mieæ czê¶æ u³amkow±.
Zobacz ``Podwójna precyzja'' i ``Pojedyncza precyzja''.

@item Liczba (number)
Obiekt danych o warto¶ci numerycznej.  Implementacja @code{gawk} do
reprezentacji liczb wykorzystuje warto¶ci zmiennoprzecinkowe o podwójnej
precyzji.
Bardzo stare implementacje @code{awk} stosuj± liczby zmiennoprzecinkowe
pojedynczej precyzji.

@item Lwarto¶æ (lvalue)
Wyra¿enie, które mo¿e pojawiæ siê po lewej stronie operatora przypisania.
W wiêkszo¶ci jêzyków lwarto¶ciami mog± byæ zmienne lub elementy tablic.
W @code{awk} jako lwarto¶æ mo¿e byæ te¿ u¿yte oznaczenie pola.

@item £añcuch (string)
Dana sk³adaj±ca siê z ci±gu znaków, jak @samp{Jestem ³añcuchem}.
W jêzyku @code{awk} ³añcuchy sta³e zapisywane s± w cudzys³owach i mog±
zawieraæ sekwencje specjalne.
@xref{Sekwencje specjalne}.

@item £añcuch pusty (empty string)
£añcuch nie maj±cy ¿adnych znaków.  W programach @code{awk} reprezentowany
jest jawnie przez umieszczenie obok siebie dwu znaków cudzys³owu (@code{""}).
Mo¿e pojawiæ siê w danych wej¶ciowych, w miejscu dwu kolejnych wyst±pieñ
separatora pól obok siebie.

@item £añcuch zerowy (null string)
Zobacz ``£añcuch pusty''.

@item Nawiasy klamrowe (curly braces)
Znaki @samp{@{} i @samp{@}}.  Nawiasy klamrowe stosowane s± w @code{awk}
do rozgraniczania akcji, instrukcji z³o¿onych i cia³ funkcji.

@item Obiekty danych (data objects)
S± to liczby i ³añcuchy znaków.  W razie potrzeby, liczby przekszta³cane
s± na ³añcuchy i vice versa.
@xref{Konwersja, ,Konwersja ³añcuchów i liczb}.

@item Ósemkowa (octal)
Notacja o podstawie ósemkowej, gdzie cyframi s± @code{0}-@code{7}.
Liczby ósemkowe zapisywane s± w C za pomoc± pocz±tkowego @samp{0}, co
wskazuje ich podstawê.  Zatem, @code{013} to 11 (jeden razy 8 plus 3).

@item Plik specjalny (special file)
Nazwa pliku interpretowana przez @code{gawk} wewnêtrznie, a nie
przekazana wprost do obs³u¿enia przez stosowany system operacyjny.
Na przyk³ad, @file{/dev/stderr}.
@xref{Pliki specjalne, ,Specjalne nazwy plików w @code{gawk}}.

@item Podwójna precyzja (double precision)
Wewnêtrzna reprezentacja liczb, które mog± mieæ czê¶æ u³amkow±.
Liczby podwójnej precyzji pamiêtaj± wiêcej cyfr ni¿ liczby pojedynczej
precyzji, ale dzia³ania na nich s± bardziej kosztowne.  Jest to sposób,
w jaki @code{awk} przechowuje warto¶ci numeryczne.  Jest to wystêpuj±cy
w C typ @code{double}.

@item Pojedyncza precyzja (single precision)
Wewnêtrzna reprezentacja liczb, które mog± mieæ czê¶æ u³amkow±.
Liczby pojedynczej precyzji pamiêtaj± mniej cyfr ni¿ liczby podwójnej
precyzji, ale dzia³ania na nich s± mniej kosztowne, je¶li chodzi o czas CPU.
Tego typu do przechowywania warto¶ci numerycznych u¿ywaj± niektóre bardzo
stare wersje @code{awk}.  Jest to wystêpuj±cy w C typ @code{float}.

@item Pole (field)
Gdy @code{awk} czyta rekord wej¶ciowy, dzieli go na czê¶ci oddzielone
bia³ymi znakami (lub separuj±cym wyra¿eniem regularnym, które zmienia siê
nadaj±c now± warto¶æ zmiennej wbudowanej @code{FS}).  Czê¶ci takie nazywamy
polami.  Je¿eli s± one sta³ej d³ugo¶ci, to do opisu tych d³ugo¶ci mo¿na
zastosowaæ zmienn± @code{FIELDWIDTHS}.
@xref{Separatory pól, ,Jak rozdzielaæ pola}, zobacz te¿
@xref{Sta³y rozmiar, , Czytanie danych o sta³ej szeroko¶ci}.

@item POSIX
Nazwa szeregu standardów opracowanych przez IEEE, które okre¶laj±
interfejs przeno¶nego systemu operacyjnego (Portable Operating System
Interface).  Koñcówka ``IX'' oznacza dziedzictwo standardów po systemie
Unix.  G³ównym standardem, jaki mo¿e zainteresowaæ u¿ytkowników
@code{awk} jest @cite{IEEE Standard for Information Technology,
Standard 1003.2-1992, Portable Operating System Interface (POSIX) Part 2:
Shell and Utilities}.  Nieformalnie standard ten czêsto zwany
jest po prostu ``P1003.2''.

@item Powszechna Licencja Publiczna
Zobacz ``General Public License''.

@item Program @code{awk}
Dowolny program @code{awk} sk³ada siê z szeregu @dfn{wzorców} i @dfn{akcji},
wspólnie znanych jako @dfn{regu³y}.  Dla ka¿dego rekordu wej¶ciowego
podanego programowi przetwarzane s± po kolei wszystkie regu³y.
Programy @code{awk} mog± te¿ zawieraæ definicje funkcji.

@item Prywatne (private)
Zmienne i/lub funkcje przeznaczone do wy³±cznego u¿ytku przez funkcje
biblioteczne, a nie w g³ównym @code{awk} programie.  Przy nazywaniu takich
zmiennych i funkcji nale¿y zachowaæ szczególn± ostro¿no¶æ.
@xref{Nazwy biblioteczne, ,  Nazywanie zmiennych globalnych funkcji bibliotecznych}.

@item Przekierowanie (redirection)
Przekierowanie oznacza wykonywanie pobierania danych (wej¶cia) z innego
miejsca ni¿ standardowy strumieñ wej¶cia, lub wyj¶cia gdzie indziej ni¿ do
standardowego strumienia wyj¶cia.

Wyj¶cie instrukcji @code{print} i @code{printf} przekierowuje siê do pliku
lub polecenia systemowego za pomoc± operatorów @samp{>}, @samp{>>}
i @samp{|}.  Wej¶cie instrukcji @code{getline} przekierowuje siê za pomoc±
operatorów @samp{<} i @samp{|}.
@xref{Przekierowanie, ,Przekierowanie wyj¶cia @code{print} i @code{printf}},
i @ref{Getline, ,Odczyt bezpo¶redni przez @code{getline}}.

@item Przypisanie (assignment)
Wyra¿enie @code{awk}, które zmienia warto¶æ jakiej¶ zmiennej lub obiektu
danych @code{awk}.  Obiekt, do którego mo¿na wykonaæ przypisanie, nazywany
jest @dfn{lwarto¶ci±}.  Przypisywane warto¶ci zwane s± @dfn{rwarto¶ciami}.
@xref{Operatory przypisania, ,Wyra¿enia przypisania}.

@item Regexp
Skrót od @dfn{regular expression} (wyra¿enie regularne).  Wyra¿enie
regularne jest wzorcem opisuj±cym zbiór ³añcuchów, który mo¿e byæ
nieskoñczony.  Na przyk³ad, do wyra¿enia regularnego @samp{R.*xp} pasuje
ka¿dy ³añcuch zaczynaj±cy siê od litery @samp{R} a koñcz±cy literami
@samp{xp}.  W @code{awk} wyra¿enia regularne u¿ywane s± we wzorcach
i wyra¿eniach warunkowych.  Wyra¿enia warunkowe mog± zawieraæ sekwencje
specjalne.  @xref{Regexp, ,Regular Expressions}.

@item Regu³a (rule)
Segment programu @code{awk}, który okre¶la w jaki sposób przetworzyæ
pojedyncze rekordy wej¶ciowe.  Regu³a sk³ada siê ze @dfn{wzorca}
i z @dfn{akcji}.  @code{awk} czyta rekord wej¶ciowy.  Nastêpnie, dla ka¿dej
regu³y, je¿eli rekord wej¶ciowy spe³nia wzorzec regu³y, to @code{awk}
wykonuje jej akcjê.  W przeciwnym razie, dla tego rekordu wej¶ciowego regu³a
nic nie robi.

@item Rekord wej¶ciowy (input record)
Pojedyncza porcja danych czytana przez @code{awk}.  Zwykle, rekord wej¶ciowy
@code{awk} sk³ada siê z jednego wiersza tekstu.
@xref{Rekordy, ,Jak wej¶cie dzielone jest na rekordy}.

@item Rekurencja (recursion)
Gdy funkcja wywo³uje sama siebie, albo wprost albo po¶rednio.
Je¶li nie jest to jasne, przejd¼ do has³a ``rekurencja''.

@item Rwarto¶æ (rvalue)
Warto¶æ, która mo¿e pojawiæ siê po prawej (right) stronie operatora
przypisania.  W @code{awk} warto¶æ posiada zasadniczo ka¿de wyra¿enie.
Warto¶ci te s± rwarto¶ciami.

@item @code{sed}
Zobacz ``Edytor strumieniowy''.

@item Sekwencje specjalne (escape sequences)
Specjalny ci±g znaków stosowany do opisania znaków niedrukowalnych, jak
@samp{\n} dla znaku nowej linii, czy @samp{\033} dla znaku ASCII ESC
(escape).  @xref{Sekwencje specjalne}.

@item Skracanie (short-circuit)
Przyrodzona cecha operatorów logicznych @samp{&&} i @samp{||} z @code{awk}.
Je¿eli warto¶ci ca³ego wyra¿enia mo¿na dociec na podstawie obliczenia tylko
lewostronnej czê¶ci tych operatorów, to prawa strona nie bêdzie obliczana.
(@pxref{Operatory logiczne, ,Wyra¿enia logiczne}).

@item Skrypt @code{awk}
Inne okre¶lenie programu @code{awk}.

@item Skutek uboczny (side effect)
Skutek uboczny wystêpuje, gdy wyra¿enie poza samym utworzeniem warto¶ci ma
jaki¶ inny skutek.  Skutki uboczne maj± wyra¿enia przypisania, inkrementacji
i dekrementacji oraz wywo³ania funkcji.
@xref{Operatory przypisania, ,Wyra¿enia przypisania}.

@item S³owo kluczowe (keyword)
W jêzyku @code{awk} s³owo kluczowe to s³owo, które ma specjalne znaczenie.
S³owa kluczowe s± zastrze¿one i nie mog± byæ wykorzystywane jako nazwy
zmiennych.

W @code{gawk} s³owami kluczowymi s±:
@code{BEGIN},
@code{END},
@code{if},
@code{else},
@code{while},
@code{do@dots{}while},
@code{for},
@code{for@dots{}in},
@code{break},
@code{continue},
@code{delete},
@code{next},
@code{nextfile},
@code{function},
@code{func},
i @code{exit}.

@item Spacja (space)
Znak tworzony przez naci¶niêcie na klawiaturze klawisza odstêpu.

@item Szesnastkowa (hexadecimal)
Notacja o podstawie 16, gdzie cyframi s± @code{0}-@code{9} i
@code{A}-@code{F}, z @samp{A} reprezentuj±cym 10, @samp{B} reprezentuj±cym
11, i tak a¿ do @samp{F} dla 15.  Liczby szesnastkowe zapisywane s± w C za
pomoc± pocz±tkowego @samp{0x}, co wskazuje ich podstawê.
Zatem, @code{0x12} to 18 (jeden razy 16 plus 2).

@item ¦rodowisko (environment)
Zbiór ³añcuchów, postaci @var{nazwa@code{=}wart}, dostêpny dla ka¿dego
programu.  U¿ytkownicy na ogó³ umieszczaj± warto¶ci w ¶rodowisku w celu
dostarczenia informacji rozmaitym programom.  Typowymi przyk³adami s±
zmienne ¶rodowiska @code{HOME} i @code{PATH}.

@item Tabulacja (tab)
Znak tworzony przez naci¶niêcie na klawiaturze klawisza @kbd{TAB}.
Przy wypisywaniu zazwyczaj rozwijany a¿ do o¶miu spacji.

@item Unix
Komputerowy system operacyjny pierwotnie opracowany we wczesnych latach
70-tych w AT&T Bell Laboratories.  Pocz±tkowo sta³ siê popularny na
uniwersytetach na ca³ym ¶wiecie, pó¼niej przeniós³ siê do ¶rodowisk
komercyjnych jako system do tworzenia oprogramowania i system serwerów
sieciowych.  Istnieje wiele wersji handlowych Uniksa, jak te¿ kilka podobnie
dzia³aj±cych systemów, których kod ¼ród³owy jest swobodnie dostêpny, jak
Linux, NetBSD czy FreeBSD).

@item Wyra¿enie boole'owskie (boolean expression)
Nazywane od angielskiego matematyka Boole'a. Zobacz ``Wyra¿enie logiczne''.

@item Wyra¿enie logiczne (logical expression)
Wyra¿enie wykorzystuj±ce operatory logiki, AND, OR i NOT, zapisywane
w @code{awk} jako @samp{&&}, @samp{||} i @samp{!}.  Czêsto zwane
wyra¿eniami boole'owskimi, od nazwiska matematyka, który by³ pionierem tego
rodzaju logiki matematycznej.

@item Wyra¿enie porównania (comparison expression)
Relacja, która jest albo prawdziwa albo fa³szywa, jak @samp{(a < b)}.
Wyra¿enia porównania u¿ywane s± w instrukcjach @code{if}, @code{while},
@code{do} i @code{for} oraz we wzorcach wybieraj±cych rekordy, jakie maj±
byæ przetwarzane.
@xref{Typy i porównania, ,Typy zmiennych i wyra¿enia porównania}.

@item Wyra¿enie regularne (regular expression)
Zobacz ``regexp''.

@item Wyra¿enie regularne sta³e (regular expression constant)
Wyra¿enie regularne sta³e (sta³a regexp) jest wyra¿eniem regularnym
zapisanym wewn±trz uko¶ników, jak @code{/foo/}.  Wyra¿enie takie jest
dobierane podczas pisania programu @code{awk} i nie mo¿e byæ
zmienione podczas jego wykonywania.
@xref{U¿ywanie regexp, , Jak stosowaæ wyra¿enia regularne}.

@item Wyra¿enie warunkowe (conditional expression)
Wyra¿enie wykorzystuj±ce trójargumentowy operator @samp{?:}, jak
@samp{@var{wyr1} ? @var{wyr2} : @var{wyr3}}.  Obliczane jest wyra¿enie
@var{wyr1}; je¿eli wynik jest prawd±, to warto¶ci± ca³ego wyra¿enia jest
warto¶æ @var{wyr2}, w przeciwnym razie warto¶ci± jest @var{wyr3}.  W ka¿dym
z przypadków obliczane jest tylko jedno z @var{wyr2} i @var{wyr3}.
@xref{Wyra¿enia warunkowe, ,Wyra¿enia warunkowe}.

@item Wzorzec (pattern)
Wzorce mówi± @code{awk}, jakie rekordy wej¶ciowe s± obiektem zainteresowania
których regu³.

Wzorzec jest dowolnym wyra¿eniem warunkowym, w stosunku do którego
sprawdzane jest wej¶cie.  Je¿eli warunek jest spe³niony, mówimy, ¿e rekord
wej¶ciowy @dfn{pasuje} do wzorca.  Typowy wzorzec mo¿e porównywaæ rekord
wej¶ciowy z wyra¿eniem regularnym.
@xref{Przegl±d wzorców, ,Elementy wzorców}.

@item Zakres (range) (wierszy wej¶ciowych)
Sekwencja kolejnych wierszy pliku wej¶ciowego.  Zakresy wierszy wej¶ciowych
przeznaczonych do przetworzenia przez @code{awk} mog± byæ okre¶lane
za pomoc± wzorca.  Wzorzec taki mo¿e te¿ okre¶laæ pojedyncze wiersze.
@xref{Przegl±d wzorców, ,Elementy wzorców}.

@item Zdumiewaj±cy asembler w @code{awk}
Henry Spencer z Uniwersytetu w Toronto napisa³ zmiennocelowy asembler
w ca³o¶ci jako skrypty @code{awk}.  Sk³ada siê z tysiêcy linijek,
zawieraj±c opisy architektur dla kilkunastu mikrokomputerów o¶miobitowych.
Jest to dobry przyk³ad programu, który lepiej by³o napisaæ w innym jêzyku.

@cindex ISO 8859-1
@cindex ISO Latin-1
@item Zestaw znaków (character set)
Zestaw kodów liczbowych wykorzystywanych przez system komputerowy do
reprezentacji znaków (liter, cyfr, znaków przestankowych itp.) konkretnego
kraju czy miejsca.  Najpowszechniej obecnie u¿ywanym zestawem znaków jest
ASCII (American Standard Code for Information Interchange).  Wiele
krajów europejskich u¿ywa rozszerzenia ASCII znanego
jako ISO-8859-1 (ISO Latin-1).

@item Zmienna wbudowana (built-in variable)
@code{ARGC}, @code{ARGIND}, @code{ARGV}, @code{CONVFMT}, @code{ENVIRON},
@code{ERRNO}, @code{FIELDWIDTHS}, @code{FILENAME}, @code{FNR}, @code{FS},
@code{IGNORECASE}, @code{NF}, @code{NR}, @code{OFMT}, @code{OFS}, @code{ORS},
@code{RLENGTH}, @code{RSTART}, @code{RS}, @code{RT} i @code{SUBSEP},
s± zmiennymi maj±cymi specjalne znaczenie dla @code{awk}.  Zmiana której¶
z nich wp³ywa na ¶rodowisko pracy @code{awk}.  Kilka z tych zmiennych jest
specyficzne tylko dla @code{gawk}.  @xref{Zmienne wbudowane}.
@end table

@node Kopiowanie
@chapter Powszechna Licencja Publiczna GNU
@menu
* GNU General Public License::
@end menu
@include gpl-2.texi



@node Indeks, , Kopiowanie, Top
@unnumbered Indeks
@printindex cp

@summarycontents
@contents
@bye

Unresolved Issues:
------------------
1. From ADR.

   Robert J. Chassell points out that awk programs should have some indication
   of how to use them.  It would be useful to perhaps have a "programming
   style" section of the manual that would include this and other tips.

2. The default AWKPATH search path should be configurable via `configure'
   The default and how this changes needs to be documented.

Consistency issues:
	/.../ regexps are in @code, not @samp
	".." strings are in @code, not @samp
	no @print before @dots
	values of expressions in the text (@code{x} has the value 15),
		should be in roman, not @code
	Use   tab   and not   TAB
	Use   ESC   and not   ESCAPE
	Use   space and not   blank	to describe the space bar's character
	The term "blank" is thus basically reserved for "blank lines" etc.
	The `(d.c.)' should appear inside the closing `.' of a sentence
		It should come before (pxref{...})
	" " should have an @w{} around it
	Use "non-" everywhere
	Use @code{ftp} when talking about anonymous ftp
	Use upper-case and lower-case, not "upper case" and "lower case"
	Use alphanumeric, not alpha-numeric
	Use --foo, not -Wfoo when describing long options
	Use findex for all programs and functions in the example chapters
	Use "Bell Laboratories", but not "Bell Labs".
	Use "behavior" instead of "behaviour".
	Use "zeros" instead of "zeroes".
	Use "Input/Output", not "input/output". Also "I/O", not "i/o".
	Use @code{do}, and not @code{do}-@code{while}, except where
		actually discussing the do-while.
	The words "a", "and", "as", "between", "for", "from", "in", "of",
		"on", "that", "the", "to", "with", and "without",
		should not be capitalized in @chapter, @section etc.
		"Into" and "How" should.
	Search for @dfn; make sure important items are also indexed.
	"e.g." should always be followed by a comma.
	"i.e." should never be followed by a comma, and should be followed
		by `@:'.
	The numbers zero through ten should be spelled out, except when
		talking about file descriptor numbers. > 10 and < 0, it's
		ok to use numbers.
	In tables, put command line options in @code, while in the text,
		put them in @samp.
	When using @strong, use "Note:" or "Caution:" with colons and
		not exclamation points.  Do not surround the paragraphs
		with @quotation ... @end quotation.

Date: Wed, 13 Apr 94 15:20:52 -0400
From: rsm@gnu.ai.mit.edu (Richard Stallman)
To: gnu-prog@gnu.ai.mit.edu
Subject: A reminder: no pathnames in GNU

It's a GNU convention to use the term "file name" for the name of a
file, never "pathname".  We use the term "path" for search paths,
which are lists of file names.  Using it for a single file name as
well is potentially confusing to users.

So please check any documentation you maintain, if you think you might
have used "pathname".

Note that "file name" should be two words when it appears as ordinary
text.  It's ok as one word when it's a metasyntactic variable, though.

Suggestions:
------------
Enhance FIELDWIDTHS with some way to indicate "the rest of the record".
E.g., a length of 0 or -1 or something.  May be "n"?

Make FIELDWIDTHS be an array?

What if FIELDWIDTHS has invalid values in it?
