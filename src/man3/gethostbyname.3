.\" Translation: Robert Luberda <robert@debian.org>, Oct 2003, manpages 1.60
.\" $Id: gethostbyname.3,v 1.4 2004/10/09 14:51:29 robert Exp $
.\"
.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat May 22 18:43:54 1993, David Metcalfe
.\" Modified Sun Jul 25 10:42:30 1993, Rik Faith (faith@cs.unc.edu)
.\" Modified Sun Feb 16 13:23:10 1997, Andries Brouwer (aeb@cwi.nl)
.\" Modified Mon Dec 21 14:49:33 1998, Andries Brouwer (aeb@cwi.nl)
.\" Modified Sat Aug 12 18:11:32 2000, Andries Brouwer (aeb@cwi.nl)
.\" Modified Sat May 19 23:37:50 2001, Andries Brouwer (aeb@cwi.nl)
.\"
.TH GETHOSTBYNAME 3 2000-08-12 "BSD" "Podrêcznik programisty Linuksa"
.SH NAZWA
gethostbyname, gethostbyaddr, sethostent, endhostent, herror, hstrerror \- zwróæ wpis sieciowy komputera
.SH SK£ADNIA
.nf
.B #include <netdb.h>
.B extern int h_errno;
.sp
.BI "struct hostent *gethostbyname(const char *" nazwa );
.sp
.B #include <sys/socket.h> "      " /* dla AF_INET */
.BI "struct hostent *gethostbyaddr(const char *" adres ,
.BI "  int " dlug ", int " typ );
.sp
.BI "void sethostent(int " stayopen );
.sp
.B void endhostent(void);
.sp
.BI "void herror(const char *" s );
.sp
.BI "const char *hstrerror(int " err );
.sp 2
/* rozszerzenia GNU */
.br
.BI "struct hostent *gethostbyname2(const char *" nazwa ", int " af );
.sp
.BI "int gethostbyname_r (const char *" nazwa ,
.BI "  struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "  struct hostent **" result ", int *" h_errnop );
.sp
.BI "int gethostbyname2_r (const char *" nazwa ", int " af,
.BI "  struct hostent *" ret ", char *" buf ", size_t " buflen ,
.BI "  struct hostent **" result ", int *" h_errnop );
.fi
.SH OPIS
Funkcja \fBgethostbyname()\fP dla danego komputera \fInazwa\fP  zwraca strukturê
typu \fIhostent\fP. \fINazwa\fP jest tutaj albo nazw± komputera, albo adresem IPv4
w standardowej notacji z kropkami, albo adresem IPv6 w notacji ze ¶rednikami
(i byæ mo¿e kropkami). (Proszê przeczytaæ RFC 1984, aby uzyskaæ opis adresów IPv6).
Je¿eli
.I nazwa
jest adresem Ipv4 lub IPv6, to
.BR gethostbyname ()
nie wykonuje ¿adnych sprawdzeñ i po prostu kopiuje
.I nazwê
do pola
.I h_name
oraz jej odpowiednik
.I struct in_addr
do pola
.I h_addr_list[0]
zwracanej struktury
.IR hostent .
Je¿eli \fInazwa\fP nie koñczy siê kropk± oraz ustawiono zmienn± ¶rodowiskow± \fBHOSTALIASES\fP,
to wyszukiwanie \fInazwy\fP zacznie siê od pliku z aliasami, wskazywanego
przez \fBHOSTALIASES\fP. (format tego pliku opisany jest w
.BR hostname (7)).
Bie¿±ca domenta i jej domeny nadrzêdne s± przeszukiwane, chyba ¿e \fInazwa\fP
koñczy siê kropk±.
.PP
Funkcja \fBgethostbyaddr()\fP zwraca strukturê  typu \fIhostent\fP dla zadanego adresu
\fIadres\fP o d³ugo¶ci \fIdlug\fP i typie adresu
\fItyp\fP. Obecnie jedynym poprawnym typem adresu jest
.BR AF_INET .
.PP
Funkcja \fBsethostent()\fP okre¶la, je¿eli \fIstayopen\fP jest prawdziwe (1),
¿e do odpytywania serwera nazw bêdzie u¿yte po³±czenie TCP i to po³±czenie
bêdzie otwarte podczas kolejnych zapytañ. W przeciwnym wypadku serwer nazw
bêdzie odpytywany przy u¿yciu datagramów UDP.
.PP
Funkcja \fBendhostent()\fP koñczy po³±czenie TCP odpytywania serwera nazw.
.PP
(Przestarza³a) funkcja \fBherror()\fP wypisuje na standardowe wyj¶cie b³êdów komunikat
b³êdu przypisany do bie¿±cej warto¶ci zmiennej \fIh_errno\fP.
.PP
(Przestarza³a) funkcja \fBhstrerror()\fP dla przekazanego numeru b³êdu (zazwyczaj
\fIh_errno\fP) zwraca odpowiadaj±cy mu komunikat b³êdu.
.PP
Funkcje \fBgethostbyname()\fP i \fBgethostbyaddr()\fP u¿ywaj± do
odpytywania serwera kombinacji któregokolwiek b±d¼ wszystkich serwerów nazw
\fBnamed\fP(8), wydzielonych linii z \fI/etc/hosts\fP,
oraz Systemu Informacji Sieciowej (Network
Information Service \- NIS lub YP), w zale¿no¶ci od zawarto¶ci linii
\fIorder\fP w pliku \fI/etc/host.conf\fP.  (Proszê przeczytaæ
.BR resolv+ (8)).
Domy¶lnie najpierw odpytywane s± serwery \fBnamed\fP(8), a nastêpnie
przegl±dany jest \fI/etc/hosts\fP.
.PP
Struktura \fIhostent\fP zdefiniowana w \fI<netdb.h>\fP nastêpuj±co:
.sp
.RS
.nf
.ne 7
.ta 8n 16n 32n
struct hostent {
	char	*h_name;		/* oficjalna nazwa komputera */
	char	**h_aliases;		/* lista aliasów */
	int	h_addrtype;		/* typ adresu komputera */
	int	h_length;		/* d³ugo¶æ adresu */
	char	**h_addr_list;		/* lista adresów */
}
#define h_addr	h_addr_list[0]		/* dla zachowania zgodno¶ci  */
 	 		/* z wcze¶niejszymi wersjami */
.ta
.fi
.RE
.PP
Struktra \fIhostent\fP sk³ada siê z:
.TP
.I h_name
Oficjalna nazwa komputera.
.TP
.I h_aliases
Zakoñczona zerem tablica alternatywnych nazw komputera.
.TP
.I h_addrtype
Typ adresu; obecnie zawsze jest to
.BR AF_INET .
.TP
.I h_length
D³ugo¶æ adresu w bajtach.
.TP
.I h_addr_list
Zakoñczona zerem tablica adresów sieciowych komputera w sieciowym porz±dku bajtów
(network byte order).
.TP
.I h_addr
Pierwszy adres z \fIh_addr_list\fP \- dla zachowania zgodno¶ci ze wcze¶niejszymi wersjami
.SH "WARTO¦Æ ZWRACANA"
Funkcje \fBgethostbyname()\fP i \fBgethostbyaddr()\fP zwracaj± strukturê
\fIhostent\fP lub wska¼nik NULL w przypadku b³êdu. W razie b³êdu, zmienna
\fIh_errno\fP przechowuje numer b³êdu.
.SH B£ÊDY
Zmienna \fIh_errno\fP mo¿e przyjmowaæ nastêpuj±ce warto¶ci:
.TP
.B HOST_NOT_FOUND
Podany komputer jest nieznany.
.TP
.BR NO_ADDRESS " lub " NO_DATA
¯±dana nazwa jest poprawna, ale nie ma adresu IP.
.TP
.B NO_RECOVERY
Wyst±pi³ trwa³y b³±d serwera nazw.
.TP
.B TRY_AGAIN
Autorytatywny serwer nazw zwróci³ tymczasowy b³±d. Proszê spróbowaæ ponownie pó¼niej.
.SH PLIKI
.TP
.I /etc/host.conf
plik konfiguracyjny
resolver configuration file
.TP
.I /etc/hosts
plik bazy danych komputerów
.SH "ZGODNE Z"
BSD 4.3.
.SH UWAGI
Standard SUS-v2 jest b³êdny i okre¶la parametr
.I len
funkcji
.B gethostbyaddr()
jako maj±cy typ
.IR size_t .
(No nie jest w³a¶ciwe, poniewa¿ musi to byæ typ
.IR int ,
którym
.I size_t
nie jest. POSIX 1003.1-2001 u¿ywa
.IR socklen_t ,
co jest OK)
.LP
Funkcje
.BR gethostbyname ()
i
.BR gethostbyaddr ()
mog± zwracaæ wska¼niki do danych statycznych, które mog± byæ nadpisane
przez kolejne wywo³ania. Kopiowanie
.I struct hostent
nie wystarcza, poniewa¿ zawiera ona wska¼niki - wymagane jest skopiowanie wszystkiego.\" FIXME deep copy
.LP
Glibc2 ma tak¿e funkcjê
.BR gethostbyname2() ,
która dzia³a jak
.BR gethostbyname() ,
ale pozwala okre¶liæ rodzinê adresów, do której musi nale¿eæ zadany adres.
.LP
Glibc2 ma tak¿e wielow±tkowe wersje
.B gethostbyname_r()
i
.BR gethostbyname2_r() .
Zwracaj± one 0 w przypadku powodzenia i niezero w razie b³êdu. Wynik funkcji
jest przechowywany w strukturze o adresie
.IR ret .
Po wywo³aniu funkcji
.RI * result
bêdzie NULL w razie b³êdu albo wska¼nikiem do wyniku, gdy funkcja zakoñczy siê
powodzeniem. Pomocnicze dane s± przechowywane w buforze
.I buf
o d³ugo¶ci
.IR buflen .
(Je¿eli bufor jest za ma³y, to funkcje te zwróc±
.BR ERANGE .)
Globalna zmienna
.I h_errno
nie jest modyfikowana, ale numer b³êdu jest przekazywany w zmiennej, której
adres zosta³ podany w
.IR h_errnop .
.PP
POSIX 1003.1-2001 traktuje
.B gethostbyaddr()
i
.B gethostbyname()
jako spu¶ciznê i wprowadza
.sp
.nf
.BI "struct hostent *getipnodebyaddr (const void *restrict " addr ,
.BI "  socklen_t " len ", int " type ", int *restrict " error_num );
.sp
.BI "struct hostent *getipnodebyname (const char *" name ,
.BI "  int " type ", int " flags ", int *" error_num );
.SH "ZOBACZ TAK¯E"
.BR resolver (3),
.BR hosts (5),
.BR hostname (7),
.BR resolv+ (8),
.BR named (8)
