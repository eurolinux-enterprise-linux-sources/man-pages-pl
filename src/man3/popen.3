.\" 1999 PTM Przemek Borys
.\" Aktualizacja Jaros³aw Beczek <bexx@poczta.onet.pl>
.\" Aktualizacja do man-pages 1.47 - A. Krzysztofowicz <ankry@mif.pg.gda.pl>
.\" --------
.\" Copyright 1991 The Regents of the University of California.
.\" All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. All advertising materials mentioning features or use of this software
.\"    must display the following acknowledgement:
.\"	This product includes software developed by the University of
.\"	California, Berkeley and its contributors.
.\" 4. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.\"     @(#)popen.3	6.4 (Berkeley) 4/30/91
.\"
.\" Converted for Linux, Mon Nov 29 14:45:38 1993, faith@cs.unc.edu
.\" Modified Sat May 18 20:37:44 1996 by Martin Schulze (joey@linux.de)
.\" Modified 7 May 1998 by Joseph S. Myers (jsm28@cam.ac.uk)
.\" --------
.TH POPEN 3 1998-05-07 "BSD" "Podrêcznik programisty Linuksa"
.SH NAZWA
popen, pclose \- we/wy procesu
.SH SK£ADNIA
.B #include <stdio.h>
.sp
.BI "FILE *popen(const char *" command ", const char *" type );
.sp
.BI "int pclose(FILE *" stream );
.SH OPIS
Funkcja
.B popen()
otwiera proces, tworz±c ³±cze, rozwidlaj±c siê przez fork() i wywo³uj±c pow³okê.
Poniewa¿ ³±cze jest z definicji jednokierunkowe, argument
.I type
mo¿e okre¶laæ tylko odczyt albo tylko zapis, nie oba naraz. Otrzymany w wyniku
tego strumieñ bêdzie tylko do odczytu albo tylko do zapisu.
.PP
Argument
.I command
jest wska¼nikiem do zakoñczonego znakiem NUL ³añcucha, zawieraj±cego wiersz
poleceñ pow³oki. Polecenie to jest przekazywane do
.I /bin/sh
przy u¿yciu opcji
.BR \-c ;
wszelka interpretacja jest dokonywana przez pow³okê. Argument
.I type
jest zakoñczonym znakiem NUL ³añcuchem, który musi byæ albo `r', albo `w'
(odpowiednio dla odczytu i zapisu).
.PP
Warto¶æ zwracana przez
.B popen()
to normalny strumieñ we/wy, lecz powinien on byæ zamykany przy u¿yciu
.B pclose()
zamiast
.BR fclose() .
Zapisywanie do takiego strumienia powoduje pisanie na standardowe wej¶cie
polecenia. Standardowe wyj¶cie polecenia jest takie samo, jak procesu, który
wywo³a³
.BR popen() ,
chyba ¿e zosta³o to zmienione przez polecenie. Podobnie, odczyt z tak
otwartego strumienia powoduje odczyt ze standardowego wyj¶cia polecenia, a
standardowe wej¶cie polecenia jest wtedy to¿same z wej¶ciem procesu, który
wywo³a³
.BR popen() .
.PP
Nale¿y zauwa¿yæ, ¿e strumienie wyj¶ciowe powsta³e z
.B popen
s± domy¶lnie w pe³ni buforowane.
.PP
Funkcja
.B pclose
oczekuje na zakoñczenie stowarzyszonego procesu i zwraca jego kod zakoñczenia,
podobnie jak to czyni
.BR wait4 .
.SH "WARTO¦Æ ZWRACANA"
Funkcja
.B popen
zwraca
.B NULL
je¶li nie powiod³y siê wywo³ania
.BR fork (2)
lub
.BR pipe (2),
lub je¶li nie uda³o siê przydzieliæ pamiêci.
.PP
Funkcja
.B pclose
zwraca \-1 je¶li
.\" W aktualizacji dalsze linijki s± w komentarzu bo nikt nie wie
.\" czy to prawda. Dalej oryginalny dopisek:
.\" These conditions actually give undefined results, so I commented
.\" them out.
.\" .I stream
.\" nie jest zwi±zany z otwartym poleceniem, je¶li
.\" .I stream
.\" ju¿ jest zamkniêty lub je¶li
.B wait4
zwróci b³±d lub zosta³y wykryte jakie¶ inne b³êdy.
.SH B£ÊDY
Funkcja
.B popen
nie ustawia
.IR errno ,
je¿eli nie uda siê przydzieliæ pamiêci. Je¿eli nie powiod± siê
wywo³ywane przez ni± 
.BR fork() " lub " pipe() ,
to
.I errno
bêdzie odpowiednio ustawione. Je¿eli argument
.I mode
bêdzie nieprawid³owy i zostanie to wykryte, to
.I errno
zostanie ustawione na
.BR EINVAL .
.PP
Je¿eli nie bêdzie mo¿liwe otrzymanie kodu zakoñczenia procesu potomnego przez
.BR pclose() ,
to
.I errno
zostanie ustawione na
.BR ECHILD .
.SH "ZGODNE Z"
POSIX.2
.SH USTERKI
Poniewa¿ offset standardowego wej¶cia polecenia otwartego dla odczytu jest
taki sam dla tego polecenia i dla procesu, który wywo³a³
.BR popen() ,
wiêc je¶li oryginalny proces wykona buforowany odczyt, to pozycja na wej¶ciu
polecenia mo¿e byæ inna ni¿ oczekiwano. Podobnie, wyj¶cie polecenia otwartego
dla zapisu mo¿e zostaæ wymieszane z wyj¶ciem procesu oryginalnego. Temu
ostatniemu mo¿na zapobiec, wo³aj±c przed
.BR popen
funkcjê
.BR fflush (3).
.PP
B³±d w wywo³aniu pow³oki jest nieodró¿nialny od b³êdu pow³oki przy wywo³ywaniu
polecenia, czy od natychmiastowego zakoñczenia polecenia. Jedynym ¶ladem jest
kod zakoñczenia równy 127.
.SH HISTORIA
Funkcje
.B popen()
i
.B pclose()
pojawi³y siê w wersji 7 AT&T UNIX.
.SH "ZOBACZ TAK¯E"
.BR fork (2),
.BR sh (1),
.BR pipe (2),
.BR wait4 (2),
.BR fflush (3),
.BR fclose (3),
.BR fopen (3),
.BR stdio (3),
.BR system (3)
