'\" t
.\" 2000 PTM Przemek Borys <pborys@dione.ids.pl>
.\" DO NOT EDIT THIS FILE BY HAND!
.\" It is generated from terminfo.head, Caps, and terminfo.tail.
.\"
.\" Note: this must be run through tbl before nroff.
.\" The magic cookie on the first line triggers this under some man programs.
.\"***************************************************************************
.\" Copyright (c) 1998 Free Software Foundation, Inc.                        *
.\"                                                                          *
.\" Permission is hereby granted, free of charge, to any person obtaining a  *
.\" copy of this software and associated documentation files (the            *
.\" "Software"), to deal in the Software without restriction, including      *
.\" without limitation the rights to use, copy, modify, merge, publish,      *
.\" distribute, distribute with modifications, sublicense, and/or sell       *
.\" copies of the Software, and to permit persons to whom the Software is    *
.\" furnished to do so, subject to the following conditions:                 *
.\"                                                                          *
.\" The above copyright notice and this permission notice shall be included  *
.\" in all copies or substantial portions of the Software.                   *
.\"                                                                          *
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  *
.\" OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF               *
.\" MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.   *
.\" IN NO EVENT SHALL THE ABOVE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,   *
.\" DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR    *
.\" OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR    *
.\" THE USE OR OTHER DEALINGS IN THE SOFTWARE.                               *
.\"                                                                          *
.\" Except as contained in this notice, the name(s) of the above copyright   *
.\" holders shall not be used in advertising or otherwise to promote the     *
.\" sale, use or other dealings in this Software without prior written       *
.\" authorization.                                                           *
.\"***************************************************************************
.\"
.\" $Id: terminfo.5,v 1.4 2002/05/19 21:05:13 ankry Exp $
.TH TERMINFO 5 "" "" "Formaty plików"
.ds n 5
.ds d /usr/share/terminfo
.SH NAZWA
terminfo \- baza w³a¶ciwo¶ci terminala
.SH SK£ADNIA
\*d/*/*
.SH OPIS
.I Terminfo
jes baz± danych, opisuj±c± terminale, u¿ywan± przez programy obs³uguj±ce
ekran, takie jak
\fBnvi\fR(1),
\fBrogue\fR(1)
i biblioteki takie, jak
\fBcurses\fR(3X).
.I Terminfo
opisuje terminale przez podawanie zestawu ich w³a¶ciwo¶ci,
opisuj±c jak wykonywaæ operacje ekranowe oraz podaj±c wymagania wype³niania
i sekwencje inicjalizacji.
.PP
Wpisy w
.I terminfo
sk³adaj± siê z sekwencji pól, rozdzielonych przecinkami (osadzane przecinki
mo¿na cytowaæ lewymi uko¶nikami, lub zapisywaæ jako \e072).
Bia³e spacje po separatorze `,' s± ignorowane. Pierwszy wpis ka¿dego
terminala podaje nazwy, pod którymi znany jest terminal, rozdzielone znakami
`|'.
Pierwsza podana nazwa jest najpopularniejszym skrótem terminala, a ostatnia
nazwa jest d³ug± nazw±, w pe³ni identyfikuj±c± terminal. Wszystkie nazwy s±
synonimiczne. Wszystkie nazwy poza ostatni± powinny byæ pisane ma³ymi
literami i nie zawieraæ spacji; ostatnia nazwa mo¿e je zawieraæ dla
czytelno¶ci.
.PP
Nazwy terminali (poza ostatnim, gadatliwym wpisem) powinny byæ wybierane wg.
nastêpuj±cych konwencji:
Sprzêt, który sk³ada siê na terminal, powinien tworzyæ korzeñ nazwy, st±d
``hp2621''. Nazwa ta nie powinna zawieraæ my¶lników. Tryby,w których sprzêt
mo¿e siê znajdowaæ powinny byæ wskazywane przez dodanie my¶lnika i
przyrostka trybu. Tak wiêc vt100 w 132 kolumnowym trybie to vt100-w.
Nastêpuj±ce przyrostki powinny byæ u¿ywane tam gdzie to mo¿liwe:
.PP
.TS
center ;
l c l
l l l.
\fBPrzyrostek	Znaczenie 	przyk³ad\fP
-\fInn\fP	Liczba wierszy ekranu	aaa-60
-\fIn\fPp	Liczba stron pamiêci	c100-4p
-am	Z automarginesami (zwykle domy¶lne)	vt100-am
-m	Tryb mono; powstrzymuje kolor       	ansi-m
-mc	Magiczne ciasteczko; spacje przy pod¶wietlaniu	wy30-mc
-na	Brak klawiszy strza³ek (zostaw je w lokalnym)	c100-na
-nam	Bez automatycznych marginesów       	vt100-nam
-nl	Bez linii statusu                  	att4415-nl
-ns	Bez linii statusu                  	hp2626-ns
-rv	Odwrócone kolory                   	c100-rv
-s	W³±cza liniê statusu              	vt100-s
-vb	U¿ywa wizualnego dzwonka zamiast audio	wy370-vb
-w	Szeroki tryb (> 80 kolumn, zwykle 132)	vt100-w
.TE
.PP
Dla dalszych informacji o konwencjach nazywania, poczytaj stronê
\fBterm(7)\fR.
.SS W³a¶ciwo¶ci
.\" Head of terminfo man page ends here
.ps -1
Poni¿ej znajduje siê kompletna liczba w³a¶ciwo¶ci za³±czanych w bloku opisu
terminfo i dostêpnych dla kodu, korzystaj±cego z terminfo. W ka¿dej linii
tabeli 

\fBZmienna\fR jest nazw±, poprzez któr± programista (na poziomie
terminfo) dostaje siê do w³a¶ciwo¶ci.

\fBNazwaw³a¶ciwo¶ci\fR jest krótk± nazw±, u¿ywan± w tek¶cie bazy danych, a
korzysta z niej osoba aktualizuj±ca bazê.
Je¶li to mo¿liwe, nazwyw³a¶ciwo¶ci s± wybierane w standardzie (przynajmniej
zbli¿onym do) ANSI X3.64-1979 (który jest obecnie wypierany przez ECMA-48,
u¿ywaj±cego jednak podobnych nazw). Semantyka powinna te¿ odpowiadaæ
specyfikacji.

Kod termcap jest star± nazw± w³a¶ciwo¶ci
.B termcap
(niektóre w³asciwo¶ci s± nowe i maj± nazwy nie pochodz±ce z termcap).
.P
Nazwy w³a¶ciwo¶ci nie maj± sztywnego limitu d³ugo¶ci, lecz przyjêto
nieformalny limit 5 znakowy, który zachowuje je w zwartej postaci i
umo¿liwia tabulacjom w pliku
.B Caps
³adne zawijanie.

Na koniec, pole opisu próbuje przenie¶æ semantykê w³a¶ciwo¶ci. W polu opisu
mo¿esz znale¼æ pewne kody:
.TP
(P)
okre¶la, ¿e mo¿na podaæ wype³nianie (padding)
.TP
#[1-9]
w polu opisu okre¶la, ¿e ³añcuch jest przekazywany przez tparm z okre¶lonymi
parametrami (#\fIi\fP). (patrz lib_tparm.c z pakietu ncurses--przyp. t³um.)
.TP
(P*)
okre¶la, ¿e wype³nianie mo¿e ró¿niæ siê w zale¿no¶ci do liczby objêtych nim
linii.
.TP
(#\d\fIi\fP\u)
okre¶la \fIi\fP\uty\d parametr.

.PP
Oto w³a¶ciwo¶ci logiczne:

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw20.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fBBooleans	w³a¶æ.	Tcap\fR
auto_left_margin	bw	bw	T{
cub1 zawija z kolumny 0 na ostatni±
T}
auto_right_margin	am	am	T{
terminal ma marginesy automatyczne
T}
back_color_erase	bce	ut	T{
ekran jest czyszczony kolorem t³a
T}
can_change      	ccc	cc	T{
terminal mo¿e redefiniowaæ istniej±ce kolory
T}
ceol_standout_glitch	xhp	xs	T{
tryb wyró¿niony nie kasowany przez nadpisywanie (hp)
T}
col_addr_glitch 	xhpa	YA	T{
jedynie ruchy dodatnie dla w³a¶ciwo¶ci hpa/mhpa
T}
cpi_changes_res 	cpix	YF	T{
zmienianie natê¿enia (pitch) znaku zmienia rozdzielczo¶æ
T}
cr_cancels_micro_mode	crxm	YB	T{
u¿ywanie cr wy³±cza tryb micro
T}
dest_tabs_magic_smso	xt	xt	T{
tabulacje destruktywne, magiczny znak so (t1061)
T}
eat_newline_glitch	xenl	xn	T{
nowa linia jest ignorowana po 80 kolumnach
T}
erase_overstrike	eo	eo	T{
spacj± mo¿na kasowaæ nadstukniêcia (overstrikes)
T}
generic_type    	gn	gn	T{
podstawowy rodzaj linii
T}
hard_copy       	hc	hc	T{
terminal hardcopy
T}
hard_cursor     	chts	HC	T{
kursor jest trudny do zobaczenia
T}
has_meta_key    	km	km	T{
ma klawisz meta (ustawia bit parzysto¶ci)
T}
has_print_wheel 	daisy	YC	T{
drukarka wymaga do zmiany zestawu znaków operatora
T}
has_status_line 	hs	hs	T{
ma dodatkow± liniê statusu
T}
hue_lightness_saturation	hls	hl	T{
terminal u¿ywa tylko notacji HLS kolorów (Tektronix)
T}
insert_null_glitch	in	in	T{
tryb wstawiania (insert) rozró¿nia zera (nulls)
T}
lpi_changes_res 	lpix	YG	T{
zmienianie natê¿enia (pitch) linii zmienia rozdzielczo¶æ
T}
memory_above    	da	da	T{
wy¶wietlacz mo¿e byæ zachowywany ponad ekranem
T}
memory_below    	db	db	T{
wy¶wietlacz mo¿e byæ zachowywany pod ekranem
T}
move_insert_mode	mir	mi	T{
w trybie wstawiania mo¿na siê bezpiecznie poruszaæ
T}
move_standout_mode	msgr	ms	T{
w trybie wyró¿nienia mo¿na siê bezpiecznie poruszaæ
T}
needs_xon_xoff  	nxon	nx	T{
wype³nianie nie zadzia³a, potrzeba xon/xoff
T}
no_esc_ctlc     	xsb	xb	T{
ul ([terminal] beehive) (f1=escape, f2=ctrl C)
T}
no_pad_char     	npc	NP	T{
znak dope³niania nie istnieje
T}
non_dest_scroll_region	ndscr	ND	T{
przewijanie regionu nie jest destruktywne
T}
non_rev_rmcup   	nrrmc	NR	T{
smcup nie odwraca rmcup
T}
over_strike     	os	os	T{
terminal mo¿e nadstukiwaæ
T}
prtr_silent     	mc5i	5i	T{
drukarka nie daje echa na ekran
T}
row_addr_glitch 	xvpa	YD	T{
daje tylko dodatnie ruchy dla w³a¶æ. vpa/mvpa
T}
semi_auto_right_margin	sam	YE	T{
drukowanie ostatniej kolumny powoduje cr
T}
status_line_esc_ok	eslok	es	T{
w linii statusu mo¿na u¿ywaæ escape
T}
tilde_glitch    	hz	hz	T{
nie mo¿na drukowaæ znaków ~
T}
transparent_underline	ul	ul	T{
podkre¶lony znak nadstukuje
T}
xon_xoff        	xon	xo	T{
terminal u¿ywa potwierdzania xon/xoff
T}
.TE
.ad

A oto w³a¶ciwo¶ci numeryczne:

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw20.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fBnumeryczna	w³a¶æ.	tcap\fR
columns         	cols	co	T{
liczba kolumn w linii
T}
init_tabs       	it	it	T{
pocz±tkowo tabulacje co # spacji
T}
label_height    	lh	lh	T{
wiersze w ka¿dej etykiecie
T}
label_width     	lw	lw	T{
kolumny w ka¿dej etykiecie
T}
lines           	lines	li	T{
liczba linii na ekranie lub stronie
T}
lines_of_memory 	lm	lm	T{
linie pamiêci w wypadku gdy > linii ekranu. 0 =>
ró¿ni siê
T}
magic_cookie_glitch	xmc	sg	T{
liczba spacji, pozostawianych przez smso lub rmso
T}
max_attributes  	ma	ma	T{
maksymalna liczba po³±czonych atrybutów, które obs³uguje terminal
T}
max_colors      	colors	Co	T{
maksymalna liczba kolorów na ekranie
T}
max_pairs       	pairs	pa	T{
maksymalna liczba par kolorów na ekranie
T}
maximum_windows 	wnum	MW	T{
maksymalna liczna definiowalnych okien
T}
no_color_video  	ncv	NC	T{
atrybuty wideo, których nie mo¿na u¿ywaæ z kolorami
T}
num_labels      	nlab	Nl	T{
liczba etykiet na ekranie
T}
padding_baud_rate	pb	pb	T{
najni¿sza szybko¶æ przesy³u (baud rate) gdy wymagane jest wype³nianie
(padding).
T}
virtual_terminal	vt	vt	T{
liczba terminali wirtualnych (CB/unix)
T}
width_status_line	wsl	ws	T{
liczba kolumn w linii statusu
T}
.TE
.ad

W strukturze term SVr4.0 istniej± te¿ nastêpuj±ce w³a¶ciwo¶ci numeryczne,
lecz nie s± one jeszcze udokumentowane w podrêczniku. Pochodz± one z
SVr4-tego wsparcia dla drukarki.

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw20.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fBNumeryczna	w³a¶æ	Tcap\fR
bit_image_entwining	bitwin	Yo	T{
liczba przej¶æ (passes) dla ka¿dego wiersza obrazu bitowego
T}
bit_image_type  	bitype	Yp	T{
rodzaj urz±dzenia obrazu bitowego
T}
buffer_capacity 	bufsz	Ya	T{
licza bajtów buforowanych przed drukowaniem
T}
buttons         	btns	BT	T{
liczba przycisków myszy
T}
dot_horz_spacing	spinh	Yc	T{
odstêpy poprzeczne punktów wyra¿one w punktach na cal (DPI)
T}
dot_vert_spacing	spinv	Yb	T{
odstêpy pionowe igie³ (pins) w ig³ach na cal
T}
max_micro_address	maddr	Yd	T{
maksymalna warto¶æ w micro_..._address
T}
max_micro_jump  	mjump	Ye	T{
maksymalna warto¶æ w parm_..._micro
T}
micro_col_size  	mcs	Yf	T{
rozmiar kroku znakowego w trybie micro mode
T}
micro_line_size 	mls	Yg	T{
rozmiar kroku liniowego w trybie micro mode
T}
number_of_pins  	npins	Yh	T{
liczba igie³ w g³owicy drukuj±cej (print-head)
T}
output_res_char 	orc	Yi	T{
rozdzielczo¶æ poprzeczna w jednostkach na liniê
T}
output_res_horz_inch	orhi	Yk	T{
rozdzielczo¶æ poprzeczna w jednostkach na cal
T}
output_res_line 	orl	Yj	T{
rozdzielczo¶æ pionowa w jednostkach na liniê
T}
output_res_vert_inch	orvi	Yl	T{
rozdzielczo¶æ pionowa w jednostkach na cal
T}
print_rate      	cps	Ym	T{
wydrukuj szybko¶æ przesy³u w znakach na sekundê
T}
wide_char_size  	widcs	Yn	T{
rozmiar kroku znaku w trybie podwojonej szeroko¶ci
T}
.TE
.ad

A oto w³a¶ciwo¶ci napisowe:

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw20.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fBNapisowa	w³a¶æ.	Tcap\fR
acs_chars       	acsc	ac	T{
graficzne pary zestawu znaków, oparte o vt100
T}
back_tab        	cbt	bt	T{
wsteczna tabulacja (P)
T}
bell            	bel	bl	T{
sygna³ audiofoniczny (dzwonek) (P)
T}
carriage_return 	cr	cr	T{
powrót karetki (P*) (P*)
T}
change_char_pitch	cpi	ZA	T{
Zmieñ liczbê znaków na cal
T}
change_line_pitch	lpi	ZB	T{
Zmieñ liczbê linii na cal
T}
change_res_horz  	chr	ZC	T{
Zmieñ rozdzielczo¶æ poprzeczn±
T}
change_res_vert  	cvr	ZD	T{
Zmieñ rozdzielczo¶æ pionow±
T}
change_scroll_region	csr	cs	T{
zmieñ region na liniê #1 do linii #2 (P)
T}
char_padding    	rmp	rP	T{
podobne do ip, lecz w trybie wstawiania (insert)
T}
clear_all_tabs  	tbc	ct	T{
czy¶æ wszystkie tabulatory (tab stops) (P)
T}
clear_margins    	mgc	MC	T{
czy¶æ wszystkie miêkkie lewe i prawe marginesy
T}
clear_screen    	clear	cl	T{
czy¶æ ekran i wyzeruj kursor (home cursor) (P*)
T}
clr_bol         	el1	cb	T{
wyczy¶æ pocz±tek linii
T}
clr_eol         	el	ce	T{
wyczy¶æ do koñca linii (P)
T}
clr_eos         	ed	cd	T{
wyczy¶æ do koñca ekranu (P*)
T}
column_address  	hpa	ch	T{
pozycja pozioma #1 (P)
T}
command_character	cmdch	CC	T{
ustawialny w prototypie znak cmd terminala !?
T}
create_window   	cwin	CW	T{
definiuj okno #1 od #2,#3 do #4,#5
T}
cursor_address  	cup	cm	T{
przejd¼ do wiersza #1 kolumny #2
T}
cursor_down     	cud1	do	T{
w dó³ o 1 liniê
T}
cursor_home     	home	ho	T{
kursor do domu (je¶li bez cup)
T}
cursor_invisible	civis	vi	T{
uczyñ kursor niewidzialnym
T}
cursor_left     	cub1	le	T{
przejd¼ jedn± spacjê w lewo
T}
cursor_mem_address	mrcup	CM	T{
adresowanie kursora wzglêdem pamiêci
T}
cursor_normal   	cnorm	ve	T{
spowoduj, ¿e kursor stanie siê normalny (odtwórz zmiany civis/cvvis)
T}
cursor_right    	cuf1	nd	T{
niedestruktywna spacja (przejd¼ w prawo o spacjê)
T}
cursor_to_ll    	ll	ll	T{
ostatnia linia, pierwsza kolumna (je¶li bez cup)
T}
cursor_up       	cuu1	up	T{
w górê o 1 liniê
T}
cursor_visible  	cvvis	vs	T{
uczyñ kursor bardzo widzialnym
T}
define_char     	defc	ZE	T{
zdefiniuj znak
T}
delete_character	dch1	dc	T{
usuñ znak (P*)
T}
delete_line     	dl1	dl	T{
usuñ liniê (P*)
T}
dial_phone      	dial	DI	T{
wykrêæ numer #1
T}
dis_status_line 	dsl	ds	T{
wy³±cz liniê statusu
T}
display_clock   	dclk	DK	T{
wy¶wietl w pozycji (#1,#2) zegar
T}
down_half_line  	hd	hd	T{
pó³ linii w dó³
T}
ena_acs          	enacs	eA	T{
w³±cz alternatywny zestaw znaków
T}
enter_alt_charset_mode	smacs	as	T{
rozpocznij tryb alternatywnego zestawu znaków (P)
T}
enter_am_mode   	smam	SA	T{
w³±cz automatyczne marginesy
T}
enter_blink_mode	blink	mb	T{
w³±cz migotanie
T}
enter_bold_mode 	bold	md	T{
w³±cz tryb wyt³uszczenia (dodatkowe rozja¶nienie)
T}
enter_ca_mode   	smcup	ti	T{
³añcuch do rozpoczynania programów, u¿ywaj±cych cup
T}
enter_delete_mode	smdc	dm	T{
wejd¼ w tryb kasowania (delete)
T}
enter_dim_mode  	dim	mh	T{
w³±cz tryb pó³-rozja¶nienia
T}
enter_doublewide_mode	swidm	ZF	T{
wejd¼ w tryb podwójnej szeroko¶ci
T}
enter_draft_quality	sdrfq	ZG	T{
wejd¼ w tryb jako¶ci draft
T}
enter_insert_mode	smir	im	T{
wejd¼ w tryb wstawiania (insert)
T}
enter_italics_mode	sitm	ZH	T{
wejd¼ w tryb kursywy
T}
enter_leftward_mode	slm	ZI	T{
rozpocznij lewokierunkowy ruch karetki
T}
enter_micro_mode	smicm	ZJ	T{
rozpocznij tryb micro-motion (mikro ruchów)
T}
enter_near_letter_quality	snlq	ZK	T{
wejd¼ w tryb NLQ
T}
enter_normal_quality	snrmq	ZL	T{
wejd¼ w tryb normalnej jako¶ci
T}
enter_protected_mode	prot	mp	T{
w³±cz tryb chroniony
T}
enter_reverse_mode	rev	mr	T{
w³±cz tryb inwersyjny wideo
T}
enter_secure_mode	invis	mk	T{
w³±cz tryb niewidzialny (znaki niewidoczne)
T}
enter_shadow_mode	sshm	ZM	T{
wejd¼ w tryb shadow-print (cieniowego-drukowania)
T}
enter_standout_mode	smso	so	T{
rozpocznij tryb wyró¿niony (standout)
T}
enter_subscript_mode	ssubm	ZN	T{
wejd¼ w tryb indeksu dolnego
T}
enter_superscript_mode	ssupm	ZO	T{
wejd¼ w tryb indeksu górnego
T}
enter_underline_mode	smul	us	T{
rozpocznij tryb podkre¶lenia
T}
enter_upward_mode	sum	ZP	T{
rozpocznij górnokierunkowy ruch karetki
T}
enter_xon_mode  	smxon	SX	T{
w³±cz potwierdzenia xon/xoff
T}
erase_chars     	ech	ec	T{
wykasuj #1 znaków (P)
T}
exit_alt_charset_mode	rmacs	ae	T{
zakoñcz [dzia³anie] alternatywnego zestawu znaków (P)
T}
exit_am_mode    	rmam	RA	T{
wy³±cz automatyczne marginesy
T}
exit_attribute_mode	sgr0	me	T{
wy³±cz wszystkie atrybuty
T}
exit_ca_mode    	rmcup	te	T{
³añcuchy do koñczenia programów, u¿ywaj±cych cup
T}
exit_delete_mode	rmdc	ed	T{
zakoñcz tryb kasowania
T}
exit_doublewide_mode	rwidm	ZQ	T{
zakoñcz tryb podwojonej szeroko¶ci
T}
exit_insert_mode	rmir	ei	T{
zakoñcz tryb wstawiania
T}
exit_italics_mode	ritm	ZR	T{
zakoñcz tryb kursywy
T}
exit_leftward_mode	rlm	ZS	T{
zakoñcz tryb ruchu w lewo
T}
exit_micro_mode 	rmicm	ZT	T{
zakoñcz tryb micro-motion
T}
exit_shadow_mode	rshm	ZU	T{
zakoñcz tryb shadow-print
T}
exit_standout_mode	rmso	se	T{
zakoñcz tryb wyró¿nienia
T}
exit_subscript_mode	rsubm	ZV	T{
zakoñcz tryb indeksu dolnego
T}
exit_superscript_mode	rsupm	ZW	T{
zakoñcz tryb indeksu górnego
T}
exit_underline_mode	rmul	ue	T{
zakoñcz tryb podkre¶lenia
T}
exit_upward_mode	rum	ZX	T{
zakoñcz odwrócone ruchy znaków
T}
exit_xon_mode   	rmxon	RX	T{
wy³±cz potwierdzenia xon/xoff
T}
fixed_pause     	pause	PA	T{
pauzuj przez 2-3 sekundy
T}
flash_hook      	hook	fh	T{
zaczep prze³±cznika rozb³ysku (flash switch hook)
T}
flash_screen    	flash	vb	T{
widzialny dzwonek (nie mo¿e ruszaæ kursora)
T}
form_feed       	ff	ff	T{
Wyrzucenie strony z terminala hardcopy (P*)
T}
from_status_line	fsl	fs	T{
powrót z linii statusu
T}
goto_window     	wingo	WG	T{
id¼ do okna #1
T}
hangup           	hup	HU	T{
odwie¶ s³uchawkê
T}
init_1string    	is1	i1	T{
³añcuch inicjalizacji
T}
init_2string    	is2	is	T{
³añcuch inicjalizacji
T}
init_3string    	is3	i3	T{
³añcuch inicjalizacji
T}
init_file       	if	if	T{
nazwa pliku inicjalizacji
T}
init_prog       	iprog	iP	T{
¶cie¿ka do programu do inicjalizacji
T}
initialize_color	initc	Ic	T{
inicjalizuj kolor #1 na (#2,#3,#4)
T}
initialize_pair  	initp	Ip	T{
inicjalizuj parê #1 kolorów na fg=(#2,#3,#4), bg=(#5,#6,#7)
T}
insert_character	ich1	ic	T{
wstaw znak (P)
T}
insert_line     	il1	al	T{
wstaw liniê (P*)
T}
insert_padding  	ip	ip	T{
wstaw wype³nienie (padding) po wstawionym znaku
T}
key_a1          	ka1	K1	T{
lewy, górny róg keypadu
T}
key_a3          	ka3	K3	T{
prawy, górny róg keypadu
T}
key_b2          	kb2	K2	T{
¶rodek keypadu
T}
key_backspace   	kbs	kb	T{
klawisz backspace
T}
key_beg          	kbeg	@1	T{
klawisz begin
T}
key_btab        	kcbt	kB	T{
klawisz wstecznej tabulacji
T}
key_c1          	kc1	K4	T{
lewy, dolny róg keypadu
T}
key_c3          	kc3	K5	T{
prawy, dolny róg keypadu
T}
key_cancel      	kcan	@2	T{
klawisz cancel (anulowania)
T}
key_catab       	ktbc	ka	T{
klawisz czyszczenia wszystkich tabulacji
T}
key_clear       	kclr	kC	T{
klawisz czyszczenia ekranu lub wymazywania
T}
key_close       	kclo	@3	T{
klawisz close (zamykania)
T}
key_command     	kcmd	@4	T{
klawisz poleceñ
T}
key_copy        	kcpy	@5	T{
klawisz copy (kopiowania)
T}
key_create      	kcrt	@6	T{
klawisz create (tworzenia)
T}
key_ctab        	kctab	kt	T{
klawisz czyszczenia tabulacji
T}
key_dc          	kdch1	kD	T{
klawisz kasowania znaku
T}
key_dl          	kdl1	kL	T{
klawisz kasowania linii
T}
key_down        	kcud1	kd	T{
strza³ka w dó³
T}
key_eic         	krmir	kM	T{
wysy³ane przez rmir lub smir w trybie wstawiania
T}
key_end          	kend	@7	T{
klawisz end
T}
key_enter       	kent	@8	T{
klawisz enter/send
T}
key_eol         	kel	kE	T{
klawisz kasowania do koñca linii
T}
key_eos         	ked	kS	T{
klawisz kasowania do koñca ekranu
T}
key_exit        	kext	@9	T{
klawisz exit (zakoñczenia)
T}
key_f0          	kf0	k0	T{
klawisz funkcyjny F0
T}
key_f1          	kf1	k1	T{
klawisz funkcyjny F1
T}
key_f10         	kf10	k;	T{
klawisz funkcyjny F10
T}
key_f11         	kf11	F1	T{
klawisz funkcyjny F11
T}
key_f12         	kf12	F2	T{
klawisz funkcyjny F12
T}
key_f13         	kf13	F3	T{
klawisz funkcyjny F13
T}
key_f14         	kf14	F4	T{
klawisz funkcyjny F14
T}
key_f15         	kf15	F5	T{
klawisz funkcyjny F15
T}
key_f16         	kf16	F6	T{
klawisz funkcyjny F16
T}
key_f17         	kf17	F7	T{
klawisz funkcyjny F17
T}
key_f18         	kf18	F8	T{
klawisz funkcyjny F18
T}
key_f19         	kf19	F9	T{
klawisz funkcyjny F19
T}
key_f2          	kf2	k2	T{
klawisz funkcyjny F2
T}
key_f20         	kf20	FA	T{
klawisz funkcyjny F20
T}
key_f21         	kf21	FB	T{
klawisz funkcyjny F21
T}
key_f22         	kf22	FC	T{
klawisz funkcyjny F22
T}
key_f23         	kf23	FD	T{
klawisz funkcyjny F23
T}
key_f24         	kf24	FE	T{
klawisz funkcyjny F24
T}
key_f25         	kf25	FF	T{
klawisz funkcyjny F25
T}
key_f26         	kf26	FG	T{
klawisz funkcyjny F26
T}
key_f27         	kf27	FH	T{
klawisz funkcyjny F27
T}
key_f28         	kf28	FI	T{
klawisz funkcyjny F28
T}
key_f29         	kf29	FJ	T{
klawisz funkcyjny F29
T}
key_f3          	kf3	k3	T{
klawisz funkcyjny F3
T}
key_f30         	kf30	FK	T{
klawisz funkcyjny F30
T}
key_f31         	kf31	FL	T{
klawisz funkcyjny F31
T}
key_f32         	kf32	FM	T{
klawisz funkcyjny F32
T}
key_f33         	kf33	FN	T{
klawisz funkcyjny F33
T}
key_f34         	kf34	FO	T{
klawisz funkcyjny F34
T}
key_f35         	kf35	FP	T{
klawisz funkcyjny F35
T}
key_f36         	kf36	FQ	T{
klawisz funkcyjny F36
T}
key_f37         	kf37	FR	T{
klawisz funkcyjny F37
T}
key_f38         	kf38	FS	T{
klawisz funkcyjny F38
T}
key_f39         	kf39	FT	T{
klawisz funkcyjny F39
T}
key_f4          	kf4	k4	T{
klawisz funkcyjny F4
T}
key_f40         	kf40	FU	T{
klawisz funkcyjny F40
T}
key_f41         	kf41	FV	T{
klawisz funkcyjny F41
T}
key_f42         	kf42	FW	T{
klawisz funkcyjny F42
T}
key_f43         	kf43	FX	T{
klawisz funkcyjny F43
T}
key_f44         	kf44	FY	T{
klawisz funkcyjny F44
T}
key_f45         	kf45	FZ	T{
klawisz funkcyjny F45
T}
key_f46         	kf46	Fa	T{
klawisz funkcyjny F46
T}
key_f47         	kf47	Fb	T{
klawisz funkcyjny F47
T}
key_f48         	kf48	Fc	T{
klawisz funkcyjny F48
T}
key_f49         	kf49	Fd	T{
klawisz funkcyjny F49
T}
key_f5          	kf5	k5	T{
klawisz funkcyjny F5
T}
key_f50         	kf50	Fe	T{
klawisz funkcyjny F50
T}
key_f51         	kf51	Ff	T{
klawisz funkcyjny F51
T}
key_f52         	kf52	Fg	T{
klawisz funkcyjny F52
T}
key_f53         	kf53	Fh	T{
klawisz funkcyjny F53
T}
key_f54         	kf54	Fi	T{
klawisz funkcyjny F54
T}
key_f55         	kf55	Fj	T{
klawisz funkcyjny F55
T}
key_f56         	kf56	Fk	T{
klawisz funkcyjny F56
T}
key_f57         	kf57	Fl	T{
klawisz funkcyjny F57
T}
key_f58         	kf58	Fm	T{
klawisz funkcyjny F58
T}
key_f59         	kf59	Fn	T{
klawisz funkcyjny F59
T}
key_f6          	kf6	k6	T{
klawisz funkcyjny F6
T}
key_f60         	kf60	Fo	T{
klawisz funkcyjny F60
T}
key_f61         	kf61	Fp	T{
klawisz funkcyjny F61
T}
key_f62         	kf62	Fq	T{
klawisz funkcyjny F62
T}
key_f63         	kf63	Fr	T{
klawisz funkcyjny F63
T}
key_f7          	kf7	k7	T{
klawisz funkcyjny F7
T}
key_f8          	kf8	k8	T{
klawisz funkcyjny F8
T}
key_f9          	kf9	k9	T{
klawisz funkcyjny F9
T}
key_find        	kfnd	@0	T{
klawisz find (szukania)
T}
key_help          	khlp	%1	T{
klawisz help (pomocy)
T}
key_home        	khome	kh	T{
klawisz home
T}
key_ic          	kich1	kI	T{
klawisz wstawiania znaku
T}
key_il          	kil1	kA	T{
klawisz wstawiania linii
T}
key_left        	kcub1	kl	T{
strza³ka w lewo
T}
key_ll          	kll	kH	T{
dolna strza³ka w lewo (home down)
T}
key_mark          	kmrk	%2	T{
klawisz mark (zaznaczenia)
T}
key_message          	kmsg	%3	T{
klawisz message (komunikatu)
T}
key_move          	kmov	%4	T{
klawisz move (przemieszczenia)
T}
key_next          	knxt	%5	T{
klawisz next (nastêpny)
T}
key_npage        	knp	kN	T{
klawisz nastêpnej-strony
T}
key_open          	kopn	%6	T{
klawisz open (otwarcia)
T}
key_options          	kopt	%7	T{
klawisz options (opcji)
T}
key_ppage       	kpp	kP	T{
klawisz poprzedniej-strony
T}
key_previous          	kprv	%8	T{
klawisz previous (poprzedni)
T}
key_print          	kprt	%9	T{
klawisz print (drukowania)
T}
key_redo          	krdo	%0	T{
klawisz redo (odtworzenia)
T}
key_reference          	kref	&1	T{
klawisz reference
T}
key_refresh          	krfr	&2	T{
klawisz refresh (od¶wie¿enia)
T}
key_replace          	krpl	&3	T{
klawisz replace (podmienienia)
T}
key_restart          	krst	&4	T{
klawisz restart
T}
key_resume          	kres	&5	T{
klawisz resume (wznowienia)
T}
key_right       	kcuf1	kr	T{
strza³ka w prawo
T}
key_save          	ksav	&6	T{
klawisz save (zapisania)
T}
key_sbeg        	kBEG	&9	T{
przesuniêty (shifted) klawisz rozpoczêcia (begin key)
T}
key_scancel     	kCAN	&0	T{
przesuniêty klawisz cancel (anulowania)
T}
key_scommand    	kCMD	*1	T{
przesuniêty klawisz polecenia
T}
key_scopy       	kCPY	*2	T{
przesuniêty klawisz copy (kopiowania)
T}
key_screate     	kCRT	*3	T{
przesuniêty klawisz create (tworzenia)
T}
key_sdc         	kDC	*4	T{
przesuniêty klawisz kasowania znaku
T}
key_sdl          	kDL	*5	T{
przesuniêty klawisz kasowania linii
T}
key_select      	kslt	*6	T{
klawisz wybrania (select key)
T}
key_send        	kEND	*7	T{
przesuniêty klawisz end
T}
key_seol          	kEOL	*8	T{
przesuniêty klawisz czyszczenia do koñca linii
T}
key_sexit          	kEXT	*9	T{
przesuniêty klawisz exit (zakoñczenia)
T}
key_sf          	kind	kF	T{
klawisz przewijania w przód
T}
key_sfind          	kFND	*0	T{
przesuniêty klawisz find (szukania)
T}
key_shelp          	kHLP	#1	T{
przesuniêty klawisz help (pomocy)
T}
key_shome          	kHOM	#2	T{
przesuniêty klawisz home
T}
key_sic          	kIC	#3	T{
przesuniêty klawisz wstawiania znaku
T}
key_sleft          	kLFT	#4	T{
przesuniêta strza³ka w lewo
T}
key_smessage          	kMSG	%a	T{
przesuniêty klawisz message (komunikatu)
T}
key_smove          	kMOV	%b	T{
przesuniêty klawisz move (przemieszczenia)
T}
key_snext          	kNXT	%c	T{
przesuniêty klawisz next
T}
key_soptions          	kOPT	%d	T{
przesuniêty klawisz options (opcji)
T}
key_sprevious          	kPRV	%e	T{
przesuniêty klawisz previous (poprzedni)
T}
key_sprint          	kPRT	%f	T{
przesuniêty klawisz print (drukowania)
T}
key_sr          	kri	kR	T{
klawisz przewijania wstecz
T}
key_sredo          	kRDO	%g	T{
przesuniêty klawisz redo (odtworzenia)
T}
key_sreplace          	kRPL	%h	T{
przesuniêty klawisz replace (podmienienia)
T}
key_sright      	kRIT	%i	T{
przesuniêta strza³ka w prawo
T}
key_srsume      	kRES	%j	T{
przesuniêty klawisz resume (wznowienia)
T}
key_ssave       	kSAV	!1	T{
przesuniêty klawisz save (zapisania)
T}
key_ssuspend    	kSPD	!2	T{
przesuniêty klawisz suspend (zawieszenia)
T}
key_stab        	khts	kT	T{
klawisz ustawienia tabulacji (set-tab key)
T}
key_sundo       	kUND	!3	T{
przesuniêty klawisz undo (cofniêcia)
T}
key_suspend          	kspd	&7	T{
klawisz suspend (zawieszenia)
T}
key_undo        	kund	&8	T{
klawisz undo (cofniêcia)
T}
key_up          	kcuu1	ku	T{
strza³ka w górê
T}
keypad_local    	rmkx	ke	T{
zakoñcz tryb 'keyboard_transmit'
T}
keypad_xmit     	smkx	ks	T{
wejd¼ w tryb 'keyboard_transmit'
T}
lab_f0          	lf0	l0	T{
etykieta na klawiszu f0 to nie f0
T}
lab_f1          	lf1	l1	T{
etykieta na klawiszu f1 to nie f1
T}
lab_f10          	lf10	la	T{
etykieta na klawiszu f10 to nie f10
T}
lab_f2          	lf2	l2	T{
etykieta na klawiszu f2 to nie f2
T}
lab_f3          	lf3	l3	T{
etykieta na klawiszu f3 to nie f3
T}
lab_f4          	lf4	l4	T{
etykieta na klawiszu f4 to nie f4
T}
lab_f5          	lf5	l5	T{
etykieta na klawiszu f5 to nie f5
T}
lab_f6          	lf6	l6	T{
etykieta na klawiszu f6 to nie f6
T}
lab_f7          	lf7	l7	T{
etykieta na klawiszu f7 to nie f7
T}
lab_f8          	lf8	l8	T{
etykieta na klawiszu f8 to nie f8
T}
lab_f9          	lf9	l9	T{
etykieta na klawiszu f9 to nie f9
T}
label_format    	fln	Lf	T{
format etykiety
T}
label_off       	rmln	LF	T{
wy³±cz miêkkie etykiety
T}
label_on        	smln	LO	T{
w³±cz miêkkie etykiety
T}
meta_off          	rmm	mo	T{
wy³±cz tryb meta
T}
meta_on         	smm	mm	T{
w³±cz tryb meta (w³±czony 8 bit)
T}
micro_column_address	mhpa	ZY	T{
podobne do column_address w trybie micro mode
T}
micro_down      	mcud1	ZZ	T{
podobne do cursor_down w trybie micro mode
T}
micro_left      	mcub1	Za	T{
podobne do cursor_left w trybie micro mode
T}
micro_right     	mcuf1	Zb	T{
podobne do cursor_right w trybie micro mode
T}
micro_row_address	mvpa	Zc	T{
podobne do row_address w trybie micro mode
T}
micro_up        	mcuu1	Zd	T{
podobne do cursor_up w trybie micro mode
T}
newline         	nel	nw	T{
nowa linia (zachowuj siê jak cr z lf)
T}
order_of_pins   	porder	Ze	T{
dopasuj bity programowe do igie³ g³owicy drukuj±cej
T}
orig_colors     	oc	oc	T{
ustaw wszystkie pary kolorów na warto¶ci oryginalne
T}
orig_pair       	op	op	T{
ustaw domy¶ln± parê na warto¶æ oryginaln±
T}
pad_char          	pad	pc	T{
znak wype³niania (zamiast zera)
T}
parm_dch          	dch	DC	T{
kasuj #1 znaków (P*)
T}
parm_delete_line	dl	DL	T{
kasuj #1 linii (P*)
T}
parm_down_cursor	cud	DO	T{
w dó³ o #1 linii (P*)
T}
parm_down_micro 	mcud	Zf	T{
podobne do parm_down_cursor w trybie micro mode
T}
parm_ich          	ich	IC	T{
wstaw #1 znaków (P*)
T}
parm_index          	indn	SF	T{
przewiñ w przód o #1 linii (P)
T}
parm_insert_line	il	AL	T{
wstaw #1 linii (P*)
T}
parm_left_cursor	cub	LE	T{
przesuñ #1 znaków w lewo (P)
T}
parm_left_micro 	mcub	Zg	T{
podobne do parm_left_cursor w trybie micro mode
T}
parm_right_cursor	cuf	RI	T{
przesuñ #1 znaków w prawo (P*)
T}
parm_right_micro	mcuf	Zh	T{
podobne do parm_right_cursor w trybie micro mode
T}
parm_rindex          	rin	SR	T{
przewiñ wstecz o #1 linii (P)
T}
parm_up_cursor  	cuu	UP	T{
przejd¼ w górê o #1 linii (P*)
T}
parm_up_micro   	mcuu	Zi	T{
podobne do parm_up_cursor w trybie micro mode
T}
pkey_key        	pfkey	pk	T{
zaprogramuj klawisz funkcyjny #1 na wysy³anie ³añcucha #2
T}
pkey_local          	pfloc	pl	T{
zaprogramuj klawisz funkcyjny #1 na wykonywanie ³añcucha #2
T}
pkey_xmit          	pfx	px	T{
zaprogramuj klawisz funkcyjny #1 na transmitowanie ³añcucha #2
T}
plab_norm       	pln	pn	T{
zaprogramuj etykietê #2 na pokazywanie ³añcucha #2
T}
print_screen          	mc0	ps	T{
drukuj zawarto¶æ ekranu
T}
prtr_non        	mc5p	pO	T{
w³±cz drukarkê na #1 bajtów
T}
prtr_off          	mc4	pf	T{
wy³±cz drukarkê
T}
prtr_on         	mc5	po	T{
w³±cz drukarkê
T}
pulse           	pulse	PU	T{
wybierz wydzwanianie pulsowe
T}
quick_dial      	qdial	QD	T{
wykrêæ numer #1 bez sprawdzania
T}
remove_clock    	rmclk	RC	T{
usuñ zegarek
T}
repeat_char          	rep	rp	T{
powtórz znak #1 #2 razy (P*)
T}
req_for_input   	rfi	RF	T{
wy¶lij nastêpny znak wej¶ciowy (dla pty)
T}
reset_1string          	rs1	r1	T{
³añcuch resetowania
T}
reset_2string          	rs2	r2	T{
³añcuch resetowania
T}
reset_3string          	rs3	r3	T{
³añcuch resetowania
T}
reset_file          	rf	rf	T{
nazwa pliku resetowania
T}
restore_cursor        	rc	rc	T{
odtwórz pozycjê kursora na ostatnie save_cursor
T}
row_address          	vpa	cv	T{
absolutna pozycja pionowa #1 (P)
T}
save_cursor          	sc	sc	T{
zapisz bie¿±c± pozycjê kursora (P)
T}
scroll_forward        	ind	sf	T{
przewiñ tekst w górê (P)
T}
scroll_reverse        	ri	sr	T{
przewiñ tekst w dó³ (P)
T}
select_char_set 	scs	Zj	T{
wybierz zestaw znaków
T}
set_attributes        	sgr	sa	T{
zdefiniuj atrybuty wideo #1-#9 (PG9)
T}
set_background  	setb	Sb	T{
Ustaw kolor t³a #1
T}
set_bottom_margin	smgb	Zk	T{
ustaw dolny margines na bie¿±cej linii
T}
set_bottom_margin_parm	smgbp	Zl	T{
ustaw dolny margines na linii #1 lub #2 linii od do³u
T}
set_clock       	sclk	SC	T{
ustaw zegarek na godzinê #1, minut #2, #3 sekund
T}
set_color_pair  	scp	sp	T{
ustaw bie¿±c± parê kolorów na #1
T}
set_foreground  	setf	Sf	T{
ustaw kolor #1
T}
set_left_margin    	smgl	ML	T{
ustaw lewy miêkki margines na bie¿±cej kolumnie
T}
set_left_margin_parm	smglp	Zm	T{
ustaw lewy (prawy) margines na kolumnie #1 (#2)
T}
set_right_margin	smgr	MR	T{
ustaw prawy miêkki margines na bie¿±cej kolumnie
T}
set_right_margin_parm	smgrp	Zn	T{
ustaw prawy margines na kolumnie #1
T}
set_tab         	hts	st	T{
ustaw tabulacjê w ka¿dym wierszu, bie¿±ca kolumna (?)
T}
set_top_margin  	smgt	Zo	T{
ustaw górny margines na bie¿±cej linii
T}
set_top_margin_parm	smgtp	Zp	T{
ustaw górny (dolny) margines w wierszu #1 (#2)
T}
set_window      	wind	wi	T{
bie¿±ce okno to linie #1-#2 i kolumny #3-#4
T}
start_bit_image 	sbim	Zq	T{
zacznij drukowaæ grafikê bitow±
T}
start_char_set_def	scsd	Zr	T{
rozpocznij definicjê zestawu znaków
T}
stop_bit_image  	rbim	Zs	T{
przestañ drukowaæ grafikê bitow±
T}
stop_char_set_def	rcsd	Zt	T{
zakoñcz definicjê zestawu znaków
T}
subscript_characters	subcs	Zu	T{
lista indeksowalnych dolnie znaków
T}
superscript_characters	supcs	Zv	T{
lista indeksowalnych górnie znaków
T}
tab             	ht	ta	T{
tabuluj do nastêpnego (sprzêtowego) 8-spacjowego tabulatora
T}
these_cause_cr  	docr	Zw	T{
drukowanie dowolnego z nich spowoduje CR
T}
to_status_line  	tsl	ts	T{
przemie¶æ siê do linii statusu
T}
tone             	tone	TO	T{
wybierz wydzwanianie tonowe
T}
underline_char  	uc	uc	T{
podkre¶l znak i przesuñ siê za niego
T}
up_half_line    	hu	hu	T{
pó³ linii w górê
T}
user0           	u0	u0	T{
³añcuch u¿ytkownika #0
T}
user1           	u1	u1	T{
³añcuch u¿ytkownika #1
T}
user2           	u2	u2	T{
³añcuch u¿ytkownika #2
T}
user3           	u3	u3	T{
³añcuch u¿ytkownika #3
T}
user4           	u4	u4	T{
³añcuch u¿ytkownika #4
T}
user5           	u5	u5	T{
³añcuch u¿ytkownika #5
T}
user6           	u6	u6	T{
³añcuch u¿ytkownika #6
T}
user7           	u7	u7	T{
³añcuch u¿ytkownika #7
T}
user8           	u8	u8	T{
³añcuch u¿ytkownika #8
T}
user9           	u9	u9	T{
³añcuch u¿ytkownika #9
T}
wait_tone       	wait	WA	T{
czekaj na ton dzwonienia (dialtone)
T}
xoff_character  	xoffc	XF	T{
znak XOFF
T}
xon_character   	xonc	XN	T{
znak XON
T}
zero_motion     	zerom	Zx	T{
brak przemieszczenia dla kolejnego znaku
T}
.TE
.ad

Nastêpuj±ce w³a¶ciwo¶ci ³añcuchowe istniej± w strukturze term SVr4.0, lecz
pocz±tkowo nie by³y opisane w podrêczniku man.

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw18.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fB£añcuchowa	w³a¶æ.	TCap\fR
alt_scancode_esc	scesa	S8	T{
alternatywny escape dla emulacji scancode
T}
bit_image_carriage_return	bicr	Yv	T{
przemie¶æ siê na pocz±tek wiersza
T}
bit_image_newline	binel	Zz	T{
przemie¶æ siê do nastêpnego wiersza obrazu bitowego
T}
bit_image_repeat	birep	Xy	T{
powtórz komórkê #1 obrazu bitowego #2 razy
T}
char_set_names  	csnm	Zy	T{
wymieñ nazwy zestawów znaków
T}
code_set_init   	csin	ci	T{
inicjalizuj sekwencjê dla wielokrotnych zestawów kodów
T}
color_names     	colornm	Yw	T{
podaj nazwê dla koloru #1
T}
define_bit_image_region	defbi	Yx	T{
definiuj prostok±tny region obrazu bitowego
T}
device_type     	devt	dv	T{
wska¿ obs³ugê jêzyka/zestawu kodów
T}
display_pc_char 	dispc	S1	T{
wy¶wietl znak PC
T}
end_bit_image_region	endbi	Yy	T{
zakoñcz region obrazu bitowego
T}
enter_pc_charset_mode	smpch	S2	T{
wejd¼ w tryb wy¶wietlania PC
T}
enter_scancode_mode	smsc	S4	T{
wejd¼ w tryb scancode PC
T}
exit_pc_charset_mode	rmpch	S3	T{
zakoñcz tryb wy¶wietlania znaków PC
T}
exit_scancode_mode	rmsc	S5	T{
zakoñcz tryb scancode PC
T}
get_mouse       	getm	Gm	T{
curses powinny odbieraæ zdarzenia myszy
T}
key_mouse       	kmous	Km	T{
pojawi³o siê zdarzenie myszy
T}
mouse_info      	minfo	Mi	T{
informacja o statusie myszy
T}
pc_term_options 	pctrm	S6	T{
opcje terminala PC
T}
pkey_plab       	pfxl	xl	T{
zaprogramuj klawisz funkcyjny #1 na wpisywanie ³añcucha #2 i pokazywanie
³añcucha #3.
T}
req_mouse_pos   	reqmp	RQ	T{
za¿±daj pozycji myszy
T}
scancode_escape 	scesc	S7	T{
escape dla emulacji scancode
T}
set0_des_seq    	s0ds	s0	T{
przesuñ do zestawu kodów 0 (zestaw EUC 0, ASCII)
T}
set1_des_seq    	s1ds	s1	T{
przesuñ do zestawu kodów 1
T}
set2_des_seq    	s2ds	s2	T{
przesuñ do zestawu kodów 2
T}
set3_des_seq    	s3ds	s3	T{
przesuñ do zestawu kodów 3
T}
set_a_background	setab	AB	T{
ustaw kolor t³a przy u¿yciu sekwencji specjalnej ANSI
T}
set_a_foreground	setaf	AF	T{
ustaw kolor pierwszego planu przy u¿yciu sekwencji specjalnej ANSI
T}
set_color_band  	setcolor	Yz	T{
Change to ribbon color #1 (?)
T}
set_lr_margin   	smglr	ML	T{
ustaw lewy i prawy margines na #1, #2
T}
set_page_length 	slines	YZ	T{
ustaw rozmiar strony na #1 linii
T}
set_tb_margin   	smgtb	MT	T{
ustawia górny i dolny margines na #1, #2
T}
.TE
.ad

.in .8i
Standard XSI curses doda³ te oto. Pochodz± one z niektórych po-4.1 wersji
curses z Systemu V, np. Solaris 2.5 i IRIX 6.x.
Nazwy termcapu ncurses zosta³y dla nich wynalezione; wed³ug standardu XSI
nie maj± one nazw termcap. Je¶li twoje skompilowane wpisy terminfo ich
u¿ywaj±, mog± one nie byæ binarnie kompatybilne z wpisami System V po SVr4.1;
Strze¿ siê!

.na
.TS H
center expand;
c l l c
c l l c
lw25 lw6 lw2 lw20.
\fBZmienna	Nazwa-	Kod	Opis\fR
\fB³añcuchowa	w³a¶æ.	Tcap\fR
enter_horizontal_hl_mode	ehhlm	Xh	T{
wejd¼ w tryb poprzecznego pod¶wietlenia
T}
enter_left_hl_mode	elhlm	Xl	T{
wejd¼ w tryb lewego pod¶wietlenia
T}
enter_low_hl_mode	elohlm	Xo	T{
wejd¼ w tryb niskiego pod¶wietlenia
T}
enter_right_hl_mode	erhlm	Xr	T{
wejd¼ w tryb prawego pod¶wietlenia
T}
enter_top_hl_mode	ethlm	Xt	T{
wejd¼ w tryb górnego pod¶wietlenia
T}
enter_vertical_hl_mode	evhlm	Xv	T{
wejd¼ w tryb pod¶wietlenia pionowego
T}
set_a_attributes	sgr1	sA	T{
zdefiniuj drugi zestaw atrybutów wideo #1-#6
T}
set_pglen_inch  	slength	sL	T{
YI ustaw d³ugo¶æ strony na #1 setnej cala
T}
.TE
.ad
.\" $Id: terminfo.5,v 1.4 2002/05/19 21:05:13 ankry Exp $
.\" Beginning of terminfo.tail file
.ps +1
.PP
.SS Przyk³adowy wpis
.PP
Nastêpuj±cy opis, przeznaczony dla terminala ANSI jest reprezentatywn±
próbk± opisu wygl±du nowoczesnych terminali.
.PP
.nf
.in -2
.ta .3i
.ft CW
\s-2ansi|ansi/pc-term compatible with color,
        mc5i,
        colors#8, ncv#3, pairs#64,
        cub=\\E[%p1%dD, cud=\\E[%p1%dB, cuf=\\E[%p1%dC,
        cuu=\\E[%p1%dA, dch=\\E[%p1%dP, dl=\\E[%p1%dM,
        ech=\\E[%p1%dX, el1=\\E[1K, hpa=\\E[%p1%dG, ht=\\E[I,
        ich=\\E[%p1%d@, il=\\E[%p1%dL, indn=\\E[%p1%dS, .indn=\\E[%p1%dT,
        kbs=^H, kcbt=\\E[Z, kcub1=\\E[D, kcud1=\\E[B,
        kcuf1=\\E[C, kcuu1=\\E[A, kf1=\\E[M, kf10=\\E[V,
        kf11=\\E[W, kf12=\\E[X, kf2=\\E[N, kf3=\\E[O, kf4=\\E[P,
        kf5=\\E[Q, kf6=\\E[R, kf7=\\E[S, kf8=\\E[T, kf9=\\E[U,
        kich1=\\E[L, mc4=\\E[4i, mc5=\\E[5i, nel=\\r\\E[S,
        op=\\E[37;40m, rep=%p1%c\\E[%p2%{1}%-%db,
        rin=\\E[%p1%dT, s0ds=\\E(B, s1ds=\\E)B, s2ds=\\E*B,
        s3ds=\\E+B, setab=\\E[4%p1%dm, setaf=\\E[3%p1%dm,
        setb=\\E[4%?%p1%{1}%=%t4%e%p1%{3}%=%t6%e%p1%{4}%=%t1%e%p1%{6}%=%t3%e%p1%d%;m,
        setf=\\E[3%?%p1%{1}%=%t4%e%p1%{3}%=%t6%e%p1%{4}%=%t1%e%p1%{6}%=%t3%e%p1%d%;m,
        sgr=\\E[0;10%?%p1%t;7%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;%?%p6%t;1%;%?%p7%t;8%;%?%p8%t;11%;%?%p9%t;12%;m,
        sgr0=\\E[0;10m, tbc=\\E[2g, u6=\\E[%d;%dR, u7=\\E[6n,
        u8=\\E[?%[;0123456789]c, u9=\\E[c, vpa=\\E[%p1%dd,\s+2
.in +2
.fi
.ft R
.PP
Wpisy mog± siê ci±gn±æ na wiele linii dziêki poprzedzaniu kolejnych linii
bia³ymi spacjami (poza pierwsz± lini±). Komentarze mo¿na za³±czaæ w
poszczególnych liniach przy u¿yciu ``#''.
W³a¶ciwo¶ci w
.I terminfo
wystêpuj± jako trzy typy:
W³a¶ciwo¶ci logiczne, okreslaj±ce czy terminal ma jak±¶ w³a¶ciwo¶æ;
w³a¶ciwo¶ci numeryczne, okre¶laj±ce rozmiar terminala, opó¼nieñ; w³a¶ciwo¶ci
³añcuchowe, okre¶laj±ce sekwencje u¿ywane do dokonywania okre¶lonych
operacji terminalowych.
.PP
.SS Typy w³a¶ciwo¶ci
.PP
Wszystkie w³a¶ciwo¶ci maj± nazwy. Na przyk³ad fakt, ¿e terminale ANSI maj±
.I "automatyczne marginesy"
(tj. automatyczny return i lf po osi±gniêciu koñca linii) jest okre¶lany
w³a¶ciwo¶ci± \fBam\fR. Z tej przyczyny opis ansi zawiera \fBam\fR. 
W³a¶ciwo¶ci numeryczne maj± doklejony znak `#' i warto¶æ dodatni±. 
Tak wiêc \fBcols\fR, okre¶laj±ce liczbê kolumn terminala, w przypadku ansi
ma `80'.
Warto¶ci w³a¶ciwo¶ci numerycznych mo¿na podawaæ dziesiêtnie, ósemkowo lub
szesnastkowo, uzywaj±c konwencji z jêzyka C (np. 255, 0377, 0xff i 0xFF).
.PP
W³a¶ciwo¶ci napisowe, takie jak \fBel\fR (sekwencja czyszczenia do koñca linii)
s± podawane w kodzie dwuznakowym--najpierw jest `=', potem ³añcuch,
koñcz±cyc siê znakiem `,'.
.PP
Dla ³atwego kodowania znaków udostêpnione s± we w³a¶ciwo¶ciach o warto¶ciach
³añcuchowych sekwencje specjalne. \fB\eE\fR i \fB\ee\fR odnosz± siê do znaku
\s-1ESCAPE\s0, \fB^x\fR odnosi siê do control-x, a sekwencje
\fB\en \el \er \et \eb \ef \es\fR odpowiadaj±
nowej linii, line-feed, powrotowi karetki, tabulacji, kasownikowi
(backspace), form-feed,
i spacji.
Inne sekwencje specjalne to m.in. \fB\e^\fR dla \fB^\fR,
\fB\e\e\fR dla \fB\e\fR,
\fB\e\fR, dla przecinka,
\fB\e:\fR dla \fB:\fR,
i \fB\e0\fR for zera (null).
(\fB\e0\fR daje \e200, co nie koñczy ³añcucha, lecz zachowuje siê jak znak
null na wiêkszo¶ci terminali o ile podane jest CS7. Zobacz stty(1).)
Znaki mog± byæ te¿ podawane jako trzy cyfry ósemkowe po \fB\e\fR.
.PP
We w³a¶ciwo¶ci ³añcuchowej mo¿e wystêpowaæ opó¼nienie, wyra¿one w
milisekundach. Jest ono ujmowane w nawiasy $<..>, np. \fBel\fR=\eEK$<5>.
Znaki wype³nienia, zapewniaj±ce opó¼nienie produkuje
.IR tputs .
Opó¼nienie musi byæ liczb± o maksymalnie jednym miejscu precyzji
dziesiêtnej; mo¿e zawieraæ przyrostki `*', `/' lub obydwa. `*' znaczy, ¿e
wymagane wype³nienie jest proporcjonalne do liczby linii, których dotyczy
operacja, a podany rozmiar wymagany jest na ka¿d± "dotkniêt± jednostkê". (w
przypadku wstawiania znaku, wspó³czynnik jest wci±¿ liczb± dotkniêtych
.IR linii .)
Zazwyczaj wype³nianie jest zalecane je¶li urz±dzenie ma w³a¶ciwo¶æ \fBxon\fR;
jest ono [wtedy] u¿ywane do obliczania kosztów, lecz nie wywo³uje opó¼nieñ. 
Znak `/' wskazuje, ¿e wype³nianie jest obowi±zkowe i wymusza opó¼nienie danej
liczby milisekund, nawet na urz±dzeniach, w których obecne jest \fBxon\fR,
okre¶laj±ce sterowanie przep³ywu.
.PP
[Wype³nianie jest u¿ywane na starych, wolnych terminalach bez sterowania
przep³ywem. Istnieje dlatego, ¿e gdy nie ma sterowania, bufory wej¶ciowe
urz±dzenia mog± siê przepe³niæ i pewne znaki mog± siê zgubiæ. Wype³nienie
takiego niepewnego okresu nieznacz±cymi znakami wype³nienia zapewnia, ¿e
istotne informacje nie zostan± utracone--utracone zostan± jedynie ignorowane
znaki wype³nienia. (przyp. t³um.)]
.PP
Czasem pewne w³a¶ciwo¶ci musz± byæ wykomentowane. Aby to zrobiæ, wystarczy
przed nazw± umie¶ciæ kropkê. Na przyk³ad zrobiono tak w drugim
.B ind
z powy¿szego przyk³adu.
.br
.ne 5
.PP
.SS Pobieranie skompilowanych opisów
.PP
Je¶li ustawiona jest zmienna ¶rodowiskowa TERMINFO, to jest ona u¿ywana jako
¶cie¿ka do katalogu, zawieraj±cego skompilowany opis tego, nad czym
pracujesz. Przeszukiwany jest tylko ten katalog.
.PP
W przeciwnym przypadku, wersja \fBncurses\fR czytnika terminfo bêdzie szukaæ
skompilowanego opisu w katalogu \fB$HOME/.terminfo\fR.
Je¶li nic tam nie bêdzie, dalsze poszukiwania polec± wed³ug zmiennej
¶rodowiskowej TERMINFO_DIRS (zawieraj±cej rozdzielon± dwukropkami listê
katalogów) (pusty wpis jest rozumiany jako komenda szukania \fI\*d\fR).
Je¶li i tu nic nie zostanie znalezione, pobieranie koñczy siê
niepowodzeniem.
.PP
Je¶li nie ustawiono ani TERMINFO, ani TERMINFO_DIRS, szukanie odbêdzie siê w
systemowym katalogu terminfo, \fI\*d\fR.
.PP
(Pod curses z Systemu V nie s± obs³ugiwane pliki \fB$HOME/.terminfo\fR ani
zmienna TERMINFO_DIRS.)
.PP
.SS Przygotowywanie opisów
.PP
Wyja¶nimy teraz jak przygotowywaæ opisy terminali.
Najefektywniejszym sposobem jest wykorzystanie podobnego terminala z
.I terminfo
i budowanie opisu stopniowo, wykorzystuj±c czê¶ciowe opisy z u¿yciem
.I vi
lub innego zorientowanego ekranowo programu, sprawdzaj±c je w ten sposób.
Miej ¶wiadomo¶æ, ¿e nietypowy terminal mo¿e wykazywaæ ubytki w stosunku do
opisuj±cego go pliku 
.I terminfo
lub, ¿e kod testuj±cego programu jest nieprawid³owy.
.PP
Aby ustawiæ prawid³owo wype³nianie (padding) dla wstawiania linii (je¶li
producent terminala tego nie udokumentowa³), mo¿na wykonaæ test: edytuj 
du¿y plik przy 9600 bodów, nastêpnie skasuj ok. 16 linii ze ¶rodka ekranu,
potem naci¶nij kilka razy szybko `u'.
Je¶li terminal siê za¶mieci, wymagane jest wiêksze wype³nianie. Podobny test
mo¿na zrobiæ do wstawiania znaku.
.PP
.SS Podstawowe w³a¶ciwo¶ci
.PP
Liczba kolumn terminala jest okre¶lana w³a¶ciwo¶ci± numeryczn± \fBcols\fR.
Je¶li terminal jest \s-1CRT\s0, to liczba linii ekranu jest podawana we
w³a¶ciwo¶ci \fBlines\fR. Je¶li terminal zawija linie po doj¶ciu do prawego
marignesu, to powinien posiadaæ w³a¶ciwo¶æ \fBam\fR. Je¶li terminal mo¿e
czy¶ciæ swój ekran, pozostawiaj±c kursor w pozycji domowej, to powinno to
byæ okre¶lone przez w³a¶ciwo¶æ ³añcuchow± \fBclear\fR.
Je¶li terminal wykonuje nadstukiwanie (a nie czy¶ci pozycji nadstukiwanej),
to powinien posiadaæ w³a¶ciwo¶æ \fBos\fR. Je¶li terminal jest terminalem
drukuj±cym, bez jednostki soft copy, to powinien mieæ zarówno
.B hc
jak i
.BR os .
.RB ( os
dotyczy terminali z zakresem przechowywania, jak w serii \s-1TEKTRONIX\s+1 4010
ale tak¿e czy w terminalach hardcopy i APL.)
Je¶li istnieje kod, przenosz±cy kursor do lewego krañca bie¿±cego wiersza,
to powinien byæ on podany jako
.BR cr .
(Zwykle jest to powrót karetki, control M.)
Je¶li istnieje kod dzwonka (bell, beep, itp.), to powinien byæ on podany
jako
.BR bel .
.PP
Je¶li istnieje kod, przesuwaj±cy kursor o jedn± pozycjê w lewo (jak
backspace), to w³a¶ciwo¶æ ta powinna byæ podana jako
.BR cub1 .
Podobnie, kod przesuwaj±cy w prawo, górê i dó³ powinien byæ podany jako
.BR cuf1 ,
.BR cuu1 ,
i
.BR cud1 .
Te lokalne ruchy kursora nie powinny zmieniaæ tekstu, który mijaj±, np.
normalnie nie u¿ywa siê `\fBcuf1\fP=\ ', gdy¿ spacja skasowa³a by znak.
.PP
Wa¿nym spostrze¿eniem w tym momencie jest fakt, ¿e lokalne ruchy kursora,
zakodowane w
.I terminfo
nie s± zdefiniowane w lewych i górnych krañcach terminala \s-1CRT\s0.
Programy nie powinny wiêc u¿ywaæ backspace na lewym krañcu, chyba ¿e podane
jest
.BR bw .
Podobnie, nie powinny próbowaæ i¶æ w górê z pierwszej linii.
Aby przewin±æ tekst do góry, program powinien przej¶æ do dolnego, lewego
naro¿nika ekranu i wys³aæ ³añcuch
.B ind
(index).
.PP
Aby przewin±æ tekst w dó³, program idzie do lewego górnego naro¿nika i
wysy³a ³añcuch
.B ri
(reverse index).
£añcuchy
.B ind
i
.B ri
nie s± zdefiniowane w przypadku przebywania w nieodpowiednich miejscach
ekranu.
.PP
Wersjami parametryzowanymi sekwencji przewijaj±cych s±
.B indn
i
.BR rin ,
które maj± tak± sam± semantykê jak
.B ind
i
.BR ri ,
lecz dodatkowo pobieraj± parametr i przewijaj± tyle w³a¶nie linii.
S± one równie¿ niezdefiniowane w nieodpowiednich obszarach ekranu.
.PP
W³a¶ciwo¶æ \fBam\fR mówi czy kursor trzyma siê prawego krañca ekranu po
wys³aniu tekstu, lecz niekoniecznie tyczy siê
.B cuf1
z ostatniej kolumny.
Jedyny ruch lokalny, który jest zdefiniowany z lewego krañca przy podaniu
.B bw
to
.BR cub1 ,
który przejdzie do prawego krañca poprzedniego wiersza.
Je¶li
.B bw
nie jest podane, efekt jest niezdefiniowany. Jest to przydatne np. do rysowania
ramki wokó³ krañców ekranu. Je¶li terminal ma prze³±czan± w³a¶ciwo¶æ
automatycznych marginesów, to plik
.I terminfo
zwykle przyjmuje, ¿e jest ona w³±czona, tj. \fBam\fR. Je¶li terminal ma
polecenie, które przechodzi do pierwszej kolumny nastêpnej linii, to komenda
ta mo¿e byæ podana jako
.B nel
(nowa linia).
Nie ma znaczenia czy polecenie to czy¶ci resztê bie¿±cej linii, wiêc je¶li
terminal nie posiada
.B cr
i
.B lf
to mo¿e wci±¿ uda siê z³o¿yæ z czego¶ dzia³aj±cy
.BR nel .
.PP
W³a¶ciwo¶ci te wystarczaj± do opisania terminala hard-copy i
\*(lqglass-tty\*(rq. W konsekwencji, model teletype 33 jest opisany jako
.PP
.DT
.nf
.ft CW
.in -7
	\s-133\||\|tty33\||\|tty\||\|model 33 teletype,
	bel=^G, cols#72, cr=^M, cud1=^J, hc, ind=^J, os,\s+1
.in +7
.ft R
.PP
a Lear Siegler \s-1ADM\-3\s0 jako
.PP
.DT
.nf
.ft CW
.in -7
	\s-1adm3\||\|3\||\|lsi adm3,
	am, bel=^G, clear=^Z, cols#80, cr=^M, cub1=^H, cud1=^J,
	ind=^J, lines#24,\s+1
.in +7
.ft R
.fi
.PP
.SS £añcuchy parametryzowane
.PP
Adresowanie kursora i inne ³añcychy wymagaj±ce parametrów terminala s±
opisaywane przez w³a¶ciwo¶æ parametryzowanego ³añcucha, w której wystêpuj±
sekwencje specjalne typu
.IR printf (3S),
jak \fB%x\fR.
Na przyk³ad aby adresowaæ kursor, podana jest w³a¶ciwo¶æ
.BR cup ,
u¿ywaj±ca dwóch parametrów:
wiersza i kolumny adresowania. (wiersze i kolumny sa numerowane od zera i
odnosz± siê do fizycznego ekranu, widzianego przez u¿ytkownika, a nie do
niewidzialnego obszaru pamiêci.)
Je¶li terminal posiada zwi±zane z pamiêci± adresowanie kursora, to mo¿e to
byæ wskazywane przez
.BR mrcup .
.PP
Mechanizm parametrów u¿ywa stosu i specjalnych kodów \fB%\fP do jego
obs³ugi. Zazwyczaj sekwencja powoduje wepchniêcie jednego z parametrów na
stos, a nastêpnie jego wydrukowanie w pewnym formacie. Czêsto wymagane s±
bardziej z³o¿one operacje.
.PP
Kodowania \fB%\fR maj± nastêpuj±ce znaczenia:
.PP
.DT
.nf
.ta .5i 1.5i
	\s-1%%	daje `%'
	%\fI[[\fP:\fI]flagi][szeroko¶æ[.precyzja]][\fPdoxXs\fI]\fP
		podobnie jak w \fBprintf\fP, flagi to [-+#] i spacja
	%c	drukowanie pop() daje %c

	%p[1-9]	wepchnij \fIi\fP'ty parm
	%P[a-z]	ustaw zmienn± dynamiczn± [a-z] na pop()
	%g[a-z]	pobierz dynamiczn± zmienn± [a-z] i wepchnij j±
	%P[A-Z]	ustaw zmienn± statyczn± [a-z] na pop()
	%g[A-Z]	pobierz zmienn± statyczn± [a-z] i wepchnij j±
	%'\fIc\fP'	sta³a znakowa \fIc\fP
	%{\fInn\fP}	sta³a ca³kowita \fInn\fP
	%l	wepchnij strlen(pop)

	%+ %- %* %/ %m
		 arytmetyka (%m to mod): push(pop() op pop())
	%& %| %^	operacje bitowe: push(pop() op pop())
	%= %> %<	operacje logiczne: push(pop() op pop())
	%A, %O	operacje logiczne and i or (dla warunków)
	%! %~	jednoargumentowe operacje push(op pop())
	%i	dodaj 1 do pierwszych dwóch parm (terminale ANSI)

	%? expr %t czê¶æthen %e czê¶æelse %;
		if-then-else, %e czê¶æelse jest opcjonalna.
		Dopuszalne s± else-if a'la Algol 68:
		%? c\d1\u %t b\d1\u %e c\d2\u %t b\d2\u %e c\d3\u %t b\d3\u %e c\d4\u %t b\d4\u %e %;
\s+1		c\di\u s± warunkami, b\di\u s± cia³ami.
.fi
.PP
Operacje binarne s± w postaci postfiksowej, z operandami w typowej
kolejno¶ci. Znaczy to, ¿e aby uzyskaæ x-5, mo¿na u¿yæ "%gx%{5}%-". Zmienne %P
i %g s± sta³e podczas analizy ³añcucha specjalnego.
.PP
Rozwa¿ GP2645, w którym aby dostaæ siê do 3 wiersza i 12 kolumny nale¿a³o
wys³aæ \eE&a12c03Y, wype³nionego na 6 milisekund. Zauwa¿, ¿e kolejno¶æ
wierszy i kolumn jest tu w inwersji i ¿e s± one drukowane jako dwie cyfry.
W efekcie jego w³a¶ciwo¶æ \fBcup\fR to \*(lqcup=6\eE&%p2%2dc%p1%2dY\*(rq.
.PP
Microterm \s-1ACT-IV\s0 wymaga poprzedzenia bie¿±cego wiersza i kolumny
znakiem \fB^T\fR i zakodowania wiersza i kolumny binarnie,
\*(lqcup=^T%p1%c%p2%c\*(rq.
Terminale, u¿ywaj±ce \*(lq%c\*(rq musz± byæ w stanie cofn±æ (backskpace)
kursor (\fBcub1\fR) i przesuwaæ go o jedn± liniê w górê na ekranie
(\fBcuu1\fR).
Jest to konieczne, gdy¿ nie zawsze bezpiecznie jest transmitowaæ \fB\en\fR,
\fB^D\fR i \fB\er\fR, poniewa¿ system mo¿e je zmieniæ lub pomin±æ.
(funkcje biblioteczne, obs³uguj±ce terminfo ustawiaj± tryby tty tak, aby
tabulacje nigdy nie by³y rozwijane, wiêc \et mo¿e wysy³aæ bez obaw. Jest to
sprawa pierwszej wagi dla Ann Arbor 4080.)
.PP
Ostatnim przyk³adem jest \s-1LSI ADM\s0-3a, który u¿ywa offsetów wiersza i
kolumny ze spacj±, \*(lqcup=\eE=%p1%' '%+%c%p2%' '%+%c\*(rq.
Po wys³aniu `\eE=', pierwszy parametr jest wpychany na stos, wpychana jest
warto¶æ ASCII dla spacji (32), s± one nastêpnie dodawane (wpychanie na stos
ich sumy i zamiana dwóch poprzednich warto¶ci) i produkowane jako
znak.
Nastêpnie to samo jest wykonywane dla drugiego parametru.
Mo¿liwe s± równie¿ bardziej z³o¿one dzia³ania arytmetyczne na stosie.
.PP
.SS Ruchy kursora
.PP
Je¶li terminal posiada szybki sposób na zerowanie pozycji kursora (na lewy
górny naro¿nik ekranu), to mo¿e to byæ podane jako \fBhome\fR; podobnie,
szybkim sposobem dostania siê do dolnego lewego naro¿nika jest \fBll\fR;
mo¿e to wykonywaæ przej¶cie w górê z pomoc± \fBcuu1\fR z pozycji zerowej, lecz
program samodzielnie nie powinien tego robiæ (chyba ¿e \fBll\fR tak robi),
gdy¿ aplikacja nie mo¿e nic zak³adaæ o rezultacie przej¶cia w górê z pozycji
zerowej. Zauwa¿, ¿e zerowanie pozycji jest równowa¿ne adresowaniu na (0,0):
na lewy górny naro¿nik ekranu, a nie pamiêci.
(Z tej przyczyny sekwencja \eEH terminali HP nie mo¿e byæ u¿ywana jako
.BR home .)
.PP
Je¶li terminal posiada bezwzglêdne (absolute) adresowanie wierszy lub kolumn,
to mo¿e to byæ podane jako pojedyncze w³a¶ciwo¶ci parametryczne,
.B hpa
(bezwzglêdna pozycja pozioma)
i
.B vpa
(bezwzglêdna pozycja pionowa).
Czasami s± one krótsze ni¿ bardziej ogólne sekwencje dwuparametrowe (np. dla
hp2645) i mog± byæ u¿ywane chêtniej ni¿
.BR cup .
Je¶li istniej± sparametryzowane ruchy lokalne (np. przesuñ
.I n
spacji w prawo), to mog± byæ one podane jako
.BR cud ,
.BR cub ,
.BR cuf 
i
.BR cuu
z pojedynczym parametrem, okre¶laj±cym ilo¶æ spacji przesuniêcia.
Sekwencje te s± przydatne je¶li terminal nie ma
.BR cup ,
tak jak np. \s-1TEKTRONIX\s+1 4025.
.PP
Je¶li terminal podczas przcy z programem, u¿ywaj±cym w³a¶ciwo¶ci musi byæ w
specjalnym trybie dzia³ania, to kody wchodzenia i wychodzenia z tego trybu
mog± byæ podane jako \fBsmcup\fR i \fBrmcup\fR.
Przysz³o to m.in. z terminali takich jak Concept, który mia³ wiêcej ni¿
jedn± stronê pamiêci. Je¶li terminal ma tylko zwi±zane z pamiêci±
adresowanie kursora (a nie zwi±zane z ekranem) to jednoekranowe okno musi
byæ poprawione w celu wymuszenia poprawnego dzia³ania adresowania kursora.
Jest to u¿ywane równie¿ dla \s-1TEKTRONIX\s+1 4025, gdzie
.B smcup
ustawia znak komendy na ten, u¿ywany przez terminfo. Je¶li sekwencja
\fBsmcup\fP nie odtworzy ekranu po wys³aniu sekwencji \fBrmcup\fP (do stanu
sprzed wys³ania \fBrmcup\fP), podaj \fBnrrmc\fP.
.PP
.SS Czyszczenie obszarów
.PP
Je¶li terminal mo¿e czy¶ciæ ekran od bie¿±cej pozycji do koñca linii,
pozostawiaj±c kursor na swoim miejscu, to powinno to byæ okre¶lone jako
\fBel\fR. Je¶li terminal mo¿e czy¶ciæ ekran od koñca linii, do bie¿±cej
pozycji, pozostawiaj±c kursor na miejscu, to powinno to byæ okre¶lone jako
\fBel1\fP. Je¶li terminal mo¿e czy¶ciæ ekran od bie¿±cej pozycji do koñca
wy¶wietlacza, to powinno to byæ okre¶lane jako \fBed\fR. \fBEd\fR jest
zdefiniowane jedynie dla pierwszej kolumny linii. (Mo¿e wiêc byæ symulowane
przez ¿±danie kasowania wielkiej liczby linii je¶li prawidziwe
.B ed
nie jest dostêpne.)
.PP
.SS Wstawianie/kasowanie linii i ruchy pionowe
.PP
Je¶li terminal mo¿e otworzyæ now± pust± liniê przed lini±, w której znajduje
siê kursor, to powinno to byæ okreslone jako \fBil1\fR; jest to obs³ugiwane
tylko z pierwszej pozycji w linii. Kursor musi potem pojawiæ siê na nowej,
pustej linii. Je¶li terminal mo¿e kasowaæ liniê, na której znajduje siê
kursor, to powinno to byæ okre¶lone przez \fBdl1\fR; mo¿e to byæ obs³ugiwane
tylko z pierwszej pozycji na kasowanej linii.
Wersje
.B il1
i
.BR dl1 ,
które mog± pobieraæ parametr, okre¶laj±cy ile linii skasowaæ lub wstawiæ,
mog± byæ podawane jako
.B il
i
.BR dl .
.PP
Je¶li terminal ma ustawialny region przewijania (jak vt100), to komenda
ustawiaj±ca to mo¿e byæ opisana z pomoc± w³a¶ciwo¶ci
.BR csr ,
pobieraj±cej dwa parametry:
górn± i doln± liniê regionu przewijania.
Pozycja kursora jest po u¿yciu tej komendy niestety niezdefiniowana.
.PP
Efekt wstawienia lub skasowania linii mo¿na osi±gn±æ z u¿yciem
.B csr
na odpowiednio wybranym regionie; komendy
.B sc
i
.B rc
(zachowania i odtworzenia kursora) mog± byæ wówczas przydatne do zapewnienia,
¿e zestawiony ³añcuch nie przesunie kursora. (Zauwa¿, ¿e biblioteka
\fBncurses\fR(3X) dokonuje takiej syntezy automatycznie, wiêc nie musisz
komponowaæ ³añcuchów wstawienia/skasowania z u¿yciem \fBcsr\fR).
.PP
Innym sposobem tworzenia wstawiania i kasowania mo¿e byæ u¿ycie kombinacji
w³a¶ciwo¶ci index i memory-lock, obecnych na niektórych terminalach (takich,
jak HP-700/90, które jednak posiadaj± równie¿ insert/delete).
.PP
Wstawianie linii na górze lub u do³u ekranu mo¿e byæ dokonywane równie¿ z
u¿yciem
.B ri
lub
.BR ind ,
co czêsto mo¿e siê okazaæ szybsze nawet od istniej±cych w³a¶ciwo¶ci.
.PP
Warto¶æ logiczna \fBnon_dest_scroll_region\fR powinna byæ ustawiona je¶li
ka¿de okno przewijaj±ce jest efektywnie widokiem na obraz o rozmiarze ekranu.
Aby przetestowaæ istnienie tej w³a¶ciwo¶ci, utwórz w ¶rodku ekranu region
przewijania, napisz co¶ na dolnej linii, przesuñ kursor na pocz±tek regionu
i wykonaj \fBri\fR, a nastêpnie \fBdl1\fR lub \fBind\fR. Je¶li dane
przewijane z do³u regionu \fBri\fR pojawi± siê ponownie, to przewijanie nie
jest destruktywne. Curses z Systemu V i XSI oczekuj±, ¿e \fBind\fR,
\fBri\fR, \fBindn\fR i \fBrin\fR symuluj± przewijanie destruktywne; ich
dokumentacja ostrzega by nie definiowaæ \fBcsr\fR, chyba ¿e jest to prawda.
Ta implementacja \fBcurses\fR jest bardziej liberalna i dokona jawnego
kasowania po przewiniêciu, je¶li zdefiniowane jest \fBndstr\fR.
.PP
Je¶li terminal potrafi definiowaæ okno jako czê¶æ pamiêci, która
wspó³pracuje ze wszystkimi komendami, to powinno byæ to okre¶lone przez
parametryzowany ³añcuch
.BR wind .
Cztery parametry to kolejno: pocz±tkowe i koñcowe linie pamiêci, pocz±tkowe
oraz koñcz±ce kolumny pamiêci.
.PP
Je¶li terminal potrafi zachowywaæ pamiêæ wy¶wietlacza powy¿ej, to podana
powinna byæ w³a¶ciwo¶æ \fBda\fR; je¶li zachowana mo¿e byæ pamiêæ
wy¶wietlacza poni¿ej, to podana powinna byæ w³a¶ciwo¶æ \fBdb\fR.
Wskazuj± one, ¿e kasowanie linii lub przewijanie mo¿e spowodowaæ pojawienie
siê niezerowych linii z do³u i ¿e przewijanie w ty³ z pomoc± \fBri\fR mo¿e
przynie¶æ niezerowe linie z góry.
.PP
.SS Wstawianie/kasowanie znaku
.PP
Istniej± dwa podstawowe rodzaje inteligentnych terminali, je¶li braæ pod
uwagê obs³ugê wstawiania/kasowania znaków opisywan± w
.I terminfo.
Najpopularniejsze operacje wstawiania/kasowania znaków tycz± tylko znaków w
bie¿±cej linii i sztywno przesuwaj± znaki w kierunku jej koñca. Inne
terminale, takie jak Concept 100 i Perkin Elmer Owl rozró¿niaj± spacje
wstukane i niewstukane, przesuwaj±c przy wstawianiu/kasowaniu a¿ do
najbli¿szej niewstukanej spacji, która jest nastêpnie albo kasowana, albo
rozwijana na dwie niewstukane spacje. Rodzaj terminala mo¿na okre¶liæ przez
wyczyszczenie ekranu i nastêpnie wpisanie tekstu, rozdzielonego ruchami
kursora. Wstukaj przy u¿yciu ruchów kursora (nie spacji)
\*(lqabc\ \ \ \ def\*(rq. Nastêpnie ustaw kursor przed \*(lqabc\*(rq 
i w³±cz terminal w tryb wstawiania. Je¶li wpisywanie znaków powoduje, ¿e
reszta linii sztywno przesuwa siê w prawo, to terminal nie rozró¿nia spacji
wstukanych od niewstukancyh. Je¶li \*(lqabc\*(rq przesunie siê do \*(lqdef\*(rq 
które nastêpnie zacznie siê posuwaæ wraz z nim a¿ do koñca linii, to masz
drugi rodzaj terminala. W tym wypadku powiniene¶ podaæ w³a¶ciwo¶æ \fBin\fR,
która oznacza \*(lqinsert null\*(rq.
Chocia¿ s± to logicznie dwa oddzielne atrybuty (jednoliniowy vs.
wieloliniowy tryb wstawiania i specjalne traktowanie niewstukanych spacji),
nie znale¼li¶my terminala, którego tryb wstawiania nie móg³by zostaæ opisany
pojedynczym atrybutem.
.PP
Terminfo mo¿e opisywaæ zarówno terminale posiadaj±ce tryb wstawiania, jak i
terminale, które wysy³aj± prost± sekwencjê do otwierania pustej pozycji w
bie¿±cej linii. Jako \fBsmir\fR podaje siê sekwencjê wchodzenia w tryb
wstawiania. Jako \fBrmir\fR podaje siê sekwencje do wychodzenia z trybu
wstawiania. Jako \fBich1\fR podaje siê sekwencjê, któr± nale¿y wys³aæ tu¿
przed wys³aniem wstawianego znaku. Wiêkszo¶æ terminali z prawdziwym trybem
wstawiania nie daje \fBich1\fR; terminale, które wysy³aj± sekwencje do
otwierania pozycji ekranu podaj± j±.
.PP
Je¶li twój terminal posiada obydwie te w³a¶ciwo¶ci, to zwykle wybierany jest
tryb wstawiania. Technicznie, nie powiniene¶ podawaæ obydwu, chyba ¿e
terminal wymaga ich ³±cznego dzia³ania. Niektóre nie-curses-owe aplikacje
mog± siê pogubiæ je¶li podane s± obydwie; symptomem s± podwojone znaki we
wstawianiu u¿ywaj±cym od¶wie¿ania. Wymaganie to jest obecnie rzadkie;
wiêkszo¶æ sekwencji \fBich\fR nie wymaga poprzedzaj±cego smir, a wiêkszo¶æ
trybów wstawiania smir nie wymaga \fBich1\fR przed ka¿dym znakiem. Dlatego
\fBcurses\fR zak³ada, ¿e tak w³a¶nie jest i u¿ywa albo \fBrmir\fR/\fBsmir\fR
albo \fBich\fR/\fBich1\fR (ale nie obydwu). Je¶li musisz napisaæ opis dla
ncurses, dla terminala, wymagaj±cego obydwu tych dzia³añ, za³±cz sekwencje
\fBrmir\fR/\fBsmir\fR w \fBich1\fR.
.PP
Je¶li po wstawieniu wymagane jest dope³nienie, podaj je jako liczbê
milisekund w \fBip\fR (opcja ³añcuchowa). Wszelkie inne sekwencje, które
wymagaj± wys³ania po wstawieniu pojedynczego znaku równie¿ mog± byæ podane w
\fBip\fR. Je¶li twój terminal wymaga zarówno umieszczenia w `trybie
wstawiania' jak i specjalnego kodu do poprzedzania ka¿dego wstawianego
znaku, to podane mog± byæ
.BR smir / rmir
oraz
.B ich1
i obydwie sekwencje zostan± u¿yte.
W³a¶ciwo¶æ
.B ich
z jednym parametrem powtarza rezultat
.B ich1
.IR n -krotnie.
.PP
Je¶li miêdzy znakami wpisywanymi nie w trybie wstawiania wymagane jest
wype³nianie, podaj je jako liczbê milisekund wype³niania w \fBrmp\fP(???).
.\" If padding is necessary between characters typed while not
.\" in insert mode, give this as a number of milliseconds padding in \fBrmp\fP.
.PP
Czasami konieczne jest przesuniêcie siê w trybie wstawiania, aby usun±æ
znaki z tej samej linii (np. je¶li za pozycj± wstawiania znajduje siê
tabulacja). Je¶li twój terminal zezwala na ruchy podczas przebywania w
trybie wstawiania, to powinien mieæ w³a¶ciwo¶æ \fBmir\fR, przyspieszaj±c± w
tym przypadku wstawianie. Pominiêcie \fBmir\fR ma wp³yw jedynie na szybko¶æ.
Niektóre terminale (np. Datamedia) nie mog± mieæ \fBmir\fR, gdy¿ ich tryb
wstawiania dzia³a tak, ¿e na to nie pozwala.
.PP
Do kasowania pojedynczego znaku mo¿na podaæ
.BR dch1 ,
albo
.B dch
do kasowania z parametrem
.IR n ,
który mówi, by skasowaæ
.IR n " znaków,"
lub sekwencje wchodzenia (\fBsmdc\fR) i wychodzenia (\fBrmdc\fR) z trybu
kasowania (dowolny tryb, którego terminal wymaga dla zadzia³ania
.BR dch1 ).
.PP
Komenda do kasowania
.I n
znaków (równowa¿na wypuszczeniu
.I n
spacji bez przesuwania kursora)
mo¿e byæ okre¶lona jako
.B ech
z jednym parametrem.
.PP
.SS "Pod¶wietlanie, podkre¶lanie i wizualne dzwonki"
.PP
Je¶li twój terminal ma jeden lub wiêcej rodzajów atrybutów wy¶wietlania, to
mog± one byæ reprezentowane na wiele ró¿nych sposobów. Jedn± z postaci
wy¶wietlacza powiniene¶ okre¶liæ jako
\f2tryb wyró¿niony\fR (standout), reprezentuj±cy dobry, kontrastowy, ³atwy
do odczytu format pod¶wietlania komunikatów o b³êdach i innych rzeczy
wymagaj±cych zwrócenia uwagi. (Je¶li masz wybór, to dobrym pomys³em jest
inwersja kolorów plus ¶rednie rozja¶nienie, lub te¿ sama inwersja.)
Sekwencje, przeznaczone do wchodzenia i wychodzenia z trybu wyró¿nionego s±
podawane jako \fBsmso\fR i \fBrmso\fR.
Je¶li kod zmiany na tryb wyró¿niony pozostawia na ekranie jedn± lub dwie
spacje (jak w TVI 912 i Teleray 1061), to nale¿y podaæ \fBxmc\fR,
okre¶laj±ce ile spacji jest pozostawianych.
.PP
Kody rozpoczynania podkre¶lenia i jego koñczenia mog± byæ podawane jako
\fBsmul\fR i \fBrmul\fR. Je¶li terminal posiada kod podkre¶lania bie¿±cego
znaku i przesuwania kursora o jedn± pozycjê w prawo (jak w Microterm Mime),
to mo¿e to byæ podane jako \fBuc\fR.
.PP
Inne w³a¶ciwo¶ci wchodzenia w ró¿ne tryby pod¶wietlenia to
.B blink
(migotanie)
.B bold
(wyt³uszczenie, lub rozja¶nienie)
.B dim
(¶rednia-jasno¶æ)
.B invis
(tekst niewidzialny, lub `spacjowanie')
.B prot
(chronione)
.B rev
(inwersja kolorów)
.B sgr0
(wy³±cz
.I wszystkie
tryby atrybutów)
.B smacs
(wejd¼ w tryb alternatywnego zestawu znaków)
i
.B rmacs
(wyjd¼ z trybu alternatywnego zestawu znaków).
W³±czenie dowolnego z tych trybów w pojedynkê mo¿e lub mo¿e nie wy³±czyæ
innych trybów.
.PP
Je¶li istnieje sekwencja do ustawiania kombinacji trybów, to powinna byæ
podana jako
.B sgr
(ustaw atrybuty),
i pobieraæ 9 parametrów.
Ka¿dy z parametrów mo¿e byæ zerowy lub niezerowy, wskazuj±c tak czy
odpowieni atrybut jest w³±czony czy nie. 9 parametrów to kolejno:
wyró¿nienie, podkre¶lenie, inwersja, migotanie, ¶rednia-jasno¶æ,
wyt³uszczenie, spacjowanie, chornienie, alternatywny zestaw znaków.
Nie wszystkie tryby musz± byæ wspierane przez
.BR sgr ,
powinny byæ natomiast te, dla których istniej± oddzielne komendy atrybutów.
.PP
Na przyk³ad DEC vt220 wspiera wiêkszo¶æ trybów:
.PP
.TS
center;
l c c
l c c
lw28 lw6 lw2 lw20.
\fBparametr tparm	atrybut	sekwencja specjalna\fP

brak	brak	\\E[0m
p1	wyró¿niony	\\E[0;1;7m
p2	podkre¶lony	\\E[0;4m
p3	inwersja	\\E[0;7m
p4	migotanie	\\E[0;5m
p5	¶rednia-jasno¶æ	niedostêpne
p6	wyt³uszczenie	\\E[0;1m
p7	niewidzialno¶æ	\\E[0;8m
p8	chroñ	nieu¿ywane
p9	altznaki	^O (off) ^N (on)
.TE
.PP
Ka¿d± sekwencjê specjaln± rozpoczynamy od wy³±czenia wszelkich istniej±cych
trybów, gdy¿ nie ma prostego sposobu na okre¶lenie czy s± aktywne. Tryb
wyró¿nienia jest zestawiany jako kombinacja inwersji i wyt³uszczenia.
Terminal vt220 ma tryb ochronny, lecz nie jest on wykorzystywany w sgr, gdy¿
chroni równie¿ znaki ekranu przed kasowaniami stacji.
Tryb alternatywnego zestawu znaków jest te¿ inny; ró¿ni siê tym, ¿e jest
albo ^O, albo ^N, zale¿nie czy jest wy³±czony czy w³±czony.
Je¶li wszystkie tryby s± w³±czone, to wynikow± sekwencj± jest \\E[0;1;4;5;7;8m^N.
.PP
Niektóre sekwencje s± wspólne dla ró¿nych trybów. Na przyk³ad ;7 jest
produkowane dla prawdziwych p1 lub p3, tj. je¶li w³±czony jest tryb standout
lub inwersji.
.PP
Spisanie powy¿szych sekwencji wraz z ich zale¿no¶ciami daje
.PP
.TS
center;
l c c
l c c
lw28 lw6 lw2 lw20.
\fBsekwencja	kiedy wypu¶ciæ	translacja terminfo\fP

\\E[0	zawsze	\\E[0
;1	gdy p1 lub p6	%?%p1%p6%|%t;1%;
;4	gdy p2	%?%p2%|%t;4%;
;5	gdy p4	%?%p4%|%t;5%;
;7	gdy p1 lub p3	%?%p1%p3%|%t;7%;
;8	gdy p7	%?%p7%|%t;8%;
m	zawsze	m
^N lub ^O	gdy p9 ^N, inaczej ^O	%?%p9%t^N%e^O%;
.TE
.PP
Wstawienie tego wszystkiego do sekwencji sgr daje:
.PP
.nf
    sgr=\\E[0%?%p1%p6%|%t;1%;%?%p2%t;4%;%?%p1%p3%|%t;7%;
        %?%p4%t;5%;%?%p7%t;8%;m%?%p9%t\\016%e\\017%;,
.fi
.PP
Pamiêtaj, ¿e je¶li podajesz sgr, to musisz te¿ podaæ sgr0.
.PP
Terminale z ``magic cookie'' (magiczne ciasteczko)
.RB ( xmc )
wystawiaj± specjalne ``ciasteczka'' gdy odbieraj± sekwencje ustawiania
trybu, które w zasadzie wp³ywaj± na algorytm wy¶wietlania, a nie na
dodatkowe bity dla ka¿dego znaku.
Niektóre terminale, jak HP 2621 automatycznie wychodz± z trybu wyró¿nionego
gdy kursor przechodzi do nowej linii, lub gdy jest przeadresowany.
Programy u¿ywaj±ce trybu wyró¿nionego powinny z niego wychodziæ przed
przesuniêciem kursora lub wys³aniem znaku nowej linii. Zwolnione mog± byæ z
tego jedynie przy obecno¶ci w³a¶ciwo¶ci
.BR msgr ,
zapewniaj±cej, ¿e przemieszczanie siê w trybie wyró¿nionym jest bezpieczne.
.PP
Je¶li terminal posiada mechanizm zapalania ekranu dla sygnalizacji b³êdu
(zamiennik dzwonka), to mo¿e to byæ podane jako \fBflash\fR. Nie mo¿e to
przemieszczaæ kursora.
.PP
Je¶li kursor mo¿e byæ bardziej widoczny ni¿ zwykle, to podaj t± sekwencjê jako
.BR cvvis .
Je¶li istnieje sposób na uniewidzialnienie kursora, to podaj to jako
w³a¶ciwo¶æ
.BR civis .
W³a¶ciwo¶æ
.BR cnorm
powinna dawaæ mo¿liwo¶æ powrotu do normalnego kursora.
.PP
Je¶li twój terminal potrafi poprawnie generowaæ podkre¶lone znaki (bez
specjalnych kodów), to je¶li [nawet] nie wykonuje nadstukiwania, powiniene¶
na³o¿yæ na niego w³a¶ciwo¶æ \fBul\fR.
Je¶li nadstukiwanie pozostawia widzialnym znak `pod spodem', to nale¿y podaæ
w³a¶ciwo¶æ \fBos\fP. Je¶li nadstukiwania s± kasowalne spacj±, to powinno to
byæ wskazane w³a¶ciwo¶ci± \fBeo\fR.
.PP
.SS Keypad i klawisze funkcyjne
.PP
Je¶li terminal posiada keypad, który przesy³a kody przy naciskaniu klawiszy,
to mo¿na podaæ te informacje. Zauwa¿, ¿e nie mo¿na obs³ugiwaæ terminali
gdzie keypad dzia³a tylko lokalnie (tyczy siê to np. czê¶ci klawiszy HP
2621).
Je¶li keypad mo¿na ustawiæ na przesy³anie, lub nieprzesy³anie, to nale¿y
podaæ te kody jako \fBsmkx\fR i \fBrmkx\fR.
W przeciwnym wypadku zak³ada siê, ¿e keypad zawsze przesy³a kody. Kody
przesy³ane przez strza³ki w lewo, prawo, górê, dó³ oraz klawisz home mog±
byæ podawane jako
\fBkcub1, kcuf1, kcuu1, kcud1, \fRi\fB khome\fR.
Je¶li dostêpne s± klawisze funkcyjne, takie jak f0, f1, ..., f10, to ich
kody mog± byæ podane jako \fBkf0, kf1, ..., kf10\fR.
Je¶li klawisze te maj± inne etykiety ni¿ domy¶lne f0 do f10, to mo¿na je
podaæ jako \fBlf0, lf1, ...,fl10\fR.
Mo¿na równie¿ podaæ kody wysy³ane przez inne klawisze specjalne:
.B kll
(home down),
.B kbs
(backspace),
.B ktbc
(czy¶æ wszystkie tabulacje),
.B kctab
(czy¶æ tabulator w tej kolumnie),
.B kclr
(klawisz czyszczenia ekranu klub wymazywania),
.B kdch1
(klawisz kasowania (delete)),
.B kdl1
(kasowanie linii),
.B krmir
(wyj¶cie z trybu wstawiania),
.B kel
(czyszczenie do koñca linii),
.B ked
(czyszczenie do koñca ekranu),
.B kich1
(wstaw znak, lub wejd¼ w tryb wstawiania),
.B kil1
(wstaw liniê),
.B knp
(nastêpna strona (next page)),
.B kpp
(poprzednia strona (previous page)),
.B kind
(przewijaj w przód),
.B kri
(przewijaj w ty³),
.B khts
(ustaw w tej kolumnie tabulator).
Dodatkowo, je¶li keypad posiada tablicê 3x3 klawiszy, zawieraj±c± 4 klawisze
strza³ek, to pozosta³e piêæ klawiszy mo¿na okre¶liæ jako
.BR ka1 ,
.BR ka3 ,
.BR kb2 ,
.BR kc1 
oraz
.BR kc3 .
Klawisze te s± przydatne gdy potrzebne s± efekty kierunkowego padu 3x3.
.PP
£añcuchy programowania klawiszy funkcyjnych mog± byæ podawane jako
.BR pfkey ,
.BR pfloc
oraz
.BR pfx .
£añcuch do programowania etykiet ekranowych powinien byæ podawany jako
\fBpln\fP. Ka¿dy z tych ³añcuchów pobiera dwa parametry: numer kalwisza
funcyjnego do programowania (0 do 10) oraz ³añcuch, na który go
zaprogramowaæ. Numery klawiszy funkcyjnych przekraczaj±ce ten zakres mog±
programowaæ niezdefiniowane klawisze, w sposób zale¿ny od terminala.
Ró¿nica miêdzy w³a¶ciwo¶ciami polega na tym, ¿e
.B pfkey
powoduje i¿ naci¶niêcie klawisza jest równowa¿ne wklepaniu przez u¿ytkownika
danego ³añcucha;
.B pfloc
powoduje, ¿e ³añcuch jest wykonywany przez terminal lokalnie;
.B pfx
powoduje, ¿e ³añcuch jest przesy³any do komputera.
.PP
W³a¶ciwo¶ci \fBnlab\fP, \fBlw\fP i \fBlh\fP definiuj± liczbê programowalnych
etykiet ekranowych wraz z ich szeroko¶ci± i wysoko¶ci±. Je¶li istniej±
komendy do wy³±czania etykiet, to powinny byæ podane w \fBsmln\fP i
\fBrmln\fP.
\fBsmln\fP jest zazwyczaj wysy³ane po jednej, lub wiêkszej ilo¶ci sekwencji
pln, aby upewniæ siê, ¿e zmiana siê uwidoczni.
.PP
.SS Tabulacje i inicjalizacja
.PP
Je¶li terminal posiada sprzêtowe tabulacje, to komenda przej¶cia do
nastêpnego tabulatora mo¿e byæ podana jako
.B ht
(zwykle control I).
Komenda ``lewej-tabulacji'', przenosz±ca w lewo do poprzedzaj±cego
tabulatora mo¿e byæ podana jako
.BR cbt .
Konwencja mówi, ¿e je¶li tryby teletype wskazuj±, ¿e tabulacje s± rozwijane
przez komputer, a nie s± przesy³ane do terminala, to  programy nie powinny
u¿ywaæ
.B ht
czy
.B cbt
nawet je¶li s± one obecne, gdy¿ u¿ytkownik mo¿e nie mieæ prawid³owo
ustawionych tabulatorów.
Je¶li terminal posiada sprzêtowe tabulatory, które sa pocz±tkowo ustawiane
co
.I n
spacji, to powinien byæ podany parametr numeryczny
.BR it ,
pokazuj±cy odstêpy miêdzy tabulatorami.
Zazwyczaj jest to u¿ywane przez komendê
.IR tset
do okre¶lania czy ustawiaæ tryb dla sprzêtowego rozwijania tabulacji i czy
ustawiaæ tabulatory.
Je¶li terminal posiada tabulatory, które mo¿na zachowaæ w nieulotnej
pamiêci, to opis terminfo mo¿e zak³adaæ, ¿e s± one poprawnie ustawione.
.PP
Inne w³a¶ciwo¶ci zawieraj± ³añcuchy
.BR is1 ,
.BR is2
oraz
.BR is3 ,
s³u¿±ce do inicjalizacji terminala,
.BR iprog ,
czyli ¶cie¿kê do programu, u¿ywanego do inicjalizacji terminala oraz
\fBif\fR, czyli nazwê pliku, zawieraj±cego d³ugie ³añcuchy inicjalizacyjne.
£añcuchy te  powinny ustawiæ terminal na tryby wspó³pracuj±ce z pozosta³ym
opisem terminfo.
S± one zwykle przesy³ane do terminala poprzez opcjê
.I init
programu
.IR tput 
przy ka¿dym logowaniu u¿ytkownika.
S± one drukowane w nastêpuj±cej kolejno¶ci:
uruchom program
.BR iprog ;
wy¶lij
.BR is1 ;
.BR is2 ;
ustaw marginesy przy u¿yciu
.BR mgc ,
.BR smgl i
.BR smgr ;
ustaw tabulatory przy u¿yciu
.B tbc
i
.BR hts ;
wydrukuj plik
.BR if ;
i w koñcu wy¶lij
.BR is3 .
.PP
Wiêkszo¶æ inicjalizacji jest wykonywana w
.BR is2 .
Tryby specjalne terminala mo¿na ustawiaæ bez duplikowania ³añcuchów,
wstawiaj±c wspólne sekwencje do
.BR is2 ,
a specjalne elementy do
.B is1
oraz
.BR is3 .
Para sekwencji, która dokonuje twardego resetu z kompletnie nieznanego stanu
mo¿e byæ podobnie podawana jako
.BR rs1 ,
.BR rs2 ,
.BR rf
i
.BR rs3 ,
analogicznie do
.B is2
oraz
.BR if .
£añcuchy te s± wysy³ane przez program
.IR reset ,
s³u¿±cy do naprawiania terminala gdy ten wejdzie w dziwny stan. Komendy
zazwyczaj s± umieszczane w
.BR rs1 ,
.BR rs2
.B rs3
i
.B rf
jedynie je¶li daj± denerwuj±ce efekty na ekranie i nie s± konieczne podczas
logowania sie. Na przyk³ad komenda ustawiania vt100 na 80 kolumn normalnie
jest czê¶ci±
.BR is2 ,
lecz powoduje denerwuj±ce zak³ócenie ekranu i zwykle nie jest wymagana, gdy¿
terminal normalnie ju¿ jest w trybie 80-kolumnowym.
.PP
Je¶li istniej± komendy do ustawiania i czyszczenia tabulatorów, to mog± byæ
one podawane jako
.B tbc
(czy¶æ wszystkie tabulatory)
i
.B hts
(ustaw tabulator w bie¿±cej kolumnie w ka¿dym wierszu).
Je¶li do ustawienia tabulatorów wymagana jest bardziej skomplikowana
sekwencja, to mo¿e byæ ona umieszczona w
.B is2
lub
.BR if .
.SS Opó¼nienia i wype³nianie
.PP
Wiele starszych i wolniejszych terminali nie obs³uguje ani XON/XOFF ani
potwierdzania DTR. Wliczaæ w to mo¿na terminale hardcopy i pewne archaiczne
CRT (np, DEC VT100). Wymagaj± one wype³niania znaków po pewnych ruchach
kursora i zmianach ekranu.
.PP
Je¶li terminal u¿ywa potwierdzania xon/xoff dla sterowania przep³ywu (to
znaczy automatycznie wysy³a ^S do hosta gdy bufory wej¶ciowe zbli¿aj± siê do
przepe³nienia), ustaw
.BR xon .
W³a¶ciwo¶æ ta powstrzymuje emisjê wype³niania. Mo¿esz te¿ ustawiæ j± dla
mapowanych w pamiêæ urz±dzeñ konsolowych, które efektywnie nie maj±
ograniczeñ szybko¶ci. Informacje wype³niaj±ce powinny wci±¿ byæ do³±czane,
aby procedury mog³y lepiej decydowaæ o wzglêdnych kosztach, lecz rzeczywiste
znaki wype³nienia nie bêd± wysy³ane.
.PP
Je¶li podane jest \fBpb\fR (szybko¶æ wype³niania), to wype³nianie nie jest
u¿ywane przy szybko¶ciach ni¿szych ni¿ \fBpb\fR. Je¶li wpis nie zawiera
szybko¶ci, to emisja wype³niania w pe³ni zale¿y od \fBxon\fR.
.PP
Je¶li terminal wymaga innych ni¿ zero znaków wype³niania, to powinno to byæ
podawane jako \fBpad\fR.
Z ³añcucha 
.B pad
u¿ywany jest jedynie pierwszy znak.
.PP
.SS Linie statusu
Niektóre terminale posiadaj± dodatkowe `linie statusu', które nie s±
normalnie u¿ywane przez oprogramowanie (a wiêc nie licz± siê jako w³a¶ciwo¶æ
\fBlines\fR terminala).
.PP
Najprostszym przypadkiem jest linia statusu, któr± mo¿na adresowaæ kursorem,
lecz nie jest czê¶ci± podstawowego regionu przewijania ekranu; tak± liniê
statusu posiada Heathkit H19 oraz 24 liniowe VT100 z 23-liniowym regionem
przewijania ustawianym na starcie. Sytuacja ta jest wskazywana przez
w³a¶ciwo¶æ \fBhs\fR.
.PP
Niektóre terminale z liniami statusu wymagaj± specjalnych sekwencji aby
dostaæ siê do tej linii. Mog± one byæ wyra¿ane jako ³añcuchy z pojedynczymi
parametrami \fBtsl\fR, które pobieraj± pozycjê kursora wzglêdem zerowej
kolumny linii statusu. W³a¶ciwo¶æ \fBfsl\fR musi powracaæ do pozycji ekranu
g³ównego, gdzie wywo³ano ostatnie \fBtsl\fR. Mo¿liwe, ¿e konieczne bêdzie
osadzenie warto¶ci ³añcuchowych \fBsc\fR (zachowanie kursora) i \fBrc\fR
(odtworzenie kursora) w \fBtsl\fR i \fBfsl\fR.
.PP
Linia statusu jest zazwyczaj tej samej szeroko¶ci co szeroko¶æ terminala.
Gdy nie jest to prawd±, nale¿y podaæ w³a¶ciwo¶æ numeryczn± \fBwsl\fR.
.PP
Komend kasowania linii statusu mo¿e byæ podawana jako \fBdsl\fR.
.PP
Warto¶æ logiczna \fBeslok\fR okre¶la, ¿e sekwencje specjalne, tabulacje itp.
dzia³aj± w linii statusu normalnie.
.PP
Implementacja \fBncurses\fR nie u¿ywa jeszcze ¿adnej z tych w³a¶ciwo¶ci S±
one tu udokumentowane na wypadek, gdyby sta³y siê istotne.
.PP
.SS Grafika liniowa
.PP
Wiele terminali posiada alternatywne zestawy znaków, przydatne do rysowania
figur. Terminfo i \fBcurses\fR maj± wsparcie do rysowania znaków wspieranych
przez VT100 plus niektóre znaki z AT&T 4410v1. Alternatywny zestaw znaków
mo¿e byæ okre¶lony w³a¶ciwo¶ci± \fBacsc\fR.
.PP
.TS H
center expand;
c l l c
c l l c
lw28 lw6 lw2 lw20.
.\".TH
\fBNazwa	Nazwa	Ascii	Nazwa\fR
\fBglifu	ACS	domy¶lnie	VT100\fR
UK znak funta        	ACS_STERLING	f	}
strza³ka w dó³	ACS_DARROW	v	.
strza³ka w lewo	ACS_LARROW	<	,
strza³ka w prawo	ACS_RARROW	>	+
strza³ka w górê	ACS_UARROW	^	-
plansza kwadratów	ACS_BOARD	#	h
kula          	ACS_BULLET	o	~
plansza szachowa	ACS_CKBOARD	:	a
symbol stopnia   	ACS_DEGREE	\e	f
diamond         	ACS_DIAMOND	+	`
wiêkszylubrówny	ACS_GEQUAL	>	z
greckie pi        	ACS_PI	*	{
linia poprzeczna 	ACS_HLINE	-	q
symbol latarni  	ACS_LANTERN	#	i
du¿y plus/skrzy¿owanie	ACS_PLUS	+	n
mniejszylubrówny	ACS_LEQUAL	<	y
lewy niski naro¿nik	ACS_LLCORNER	+	m
prawy niski naro¿nik	ACS_LRCORNER	+	j
nierówny       	ACS_NEQUAL	!	|
plus/minus      	ACS_PLMINUS	#	g
scan line 1     	ACS_S1  	~	o
scan line 3     	ACS_S3  	-	p
scan line 7     	ACS_S7  	-	r
scan line 9     	ACS_S9  	\&_	s
czysty blok kwadratowy	ACS_BLOCK	#	0
T wskazuj±ce w dó³	ACS_TTEE	+	w
T wskazuj±ce w lewo	ACS_RTEE	+	u
T wskazuj±ce w prawo	ACS_LTEE	+	t
T wskazuj±ce w górê 	ACS_BTEE	+	v
lewy wysoki naro¿nik	ACS_ULCORNER	+	l
prawy wysoki naro¿nik	ACS_URCORNER	+	k
linia pionowa   	ACS_VLINE	|	x
.TE
.PP
Najlepszym sposobem na zdefiniowanie zestawu graficznego nowego urz±dzenia
jest dodanie do kopii tej tabeli kolumny, podaj±cej znak, jaki (po emisji
miêdzy \fBsmacs\fR/\fBrmacs\fR) zosta³ wyrenderowany jako odpowiadaj±ca
[kodowi] grafika. Nastêpnie przeczytaj pary VT100/twój terminal z prawa na
lewo--bêdzie to twój ³añcuch ACSC.
.PP
.SS Obs³uga kolorów
.PP
Wiêkszo¶æ terminali kolorowych to albo terminale typu Tektronix, albo typu
HP. Te pierwsze maj± predefiniowany zestaw N kolorów (N zwykle wynosi 8) i
mog± ustawiaæ w komórkach znakowych niezale¿nie kolor t³a i pierwszego
planu, tworz±c N*N par kolorów. Na terminalach HP nale¿y ustawiaæ ka¿d± parê
kolorów osobno (t³o i pierwszy plan nie s± ustawiane niezale¿nie). Mo¿na
zdefiniowaæ M par kolorów z  2*M dostêpnych kolorów. Terminale zgodne z ANSI
s± typu Tektronix.
.PP
Pewne podstawowe w³a¶ciwo¶ci kolorów s± niezale¿ne od metody kolorowania.
Wa¶ciwo¶ci numeryczne \fBcolors\fR i \fBpairs\fR okre¶laj± maksymaln± liczbê
kolorów i par kolorów, które mo¿na naraz wy¶wietlaæ. £añcuch \fBop\fR (para
oryginalna) ustawia t³o i pierwszy plan na domy¶lne warto¶ci terminala.
£añcuch \fBoc\fR resetuje wszystkie kolory i pary kolorów na domy¶lne
warto¶ci terminala. Niektóre terminala (w³±cznie z wieloma emulatorami
terminali PC) kasuje obszary ekranu z obecnym t³em, zamiast w³±czyæ domy¶lne
t³o; powinny one posiadaæ w³a¶ciwo¶æ logiczn±
\fBbce\fR.
.PP
Aby zmieniæ bie¿±cy kolor pierwszego planu lub t³a na terminalu typu
Tektronix, nale¿y u¿yæ \fBsetaf\fR (ustaw pierwszy plan ANSI) i \fBsetab\fR
(ustaw t³o ANSI). Pobieraj± one jeden parametr--numer koloru. Dokumentacja
SVr4 opisuje tylko \fBsetaf\fR/\fBsetab\fR; draft XPG4 mówi, ¿e "Je¶li
terminal obs³uguje sekwencje specjalne ANSI do ustawiania t³a i pierwszego
planu, to powinny byæ one zakodowane odpowiednio jako \fBsetab\fR i
\fBsetaf\fR. Je¶li terminal obs³uguje inne sekewencje specjalne ustawiania
t³a i pierwszego planu, to powinny byæ one kodowane jako \fBsetb\fR i
\fBsetf\fR. Funkcja \fIvidputs()\fR i funkcje od¶wie¿ania u¿ywaj± (o ile s±
zdefiniowane) \fBsetaf\fR i \fBsetab\fR."
.PP
W³a¶ciwo¶ci \fBsetaf\fR/\fBsetab\fR i \fBsetf\fR/\fBsetb\fR pobieraj±
pojedynczy argument numeryczny. Warto¶ci 0-7 s± przeno¶nie zdefiniowane w
sposób nastêpuj±cy (¶rodkowa kolumna to symboliczne warto¶ci #define z
nag³ówków bibliotek \fBcurses\fR). Sprzêt terminala mo¿e mapowaæ je jak
chce, lecz warto¶ci RGB okre¶laj± normalne lokacje w przestrzeni kolorów.
space.
.PP
.TS H
center;
l c c c
l l n l.
\fBKolor	#define 	Warto¶æ	RGB\fR
czarny	\fBCOLOR_BLACK\fR	0	0, 0, 0
czerwony	\fBCOLOR_RED\ \fR	1	max,0,0
zielony	\fBCOLOR_GREEN\fR	2	0,max,0
¿ó³ty	\fBCOLOR_YELLOW\fR	3	max,max,0
niebieski	\fBCOLOR_BLUE\fR	4	0,0,max
fioletowy	\fBCOLOR_MAGENTA\fR	5	max,0,max
cyjankowy	\fBCOLOR_CYAN\fR	6	0,max,max
bia³y	\fBCOLOR_WHITE\fR	7	max,max,max
.TE
.PP
Na terminalu typu HP u¿ywa siê \fBscp\fR z numerem pary kolorów do
ustawienia obecnej pary kolorów.
.PP
Na terminalu Tektronix mo¿e byæ obecna w³a¶ciwo¶æ \fBccc\fR. Wskazuje ona,
¿e kolory mo¿na modyfikowaæ. W tej sytuacji w³a¶ciwo¶æ \fBinitc\fR pobiera
numer koloru (0 do \fBcolors\fR-1) i trzy dalsze parametry, opisuj±ce
kolor. Parametry te s± domy¶lnie interpretowane jako RGB. Je¶li obecna jest
w³a¶ciwo¶æ logiczna \fBhls\fR, to s± one interpretowane jako parametry HLS
(Hue, Lightness, Saturation). Zakresy zale¿± od terminala.
.PP
Na terminalu w rodzaju HP, \fBinitp\fR mo¿e dawaæ mo¿liwo¶æ zmieniania
warto¶ci pary kolorów. Pobiera 7 parametrów; numer pary kolorów (0 do
\fBmax_pairs\fR-1) oraz dwie trójki, opisuj±ce najpierw t³o, a potem
pierwszy plan. Parametry te okre¶laj± RGB lub HLS, zale¿nie od \fBhls\fR.
.PP
Na niektórych terminalach kolorowych, kolory koliduj± z pod¶wietleniami.
Mo¿na zarejestrowaæ te kolizje we w³a¶ciwo¶æi \fBncv\fR. Jest to maska
bitowa atrybutów, które nie mog± byæ u¿ywane przy w³±czonych kolorach.
Odpowiednio¶æ miêdzy atrybutami rozumianymi przez \fBcurses\fR jest
nastêpuj±ca:
.PP
.TS
center;
l c c
lw25 lw2 lw10.
\fBAtrybut	Bit	Dziesiêtnie\fR
A_STANDOUT	0	1
A_UNDERLINE	1	2
A_REVERSE	2	4
A_BLINK   	3	8
A_DIM      	4	16
A_BOLD    	5	32
A_INVIS   	6	64
A_PROTECT	7	128
A_ALTCHARSET	8	256
.TE
.PP
Na przyk³ad na wielu konsolach IBM PC atrybut podkre¶lenia koliduje z
niebieskim kolorem pierwszego planu i nie jest dostêpny w trybie kolorowym.
Powinny wiêc mieæ ustawione w³a¶ciwo¶æ \fBncv\fR na 2.
.PP
Curses SVr4 nie u¿ywaj± w ogóle \fBncv\fR, ncurses rozpoznaj± je i
optymalizuj± wyj¶cie.
.PP
.SS Ró¿no¶ci
Je¶li terminal wymaga innego znaku wype³niania ni¿ zero, to jest on podawany
jako pad.
Z ³añcucha pad wykorzystywany jest tylko pierwszy znak. Je¶li terminal nie
obs³uguje znaku wype³niania, podaj npc.
Zauwa¿, ¿e ncurses implementuje zgodn± z termcap zmienn± \fBPC\fR;
dlatego aplikacje mog± ustawiaæ tê warto¶æ na co¶ innego ni¿ zero, a ncurses
spróbuje najpierw \fBnpc\fR i u¿yje napms je¶li terminal nie posiada znaku
wype³nienia.
.PP
Je¶li terminal mo¿e przesuwaæ w górê lub w dó³ o pó³ linii, to mo¿e to byæ
okre¶lone przez
.B hu
(pó³-linii w górê)
i
.B hd
(pó³-linii w dó³).
Jest to przede wszystkim przydatne dla indeksów górnych i dolnych w
terminalach hardcopy. Je¶li terminal hardcopy potrafi przej¶æ na nastêpn±
stronê (eject to the next page) (tj. form feed), podaj to jako
.B ff
(zwykle control L).
.PP
Je¶li istnieje komenda do powtórzenia danego znaku podan± liczbê razy (aby
zaoszczêdziæ na czasie transmisji du¿ej liczby takich samych znaków), mo¿na
to okre¶liæ parametryzowanym ³añcuchem
.BR rep .
Pierwszy parametr jest powtarzanym znakiem, a drugi liczb± powtórzeñ.
Tak wiêc tparm(repeat_char, 'x', 10) jest równowa¿ne `xxxxxxxxxx'.
.PP
Je¶li terminal posiada ustawiany znak komendy, jak w TEKTRONIX, mo¿na to
okre¶liæ przez
.BR cmdch .
Wybierany jest prototypowy znak komendy, u¿ywany we wszystkich
w³a¶ciwo¶ciach.
Znak ten jest podawany przez w³a¶ciwo¶æ
.BR cmdch .
Na niektórych systemach uniksowych obs³ugiwana jest nastêpuj±ca konwencja:
W ¶rodowisku szukana jest zmienna
.B CC
i je¶li zostanie znaleziona, wszystkie pojawienia znaku prototypowego s±
zamieniane na znak ze zmiennej ¶rodowiskowej.
.PP
Opisy terminala, które nie reprezentuj± konkretnych rodzajów znanych
terminali, takie jak
.IR switch ,
.IR dialup ,
.IR patch
i
.IR network ,
powinny zawieraæ w³a¶ciwo¶æ
.B gn
(generic), aby programy mog³y stwierdziæ, ¿e nie wiedz± jak rozmawiaæ z
terminalem. (W³a¶ciwo¶æ ta nie tyczy siê opisów terminali
.IR virtual ,
dla których znane s± sekwencje specjalne.)
.PP
Je¶li terminal posiada klawisz ``meta'', który zachowuje siê jak klawisz
przesuniêcia, ustawiaj±cy ósmy bit przesy³anego znaku, to fakt ten mo¿na
wskazaæ z pomoc±
.BR km .
W przeciwnym wypadku, oprogramowanie za³o¿y, ¿e 8-my bit jest bitem
parzysto¶ci i zazwyczaj bêdzie czyszczony.
Je¶li istniej± ³añcuchy, w³±czaj±ce i wy³±czaj±ce ten tryb ``meta'', to
powinny byæ one okre¶lone jako
.B smm
i
.BR rmm .
.PP
Je¶li terminal ma wiêcej linii pamiêci ni¿ mie¶ci siê naraz na ekranie, to
liczba tych linii powinna byæ okre¶lana przez
.BR lm .
Nadanie warto¶ci
.BR lm #0
okre¶la, ¿e liczba linii nie jest ustalona, lecz mimo to jest wiêcej pamiêci
ni¿ linii ekranowych.
.PP
Je¶li terminal jest jednym z obs³ugiwanych przez uniksowy protokó³ wirtualnego
terminala, to numer terminala mo¿e byæ podany jako
.BR vt .
.PP
£añcuchy media copy, steruj±ce zewnêtrzn± drukark±, pod³±czon± do terminala
mog± byæ podawane jako
.BR mc0 :
drukuj zawarto¶æ ekranu,
.BR mc4 :
wy³±cz drukarkê i
.BR mc5 :
w³±cz drukarkê.
Gdy drukarka jest w³±czona, tekst przesy³any do terminala bêdzie przesy³any
na drukarkê. Nie jest zdefiniowane czy tekst ma byæ wtedy równie¿
wy¶wietlany na ekranie terminala.
Wariacja
.B mc5p
pobiera jeden parametr i pozostawia drukarkê w³±czon± na tyle znaków, ile
podano w parametrze; wy³±czaj±c nastêpnie drukarkê.
Parametr nie powinien przekraczaæ 255.
Ca³y tekst, ³±cznie z
.BR mc4 ,
jest podczas dzia³ania
.B mc5p
przezroczy¶cie przekazywany drukarce.
.PP
.SS Zaburzenia i uszkodzenie mózgu
.PP
Terminale, które nie zezwalaj± na wy¶wietlanie znaków tyldy, powinny
wskazywaæ to przez \fBhz\fR.
.PP
Terminale, które ignoruj± line-feed po zawiniêciu \fBam\fR, takie jak
Concept i vt100 powinny wskazywaæ to przez \fBxenl\fR.
.PP
Je¶li do pozbycia siê trybu wyró¿nionego potrzebne jest
.B el
(zamiast zwyczajnego nadpisania na nim normalnego tekstu), nale¿y podaæ
\fBxhp\fP.
.PP
Terminale teleray, gdzie tabulacje zmieniaj± przesuwane znaki na spacje,
powinny podawaæ \fBxt\fR (destruktywne tabulacje).
Uwaga: zmienn±, okre¶laj±c± to jest obecnie `dest_tabs_magic_smso'; w
starszych wersjach by³o to teleray_glitch.
To zaburzenie oznacza równie¿, ¿e nie jest mo¿liwe ustawienie kursora na ``magicznym
ciasteczku'', ¿e do skasowania trybu wyró¿nionego nale¿y skasowaæ lub
wstawiæ liniê. Implementacja ncurses ignoruje to.
.PP
Terminal Beehive Superbee, który nie potrafi poprawnie przesy³aæ znaków
escape i control C ma w³a¶ciwo¶æ
.BR xsb ,
okre¶laj±c±, ¿e zamiast escape u¿ywany jest klawisz f1, a zamiast control C
u¿ywane jest f2. (Problem ten wystêpuje tylko w Superbee, zale¿nie od ROM.)
Zauwa¿, ¿e w starszych wersjach terminfo w³a¶ciwo¶æ ta by³a nazywana
`beehive_glitch'; obecnie jest to `no_esc_ctl_c'.
.PP
Inne problemy zwi±zane z konkretnymi terminalami mo¿na naprawiæ dodaj±c
dalsze w³a¶ciwo¶ci typu \fBx\fR\fIx\fR.
.PP
.SS Podobne terminale
.PP
Je¶li istniej± dwa bardzo podobne terminale, gdzie jeden mo¿e byæ
zdefiniowany tak samo jak drugi, z pewnymi wyj±tkami, to mo¿na wykorzystaæ
w³a¶ciwo¶æ \fBuse\fR z nazw± podobnego terminala.
W³a¶ciwo¶ci podane przed 
.B use
przes³aniaj± te z typu wybranego przez
.BR use .
W³a¶ciwo¶ci mo¿na anulowaæ poprzez umieszczanie na lewo od definicji
w³a¶ciwo¶ci \fBxx@\fR, gdzie xx jest w³a¶ciwo¶ci±.
Na przyk³ad,
.PP
	2621-nl, smkx@, rmkx@, use=2621,
.PP
definiuje 2621-nl, który nie posiada \fBsmkx\fR, \fBrmkx\fR i z tego powodu
nie w³±cza etykiet klawiszy funkcyjnych w trybie wizualnym.
Jest to przydatne dla innych trybów terminala lub dla innych preferencji
u¿ytkownika.
.PP
.SS Pu³apki d³ugich wpisów
.PP
D³ugie wpisy terminfo rzadko s± problemem; ¿aden wpis terminfo nie osi±gn±³
jeszcze nawet 4K maksimum przeznaczonego na tablicê ³añcuchow±. Niestety
jednak, translacje termcap s± bardziej ograniczone (do 1K). Z tego powodu,
translacje termcap d³ugich wpisów terminfo mog± powodowaæ problemy.
.PP
Strony podrêcznika man dla 4.3BSD i starszych wersji tgetent() mówi±
u¿ytkownikowi, by alokowa³ 1K bufor na wpis termcap. Wpis jest zakoñczony
zerem przez bibliotekê termcap, wiêc bezpieczn± d³ugo¶ci± wpisu termcap s±
1023 bajty. Zale¿nie od tego, co robi dana aplikacja i biblioteka termcap i
od tego gdzie w pliku termcap znajduje typ terminala szukany przez
tgetent(), mog± dziaæ siê ró¿ne rzeczy.
.PP
Niektóre biblioteki termcap drukuj± komunikat ostrzegawczy i koñcz±
dzia³anie; inne nie; inne skracaj± wpis do 1023 bajtów. Niektóre aplikacje
alokuj± wiêcej ni¿ wymagany 1K; inne nie.
.PP
Ka¿dy wpis termcap zawiera zwi±zane ze sob± dwa wa¿ne rozmiary: przed
rozwiniêciem "tc" i po rozwiniêciu. "tc" jest w³a¶ciwo¶ci±, która fastryguje
inny wpis termcap do koñca bie¿±cego, aby dodaæ jego w³a¶ciwo¶ci. Je¶li wpis
termcap nie u¿ywa w³a¶ciwo¶ci "tc", to oczywi¶cie obydwa rozmiary s±
identyczne.
.PP
D³ugo¶æ przed rozwiniêciem tc jest nawja¿niejsza, gdy¿ dotyczy czego¶ wiêcej
ni¿ tylko u¿ytkowników konkretnego terminala. Jest to d³ugo¶æ wpisu
istniej±cego w /etc/termcap minus para lewy uko¶nik/nowa linia, które s±
pomijane przez tgetent() podczas odczytu. Niektóre biblioteki termcap
obcinaj± równie¿ koñcow± now± liniê (GNU termcap tego nie robi).
Za³ó¿ teraz, ¿e:
.TP 5
*
wpis termcap przed rozwiniêciem ma wiêcej ni¿ 1023 bajty,
.TP 5
*
aplikacja zaalokowa³a jedynie 1K,
.TP 5
*
biblioteka termcap (jak BSD/OS 1.1 i GNU) odczytuje ca³y wpis do bufora,
niezale¿nie od d³ugo¶ci, aby zobaczyæ czy jest to ten wpis co trzeba,
.TP 5
*
a tgetent() szuka typu terminala, który jest albo d³ugim wpisem, jak i
znajduje siê w pliku termcap za d³ugim wpisem, albo nie istnieje w pliku w
ogóle (wiêc tgetent() musi przeszukiwaæ ca³y plik termcap).
.PP
W tej sytuacji tgetent() nadpisze pamiêæ, byæ mo¿e równie¿ swój stos i
prawdopodobnie rzuci kor±. Programy typu telnet s± szczególnie okaleczalne;
nowoczesne telnety przekazuj± warto¶ci jak typ terminala automatycznie.
Wyniki s± podobnie niechciane dla bibliotek termcap, jak SunOS 4.1.3 i
Ultrix 4.4, które drukuj± ostrze¿enia gdy odczytuj± zbyt d³ugie wpisy
termcap. Je¶li biblioteka termcap obcina d³ugie wpisy, jak OSF/1 3.0, to
jest odporna na ten problem, lecz zwraca nieprawid³owe dane dla terminala.
.PP
Rozmiar "po rozwiniêciu tc" ma podobne dzia³anie na powy¿sze, lecz jedynie
dla osób, które ustawi³y TERM na ten typ terminala, gdy¿ tgetent() dokonuje
rozwiniêcia "tc" tylko je¶li znajdzie odpowiedni typ.
.PP
Ogólnie, wpis termcap, który jest d³u¿szy ni¿ 1023 bajty mo¿e spowodowaæ
zrzut core, ostrze¿enia lub nieprawid³owe dzia³anie. Je¶li jest zbyt d³ugi
przed rozwiniêciem "tc", to bêdzie tak dzia³a³ nawet dla u¿ytkowników innych
typów terminal, i tych których zmienna TERM nie posiada opisu w pliku
termcap.
.PP
W trybie -C (t³umaczenia na termcap), implementacja \fBtic\fR(1) z
\fBncurses\fR daje ostrze¿enia gdy d³ugo¶æ przed-tc wpisu termcap jest zbyt
wielka. Opcja -c (check) sprawdza równie¿ rozwiniête (po tc) d³ugo¶ci.
.SS Kompatybilno¶æ binarna
Nie jest m±dre liczyæ na przeno¶no¶æ binarnych opisów terminfo miêdzy
komercyjnymi wersjami uniksa. Problem polega na tym, ¿e istniej±
przynajmniej dwie wersje terminfo (pod HP-UX i AUX), które pochodz± z
terminfo System V po SVr1 i doda³y rozszerzone w³a¶ciwo¶ci do tablicy
³añcuchów które (binarnie) koliduj± z rozszerzeniami Systemu V i XSI Curses.
.SH ROZSZERZENIA
Operator %x parametryzowanych ³añcuchów jest typowy tylko dla implementacji
\fBtparm\fR wykonanej w ncurses (jest wymagany do obs³ugi niefortunnego
formatu \fBinitc\fR na konsoli Linux).
.PP
Niektóre implementacje \fBcurses\fR z SVr4 i wszystkie poprzednie nie
interpretuj± operatorów %A i %O z parametryzowanych ³añcuchów.
.PP
SVr4/XPG4 nie okre¶laj± czy \fBmsgr\fR zezwala na poruszanie w trybie
alternatywnego zestawu znaków (takie tryby mog± miêdzy innymi mapowaæ CR
oraz NL na znaki, które nie poci±gaj± lokalnych przemieszczeñ).
Implementacja \fBncurses\fR ignoruje \fBmsgr\fR w trybie \fBALTCHARSET\fR.
Przychodzi wiêc mo¿liwo¶æ, ¿e implementacja XPG4, robi±ca odwrotne za³o¿enie
mo¿e wymagaæ wpisów terminfo z \fBncurses\fR z wy³±czonym \fBmsgr\fR.
.PP
Biblioteka \fBncurses\fR obs³uguje tryby wstawiania znaku i wstawiania
znaków w trochê niestandardowy sposób, aby zyskaæ na efektywno¶ci. Zobacz
wy¿ej sekcjê \fBWstawianie/kasowanie znaków\fR.
.PP
Podstawienia parametrów dla \fBset_clock\fR i \fBdisplay_clock\fR nie s±
udokumentowane w SVr4 i w standardzie XSI. S± one wydedukowane z
dokumentacji terminala AT&T 505.
.PP
Uwa¿aj z przyznawaniem w³asciwo¶ci \fBkmous\fR. \fBncurses\fR zechc±
interpretowaæ to jako \fBKEY_MOUSE\fR dla u¿ytku w terminalach i w
emulatorach (jak xterm), które potrafi± zwracaæ informacje o ¶ledzeniu myszy
w strumieniu wej¶ciowym klawiatury.
.PP
Ró¿ne porty komercyjne terminfo i curses wspieraj± ró¿ne podzbiory standardu
XSI curses i (w niektórych przypadkach) ró¿ne zbiory rozszerzeñ. Oto
zestawienie, odpowiadaj±ce pa¼dziernikowi 1995:
.PP
\fBSVR4, Solaris, ncurses\fR --
Wspieraj± wszystkie w³a¶ciwo¶ci SVr4.
.PP
\fBSGI\fR --
Wspiera zestaw SVr4 i dodaje jedn± nieudokumentowan± w³a¶ciwo¶æ ³añcuchow±
(\fBset_pglen\fR).
.PP
\fBSVr1, Ultrix\fR --
Obs³uguj± one ograniczony podzbiór w³a¶ciwo¶ci terminfo. Warto¶ci logiczne
koñcz± siê z \fBxon_xof\fR; warto¶ci numeryczne z \fBwidth_status_line\fR; a
³añcuchowe z \fBprtr_non\fR.
.PP
\fBHP/UX\fR --
Wspiera podzbiór SVr1 plus numeryka z SVr[234], a konkretnie \fBnum_labels\fR,
\fBlabel_height\fR, \fBlabel_width\fR, plus klawisze funkcyjne 11 do 63, plus
\fBplab_norm\fR, \fBlabel_on\fR, i \fBlabel_off\fR, plus pewne
niekompatybilne rozszerzenia tablicy ³añcuchów.
.PP
\fBAIX\fR --
Wspiera podzbiór SVr1 plus klawisze funkcyjne 11 do 63 plus niekompatybilne
rozszerzenia tablicy ³añcuchów.
.PP
\fBOSF\fR --
Wspiera zarówno zestaw SVr4 jak i rozszerzenia AIX.
.SH PLIKI
.TP 25
\*d/?/*
pliki zawieraj±ce opisy terminala
.SH "ZOBACZ TAK¯E"
\fBtic\fR(1M), \fBcurses\fR(3X), \fBprintf\fR(3S), \fBterm\fR(\*n).
.SH AUTORZY
Zeyd M. Ben-Halim, Eric S. Raymond.
.\"#
.\"# The following sets edit modes for GNU EMACS
.\"# Local Variables:
.\"# mode:nroff
.\"# fill-column:79
.\"# End:
